<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://topjf.github.io/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://topjf.github.io/</id>
  <title>topjf</title>
  <subtitle>꧁「小牛专属笔记本」꧂</subtitle>
  <author>
    <name>topjf</name>
    <uri>/article</uri>
  </author>
  <logo>https://topjf.github.io/topjf.png</logo>
  <rights>Copyright by topjf</rights>
  <updated>2023-03-10T11:42:06.361Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://topjf.github.io/atom.xml"/>
  <link rel="alternate" href="https://topjf.github.io/"/>
  <category term="开发工具"/>
  <category term="Java"/>
  <category term="Docker"/>
  <category term="kubernetes"/>
  <category term="中间件"/>
  <category term="面试宝典"/>
  <category term="计算机书籍"/>
  <category term="设计模式"/>
  <category term="Cloud"/>
  <category term="mybatis"/>
  <category term="Nacos"/>
  <category term="文件服务"/>
  <category term="Linux"/>
  <category term="ElasticSearch"/>
  <category term="开源项目"/>
  <category term="web"/>
  <category term="database"/>
  <contributor>
    <name>topjf</name>
    <uri>/article</uri>
  </contributor>
  <entry>
    <title type="text">markdownlint校验markdown内容</title>
    <id>https://topjf.github.io/tools/markdownlint.html</id>
    <link href="https://topjf.github.io/tools/markdownlint.html"/>
    <updated>2023-03-05T16:15:05.000Z</updated>
    <summary type="html"><![CDATA[<p>使用 markdownlint 校验 markdown 内容</p>
]]></summary>
    <content type="html"><![CDATA[<p>使用 markdownlint 校验 markdown 内容</p>
<!-- more -->
<ul>
<li>选项配置文件 <code>.markdownlint.json</code></li>
<li>需要排除md文件 <code>.markdownlintignore</code></li>
</ul>
<p><a href="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md" target="_blank" rel="noopener noreferrer">官方原文地址</a></p>
<p>标记对相关规则进行分组，可用于启用一次禁用多个规则。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>MD001</strong> 标题增量标题增量 - 标题级别一次只能递增一个级别</li>
<li><s><strong>MD002</strong> first-heading-h1/first-header-h1 - 第一个标题应该是顶级标题</s></li>
<li><strong>MD003</strong> heading-style/header-style - 标题样式</li>
<li><strong>MD004</strong> ul-style - 无序列表样式</li>
<li><strong>MD005</strong> list-indent - 同一级别的列表项的缩进不一致</li>
<li><s><strong>MD006</strong> ul-start-left - 考虑在行首开始项目符号列表</s></li>
<li><strong>MD007</strong> ul-indent - 无序列表缩进</li>
<li><strong>MD009</strong> no-trailing-spaces - 尾随空格</li>
<li><strong>MD010</strong> no-hard-tabs - 硬标签</li>
<li><strong>MD011</strong> no-reversed-links - 反向链接语法</li>
<li><strong>MD012</strong> no-multiple-blanks - 多个连续的空行</li>
<li><strong>MD013</strong> line-length - 线长</li>
<li><strong>MD014</strong> commands-show-output - 命令前使用的美元符号，不显示输出</li>
<li><strong>MD018</strong> no-missing-space-atx - atx 样式标题上的哈希后没有空格</li>
<li><strong>MD019</strong> no-multiple-space-atx - atx 样式标题上的哈希后有多个空格</li>
<li><strong>MD020</strong> no-missing-space-closed-atx - 闭合 atx 样式标题上的哈希内没有空格</li>
<li><strong>MD021</strong> no-multiple-space-closed-atx - 闭合 atx 样式标题上的哈希内有多个空格</li>
<li><strong>MD022</strong> blanks-around-headings/blanks-around-headers - 标题应用空行包围</li>
<li><strong>MD023</strong> heading-start-left/header-start-left - 标题必须从行首开始</li>
<li><strong>MD024</strong> no-duplicate-heading/no-duplicate-header - 具有相同内容的多个标题</li>
<li><strong>MD025</strong> single-title/single-h1 - 同一文档中的多个顶级标题</li>
<li><strong>MD026</strong> no-trailing-punctuation -  标题中的尾随标点符号</li>
<li><strong>MD027</strong> no-multiple-space-blockquote - 块引用符号后有多个空格</li>
<li><strong>MD028</strong> no-blanks-blockquote - 块引用内的空行</li>
<li><strong>MD029</strong> ol-prefix - 有序列表项前缀</li>
<li><strong>MD030</strong> list-marker-space - 列表标记后的空格</li>
<li><strong>MD031</strong> blanks-around-fences - 围栏代码块应用空行包围</li>
<li><strong>MD032</strong> blanks-around-lists - 列表应用空行包围</li>
<li><strong>MD033</strong> no-inline-html - 内嵌 HTML</li>
<li><strong>MD034</strong> no-bare-urls - 使用裸网址</li>
<li><strong>MD035</strong> hr-style - 水平标尺样式</li>
<li><strong>MD036</strong> no-emphasis-as-heading/no-emphasis-as-header - 使用强调代替标题</li>
<li><strong>MD037</strong> no-space-in-emphasis - 强调标记内的空格</li>
<li><strong>MD038</strong> no-space-in-code - 代码跨度元素内的空格</li>
<li><strong>MD039</strong> no-space-in-links - 链接文本内的空格</li>
<li><strong>MD040</strong> fenced-code-language - 受防护代码块应指定语言</li>
<li><strong>MD041</strong> first-line-heading/first-line-h1 - 文件中的第一行应为顶级标题</li>
<li><strong>MD042</strong> no-empty-links - 无空链接</li>
<li><strong>MD043</strong> required-headings/required-headers - 必需标题结构</li>
<li><strong>MD044</strong> proper-names - 专有名称应具有正确的大小写</li>
<li><strong>MD045</strong> no-alt-text - 图像应具有替代文本（替代文本）</li>
<li><strong>MD046</strong> code-block-style - 代码块样式</li>
<li><strong>MD047</strong> single-trailing-newline - 文件应以单个换行符结尾</li>
<li><strong>MD048</strong> code-fence-style - 代码围栏样式</li>
<li><strong>MD049</strong> emphasis-style - 强调风格应一致</li>
<li><strong>MD050</strong> strong-style - 强风格应保持一致</li>
<li><strong>MD051</strong> link-fragments - L链路片段应有效</li>
<li><strong>MD052</strong> reference-links-images - 引用链接和图像应使用定义的标签</li>
<li><strong>MD053</strong> link-image-reference-definitions - 需要链接和图像引用定义</li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2023-03-05T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">测试md</title>
    <id>https://topjf.github.io/test.html</id>
    <link href="https://topjf.github.io/test.html"/>
    <updated>2023-03-10T09:51:32.000Z</updated>
    <summary type="html"><![CDATA[<p>摘要生成位置，66666666</p>
]]></summary>
    <content type="html"><![CDATA[<p>摘要生成位置，66666666</p>
<!-- more -->
<details class="hint-container details"><summary>内容目录</summary>

</details>
<h1>测试md h1</h1>
<h2> 基础概 h2</h2>
<h3> Java 语言有哪些特点? h3</h3>
<h4> 有哪些特 h4</h4>
<h5>有哪些特 h5</h5>
<p>引入B站视频</p>
<p>全 都 是 名 场 面 1</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">一键安装docker脚本</title>
    <id>https://topjf.github.io/docker/auto-install-script.html</id>
    <link href="https://topjf.github.io/docker/auto-install-script.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">sudo sh install-docker.sh ```sh #!/bin/bash kill_s(){ # https://blog.csdn.net/qq_42476834/article/details/124719250 echo -e &amp;quot;\n$(date +%Y-%m-%d,%H:%M:%S)\n--&amp;gt; PID=$$,PPID=$PPID&amp;quot;...</summary>
    <content type="html"><![CDATA[<!-- more -->
<p><code>sudo sh install-docker.sh</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-05-31T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">session+redis防止重复提交</title>
    <id>https://topjf.github.io/java/PreventDuplicateSubmissions.html</id>
    <link href="https://topjf.github.io/java/PreventDuplicateSubmissions.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="html"><![CDATA[<h1>实现基于 session+redis 的防止重复提交</h1>
<p><a href="https://gitee.com/cps007/spring-boot-model" target="_blank" rel="noopener noreferrer">🏍 gitee源码仓库🚀🚀🚀🚀</a></p>
<h2> 定义注解</h2>
<p><a href="https://gitee.com/cps007/spring-boot-model/blob/dev/src/main/java/cn/springboot/model/base/annotation/Submit.java" target="_blank" rel="noopener noreferrer">Submit注解接口</a></p>]]></summary>
    <content type="html"><![CDATA[<h1>实现基于 session+redis 的防止重复提交</h1>
<p><a href="https://gitee.com/cps007/spring-boot-model" target="_blank" rel="noopener noreferrer">🏍 gitee源码仓库🚀🚀🚀🚀</a></p>
<h2> 定义注解</h2>
<p><a href="https://gitee.com/cps007/spring-boot-model/blob/dev/src/main/java/cn/springboot/model/base/annotation/Submit.java" target="_blank" rel="noopener noreferrer">Submit注解接口</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 实现 aop 切面</h2>
<p><a href="https://gitee.com/cps007/spring-boot-model/blob/dev/src/main/java/cn/springboot/model/service/aspectj/SubmitAspect.java" target="_blank" rel="noopener noreferrer">实现 aop 切面源码</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-06-08T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">设置docker-k8s快捷指令</title>
    <id>https://topjf.github.io/k8s/setting-alias.html</id>
    <link href="https://topjf.github.io/k8s/setting-alias.html"/>
    <updated>2023-03-05T09:31:01.000Z</updated>
    <summary type="text">Linux 端 vim ~/.bashrc k8s：kubectl 编辑：C:\Users\k\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1 以管理员身份打开Powershell 执行命令: ==Set-ExecutionPolicy RemoteSigned== ，然后重新启...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>在Linux、window设置docker、k8s快捷指令</h1>
<h2> Linux 端</h2>
<p><code>vim ~/.bashrc</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> k8s：kubectl</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> docker</h3>
<p>sudo vim ~/.bashrc,来设置Linux命令别名</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按<strong>shift + ;</strong> 输入wq保存,再输入bash全局使用
使用:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> windows 端</h2>
<p>1、在Windows Powershell 执行 <mark>echo $PROFILE</mark></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑：C:\Users\k\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以管理员身份打开Powershell 执行命令: <mark>Set-ExecutionPolicy RemoteSigned</mark> ，然后重新启动计算机</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-05-31T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">配置Redis工具类</title>
    <id>https://topjf.github.io/middleware/redis/RedisTemplate.html</id>
    <link href="https://topjf.github.io/middleware/redis/RedisTemplate.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">🏍 🏍 gitee源码 (https://gitee.com/cps007/spring-boot-model) 依赖 RedisConfig 配置 application.yml 配置允许依赖循环引用(==看自己情况而定==) 🚀🚀FastJson2JsonRedisSerializer (https://gitee.com/cps007/s...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Redis配置RedisTemplate以及编写工具类</h1>
<p><a href="https://gitee.com/cps007/spring-boot-model" target="_blank" rel="noopener noreferrer">🏍 🏍 gitee源码</a></p>
<h2> 依赖</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> RedisConfig 配置</h2>
<p><code>application.yml</code> 配置允许依赖循环引用(<mark>看自己情况而定</mark>)</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://gitee.com/cps007/spring-boot-model/blob/dev/src/main/java/cn/springboot/model/base/config/FastJson2JsonRedisSerializer.java" target="_blank" rel="noopener noreferrer">🚀🚀FastJson2JsonRedisSerializer</a></p>
<p><a href="https://gitee.com/cps007/spring-boot-model/blob/dev/src/main/java/cn/springboot/model/base/config/RedisConfig.java" target="_blank" rel="noopener noreferrer">🚀🚀RedisConfig</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> RedisUtils 工具类</h2>
<p>主要代码，具体请看<a href="https://gitee.com/cps007/spring-boot-model/blob/dev/src/main/java/cn/springboot/model/service/utils/RedisUtils.java" target="_blank" rel="noopener noreferrer">🏍 gitee源码🚀</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用例子 <a href="https://topjf.github.io/java/PreventDuplicateSubmissions.html" target="_blank" rel="noopener noreferrer">实现基于 session+redis 的防重复提交</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看redis记录</p>
<p><code>prefix:D6D13DE0091DEC607E2F9DBE364490A8:/dev:getStuById:1</code></p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="中间件"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-06-03T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java面试宝典</title>
    <id>https://topjf.github.io/all/interview.html</id>
    <link href="https://topjf.github.io/all/interview.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">Java面向对象有哪些特征，如何应用 面向对象编程是利用类和对象编程的一种思想。万物可归类，类是对于世界事物的高度抽象 ，不同的事物之间有不同的关系 ，一个类自身与外界的封装关系，一个父类和子类的继承关系， 一个类和多个类的多态关系。万物皆对象，对象是具体的世界事物。 面向对象的三大特征封装，继承，多态。 1) 封装说明一个类行为和属性与其他类的关系，...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>java面试宝典</h1>
<h2> Java面向对象有哪些特征，如何应用</h2>
<p>面向对象编程是利用类和对象编程的一种思想。万物可归类，类是对于世界事物的高度抽象 ，不同的事物之间有不同的关系 ，一个类自身与外界的封装关系，一个父类和子类的继承关系， 一个类和多个类的多态关系。万物皆对象，对象是具体的世界事物。</p>
<p>面向对象的三大特征<strong>封装，继承，多态</strong>。</p>
<blockquote>
<ol>
<li><strong>封装</strong>说明一个类行为和属性与其他类的关系，低耦合，高内聚；</li>
<li><strong>继承</strong>是父类和子类的关系;</li>
<li><strong>多态</strong>说的是类与类的关系。</li>
</ol>
</blockquote>
<p><strong>封装</strong>隐藏了类的内部实现机制，可以在不影响使用的情况下改变类的内部结构，同时也保护了数据。对外界而已它的内部细节是隐藏的，暴露给外界的只是它的访问方法。</p>
<blockquote>
<ol>
<li>属性的封装：使用者只能通过事先定制好的方法来访问数据，可以方便地加入逻辑控制，限制对属性的 不合理操作；</li>
<li>方法的封装：使用者按照既定的方式调用方法，不必关心方法的内部实现，便于使用； 便于修改，增强 代码的可维护性；</li>
</ol>
</blockquote>
<p><strong>继承</strong>是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力。在本质上是特殊~一般的关系，即常说的is-a关系。子类继承父类，表明子类是一种特殊的父类，并且具有父类所不具有的一些属性或方法。
从多种实现类中抽象出一个基类，使其具备多种实现类的共同特性 ，当实现类用extends关键字继承了基类（父类）后，实现类就具备了这些相同的属性。继承的类叫做子类（派生类或者超类），被继承的类叫做父类（或者基类）。
比如从猫类、狗类、虎类中可以抽象出一个动物类，具有和猫、狗、虎类的共同特性（吃、跑、叫等）。Java通过extends关键字来实现继承，父类中通过private定义的变量和方法不会被继承，不能在子类中直接操作父类通过private定义的变量以及方法。
继承避免了对一般类和特殊类之间共同特征进行的重复描述，通过继承可以清晰地表达每一项共同特征所适应的概念范围，在一般类中定义的属性和操作适应于这个类本身以及它以下的每一层特殊类的全部对象。运用继承原则使得系统模型比较简练也比较清晰。</p>
<p><mark>封装和继承最后归结于多态</mark></p>
<p><strong>多态指</strong>的是类和类的关系，两个类由继承关系，存在有方法的重写，故而可以在调用时有父类引用指向子类对象。
多态必备三个要素：继承，重写，父类引用指向子类对象。</p>
<h2> HashMap原理是什么，在jdk1.7和1.8中有什么区别</h2>
<p>HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。
HashMap最多只允许一条记录的键为null，允许多条记录的值为 null。HashMap 非线程安全，即任一时刻可以有多个线程同时写 HashMap，可能会导致数据的不一致。
如果需要满足线程安全，可以用 Collections 的 synchronizedMap 方法使 HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。</p>
<p><strong>JAVA7</strong> 实现</p>
<p>大方向上，HashMap 里面是一个数组，然后数组中每个元素是一个单向链表。上图中，每个绿色
的实体是嵌套类 Entry 的实例，Entry 包含四个属性：key, value, hash 值和用于单向链表的 next。</p>
<ol>
<li>capacity：当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。</li>
<li>loadFactor：负载因子，默认为 0.75。</li>
<li>threshold：扩容的阈值，等于 capacity * loadFactor</li>
</ol>
<p><strong>JAVA8</strong> 实现</p>
<p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 数组+链表+红黑树 组成。</p>
<p>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决
于链表的长度，为 O(n)。为了降低这部分的开销，在 Java8 中，当链表中的元素超过了 8 个以后，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p>
<h2> ArrayList和LinkedList有什么区别？</h2>
<p>list：<strong>有序、可重复。</strong></p>
<ol>
<li>ArrayList：<strong>不是</strong>线程安全，底层是<strong>Object[]数组</strong>结构，插入删除<strong>受位置</strong>影响，<strong>快速访问</strong>；内存空间占⽤：体现在list结尾会预留⼀定的容量空间。是 List 的主要实现类，适⽤于<strong>频繁的查找</strong>
⼯作。</li>
<li>LinkedList：<strong>不是</strong>线程安全，底层是<strong>双向链表</strong>结构，插入删除<strong>不受位置</strong>影响，<strong>不支持</strong>快速访问；内存空间占⽤：体现在它的每⼀个元素都需要消耗⽐ ArrayList
更多的空间（因为要存放直接后继和直接前驱以及数据）。</li>
<li>Vector：线程安全，是 List 的古⽼实现类。</li>
</ol>
<p>set：<strong>无序、不可重复。</strong></p>
<ol>
<li>HashSet(<strong>无序</strong>，唯一): 基于 HashMap 实现的，底层采用 HashMap 来保存元素</li>
<li>TreeSet(<strong>有序</strong>，唯一): 红黑树(自平衡的排序二叉树)</li>
<li>LinkedHashSet: 是 HashSet 的子类，并且其内部是通过 LinkedHashMap 来实现的。</li>
</ol>
<p>map（K_V）：<strong>Key 是⽆序、不可重复；value 是⽆序，可重复。</strong></p>
<ol>
<li>HashMap：⾮线程安全，效率⾼，可以存储 null 的 key 和 value，但 null 作为键只能有⼀个，null 作为值可以有多个；jdk1.8前：底层是<strong>数组和链表(链表散列)</strong>；
jdk1.8后：当链表⻓度⼤于阈值（默 认为 8）时，将链表转化为<strong>红⿊树</strong>（将链表转换成红⿊树前会判断，如果当前数组的⻓度⼩于 64，那么会选择先进⾏数组扩容，⽽不是转换为红⿊树），以减少搜索时间。</li>
<li>Hashtable： 线程安全，基本被淘汰，不允许有 null 键和 null</li>
<li>TreeMap：红⿊树（⾃平衡的排序⼆叉树）</li>
<li>LinkedHashMap：继承⾃ HashMap；底层是<strong>数组和链表或红⿊树</strong>组成；另外， LinkedHashMap 在上⾯结构的基础上，增加了⼀条双向链表，使得上⾯的结构可以保持键值对的插⼊顺序。
同时通过对链表进⾏相应的 操作，实现了访问顺序相关逻辑。</li>
<li>并发环境下推荐使⽤ <strong>ConcurrentHashMap</strong>；而不是HashMap。</li>
</ol>
<p>TreeMap、TreeSet 以及 JDK1.8 之后的 HashMap 底层都⽤到了红⿊树。红⿊树就是为了解决⼆叉查找树的缺陷，因为⼆叉查找树在某些情况下会退化成⼀个线性结构。</p>
<h2> 高并发中的集合有哪些问题</h2>
<p><strong>第一代线程安全集合类</strong></p>
<p>Vector、Hashtable</p>
<p>是怎么保证线程安排的： 使用synchronized修饰方法*</p>
<p>缺点：效率低下</p>
<p><strong>第二代线程非安全集合类</strong></p>
<p>ArrayList、HashMap</p>
<p>线程不安全，但是性能好，用来替代Vector、Hashtable</p>
<p>使用ArrayList、HashMap，需要线程安全怎么办呢？</p>
<p>使用 Collections.synchronizedList(list); Collections.synchronizedMap(m);</p>
<p>底层使用synchronized代码块锁 虽然也是锁住了所有的代码，但是锁在方法里边，并所在方法外边性能可以理解为稍有提高吧。毕竟进方法本身就要分配资源的</p>
<p><strong>第三代线程安全集合类</strong></p>
<p>在大量并发情况下如何提高集合的效率和安全呢？</p>
<p>java.util.concurrent.*</p>
<p>ConcurrentHashMap：</p>
<p>CopyOnWriteArrayList ：</p>
<p>CopyOnWriteArraySet： 注意 不是 CopyOnWriteHashSet*</p>
<p>底层大都采用Lock锁（1.8的ConcurrentHashMap不使用Lock锁），保证安全的同时，性能也很高。</p>
<h2> jdk1.8的新特性有哪些</h2>
<h3> 一、接口的默认方法</h3>
<p>Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default关键字即可，这个特征又叫做扩展方法，示例如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Formula接口在拥有calculate方法之外同时还定义了sqrt方法，实现了Formula接口的子类只需要实现一个calculate方法，默认方法sqrt将在子类上可以直接使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文中的formula被实现为一个匿名类的实例，该代码非常容易理解，6行代码实现了计算 sqrt(a * 100)。</p>
<p>译者注： 在Java中只有单继承，如果要让一个类赋予新的特性，通常是使用接口来实现，在C++中支持多继承，允许一个子类同时具有多个父类的接口与功能，在其他语言中，
让一个类同时具有其他的可复用代码的方法叫做mixin。新的Java 8 的这个特新在编译器实现的角度上来说更加接近Scala的trait。 在C#中也有名为扩展方法的概念，
允许给已存在的类型扩展方法，和Java 8的这个在语义上有差别。</p>
<h3> 二、Lambda 表达式</h3>
<p>首先看看在老版本的Java中是如何排列字符串的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要给静态方法 Collections.sort 传入一个List对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给sort方法。</p>
<p>在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看到了吧，代码变得更段且更具有可读性，但是实际上还可以写得更短：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。</p>
<h3> 三、函数式接口</h3>
<p>Lambda表达式是如何在java的类型系统中表示的呢？每一个lambda表达式都对应一个类型，通常是接口类型。而“函数式接口”是指仅仅只包含一个抽象方法的接口，
每一个该类型的lambda表达式都会被匹配到这个抽象方法。因为 默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。</p>
<p>我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，你只需要给你的接口添加 @FunctionalInterface 注解，
编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的。</p>
<p>示例如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意如果@FunctionalInterface如果没有指定，上面的代码也是对的。</p>
<p>译者注 将lambda表达式映射到一个单方法的接口上，这种做法在Java 8之前就有别的语言实现，比如Rhino JavaScript解释器，如果一个函数参数接收一个单方法的接口而你传递的
是一个function，Rhino 解释器会自动做一个单接口的实例到function的适配器，典型的应用场景有 org.w3c.dom.events.EventTarget 的addEventListener 第二个参数
EventListener。</p>
<h3> 四、方法与构造函数引用</h3>
<p>前一节中的代码还可以通过静态方法引用来表示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，上面的代码展示了如何引用一个静态方法，我们也可以引用一个对象的方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看看构造函数是如何使用::关键字来引用的，首先我们定义一个包含多个构造函数的简单类：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们指定一个用来创建Person对象的对象工厂接口：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要使用 Person::new 来获取Person类构造函数的引用，Java编译器会自动根据PersonFactory.create方法的签名来选择合适的构造函数。</p>
<h3> 五、Lambda 作用域</h3>
<p>在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。</p>
<h3> 六、访问局部变量</h3>
<p>我们可以直接在lambda表达式中访问外层的局部变量：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这里的num必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在lambda表达式中试图修改num同样是不允许的。</p>
<h3> 七、访问对象字段与静态变量</h3>
<p>和本地变量不同的是，lambda内部对于实例的字段以及静态变量是即可读又可写。该行为和匿名对象是一致的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 八、访问接口的默认方法</h3>
<p>还记得第一节中的formula例子么，接口Formula定义了一个默认方法sqrt可以直接被formula的实例包括匿名对象访问到，但是在lambda表达式中这个是不行的。
Lambda表达式中是无法访问到默认方法的，以下代码将无法编译：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK 1.8 API包含了很多内建的函数式接口，在老Java中常用到的比如Comparator或者Runnable接口，这些接口都增加了@FunctionalInterface注解以便能用在lambda上。
Java 8 API同样还提供了很多全新的函数式接口来让工作更加方便，有一些接口是来自Google Guava库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。</p>
<p><strong>Predicate 接口</strong></p>
<p>Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Function 接口</strong></p>
<p>Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Supplier 接口</strong> Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Consumer 接口</strong> Consumer 接口表示执行在单个参数上的操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Comparator 接口</strong> Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Optional 接口</strong></p>
<p>Optional 不是函数是接口，这是个用来防止NullPointerException异常的辅助类型，这是下一届中将要用到的重要概念，现在先简单的看看这个接口能干什么：</p>
<p>Optional 被定义为一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是偶尔却可能返回了null，而在Java 8中，不推荐你返回null而是返回Optional。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Stream 接口</strong></p>
<p>java.util.Stream 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，
这样你就可以将多个操作依次串起来。Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，List或者Set， Map不支持。Stream的操作可以串行执行或者并行执行。</p>
<p>首先看看Stream是怎么用，首先创建实例代码的用到的数据List：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 8扩展了集合类，可以通过 Collection.stream() 或者 Collection.parallelStream() 来创建一个Stream。</p>
<p><strong>Filter 过滤</strong></p>
<p>过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于中间操作，所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）。
forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Sort 排序</strong></p>
<p>排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，排序只创建了一个排列好后的Stream，而不会影响原有的数据源，排序之后原数据stringCollection是不会被修改的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Map 映射</strong> 中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，下面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，
map返回的Stream类型是根据你map传递进去的函数的返回值决定的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Match 匹配</strong></p>
<p>Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Count 计数</strong> 计数是一个最终操作，返回Stream中元素的个数，返回值类型是long。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Reduce 规约</strong></p>
<p>这是一个最终操作，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规越后的结果是通过Optional接口表示的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>并行****Streams</strong></p>
<p>前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。</p>
<p>下面的例子展示了是如何通过并行Stream来提升性能：</p>
<p>首先我们创建一个没有重复元素的大表：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们计算一下排序这个Stream要耗时多久， 串行排序：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个代码几乎是一样的，但是并行版的快了50%之多，唯一需要做的改动就是将stream()改为parallelStream()。</p>
<p><strong>Map</strong></p>
<p>前面提到过，Map类型不支持stream，不过Map提供了一些新的有用的方法来处理一些日常任务。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码很容易理解， putIfAbsent 不需要我们做额外的存在性检查，而forEach则接收一个Consumer接口来对map里的每一个键值对进行操作。</p>
<p>下面的例子展示了map上的其他有用的函数：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来展示如何在Map里删除一个键值全都匹配的项：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一个有用的方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对Map的元素做合并也变得很容易了：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Merge做的事情是如果键名不存在则插入，否则则对原键对应的值做合并操作并重新插入到map中。</p>
<h3> 九、Date API</h3>
<p>Java 8 在包java.time下包含了一组全新的时间日期API。新的日期API和开源的Joda-Time库差不多，但又不完全一样，下面的例子展示了这组新API里最重要的一些部分：</p>
<p><strong>Clock 时钟</strong></p>
<p>Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 System.currentTimeMillis()
来获取当前的微秒数。某一个特定的时间点也可以使用Instant类来表示，Instant类也可以用来创建老的java.util.Date对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Timezones 时区</strong></p>
<p>在新API中时区使用ZoneId来表示。时区可以很方便的使用静态方法of来获取到。 时区定义了到UTS时间的时间差，在Instant时间点对象到本地日期对象之间转换的时候是极其重要的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LocalTime 本地时间</strong></p>
<p>LocalTime 定义了一个没有时区信息的时间，例如 晚上10点，或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LocalDate 本地日期</strong></p>
<p>LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从字符串解析一个LocalDate类型和解析LocalTime一样简单：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LocalDateTime 本地日期时间</strong></p>
<p>LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime和LocalTime还有LocalDate一样，都是不可变的。LocalDateTime提供了一些能访问具体字段的方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要附加上时区信息，就可以将其转换为一个时间点Instant对象，Instant时间点对象可以很容易的转换为老式的java.util.Date。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>格式化LocalDateTime和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和java.text.NumberFormat不一样的是新版的DateTimeFormatter是不可变的，所以它是线程安全的。</p>
<h3> 十、Annotation 注解</h3>
<p>在Java 8中支持多重注解了，先看个例子来理解一下是什么意思。 首先定义一个包装类Hints注解用来放置一组具体的Hint注解：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 8允许我们把同一个类型的注解使用多次，只需要给该注解标注一下@Repeatable即可。</p>
<p>例 1: 使用包装类当容器来存多个注解（老方法）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例 2：使用多重注解（新方法）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个例子里java编译器会隐性的帮你定义好@Hints注解，了解这一点有助于你用反射来获取这些信息：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即便我们没有在Person类上定义@Hints注解，我们还是可以通过 getAnnotation(Hints.class) 来获取 @Hints注解，更加方便的方法是使用 getAnnotationsByType
可以直接获取到所有的@Hint注解。 另外Java 8的注解还增加到两种新的target上了：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Java 8的新特性就写到这了，肯定还有更多的特性等待发掘。JDK 1.8里还有很多很有用的东西，比如Arrays.parallelSort, StampedLock和CompletableFuture等等。</p>
<h2> Java中重写和重载有哪些区别</h2>
<p>重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。</p>
<p><strong>重载</strong>的规则：</p>
<ol>
<li>
<p>方法名一致，参数列表中参数的顺序，类型，个数不同。</p>
</li>
<li>
<p>重载与方法的返回值无关，存在于父类和子类，同类中。</p>
</li>
<li>
<p>可以抛出不同的异常，可以有不同修饰符</p>
</li>
</ol>
<p><strong>重写</strong>的规则：</p>
<ol>
<li>
<p>参数列表必须完全与被重写方法的一致，返回类型必须完全与被重写方法的返回类型一致。</p>
</li>
<li>
<p>构造方法不能被重写，声明为 final 的方法不能被重写，声明为 static 的方法不能被重写，但是能够被再次声明。</p>
</li>
<li>
<p>访问权限不能比父类中被重写的方法的访问权限更低。</p>
</li>
<li>
<p>重写的方法能够抛出任何非强制异常（UncheckedException，也叫非运行时异常），无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p>
</li>
</ol>
<h2> 接口和抽象类有哪些区别</h2>
<p>不同：</p>
<ul>
<li>抽象类：</li>
</ul>
<ol>
<li>抽象类中可以定义构造器</li>
<li>可以有抽象方法和具体方法</li>
<li>接口中的成员全都是 public 的</li>
<li>抽象类中可以定义成员变量</li>
<li>有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法</li>
<li>抽象类中可以包含静态方法</li>
<li>一个类只能继承一个抽象类</li>
</ol>
<ul>
<li>接口：</li>
</ul>
<ol>
<li>接口中不能定义构造器</li>
<li>方法全部都是抽象方法</li>
<li>抽象类中的成员可以是 private、默认、protected、public</li>
<li>接口中定义的成员变量实际上都是常量</li>
<li>接口中不能有静态方法</li>
<li>一个类可以实现多个接口</li>
</ol>
<p>相同：</p>
<ol>
<li>不能够实例化</li>
<li>可以将抽象类和接口类型作为引用类型</li>
<li>一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类</li>
</ol>
<h2> 怎样声明一个类不会被继承，什么场景下会用</h2>
<p>如果一个类被final修饰，此类不可以有子类，不能被其它类继承，如果一个中的所有方法都没有重写的需要，当前类没有子类也罢，就可以使用final修饰类。</p>
<h2> Java中==和equals有哪些区别</h2>
<p>equals 和== 最大的区别是一个是方法一个是运算符。</p>
<p>==：如果比较的对象是基本数据类型，则比较的是数值是否相等；如果比较的是引用数据类型，则比较的是对象的地址值是否相等。</p>
<p>equals()：用来比较方法两个对象的内容是否相等。</p>
<p>注意：equals 方法不能用于基本数据类型的变量，如果没有对 equals 方法进行重写，则比较的是引用类型的变量所指向的对象的地址。</p>
<h2> String、StringBuffer、StringBuilder区别及使用场景</h2>
<p>String 类中使⽤ final 关键字修饰字符数组来保存字符串， private final char value[] ，所以 String 对象是不可变的.</p>
<p>⽽ StringBuilder 与 StringBuffer 都继承⾃ AbstractStringBuilder 类；但是没有⽤ final 关键字修饰，所以这两种对象都是可变的。</p>
<p>StringBuffer 是线程安全的；</p>
<p>StringBuilder 是⾮线程安全的；</p>
<ol>
<li>操作少量的数据: 适⽤ String</li>
<li>单线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuilder</li>
<li>多线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuffer</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，字符串 str 明明是可以改变的呀！其实不然，str 仅仅是一个引用对象，它指向一个字符串对象“abc”。第二行代码的含义是让 str 重新指向了一个新的字符串“bcd”对象，
而“abc”对象并没有任何改变，只不过该对象已经成为一个不可及对象罢了。</p>
<h2> Java代理的几种实现方式</h2>
<p>第一种:静态代理,只能静态的代理某些类或者某些方法,不推荐使用,功能比较弱,但是编码简单</p>
<p>第二种:动态代理,包含Proxy代理和CGLIB动态代理</p>
<h3> Proxy代理是JDK内置的动态代理</h3>
<p>特点:面向接口的,不需要导入三方依赖的动态代理,可以对多个不同的接口进行增强,通过反射读取注解时,只能读取到接口上的注解。</p>
<p>原理:面向接口,只能对实现类在实现接口中定义的方法进行增强。</p>
<p>定义接口和实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> CGLIB动态代理</h3>
<p>特点:面向父类的动态代理,需要导入第三方依赖</p>
<p>原理:面向父类,底层通过子类继承父类并重写方法的形式实现增强</p>
<p>Proxy和CGLIB是非常重要的代理模式,是springAOP底层实现的主要两种方式</p>
<p>CGLIB的核心类：</p>
<ol>
<li>net.sf.cglib.proxy.Enhancer – 主要的增强类</li>
<li>net.sf.cglib.proxy.MethodInterceptor – 主要的方法拦截类，它是Callback接口的子接口，需要用户实现</li>
<li>net.sf.cglib.proxy.MethodProxy – JDK的java.lang.reflect.Method类的代理类，可以方便的实现对源对象方法的调用,如使用：</li>
</ol>
<p>Object o = methodProxy.invokeSuper(proxy, args);//虽然第一个参数是被代理对象，也不会出现死循环的问题。</p>
<p>net.sf.cglib.proxy.MethodInterceptor 接口是最通用的回调（callback）类型，它经常被基于代理的AOP用来实现拦截（intercept）方法的调用。</p>
<p>这个接口只定义了一个方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数是代理对像，第二和第三个参数分别是拦截的方法和方法的参数。原来的方法可能通过使用java.lang.reflect.Method对象的一般反射调用，
或者使用 net.sf.cglib.proxy.MethodProxy对象调用。net.sf.cglib.proxy.MethodProxy通常被首选使用，因为它更快。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> hashcode和equals如何使用</h2>
<p><strong>equals()</strong> 源自于java.lang.Object,该方法用来简单验证两个对象的相等性。Object类中定义的默认实现只检查两个对象的对象引用，以验证它们的相等性。
通过重写该方法,可以自定义验证对象相等新的规则,如果你使用ORM处理一些对象的话，你要确保在hashCode()和equals()对象中使用getter和setter而不是直接引用成员变量</p>
<p><strong>hashCode()</strong> 源自于java.lang.Object ,该方法用于获取给定对象的唯一的整数(散列码)。当这个对象需要存储在哈希表这样的数据结构时，这个整数用于确定桶的位置。默认情况下，对象的hashCode()
方法返回对象所在内存地址的整数表示。hashCode()是HashTable、HashMap和HashSet使用的。默认的，Object类的hashCode()方法返回这个对象存储的内存地址的编号。
hash散列算法,使得在hash表中查找一个记录速度变O(1). 每个记录都有自己的hashcode,散列算法按照hashcode把记录放置在合适的位置.
在查找一个记录,首先先通过hashcode快速定位记录的位置.然后再通过equals来比较是否相等。如果hashcode没找到，则不equal，元素不存在于哈希表中；即使找到了，也只需执行hashcode相同的几个元素的equal，如果不equal，还是不存在哈希表中。</p>
<h2> HashMap和HashTable的区别及底层实现`</h2>
<h3> HashMap和HashTable对比</h3>
<ol>
<li>HashTable线程同步，HashMap非线程同步。</li>
<li>HashTable不允许&lt;键,值&gt;有空值，HashMap允许&lt;键,值&gt;有空值。</li>
<li>HashTable使用Enumeration，HashMap使用Iterator。</li>
<li>HashTable中hash数组的默认大小是11，增加方式的old*2+1，HashMap中hash数组的默认大小是16，增长方式是2的指数倍。</li>
<li>HashMap jdk1.8之前list + 链表 jdk1.8之后list + 链表,当链表长度到8时，转化为红黑树</li>
<li>HashMap链表插入节点的方式 在Java1.7中，插入链表节点使用<strong>头插法</strong>。Java1.8中变成了<strong>尾插法</strong></li>
<li>Java1.8的hash()中，将hash值高位（前16位）参与到取模的运算中，使得计算结果的不确定性增强，降低发生哈希碰撞的概率</li>
</ol>
<h3> HashMap扩容优化</h3>
<p>扩容以后,1.7对元素进行rehash算法,计算原来每个元素在扩容之后的哈希表中的位置,1.8借助2倍扩容机制,元素不需要进行重新计算位置</p>
<p>JDK 1.8 在扩容时并没有像 JDK 1.7 那样，重新计算每个元素的哈希值，而是通过高位运算**（e.hash &amp; oldCap）**来确定元素是否需要移动，比如 key1 的信息如下：</p>
<p>使用 e.hash &amp; oldCap 得到的结果，高一位为 0，当结果为 0 时表示元素在扩容时位置不会发生任何变化，而 key 2 信息如下</p>
<p>高一位为 1，当结果为 1 时，表示元素在扩容时位置发生了变化，新的下标位置等于原下标位置 + 原数组长度<strong>hashmap,</strong> <strong>不必像1.7一样全部重新计算位置</strong></p>
<h3> 为什么hashmap扩容的时候是两倍？</h3>
<p>查看源代码</p>
<p>在存入元素时,放入元素位置有一个 (n-1)&amp;hash 的一个算法,和hash&amp;(newCap-1),这里用到了一个&amp;位运算符</p>
<p>当HashMap的容量是16时，它的二进制是10000，(n-1)的二进制是01111，与hash值得计算结果如下</p>
<p>下面就来看一下HashMap的容量不是2的n次幂的情况，当容量为10时，二进制为01010，(n-1)的二进制是01001，向里面添加同样的元素，结果为</p>
<p>可以看出，有三个不同的元素进过&amp;运算得出了同样的结果，严重的hash碰撞了</p>
<p>只有当n的值是2的N次幂的时候，进行&amp;位运算的时候，才可以只看后几位，而不需要全部进行计算</p>
<h3> hashmap线程安全的方式？</h3>
<p>HashMap不是线程安全的,往往在写程序时需要通过一些方法来回避.其实JDK原生的提供了2种方法让HashMap支持线程安全.</p>
<p>方法一: 通过Collections.synchronizedMap()返回一个新的Map,这个新的map就是线程安全的. 这个要求大家习惯基于接口编程,因为返回的并不是HashMap,而是一个Map的实现.</p>
<p>方法二: 重新改写了HashMap,具体的可以查看java.util.concurrent.ConcurrentHashMap. 这个方法比方法一有了很大的改进.</p>
<p>方法一特点:</p>
<p>通过Collections.synchronizedMap()来封装所有不安全的HashMap的方法,就连toString, hashCode都进行了封装. 封装的关键点有2处,1)使用了经典的synchronized来进行互斥, 2)
使用了代理模式new了一个新的类,这个类同样实现了Map接口.
在Hashmap上面,synchronized锁住的是对象,所以第一个申请的得到锁,其他线程将进入阻塞,等待唤醒. 优点:代码实现十分简单,一看就懂.缺点:
从锁的角度来看,方法一直接使用了锁住方法,基本上是锁住了尽可能大的代码块.性能会比较差.</p>
<p>方法二特点:</p>
<p>重新写了HashMap,比较大的改变有如下几点.使用了新的锁机制,把HashMap进行了拆分,拆分成了多个独立的块,这样在高并发的情况下减少了锁冲突的可能,使用的是NonfairSync.
这个特性调用CAS指令来确保原子性与互斥性.当如果多个线程恰好操作到同一个segment上面,那么只会有一个线程得到运行.</p>
<p>优点:</p>
<p>需要互斥的代码段比较少,性能会比较好. ConcurrentHashMap把整个Map切分成了多个块,发生锁碰撞的几率大大降低,性能会比较好. 缺点:代码繁琐</p>
<h2> Java异常处理方式</h2>
<p>Java 通过面向对象的方法进行异常处理，一旦方法抛出异常，系统自动根据该异常对象寻找合适异常处理器（Exception Handler）来处理该异常，把各种不同的异常进行分类，并提供了良好的接口。在 Java 中，每个异常都是一个对</p>
<p>象，它是 Throwable 类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。Java 的异常处理是通过 5 个关键词来实现的：try、
catch、throw、throws 和 finally。</p>
<p>在Java应用中，异常的处理机制分为声明异常，抛出异常和捕获异常。</p>
<h3> throw和throws的区别</h3>
<ol>
<li>
<p>位置不同：
throw：方法内部
throws: 方法的签名处，方法的声明处</p>
</li>
<li>
<p>内容不同：
throw+异常对象（检查异常，运行时异常）
throws+异常的类型（可以多个类型，用，拼接）</p>
</li>
<li>
<p>作用不同：
throw：异常出现的源头，制造异常。
throws:在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理：
要么自己处理要么再继续向外抛出异常</p>
</li>
</ol>
<h3> 1.throws声明异常</h3>
<p>通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。传递异常可以在方法签名处使用 throws 关键字声明可能会抛出的异常。</p>
<p>注意<strong>非检查异常</strong>（Error、RuntimeException 或它们的子类）不可使用 throws 关键字来声明要抛出的异常。</p>
<p>一个方法出现编译时异常，就需要 try-catch/ throws 处理，否则会导致编译错误</p>
<h3> 2.throw抛出异常</h3>
<p>如果你觉得解决不了某些异常问题，且不需要调用者处理，那么你可以抛出异常。 throw关键字作用是在方法内部抛出一个Throwable类型的异常。任何Java代码都可以通过throw语句抛出异常。</p>
<h3> 3.trycatch捕获异常</h3>
<p>程序通常在运行之前不报错，但是运行后可能会出现某些未知的错误，但是还不想直接抛出到上一级，那么就需要通过try…catch…的形式进行异常捕获，之后根据不同的异常情况来进行相应的处理。如何选择异常类型</p>
<p>可以根据下图来选择是捕获异常，声明异常还是抛出异常</p>
<h2> 自定义异常在生产中如何应用</h2>
<p>Java虽然提供了丰富的异常处理类，但是在项目中还会经常使用自定义异常，其主要原因是Java提供的异常类在某些情况下还是不能满足实际需球。例如以下情况：</p>
<p>1、系统中有些错误是符合Java语法，但不符合业务逻辑。</p>
<p>2、在分层的软件结构中，通常是在表现层统一对系统其他层次的异常进行捕获处理。</p>
<h2> 如何实现一个IOC容器?</h2>
<p>IOC(Inversion of Control),意思是控制反转，不是什么技术，而是一种设计思想，IOC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p>
<p>在传统的程序设计中，我们直接在对象内部通过new进行对象创建，是程序主动去创建依赖对象，而IOC是有专门的容器来进行对象的创建，即IOC容器来控制对象的创建。</p>
<p>在传统的应用程序中，我们是在对象中主动控制去直接获取依赖对象，这个是正转，反转是由容器来帮忙创建及注入依赖对象，在这个过程过程中，由容器帮我们查找级注入依赖对象，对象只是被动的接受依赖对象。</p>
<p>1、先准备一个基本的容器对象，包含一些map结构的集合，用来方便后续过程中存储具体的对象</p>
<p>2、进行配置文件的读取工作或者注解的解析工作，将需要创建的bean对象都封装成BeanDefinition对象存储在容器中</p>
<p>3、容器将封装好的BeanDefinition对象通过反射的方式进行实例化，完成对象的实例化工作</p>
<p>4、进行对象的初始化操作，也就是给类中的对应属性值就行设置，也就是进行依赖注入，完成整个对象的创建，变成一个完整的bean对象，存储在容器的某个map结构中</p>
<p>5、通过容器对象来获取对象，进行对象的获取和逻辑处理工作</p>
<p>6、提供销毁操作，当对象不用或者容器关闭的时候，将无用的对象进行销毁</p>
<h2> 说说你对Spring 的理解？</h2>
<a href="https://spring.io/projects/spring-framework#overview">
官网地址: https://spring.io/projects/spring-framework#overview</a>
<a href="https://repo.spring.io/release/org/springframework/spring/">
压缩包下载地址：https://repo.spring.io/release/org/springframework/spring/</a>
<a href="https://github.com/spring-projects/spring-framework">
源码地址：https://github.com/spring-projects/spring-framework</a>
<blockquote>
<p>Spring makes it easy to create Java enterprise applications. It provides everything you need to embrace the Java
language in an enterprise
environment, with support for Groovy and Kotlin as alternative languages on the JVM, and with the flexibility to
create many kinds of
architectures depending on an application’s needs. As of Spring Framework 5.1, Spring requires JDK 8+ (Java SE 8+) and
provides out-of-the-box
support for JDK 11 LTS. Java SE 8 update 60 is suggested as the minimum patch release for Java 8, but it is generally
recommended to use a recent
patch release.</p>
<p>Spring supports a wide range of application scenarios. In a large enterprise, applications often exist for a long time
and have to run on a
JDK and application server whose upgrade cycle is beyond developer control. Others may run as a single jar with the
server embedded, possibly in
a cloud environment. Yet others may be standalone applications (such as batch or integration workloads) that do not
need a server.</p>
<p>Spring is open source. It has a large and active community that provides continuous feedback based on a diverse range
of real-world use cases.
This has helped Spring to successfully evolve over a very long time.</p>
<p>Spring 使创建 Java 企业应用程序变得更加容易。它提供了在企业环境中接受 Java 语言所需的一切,，并支持 Groovy 和 Kotlin 作为 JVM 上的替代语言，并可根据应用程序
的需要灵活地创建多种体系结构。 从 Spring Framework 5.0 开始，Spring 需要 JDK 8(Java SE 8+)，并且已经为 JDK 9 提供了现成的支持。</p>
<p>Spring支持各种应用场景， 在大型企业中, 应用程序通常需要运行很长时间，而且必须运行在 jdk 和应用服务器上，这种场景开发人员无法控制其升级周期。 其他可能作为一个单独的jar嵌入到服务器去运行，
也有可能在云环境中。还有一些可能是不需要服务器的独立应用程序(如批处理或集成的工作任务)。</p>
<p>Spring 是开源的。它拥有一个庞大而且活跃的社区，提供不同范围的，真实用户的持续反馈。这也帮助Spring不断地改进,不断发展。</p>
</blockquote>
<h2> 你觉得Spring的核心是什么？</h2>
<p>spring是一个开源框架。</p>
<p>spring是为了简化企业开发而生的，使得开发变得更加优雅和简洁。</p>
<p>spring是一个<strong>IOC</strong>和<strong>AOP</strong>的容器框架。</p>
<ol>
<li>IOC：控制反转</li>
<li>AOP：面向切面编程</li>
<li>容器：包含并管理应用对象的生命周期，就好比用桶装水一样，spring就是桶，而对象就是水</li>
</ol>
<h2> 说一下使用spring的优势？</h2>
<ol>
<li>Spring通过DI、AOP和消除样板式代码来简化企业级Java开发</li>
<li>Spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将Spring扩展到不同的领域，如Web服务、REST、移动开发以及NoSQL</li>
<li>低侵入式设计，代码的污染极低</li>
<li>独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once,Run Anywhere的承诺</li>
<li>Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦</li>
<li>Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的复用</li>
<li>Spring的ORM和DAO提供了与第三方持久层框架的的良好整合，并简化了底层的数据库访问</li>
<li>Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部</li>
</ol>
<h2> Spring是如何简化开发的？</h2>
<ol>
<li>基于POJO的轻量级和最小侵入性编程</li>
<li>通过依赖注入和面向接口实现松耦合</li>
<li>基于切面和惯例进行声明式编程</li>
<li>通过切面和模板减少样板式代码</li>
</ol>
<h2> Spring AOP的几种通知类型？</h2>
<ul>
<li><strong>前置通知</strong> 切入点方法执行之前执行 <strong>@Before</strong></li>
<li><strong>返回通知</strong> 切入点方法执行成功之后执行 <strong>@AfterReturning</strong></li>
<li><strong>环绕通知</strong> 切入点前后都执行 <strong>@Around</strong></li>
<li><strong>异常通知</strong> 切入点方法执行异常后执行方法 <strong>@AfterThrow</strong></li>
<li><strong>后置通知</strong> 切入点方法执行之后执行，不管是否成功 <strong>@After</strong></li>
</ul>
<h2> 获取方法的返回值可以用哪几种通知？</h2>
<p>AfterReturning</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 说说你对Aop的理解？</h2>
<p>AOP全称叫做 Aspect Oriented Programming 面向切面编程。它是为解耦而生的，解耦是程序员编码开发过程中一直追求的境界，AOP在业务类的隔离上，绝对是做到了解耦，在这里面有几个核心的概念：</p>
<ul>
<li>
<p>切面（Aspect）: 指关注点模块化，这个关注点可能会横切多个对象。事务管理是企业级Java应用中有关横切关注点的例子。 在Spring AOP中，切面可以使用通用类基于模式的方式（schema-based approach）
或者在普通类中以<code>@Aspect</code>注解（@AspectJ 注解方式）来实现。</p>
</li>
<li>
<p>连接点（Join point）: 在程序执行过程中某个特定的点，例如某个方法调用的时间点或者处理异常的时间点。在Spring AOP中，一个连接点总是代表一个方法的执行。</p>
</li>
<li>
<p>通知（Advice）: 在切面的某个特定的连接点上执行的动作。通知有多种类型，包括“around”, “before” and “after”等等。通知的类型将在后面的章节进行讨论。 许多AOP框架，包括Spring在内，
都是以拦截器做通知模型的，并维护着一个以连接点为中心的拦截器链。</p>
</li>
<li>
<p>切点（Pointcut）: 匹配连接点的断言。通知和切点表达式相关联，并在满足这个切点的连接点上运行（例如，当执行某个特定名称的方法时）。切点表达式如何和连接点匹配是AOP的核心：
Spring默认使用AspectJ切点语义。</p>
</li>
<li>
<p>引入（Introduction）: 声明额外的方法或者某个类型的字段。Spring允许引入新的接口（以及一个对应的实现）到任何被通知的对象上。例如，可以使用引入来使bean实现 <code>IsModified</code>接口，
以便简化缓存机制（在AspectJ社区，引入也被称为内部类型声明（inter））。</p>
</li>
<li>
<p>目标对象（Target object）: 被一个或者多个切面所通知的对象。也被称作被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，那么这个对象永远是一个被代理（proxied）的对象。</p>
</li>
<li>
<p>AOP代理（AOP proxy）:AOP框架创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）。在Spring中，AOP代理可以是JDK动态代理或CGLIB代理。</p>
</li>
<li>
<p>织入（Weaving）: 把切面连接到其它的应用程序类型或者对象上，并创建一个被被通知的对象的过程。这个过程可以在编译时（例如使用AspectJ编译器）、类加载时或运行时中完成。
Spring和其他纯Java AOP框架一样，是在运行时完成织入的。</p>
<p>这些概念都太学术了，如果更简单的解释呢，其实非常简单：</p>
<p>任何一个系统都是由不同的组件组成的，每个组件负责一块特定的功能，当然会存在很多组件是跟业务无关的，例如日志、事务、权限等核心服务组件，这些核心服务组件经常融入到具体的业务逻辑中，
如果我们为每一个具体业务逻辑操作都添加这样的代码，很明显代码冗余太多，因此我们需要将这些公共的代码逻辑抽象出来变成一个切面，然后注入到目标对象（具体业务）中去，
AOP正是基于这样的一个思路实现的，通过动态代理的方式，将需要注入切面的对象进行代理，在进行调用的时候，将公共的逻辑直接添加进去，而不需要修改原有业务的逻辑代码，
只需要在原来的业务逻辑基础之上做一些增强功能即可。</p>
</li>
</ul>
<h2> 说说你对IOC的理解？</h2>
<blockquote>
<p>IOC与大家熟知的依赖注入同理，这是一个通过依赖注入对象的过程 也就是说，它们所使用的对象，是通过构造函数参数，工厂方法的参数或这是从工厂方法的构造函数或返回值的对象实例设置的属性，然后容器在创建bean时注入这些需要的依赖。
这个过程相对普通创建对象的过程是反向的（因此称之为IoC），bean本身通过直接构造类来控制依赖关系的实例化或位置，或提供诸如服务定位器模式之类的机制。</p>
</blockquote>
<p>如果这个过程比较难理解的话，那么可以想象自己找女朋友和婚介公司找女朋友的过程。如果这个过程能够想明白的话，那么我们现在回答上面的问题：</p>
<blockquote>
<ol>
<li>谁控制谁：在之前的编码过程中，都是需要什么对象自己去创建什么对象，有程序员自己来控制对象，而有了IOC容器之后，就会变成由IOC容器来控制对象</li>
<li>控制什么：在实现过程中所需要的对象及需要依赖的对象</li>
<li>什么是反转：在没有IOC容器之前我们都是在对象中主动去创建依赖的对象，这是正转的，而有了IOC之后，依赖的对象直接由IOC容器创建后注入到对象中，由主动创建变成了被动接受，这是反转</li>
<li>哪些方面被反转：依赖的对象</li>
</ol>
</blockquote>
<h2> BeanFactory和ApplicationContext有什么区别</h2>
<p>相同：</p>
<ul>
<li>Spring提供了两种不同的IOC 容器，一个是BeanFactory，另外一个是ApplicationContext，它们都是Java interface，ApplicationContext继承于BeanFactory(
ApplicationContext继承ListableBeanFactory。</li>
<li>它们都可以用来配置XML属性，也支持属性的自动注入。</li>
<li>而ListableBeanFactory继承BeanFactory)，BeanFactory 和 ApplicationContext 都提供了一种方式，使用getBean("bean name")获取bean。</li>
</ul>
<p>不同：</p>
<ul>
<li>当你调用getBean()方法时，BeanFactory仅实例化bean，而ApplicationContext 在启动容器的时候实例化单例bean，不会等待调用getBean()方法时再实例化。</li>
<li>BeanFactory不支持国际化，即i18n，但ApplicationContext提供了对它的支持。</li>
<li>BeanFactory与ApplicationContext之间的另一个区别是能够将事件发布到注册为监听器的bean。</li>
<li>BeanFactory 的一个核心实现是XMLBeanFactory 而ApplicationContext
的一个核心实现是ClassPathXmlApplicationContext，Web容器的环境我们使用WebApplicationContext并且增加了getServletContext 方法。</li>
<li>如果使用自动注入并使用BeanFactory，则需要使用API注册AutoWiredBeanPostProcessor，如果使用ApplicationContext，则可以使用XML进行配置。</li>
<li></li>
</ul>
<p>简而言之，BeanFactory提供基本的IOC和DI功能，而ApplicationContext提供高级功能，BeanFactory可用于测试和非生产使用，但ApplicationContext是功能更丰富的容器实现，应该优于BeanFactory</p>
<h2> 简述spring bean的生命周期？</h2>
<ol>
<li>实例化bean对象</li>
</ol>
<p>​ 通过反射的方式进行对象的创建，此时的创建只是在堆空间中申请空间，属性都是默认值</p>
<ol start="2">
<li>设置对象属性</li>
</ol>
<p>​ 给对象中的属性进行值的设置工作</p>
<ol start="3">
<li>检查Aware相关接口并设置相关依赖</li>
</ol>
<p>​ 如果对象中需要引用容器内部的对象，那么需要调用aware接口的子类方法来进行统一的设置</p>
<ol start="4">
<li>BeanPostProcessor的前置处理</li>
</ol>
<p>​ 对生成的bean对象进行前置的处理工作</p>
<ol start="5">
<li>检查是否是InitializingBean的子类来决定是否调用afterPropertiesSet方法</li>
</ol>
<p>​ 判断当前bean对象是否设置了InitializingBean接口，然后进行属性的设置等基本工作</p>
<ol start="6">
<li>检查是否配置有自定义的init-method方法</li>
</ol>
<p>​ 如果当前bean对象定义了初始化方法，那么在此处调用初始化方法</p>
<ol start="7">
<li>BeanPostProcessor后置处理</li>
</ol>
<p>​ 对生成的bean对象进行后置的处理工作</p>
<ol start="8">
<li>注册必要的Destruction相关回调接口</li>
</ol>
<p>​ 为了方便对象的销毁，在此处调用注销的回调接口，方便对象进行销毁操作</p>
<ol start="9">
<li>获取并使用bean对象</li>
</ol>
<p>​ 通过容器来获取对象并进行使用</p>
<ol start="10">
<li>是否实现DisposableBean接口</li>
</ol>
<p>​ 判断是否实现了DisposableBean接口，并调用具体的方法来进行对象的销毁工作</p>
<ol start="11">
<li>是否配置有自定义的destory方法</li>
</ol>
<p>​ 如果当前bean对象定义了销毁方法，那么在此处调用销毁方法</p>
<h2> spring支持的bean作用域有哪些？</h2>
<p>① singleton</p>
<p>使用该属性定义Bean时，IOC容器仅创建一个Bean实例，IOC容器每次返回的是同一个Bean实例。</p>
<p>② prototype</p>
<p>使用该属性定义Bean时，IOC容器可以创建多个Bean实例，每次返回的都是一个新的实例。</p>
<p>③ request</p>
<p>该属性仅对HTTP请求产生作用，使用该属性定义Bean时，每次HTTP请求都会创建一个新的Bean，适用于WebApplicationContext环境。</p>
<p>④ session</p>
<p>该属性仅用于HTTP Session，同一个Session共享一个Bean实例。不同Session使用不同的实例。</p>
<p>⑤ global-session</p>
<p>该属性仅用于HTTP Session，同session作用域不同的是，所有的Session共享一个Bean实例。</p>
<h2> Spring框架中的单例Bean是线程安全的么？</h2>
<p>Spring中的Bean对象默认是单例的，框架并没有对bean进行多线程的封装处理</p>
<p>​ 如果Bean是有状态的，那么就需要开发人员自己来保证线程安全的保证，最简单的办法就是改变bean的作用域把singleton改成prototype，这样每次请求bean对象就相当于是创建新的对象来保证线程的安全</p>
<p>​ 有状态就是由数据存储的功能</p>
<p>​ 无状态就是不会存储数据，你想一下，我们的controller，service和dao本身并不是线程安全的，只是调用里面的方法，而且多线程调用一个实例的方法，会在内存中复制遍历，这是自己线程的工作内存，是最安全的。</p>
<p>​
因此在进行使用的时候，不要在bean中声明任何有状态的实例变量或者类变量，如果必须如此，也推荐大家使用ThreadLocal把变量变成线程私有，如果bean的实例变量或者类变量需要在多个线程之间共享，那么就只能使用synchronized，lock，cas等这些实现线程同步的方法了。</p>
<h2> spring框架中使用了哪些设计模式及应用场景</h2>
<ul>
<li><strong>1.工厂模式</strong> ：在各种BeanFactory以及ApplicationContext创建中都用到了</li>
<li><strong>2.模版模式</strong> ：在各种BeanFactory以及ApplicationContext实现中也都用到了</li>
<li><strong>3.代理模式</strong> ：Spring AOP 利用了 AspectJ AOP实现的! AspectJ AOP 的底层用了动态代理</li>
<li><strong>4.策略模式</strong> ：加载资源文件的方式，使用了不同的方法，比如：<code>ClassPathResourece</code>，<code>FileSystemResource</code>，<code>ServletContextResource</code>，<code>UrlResource</code> 但他们都有共同的接口 <code>Resource</code>；
在Aop的实现中，采用了两种不同的方式，JDK动态代理和CGLIB代理</li>
<li><strong>5.单例模式</strong> ：比如在创建bean的时候。</li>
<li><strong>6.观察者模式</strong> ：spring中的 <code>ApplicationEvent</code>，<code>ApplicationListener</code>,<code>ApplicationEventPublisher</code></li>
<li><strong>7.适配器模式</strong> ：<code>MethodBeforeAdviceAdapter</code>,<code>ThrowsAdviceAdapter</code>,<code>AfterReturningAdapter</code></li>
<li><strong>8.装饰者模式</strong> ：源码中类型带Wrapper或者Decorator的都是</li>
</ul>
<h2> spring事务的实现方式原理是什么？</h2>
<p>在使用Spring框架的时候，可以有两种事务的实现方式，一种是编程式事务，有用户自己通过代码来控制事务的处理逻辑，还有一种是声明式事务，通过@Transactional注解来实现。</p>
<p>​
其实事务的操作本来应该是由数据库来进行控制，但是为了方便用户进行业务逻辑的操作，spring对事务功能进行了扩展实现，一般我们很少会用编程式事务，更多的是通过添加@Transactional注解来进行实现，当添加此注解之后事务的自动功能就会关闭，有spring框架来帮助进行控制。</p>
<p>​
其实事务操作是AOP的一个核心体现，当一个方法添加@Transactional注解之后，spring会基于这个类生成一个代理对象，会将这个代理对象作为bean，当使用这个代理对象的方法的时候，如果有事务处理，那么会先把事务的自动提交给关系，然后去执行具体的业务逻辑，如果执行逻辑没有出现异常，那么代理逻辑就会直接提交，如果出现任何异常情况，那么直接进行回滚操作，当然用户可以控制对哪些异常进行回滚操作。</p>
<p>TransactionInterceptor</p>
<h2> 脏读、不可重复读、虚读（幻读）</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>**</td>
<td></td>
</tr>
<tr>
<td>脏读**</td>
<td>一个事务读取了未提交事务执行过程中的数据。</td>
</tr>
<tr>
<td>**</td>
<td></td>
</tr>
<tr>
<td>不可重复读**</td>
<td>一个事务可以读取另一个事务已提交的数据 单条记录前后不匹配。<br>不可重复读是指对于数据库中的某个数据，一个事务执行过程中多次查询返回不同查询结果，这就是在事务执行过程中，数据被其他事务提交修改了。<br>不可重复读同脏读的区别在于，脏读是一个事务读取了另一未完成的事务执行过程中的数据，而不可重复读是一个事务执行过程中，另一事务提交并修改了当前事务正在读取的数据。</td>
</tr>
<tr>
<td>**</td>
<td></td>
</tr>
<tr>
<td>虚读（幻读）**</td>
<td>一个事务可以读取另一个事务已提交的数据，执行同一条sql语句几次，读取到的数据前后可能多了点或者少了点。<br>幻读是事务非独立执行时发生的一种现象，例如事务T1批量对一个表中某一列列值为1的数据修改为2的变更，但是在这时，事务T2对这张表插入了一条列值为1的数据，并完成提交。此时，如果事务T1查看刚刚完成操作的数据，发现还有一条列值为1的数据没有进行修改，而这条数据其实是T2刚刚提交插入的，这就是幻读。<br>幻读和不可重复读都是读取了另一条已经提交的事务（这点同脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</td>
</tr>
</tbody>
</table>
<h2> spring事务的隔离级别有哪些？</h2>
<p>级别越大，并发性越低。</p>
<p>隔离级别 Isolation：读未提交 &lt; 读已提交 &lt; 可重复读（MySQL默认） &lt; 序列化</p>
<p>spring中的事务隔离级别就是数据库的隔离级别，有以下几种：</p>
<p>​ read uncommitted（读未提交）<strong>脏读</strong></p>
<p>​ read committed（读已提交）<strong>不可重复读</strong></p>
<p>​ repeatable read（可重复读）<strong>幻读</strong></p>
<p>​ serializable（串行化）<strong>避免了脏读、不可重读复读和幻读问题。</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DEFAULT</td>
<td style="text-align:left">使用底层数据存储的默认隔离级别。 所有其他级别对应于 JDBC 隔离级别。</td>
</tr>
<tr>
<td style="text-align:center">READ_UNCOMMITTED</td>
<td style="text-align:left">指示可能发生**</td>
</tr>
<tr>
<td style="text-align:center">脏读**的常量。 此级别允许由一个事务更改的行在提交该行中的任何更改之前被另一个事务读取（“脏读”）。 如果任何更改被回滚，则第二个事务将检索到无效行。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">READ_COMMITTED</td>
<td style="text-align:left">一个事务可以读取另一个已提交的事务，多次读取会造成不一样的结果，此现象称为**</td>
</tr>
<tr>
<td style="text-align:center">不可重复读**，Oracle和SQL Server的默认隔离级别</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"><strong>REPEATABLE_READ</strong></td>
<td style="text-align:left">表示防止脏读的常量；可能会发生<strong>幻读</strong>。此级别仅禁止事务读取其中包含未提交更改的行。*MySQL</td>
</tr>
<tr>
<td style="text-align:center">默认的隔离级别*</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">SERIALIZABLE</td>
<td style="text-align:left">指示防止脏读、不可重复读和幻读的常量。该级别包括ISOLATION_REPEATABLE_READ的禁止，并进一步禁止这样一种情况，即一个事务读取满足WHERE条件的所有行，第二个事务插入满足WHERE条件的行，第一个事务为相同条件重新读取，检索额外的“第二次阅读中的幻影”行。</td>
</tr>
</tbody>
</table>
<p>​ 在进行配置的时候，如果数据库和spring代码中的隔离级别不同，那么以spring的配置为主。</p>
<h2> spring的事务传播机制是什么？</h2>
<table>
<thead>
<tr>
<th style="text-align:center">传播行为</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>REQUIRED（常用）</strong></td>
<td style="text-align:left">支持当前事务，如果不存在则创建一个新事务。 这是事务注释的默认设置。</td>
</tr>
<tr>
<td style="text-align:center">SUPPORTS</td>
<td style="text-align:left">支持当前事务，如果不存在则以非事务方式执行。</td>
</tr>
<tr>
<td style="text-align:center">MANDATORY</td>
<td style="text-align:left">支持当前事务，如果不存在则抛出异常。</td>
</tr>
<tr>
<td style="text-align:center"><strong>REQUIRES_NEW（常用）</strong></td>
<td style="text-align:left">创建一个新事务，存不存在都创建新的事物。</td>
</tr>
<tr>
<td style="text-align:center">NOT_SUPPORTED</td>
<td style="text-align:left">以非事务方式执行，如果存在则暂停当前事务。</td>
</tr>
<tr>
<td style="text-align:center">NEVER</td>
<td style="text-align:left">以非事务方式执行，如果存在事务则抛出异常。</td>
</tr>
<tr>
<td style="text-align:center">NESTED</td>
<td style="text-align:left">如果当前事务存在，则在嵌套事务中执行，否则行为类似于REQUIRED 。</td>
</tr>
</tbody>
</table>
<p><strong>NESTED和REQUIRED_NEW的区别：</strong></p>
<p>REQUIRED_NEW是新建一个事务并且新开始的这个事务与原有事务无关，而NESTED则是当前存在事务时会开启一个嵌套事务;</p>
<p>在NESTED情况下，父事务回滚时，子事务也会回滚，而REQUIRED_NEW情况下，原有事务回滚，不会影响新开启的事务</p>
<p><strong>NESTED和REQUIRED的区别：</strong></p>
<p>REQUIRED情况下，调用方存在事务时，则被调用方和调用方使用同一个事务，那么被调用方出现异常时，由于共用一个事务，所以无论是否catch异常，事务都会回滚，</p>
<p>而在NESTED情况下，被调用方发生异常时，调用方可以catch其异常，这样只有子事务回滚，父事务不会回滚。</p>
<h2> spring事务什么时候会失效？</h2>
<ol>
<li>数据库不支持事务</li>
<li>数据源没有配置事务管理器</li>
<li>bean对象没有被spring容器管理</li>
<li>注解标注方法修饰符为非public时，@Transactional注解将会不起作用</li>
<li>在类内部调用调用类内部@Transactional标注的方法，这种情况下也会导致事务不开启。</li>
<li>事务方法内部捕捉了异常，没有抛出新的异常，导致事务操作不会进行回滚。</li>
<li>把spring事务传播机制从REQUIRED改成了REQUIRES_NEW</li>
</ol>
<h2> 什么的是bean的自动装配，它有哪些方式？</h2>
<p>bean的自动装配指的是bean的属性值在进行注入的时候通过某种特定的规则和方式去容器中查找，并设置到具体的对象属性中，主要有五种方式：</p>
<p>no – 缺省情况下，自动配置是通过“ref”属性手动设定，在项目中最常用</p>
<p>byName – 根据属性名称自动装配。如果一个bean的名称和其他bean属性的名称是一样的，将会自装配它。</p>
<p>byType – 按数据类型自动装配，如果bean的数据类型是用其它bean属性的数据类型，兼容并自动装配它。</p>
<p>constructor – 在构造函数参数的byType方式。</p>
<p>autodetect – 如果找到默认的构造函数，使用“自动装配用构造”; 否则，使用“按类型自动装配”。</p>
<h2> spring、springmvc、springboot的区别是什么？</h2>
<p>spring和springMvc：</p>
<ol>
<li>spring是一个一站式的轻量级的java开发框架，核心是控制反转（IOC）和面向切面（AOP），针对于开发的WEB层(springMvc)、业务层(Ioc)、持久层(jdbcTemplate)等都提供了多种配置解决方案；</li>
<li>springMvc是spring基础之上的一个MVC框架，主要处理web开发的路径映射和视图渲染，属于spring框架中WEB层开发的一部分；</li>
</ol>
<p>springMvc和springBoot：</p>
<ol>
<li>springMvc属于一个企业WEB开发的MVC框架，涵盖面包括前端视图开发、文件配置、后台接口逻辑开发等，XML、config等配置相对比较繁琐复杂；</li>
<li>springBoot框架相对于springMvc框架来说，更专注于开发微服务后台接口，不开发前端视图，同时遵循默认优于配置，简化了插件配置流程，不需要配置xml，相对springmvc，大大简化了配置流程；</li>
</ol>
<p>总结：</p>
<ol>
<li>Spring 框架就像一个家族，有众多衍生产品例如 boot、security、jpa等等。但他们的基础都是Spring的ioc、aop等. ioc 提供了依赖注入的容器，
aop解决了面向横切面编程，然后在此两者的基础上实现了其他延伸产品的高级功能；</li>
<li>springMvc主要解决WEB开发的问题，是基于Servlet 的一个MVC框架，通过XML配置，统一开发前端视图和后端逻辑；</li>
<li></li>
</ol>
<p>由于Spring的配置非常复杂，各种XML、JavaConfig、servlet处理起来比较繁琐，为了简化开发者的使用，从而创造性地推出了springBoot框架，默认优于配置，简化了springMvc的配置流程；但区别于springMvc的是，springBoot专注于单体微服务接口开发，和前端解耦，虽然springBoot也可以做成springMvc前后台一起开发，但是这就有点不符合springBoot框架的初衷了；</p>
<h2> springmvc工作流程是什么？</h2>
<p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，
将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<figure><figcaption>img.png</figcaption></figure>
<ol>
<li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</li>
<li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li>
<li>返回处理器执行链，根据url查找控制器，并且将解析后的信息传递给DispatcherServlet</li>
<li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li>
<li>执行handler找到具体的处理器</li>
<li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li>
<li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li>
<li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li>
<li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li>
<li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图，进行试图渲染</li>
<li>将响应数据返回给客户端</li>
</ol>
<h2> springmvc的九大组件有哪些？</h2>
<ol>
<li>HandlerMapping</li>
</ol>
<p>根据request找到相应的处理器。因为Handler（Controller）有两种形式，一种是基于类的Handler，另一种是基于Method的Handler（也就是我们常用的）</p>
<ol start="2">
<li>HandlerAdapter</li>
</ol>
<p>调用Handler的适配器。如果把Handler（Controller）当做工具的话，那么HandlerAdapter就相当于干活的工人</p>
<ol start="3">
<li>HandlerExceptionResolver</li>
</ol>
<p>对异常的处理</p>
<ol start="4">
<li>ViewResolver</li>
</ol>
<p>用来将String类型的视图名和Locale解析为View类型的视图</p>
<ol start="5">
<li>RequestToViewNameTranslator</li>
</ol>
<p>有的Handler（Controller）处理完后没有设置返回类型，比如是void方法，这是就需要从request中获取viewName</p>
<ol start="6">
<li>LocaleResolver</li>
</ol>
<p>从request中解析出Locale。Locale表示一个区域，比如zh-cn，对不同的区域的用户，显示不同的结果，这就是i18n（SpringMVC中有具体的拦截器LocaleChangeInterceptor）</p>
<ol start="7">
<li>ThemeResolver</li>
</ol>
<p>主题解析，这种类似于我们手机更换主题，不同的UI，css等</p>
<ol start="8">
<li>MultipartResolver</li>
</ol>
<p>处理上传请求，将普通的request封装成MultipartHttpServletRequest</p>
<ol start="9">
<li>FlashMapManager</li>
</ol>
<p>用于管理FlashMap，FlashMap用于在redirect重定向中传递参数</p>
<h2> springboot自动配置原理是什么？</h2>
<p>在之前的课程中我们讲解了springboot的启动过程，其实在面试过程中问的最多的可能是自动装配的原理，而自动装配是在启动过程中完成，只不过在刚开始的时候我们选择性的跳过了，下面详细讲解自动装配的过程。</p>
<ol>
<li>在springboot的启动过程中，有一个步骤是创建上下文，如果不记得可以看下面的代码：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>在 prepareContext 方法中查找 load 方法，一层一层向内点击，找到最终的load方法</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>实际执行load的是BeanDefinitionLoader中的load方法，如下：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>下面方法将用来判断是否资源的类型，是使用groovy加载还是使用注解的方式</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li></li>
</ol>
<p>下面方法判断启动类中是否包含@Component注解，但是会神奇的发现我们的启动类中并没有该注解，继续更进发现MergedAnnotations类传入了一个参数SearchStrategy.TYPE_HIERARCHY，会查找继承关系中是否包含这个注解，@SpringBootApplication--&gt;
@SpringBootConfiguration--&gt;@Configuration--&gt;@Component,当找到@Component注解之后，会把该对象注册到AnnotatedBeanDefinitionReader对象中</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当看完上述代码之后，只是完成了启动对象的注入，自动装配还没有开始，下面开始进入到自动装配。</p>
<ol start="6">
<li>自动装配入口，从刷新容器开始</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li>在invokeBeanFactoryPostProcessors方法中完成bean的实例化和执行</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8">
<li>查看invokeBeanFactoryPostProcessors的具体执行方法</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9">
<li>开始执行自动配置逻辑（启动类指定的配置，非默认配置），可以通过debug的方式一层层向里进行查找，会发现最终会在ConfigurationClassParser类中，此类是所有配置类的解析类，所有的解析逻辑在parser.parse(
candidates)中</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="10">
<li>继续跟进doProcessConfigurationClass方法，此方式是支持注解配置的核心逻辑</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="11">
<li>查看获取配置类的逻辑</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="12">
<li>继续回到ConfigurationClassParser中的parse方法中的最后一行,继续跟进该方法：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 如何理解springboot中的starter？</h2>
<p>使用spring+springmvc框架进行开发的时候，如果需要引入mybatis框架，那么需要在xml中定义需要的bean对象，这个过程很明显是很麻烦的，如果需要引入额外的其他组件，那么也需要进行复杂的配置，因此在springboot中引入了starter</p>
<p>​
starter就是一个jar包，写一个@Configuration的配置类，将这些bean定义在其中，然后再starter包的META-INF/spring.factories中写入配置类，那么springboot程序在启动的时候就会按照约定来加载该配置类</p>
<p>​ 开发人员只需要将相应的starter包依赖进应用中，进行相关的属性配置，就可以进行代码开发，而不需要单独进行bean对象的配置</p>
<h2> 什么是嵌入式服务器，为什么使用嵌入式服务器？</h2>
<p>在springboot框架中，大家应该发现了有一个内嵌的tomcat，在之前的开发流程中，每次写好代码之后必须要将项目部署到一个额外的web服务器中，只有这样才可以运行，这个明显要麻烦很多，而使用springboot的时候，你会发现在启动项目的时候可以直接按照java应用程序的方式来启动项目，不需要额外的环境支持，也不需要tomcat服务器，这是因为在springboot框架中内置了tomcat.jar，来通过main方法启动容器，达到一键开发部署的方式，不需要额外的任何其他操作。</p>
<h2> mybatis的优缺点有哪些？</h2>
<p>1、Mybait的优点：</p>
<p>（1）简单易学，容易上手（相比于Hibernate） 基于SQL编程；
（2）JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；
（3）很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持，而JDBC提供了可扩展性，所以只要这个数据库有针对Java的jar包就可以就可以与MyBatis兼容），开发人员不需要考虑数据库的差异性。
（4）提供了很多第三方插件（分页插件 / 逆向工程）；
（5）能够与Spring很好的集成；
（6）MyBatis相当灵活，不会对应用程序或者数据库的现有设计强加任何影响，SQL写在XML里，从程序代码中彻底分离，解除sql与程序代码的耦合，便于统一管理和优化，并可重用。
（7）提供XML标签，支持编写动态SQL语句。
（8）提供映射标签，支持对象与数据库的ORM字段关系映射。
（9）提供对象关系映射标签，支持对象关系组建维护。</p>
<p>2、MyBatis框架的缺点：</p>
<p>（1）SQL语句的编写工作量较大，尤其是字段多、关联表多时，更是如此，对开发人员编写SQL语句的功底有一定要求。
（2）SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</p>
<h2> mybatis和hibernate有什么区别？</h2>
<p>Hibernate的优点：</p>
<p>1、hibernate是全自动，hibernate完全可以通过对象关系模型实现对数据库的操作，拥有完整的JavaBean对象与数据库的映射结构来自动生成sql。</p>
<p>2、功能强大，数据库无关性好，O/R映射能力强，需要写的代码很少，开发速度很快。</p>
<p>3、有更好的二级缓存机制，可以使用第三方缓存。</p>
<p>4、数据库移植性良好。</p>
<p>5、hibernate拥有完整的日志系统，hibernate日志系统非常健全，涉及广泛，包括sql记录、关系异常、优化警告、缓存提示、脏数据警告等</p>
<p>Hibernate的缺点：</p>
<p>1、学习门槛高，精通门槛更高，程序员如何设计O/R映射，在性能和对象模型之间如何取得平衡，以及怎样用好Hibernate方面需要的经验和能力都很强才行</p>
<p>2、hibernate的sql很多都是自动生成的，无法直接维护sql；虽然有hql查询，但功能还是不及sql强大，见到报表等变态需求时，hql查询要虚，也就是说hql查询是有局限的；hibernate虽然也支持原生sql查询，但开发模式上却与orm不同，需要转换思维，因此使用上有些不方便。总之写sql的灵活度上hibernate不及mybatis。</p>
<p>Mybatis的优点：</p>
<p>1、易于上手和掌握，提供了数据库查询的自动对象绑定功能，而且延续了很好的SQL使用经验，对于没有那么高的对象模型要求的项目来说，相当完美。</p>
<p>2、sql写在xml里，便于统一管理和优化， 解除sql与程序代码的耦合。</p>
<p>3、提供映射标签，支持对象与数据库的orm字段关系映射</p>
<p>4、 提供对象关系映射标签，支持对象关系组建维护</p>
<p>5、提供xml标签，支持编写动态sql。</p>
<p>6、速度相对于Hibernate的速度较快</p>
<p>Mybatis的缺点：</p>
<p>1、关联表多时，字段多的时候，sql工作量很大。</p>
<p>2、sql依赖于数据库，导致数据库移植性差。</p>
<p>3、由于xml里标签id必须唯一，导致DAO中方法不支持方法重载。</p>
<p>4、对象关系映射标签和字段映射标签仅仅是对映射关系的描述，具体实现仍然依赖于sql。</p>
<p>5、DAO层过于简单，对象组装的工作量较大。</p>
<p>6、不支持级联更新、级联删除。</p>
<p>7、Mybatis的日志除了基本记录功能外，其它功能薄弱很多。</p>
<p>8、编写动态sql时,不方便调试，尤其逻辑复杂时。</p>
<p>9、提供的写动态sql的xml标签功能简单，编写动态sql仍然受限，且可读性低。</p>
<h2> mybatis中#{}和${}的区别是什么？</h2>
<p>a、#{}是预编译处理，${} 是字符串替换。</p>
<p>b、Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的 set 方法来赋值；</p>
<p>c、Mybatis 在处理${}时，就是把${}替换成变量的值。</p>
<p>d、使用#{}可以有效的防止 SQL 注入，提高系统安全性</p>
<h2> 简述一下mybatis插件运行原理及开发流程？</h2>
<p>mybatis只支持针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这四种接口的插件，mybatis使用jdk的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这四种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke方法，拦截那些你指定需要拦截的方法。</p>
<p>编写插件：实现Mybatis的Interceptor接口并复写intercept方法啊，然后给插件编写注解，指定要拦截哪一个接口的哪些方法，在配置文件中配置编写的插件即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>索引的基本原理</p>
<p>1、为什么要有索引?
一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。
2、什么是索引？
索引在MySQL中也叫是一种“键”，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能
非常关键，尤其是当表中的数据量越来越大时，索引对于性能的影响愈发重要。
索引优化应该是对查询性能优化最有效的手段了。索引能够轻易将查询性能提高好几个数量级。
索引相当于字典的音序表，如果要查某个字，如果不使用音序表，则需要从几百页中逐页去查。</p>
<p>3、索引的原理</p>
<p>索引的目的在于提高查询效率，与我们查阅图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小节，然后找到页数。相似的例子还有：查字典，查火车车次，飞机航班等</p>
<p>本质都是：通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</p>
<p>数据库也是一样，但显然要复杂的多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)
等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段…这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？按照搜索树的模型，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的。而数据库实现比较复杂，一方面数据是保存在磁盘上的，另外一方面为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p>
<p>4、索引的数据结构</p>
<p>MySQL主要用到两种结构：B+ Tree索引和Hash索引
Inodb存储引擎 默认是 B+Tree索引
Memory 存储引擎 默认 Hash索引；
MySQL中，只有Memory(Memory表只存在内存中，断电会消失，适用于临时表)
存储引擎显示支持Hash索引，是Memory表的默认索引类型，尽管Memory表也可以使用B+Tree索引。Hash索引把数据以hash形式组织起来，因此当查找某一条记录的时候，速度非常快。但是因为hash结构，每个键只对应一个值，而且是散列的方式分布。所以它并不支持范围查找和排序等功能。
B+Tree是mysql使用最频繁的一个索引数据结构，是InnoDB和MyISAM存储引擎模式的索引类型。相对Hash索引，B+Tree在查找单条记录的速度比不上Hash索引，但是因为更适合排序等操作，所以它更受欢迎。毕竟不可能只对数据库进行单条记录的操作。
对比：
hash类型的索引：查询单条快，范围查询慢
btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</p>
<h2> mysql聚簇和非聚簇索引的区别是什么？</h2>
<p>mysql的索引类型跟存储引擎是相关的，innodb存储引擎数据文件跟索引文件全部放在ibd文件中，而myisam的数据文件放在myd文件中，索引放在myi文件中，其实区分聚簇索引和非聚簇索引非常简单，只要判断数据跟索引是否存储在一起就可以了。</p>
<p>​
innodb存储引擎在进行数据插入的时候，数据必须要跟索引放在一起，如果有主键就使用主键，没有主键就使用唯一键，没有唯一键就使用6字节的rowid，因此跟数据绑定在一起的就是聚簇索引，而为了避免数据冗余存储，其他的索引的叶子节点中存储的都是聚簇索引的key值，因此innodb中既有聚簇索引也有非聚簇索引，而myisam中只有非聚簇索引。</p>
<h2> mysql索引结构有哪些，各自的优劣是什么？</h2>
<p>索引的数据结构和具体存储引擎的实现有关，mysql中使用较多的索引有hash索引，B+树索引，innodb的索引实现为B+树，memory存储引擎为hash索引。</p>
<p>B+树是一个平衡的多叉树，从根节点到每个叶子节点的高度差值不超过1，而且同层级的二节点间有指针相关连接，在B+树上的常规检索，从根节点到叶子节点的搜索效率基本相当，不会出现大幅波动，而且基于索引的顺序扫描时，也可以利用双向指针快速左右移动，效率非常高。因为，B+树索引被广泛应用于数据库、文件系统等场景。</p>
<p>哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。</p>
<p>如果是等值查询，那么哈希索引明显有绝对优势，因为只需要经过一次算法即可找到相应的键值，前提是键值都是唯一的。如果键值不是唯一的，就需要先找到该键所在位置，然后再根据链表往后扫描，知道找到对应的数据</p>
<p>如果是范围查询检索，这时候哈徐索引就毫无用武之地了，因为原先是有序的键值，经过哈希算法后，有可能变成不连续的了，就没办法再利用索引完成范围查询检索</p>
<p>哈希所有也没办法利用索引完成排序，以及like这样的部分模糊查询</p>
<p>哈希索引也不支持多列联合索引的最左匹配规则</p>
<p>B+树索引的关键字检索效率比较平均，不像B树那样波动大，在有大量重复键值情况下，哈希索引的效率也是极低的，因此存在哈希碰撞问题。</p>
<h2> 索引的设计原则有哪些？</h2>
<p>在进行索引设计的时候，应该保证索引字段占用的空间越小越好，这只是一个大的方向，还有一些细节点需要注意下：</p>
<p>​ 1、适合索引的列是出现在where字句中的列，或者连接子句中指定的列</p>
<p>​ 2、基数较小的表，索引效果差，没必要创建索引</p>
<p>​ 3、在选择索引列的时候，越短越好，可以指定某些列的一部分，没必要用全部字段的值</p>
<p>​ 4、不要给表中的每一个字段都创建索引，并不是索引越多越好</p>
<p>​ 5、定义有外键的数据列一定要创建索引</p>
<p>​ 6、更新频繁的字段不要有索引</p>
<p>​ 7、创建索引的列不要过多，可以创建组合索引，但是组合索引的列的个数不建议太多</p>
<p>​ 8、大文本、大对象不要创建索引</p>
<h2> mysql锁的类型有哪些？</h2>
<p>基于锁的属性分类：共享锁、排他锁。</p>
<p>基于锁的粒度分类：行级锁（innodb ）、表级锁（ innodb 、myisam）、页级锁（ innodb引擎）、记录锁、间隙锁、临键锁。</p>
<p>基于锁的状态分类：意向共享锁、意向排它锁。</p>
<p>共享锁（share lock）： 共享锁又称读锁，简称 S
锁；当一个事务为数据加上读锁之后，其他事务只能对该数据加读锁，而不能对数据加写锁，直到所有的读锁释放之后其他事务才能对其进行加持写锁。共享锁的特性主要是为了支持并发的读取数据，读取数据的时候不支持修改，避免出现重复读的问题。</p>
<p>排他锁（exclusive lock）：排他锁又称写锁，简称 X
锁；当一个事务为数据加上写锁时，其他请求将不能再为数据加任何锁，直到该锁释放之后，其他事务才能对数据进行加锁。排他锁的目的是在数据修改时候，不允许其他人同时修改，也不允许其他人读取，避免了出现脏数据和脏读的问题。</p>
<p>表锁（table lock）：表锁是指上锁的时候锁住的是整个表，当下一个事务访问该表的时候，必须等前一个事务释放了锁才能进行对表进行访问；特点：粒度大，加锁简单，容易冲突；</p>
<p>行锁：行锁是指上锁的时候锁住的是表的某一行或多行记录，其他事务访问同一张表时，只有被锁住的记录不能访问，其他的记录可正常访问，特点：粒度小，加锁比表锁麻烦，不容易冲突，相比表锁支持的并发要高</p>
<p>记录锁（Record lock）:
记录锁也属于行锁中的一种，只不过记录锁的范围只是表中的某一条记录，记录锁是说事务在加锁后锁住的只是表的某一条记录，加了记录锁之后数据可以避免数据在查询的时候被修改的重复读问题，也避免了在修改的事务未提交前被其他事务读取的脏读问题</p>
<p>页锁：页级锁是 MysQL
中锁定粒度介于行级锁和表级锁中间的一种锁．表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。特点：开销和加锁时间界于表锁和行锁之间，会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>
<p>间隙锁：是属于行锁的一种，间隙锁是在事务加锁后其锁住的是表记录的某一个区间，当表的相邻ID之间出现空隙则会形成一个区间，遵循左开右闭原则。范围查询并且查询未命中记录，查询条件必须命中索引、间隙锁只会出现在REPEATABLE_READ（重复读）的事务级别中。</p>
<p>临键锁（Next-Key lock)：也属于行锁的一种，并且它是INNODB的行锁默认算法，总结来说它就是记录锁和间隙锁的组合，临键锁会把查询出来的记录锁住，同时也会把该范围查询内的所有间隙空间也会锁住，再之它会把相邻的下一个区间也会锁住。</p>
<h2> mysql执行计划怎么看？</h2>
<p>在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。</p>
<p>​ 可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。</p>
<p>​ 官网地址： <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="noopener noreferrer">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a></p>
<p>1、执行计划中包含的信息</p>
<table>
<thead>
<tr>
<th>Column</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>The <code>SELECT</code> identifier</td>
</tr>
<tr>
<td>select_type</td>
<td>The <code>SELECT</code> type</td>
</tr>
<tr>
<td>table</td>
<td>The table for the output row</td>
</tr>
<tr>
<td>partitions</td>
<td>The matching partitions</td>
</tr>
<tr>
<td>type</td>
<td>The join type</td>
</tr>
<tr>
<td>possible_keys</td>
<td>The possible indexes to choose</td>
</tr>
<tr>
<td>key</td>
<td>The index actually chosen</td>
</tr>
<tr>
<td>key_len</td>
<td>The length of the chosen key</td>
</tr>
<tr>
<td>ref</td>
<td>The columns compared to the index</td>
</tr>
<tr>
<td>rows</td>
<td>Estimate of rows to be examined</td>
</tr>
<tr>
<td>filtered</td>
<td>Percentage of rows filtered by table condition</td>
</tr>
<tr>
<td>extra</td>
<td>Additional information</td>
</tr>
</tbody>
</table>
<p><strong>id</strong></p>
<p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p>
<p>id号分为三种情况：</p>
<p>​ 1、如果id相同，那么执行顺序从上到下</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2、如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 3、id相同和不同的，同时存在：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>select_type</strong></p>
<p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p>
<table>
<thead>
<tr>
<th><code>select_type</code> Value</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>SIMPLE</td>
<td>Simple SELECT (not using UNION or subqueries)</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>Outermost SELECT</td>
</tr>
<tr>
<td>UNION</td>
<td>Second or later SELECT statement in a UNION</td>
</tr>
<tr>
<td>DEPENDENT UNION</td>
<td>Second or later SELECT statement in a UNION, dependent on outer query</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>Result of a UNION.</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>First SELECT in subquery</td>
</tr>
<tr>
<td>DEPENDENT SUBQUERY</td>
<td>First SELECT in subquery, dependent on outer query</td>
</tr>
<tr>
<td>DERIVED</td>
<td>Derived table</td>
</tr>
<tr>
<td>UNCACHEABLE SUBQUERY</td>
<td>A subquery for which the result cannot be cached and must be re-evaluated for each row of the outer query</td>
</tr>
<tr>
<td>UNCACHEABLE UNION</td>
<td>The second or later select in a UNION that belongs to an uncacheable subquery (see UNCACHEABLE SUBQUERY)</td>
</tr>
</tbody>
</table>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>table</strong></p>
<p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集
1、如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</p>
<p>​ 2、表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</p>
<p>​ 3、当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</p>
<p><strong>type</strong></p>
<p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p>
<p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt;
index &gt; ALL</p>
<p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>possible_keys</strong></p>
<p>​ 显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>key</strong></p>
<p>​ 实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>key_len</strong></p>
<p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ref</strong></p>
<p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>rows</strong></p>
<p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>extra</strong></p>
<p>包含额外的信息。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 事务的基本特性是什么？</h2>
<p>数据库事务的几个特性：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation) 和持久性(Durabilily),简称就是ACID;</p>
<ol>
<li>原子性（Atomicity）
一系列的操作整体不可拆分，要么同时成功，要么同时失败</li>
<li>一致性（Consistency）
数据在事务的前后，业务整体一致。 ■转账。A:1000; B:1000;转200事务成功;A: 800B: 1200</li>
<li>隔离性（Isolation）
事务之间互相隔离。
隔离性意味着事务必须在不干扰其他进程或事务的前提下独立执行。换言之，在事务或工作单元执行完毕之前，其所访问的数据不能受系统其他部分的影响。</li>
<li>持久性（Durability）
一旦事务成功，数据一定会落盘在数据库</li>
</ol>
<h2> MySQL的隔离级别有哪些？</h2>
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DEFAULT</td>
<td style="text-align:left">使用底层数据存储的默认隔离级别。 所有其他级别对应于 JDBC 隔离级别。</td>
</tr>
<tr>
<td style="text-align:center">READ_UNCOMMITTED</td>
<td style="text-align:left">指示可能发生**</td>
</tr>
<tr>
<td style="text-align:center">脏读**的常量。 此级别允许由一个事务更改的行在提交该行中的任何更改之前被另一个事务读取（“脏读”）。 如果任何更改被回滚，则第二个事务将检索到无效行。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">READ_COMMITTED</td>
<td style="text-align:left">一个事务可以读取另一个已提交的事务，多次读取会造成不一样的结果，此现象称为**</td>
</tr>
<tr>
<td style="text-align:center">不可重复读问题**，Oracle和SQL Server的默认隔离级别</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"><strong>REPEATABLE_READ</strong></td>
<td style="text-align:left">表示防止脏读的常量；可能会发生<strong>幻读</strong>。此级别仅禁止事务读取其中包含未提交更改的行。*MySQL</td>
</tr>
<tr>
<td style="text-align:center">默认的隔离级别*</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">SERIALIZABLE</td>
<td style="text-align:left">指示防止脏读、不可重复读和幻读的常量。该级别包括ISOLATION_REPEATABLE_READ的禁止，并进一步禁止这样一种情况，即一个事务读取满足WHERE条件的所有行，第二个事务插入满足WHERE条件的行，第一个事务为相同条件重新读取，检索额外的“第二次阅读中的幻影”行。</td>
</tr>
</tbody>
</table>
<p><a href="#%E8%84%8F%E8%AF%BB%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E3%80%81%E8%99%9A%E8%AF%BB-%E5%B9%BB%E8%AF%BB">脏读、不可重复读、虚读（幻读）</a></p>
<h2> 怎么处理MySQL的慢查询？</h2>
<p>1、开启慢查询日志，准确定位到哪个sql语句出现了问题</p>
<p>2、分析sql语句，看看是否load了额外的数据，可能是查询了多余的行并且抛弃掉了，可能是加载了许多结果中并不需要的列，对语句进行分析以及重写</p>
<p>3、分析语句的执行计划，然后获得其使用索引的情况，之后修改语句或者修改索引，使得语句可以尽可能的命中索引</p>
<p>4、如果对语句的优化已经无法进行，可以考虑表中的数据量是否太大，如果是的话可以进行横向或者纵向的分表。</p>
<h2> ACID是靠什么保证的？</h2>
<p>原子性由undolog日志来保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sql</p>
<p>一致性是由其他三大特性保证，程序代码要保证业务上的一致性</p>
<p>隔离性是由MVCC来保证</p>
<p>持久性由redolog来保证，mysql修改数据的时候会在redolog中记录一份日志数据，就算数据没有保存成功，只要日志保存成功了，数据仍然不会丢失</p>
<h2> 什么是MVCC？</h2>
<p>1、MVCC</p>
<p>​ MVCC，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p>
<p>​ MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</p>
<p>2、当前读</p>
<p>​ 像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)
这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p>
<p>3、快照读（提高数据库的并发查询能力）</p>
<p>​
像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</p>
<p>4、当前读、快照读、MVCC关系</p>
<p>​ MVCC多版本并发控制指的是维持一个数据的多个版本，使得读写操作没有冲突，快照读是MySQL为实现MVCC的一个非阻塞读功能。MVCC模块在MySQL中的具体实现是由三个隐式字段，undo日志、read view三个组件来实现的。</p>
<h2> MVCC解决的问题是什么？</h2>
<p>数据库并发场景有三种，分别为：</p>
<p>​ 1、读读：不存在任何问题，也不需要并发控制</p>
<p>​ 2、读写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读、幻读、不可重复读</p>
<p>​ 3、写写：有线程安全问题，可能存在更新丢失问题</p>
<p>​ MVCC是一种用来解决读写冲突的无锁并发控制，也就是为事务分配单项增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照，所以MVCC可以为数据库解决一下问题：</p>
<p>​ 1、在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能</p>
<p>​ 2、解决脏读、幻读、不可重复读等事务隔离问题，但是不能解决更新丢失问题</p>
<h2> MVCC实现原理是什么？</h2>
<p>mvcc的实现原理主要依赖于记录中的三个隐藏字段，undolog，read view来实现的。</p>
<p>​        <strong>隐藏字段</strong></p>
<p>​ 每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID,DB_ROLL_PTR,DB_ROW_ID等字段</p>
<p>​ DB_TRX_ID</p>
<p>​ 6字节，最近修改事务id，记录创建这条记录或者最后一次修改该记录的事务id</p>
<p>​ DB_ROLL_PTR</p>
<p>​ 7字节，回滚指针，指向这条记录的上一个版本,用于配合undolog，指向上一个旧版本</p>
<p>​ DB_ROW_JD</p>
<p>​ 6字节，隐藏的主键，如果数据表没有主键，那么innodb会自动生成一个6字节的row_id</p>
<p>​ 记录如图所示：</p>
<p>​ 在上图中，DB_ROW_ID是数据库默认为该行记录生成的唯一隐式主键，DB_TRX_ID是当前操作该记录的事务ID，DB_ROLL_PTR是一个回滚指针，用于配合undo日志，指向上一个旧版本</p>
<p>​        <strong>undo log</strong></p>
<p>​ undolog被称之为回滚日志，表示在进行insert，delete，update操作的时候产生的方便回滚的日志</p>
<p>​ 当进行insert操作的时候，产生的undolog只在事务回滚的时候需要，并且在事务提交之后可以被立刻丢弃</p>
<p>​
当进行update和delete操作的时候，产生的undolog不仅仅在事务回滚的时候需要，在快照读的时候也需要，所以不能随便删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除（当数据发生更新和删除操作的时候都只是设置一下老记录的deleted_bit，并不是真正的将过时的记录删除，因为为了节省磁盘空间，innodb有专门的purge线程来清除deleted_bit为true的记录，如果某个记录的deleted_id为true，并且DB_TRX_ID相对于purge线程的read
view 可见，那么这条记录一定时可以被清除的）</p>
<p>​        <strong>下面我们来看一下undolog生成的记录链</strong></p>
<p>​ 1、假设有一个事务编号为1的事务向表中插入一条记录，那么此时行数据的状态为：</p>
<p>​ 2、假设有第二个事务编号为2对该记录的name做出修改，改为lisi</p>
<p>​ 在事务2修改该行记录数据时，数据库会对该行加排他锁</p>
<p>​ 然后把该行数据拷贝到undolog中，作为 旧记录，即在undolog中有当前行的拷贝副本</p>
<p>​ 拷贝完毕后，修改该行name为lisi，并且修改隐藏字段的事务id为当前事务2的id，回滚指针指向拷贝到undolog的副本记录中事务提交后，释放锁</p>
<p>​ 3、假设有第三个事务编号为3对该记录的age做了修改，改为32</p>
<p>​ 在事务3修改该行数据的时，数据库会对该行加排他锁</p>
<p>​ 然后把该行数据拷贝到undolog中，作为旧纪录，发现该行记录已经有undolog了，那么最新的旧数据作为链表的表头，插在该行记录的undolog最前面</p>
<p>​ 修改该行age为32岁，并且修改隐藏字段的事务id为当前事务3的id，回滚指针指向刚刚拷贝的undolog的副本记录</p>
<p>​ 事务提交，释放锁</p>
<p>​ 从上述的一系列图中，大家可以发现，不同事务或者相同事务的对同一记录的修改，会导致该记录的undolog生成一条记录版本线性表，即链表，undolog的链首就是最新的旧记录，链尾就是最早的旧记录。</p>
<p>​        <strong>Read View</strong></p>
<p>​ 上面的流程如果看明白了，那么大家需要再深入理解下read view的概念了。</p>
<p>​ Read View是事务进行快照读操作的时候生产的读视图，在该事务执行快照读的那一刻，会生成一个数据系统当前的快照，记录并维护系统当前活跃事务的id，事务的id值是递增的。</p>
<p>​ 其实Read View的最大作用是用来做可见性判断的，也就是说当某个事务在执行快照读的时候，对该记录创建一个Read
View的视图，把它当作条件去判断当前事务能够看到哪个版本的数据，有可能读取到的是最新的数据，也有可能读取的是当前行记录的undolog中某个版本的数据</p>
<p>​ Read View遵循的可见性算法主要是将要被修改的数据的最新记录中的DB_TRX_ID（当前事务id）取出来，与系统当前其他活跃事务的id去对比，如果DB_TRX_ID跟Read
View的属性做了比较，不符合可见性，那么就通过DB_ROLL_PTR回滚指针去取出undolog中的DB_TRX_ID做比较，即遍历链表中的DB_TRX_ID，直到找到满足条件的DB_TRX_ID,这个DB_TRX_ID所在的旧记录就是当前事务能看到的最新老版本数据。</p>
<p>​ Read View的可见性规则如下所示：</p>
<p>​ 首先要知道Read View中的三个全局属性：</p>
<p>​ trx_list:一个数值列表，用来维护Read View生成时刻系统正活跃的事务ID（1,2,3）</p>
<p>​ up_limit_id:记录trx_list列表中事务ID最小的ID（1）</p>
<p>​ low_limit_id:Read View生成时刻系统尚未分配的下一个事务ID，（4）</p>
<p>​ 具体的比较规则如下：</p>
<ol>
<li>首先比较DB_TRX_ID &lt; up_limit_id,如果小于，则当前事务能看到DB_TRX_ID所在的记录，如果大于等于进入下一个判断</li>
<li>接下来判断DB_TRX_ID &gt;= low_limit_id,如果大于等于则代表DB_TRX_ID所在的记录在Read View生成后才出现的，那么对于当前事务肯定不可见，如果小于，则进入下一步判断</li>
<li>判断DB_TRX_ID是否在活跃事务中，如果在，则代表在Read View生成时刻，这个事务还是活跃状态，还没有commit，修改的数据，当前事务也是看不到，如果不在，则说明这个事务在Read
View生成之前就已经开始commit，那么修改的结果是能够看见的。</li>
</ol>
<p>7、MVCC的整体处理流程</p>
<p>假设有四个事务同时在执行，如下图所示：</p>
<table>
<thead>
<tr>
<th>事务1</th>
<th>事务2</th>
<th>事务3</th>
<th>事务4</th>
</tr>
</thead>
<tbody>
<tr>
<td>事务开始</td>
<td>事务开始</td>
<td>事务开始</td>
<td>事务开始</td>
</tr>
<tr>
<td>......</td>
<td>......</td>
<td>......</td>
<td>修改且已提交</td>
</tr>
<tr>
<td>进行中</td>
<td>快照读</td>
<td>进行中</td>
<td></td>
</tr>
<tr>
<td>......</td>
<td>......</td>
<td>......</td>
<td></td>
</tr>
</tbody>
</table>
<p>从上述表格中，我们可以看到，当事务2对某行数据执行了快照读，数据库为该行数据生成一个Read View视图，可以看到事务1和事务3还在活跃状态，事务4在事务2快照读的前一刻提交了更新，所以，在Read
View中记录了系统当前活跃事务1，3，维护在一个列表中。同时可以看到up_limit_id的值为1，而low_limit_id为5，如下图所示：</p>
<p>在上述的例子中，只有事务4修改过该行记录，并在事务2进行快照读前，就提交了事务，所以该行当前数据的undolog如下所示：</p>
<p>当事务2在快照读该行记录的是，会拿着该行记录的DB_TRX_ID去跟up_limit_id,lower_limit_id和活跃事务列表进行比较，判读事务2能看到该行记录的版本是哪个。</p>
<p>具体流程如下：先拿该行记录的事务ID（4）去跟Read
View中的up_limit_id相比较，判断是否小于，通过对比发现不小于，所以不符合条件，继续判断4是否大于等于low_limit_id,通过比较发现也不大于，所以不符合条件，判断事务4是否处理trx_list列表中，发现不再次列表中，那么符合可见性条件，所以事务4修改后提交的最新结果对事务2
的快照是可见的，因此，事务2读取到的最新数据记录是事务4所提交的版本，而事务4提交的版本也是全局角度的最新版本。如下图所示：</p>
<p>当上述的内容都看明白了的话，那么大家就应该能够搞清楚这几个核心概念之间的关系了，下面我们讲一个不同的隔离级别下的快照读的不同。</p>
<p>8、RC、RR级别下的InnoDB快照读有什么不同</p>
<p>因为Read View生成时机的不同，从而造成RC、RR级别下快照读的结果的不同</p>
<ol>
<li>在RR级别下的某个事务的对某条记录的第一次快照读会创建一个快照即Read View,将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个Read
View,所以只要当前事务在其他事务提交更新之前使用过快照读，那么之后的快照读使用的都是同一个Read View,所以对之后的修改不可见</li>
<li>在RR级别下，快照读生成Read View时，Read View会记录此时所有其他活动和事务的快照，这些事务的修改对于当前事务都是不可见的，而早于Read View创建的事务所做的修改均是可见</li>
<li>在RC级别下，事务中，每次快照读都会新生成一个快照和Read View,这就是我们在RC级别下的事务中可以看到别的事务提交的更新的原因。</li>
</ol>
<p><strong>总结：在RC隔离级别下，是每个快照读都会生成并获取最新的Read View,而在RR隔离级别下，则是同一个事务中的第一个快照读才会创建Read View，之后的快照读获取的都是同一个Read View.</strong></p>
<h2> 什么是mysql的主从复制？</h2>
<p>MySQL 主从复制是指数据可以从一个MySQL数据库服务器主节点复制到一个或多个从节点。MySQL
默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据库中的所有数据库或者特定的数据库，或者特定的表。</p>
<h2> mysql为什么需要主从同步？</h2>
<p>1、在业务复杂的系统中，有这么一个情景，有一句sql语句需要锁表，导致暂时不能使用读的服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，这样，即使主库出现了锁表的情景，通过读从库也可以保证业务的正常运作。</p>
<p>2、做数据的热备</p>
<p>3、架构的扩展。业务量越来越大，I/O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能。</p>
<h2> mysql复制原理是什么？</h2>
<p>（1）master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中；</p>
<p>（2）slave服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I/OThread请求master二进制事件</p>
<p>（3）同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/OThread和SQLThread将进入睡眠状态，等待下一次被唤醒。</p>
<p>也就是说：</p>
<ul>
<li>从库会生成两个线程,一个I/O线程,一个SQL线程;</li>
<li>I/O线程会去请求主库的binlog,并将得到的binlog写到本地的relay-log(中继日志)文件中;</li>
<li>主库会生成一个log dump线程,用来给从库I/O线程传binlog;</li>
<li>SQL线程,会读取relay log文件中的日志,并解析成sql语句逐一执行;</li>
</ul>
<p>注意：</p>
<p>1--master将操作语句记录到binlog日志中，然后授予slave远程连接的权限（master一定要开启binlog二进制日志功能；通常为了数据安全考虑，slave也开启binlog功能）。</p>
<p>2--slave开启两个线程：IO线程和SQL线程。其中：IO线程负责读取master的binlog内容到中继日志relay log里；SQL线程负责从relay
log日志里读出binlog内容，并更新到slave的数据库里，这样就能保证slave数据和master数据保持一致了。</p>
<p>3--Mysql复制至少需要两个Mysql的服务，当然Mysql服务可以分布在不同的服务器上，也可以在一台服务器上启动多个服务。</p>
<p>4--Mysql复制最好确保master和slave服务器上的Mysql版本相同（如果不能满足版本一致，那么要保证master主节点的版本低于slave从节点的版本）</p>
<p>5--master和slave两节点间时间需同步</p>
<p>具体步骤：</p>
<ol>
<li>
<p>从库通过手工执行change master to 语句连接主库，提供了连接的用户一切条件（user 、password、port、ip），并且让从库知道，二进制日志的起点位置（file名 position 号）； start
slave</p>
</li>
<li>
<p>从库的IO线程和主库的dump线程建立连接。</p>
</li>
<li>
<p>从库根据change master to 语句提供的file名和position号，IO线程向主库发起binlog的请求。</p>
</li>
<li>
<p>主库dump线程根据从库的请求，将本地binlog以events的方式发给从库IO线程。</p>
</li>
<li>
<p>从库IO线程接收binlog events，并存放到本地relay-log中，传送过来的信息，会记录到master.info中</p>
</li>
<li>
<p>从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info中，默认情况下，已经应用过的relay 会自动被清理purge</p>
</li>
</ol>
<h2> 简述Myisam和Innodb的区别？</h2>
<p>InnoDB：</p>
<ol>
<li>支持事务、外键、行锁，是聚族索引，不存储表的行数，</li>
<li>读的效率低于MYISAM，</li>
<li>写的效率高优于MYISAM，</li>
<li>适合频繁修改以及设计到安全性较高的应用</li>
<li>清空整个表的时候，Innodb是一行一行的删除，。</li>
</ol>
<p>MylSAM：</p>
<ol>
<li>不支持事务、外键；支持行锁，是非聚族索引，存储表的行数，</li>
<li>读的效率优于InnoDB，</li>
<li>写的效率低于InnoDB，</li>
<li>适合查询以及插入为主的应用</li>
<li>清空整个表的时候，MYISAM则会新建表。</li>
</ol>
<p><a href="#mysql%E8%81%9A%E7%B0%87%E5%92%8C%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">#mysql聚簇和非聚簇索引的区别是什么</a></p>
<h2> 简述mysql中索引类型有哪些，以及对数据库的性能的影响？</h2>
<p><strong>普通索引</strong>：允许被索引的数据列包含重复的值</p>
<p><strong>唯一索引</strong>：可以保证数据记录的唯一性</p>
<p><strong>主键索引</strong>：是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字primary key来创建</p>
<p><strong>联合索引</strong>：索引可以覆盖多个数据列</p>
<p><strong>全文索引</strong>：通过建立倒排索引，可以极大的提升检索效率，解决判断字段是否包含的问题，是目前搜索引擎使用的一种关键技术</p>
<p>索引可以极大地提高数据的查询速度</p>
<p>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能</p>
<p>但是会降低插入、删除、更新表的速度，因为在执行这些写操作的时候，还要操作索引文件</p>
<p>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要简历聚簇索引，那么需要的空间就会更大，如果非聚簇索引很多，一旦聚簇索引改变，那么所有非聚簇索引都会跟着变</p>
<h2> 什么是字节码？</h2>
<p>因为JVM针对各种操作系统和平台都进行了定制，无论在什么平台，都可以通过javac命令将一个.java文件编译成固定格式的字节码（.class文件）供JVM使用。之所以被称为字节码，是因为**
.class文件是由十六进制值组成的，JVM以两个十六进制值为一组，就是以字节为单位进行读取**
格式如下</p>
<h2> 字节码的组成结构是什么？</h2>
<p>JVM对字节码的规范是有要求的，要求每一个字节码文件都要有十部分固定的顺序组成，如下图：</p>
<ol>
<li>魔数</li>
</ol>
<p>所有的.class文件的前4个字节都是魔数，魔数以一个固定值：0xCAFEBABE，放在文件的开头，JVM就可以根据这个文件的开头来判断这个文件是否可能是一个.class文件，如果是以这个开头，才会往后执行下面的操作，这个魔数的固定值是Java之父James
Gosling指定的，意为CafeBabe（咖啡宝贝）</p>
<ol start="2">
<li>版本号</li>
</ol>
<p>版本号是魔术之后的4个字节，前两个字节表示次版本号（Minor Version），后两个字节表示主版本号（Major Version），上面的0000 0032，次版本号0000转为十进制是0，主版本号0032
转为十进制50，对应下图的版本映射关系，可以看到对应的java版本号是1.6</p>
<ol start="3">
<li>常量池</li>
</ol>
<p>紧接着主版本号之后的字节为常量池入口，常量池中有两类常量：字面量和符号引用，字面量是代码中申明为Final的常量值，符号引用是如类和接口的全局限定名、字段的名称和描述符、方法的名称和描述符。常量池整体分为两个部分：常量池计数器以及常量池数据区</p>
<ol start="4">
<li>访问标志</li>
</ol>
<p>常量池结束后的两个字节，描述的是类还是接口，以及是否被Public、Abstract、Final等修饰符修饰，JVM规范规定了9种访问标示（Access_Flag）JVM是通过按位或操作来描述所有的访问标示的，比如类的修饰符是Public
Final，则对应的访问修饰符的值为ACC_PUBLIC | ACC_FINAL，即0x0001 | 0x0010=0x0011</p>
<ol start="5">
<li>当前类索引</li>
</ol>
<p>访问标志后的两个字节，描述的是当前类的全限定名，这两个字节保存的值是常量池中的索引值，根据索引值就能在常量池中找到这个类的全限定名</p>
<ol start="6">
<li>父类索引</li>
</ol>
<p>当前类名后的两个字节，描述的父类的全限定名，也是保存的常量池中的索引值</p>
<ol start="7">
<li>接口索引</li>
</ol>
<p>父类名称后的两个字节，是接口计数器，描述了该类或者父类实现的接口数量，紧接着的n个字节是所有接口名称的字符串常量的索引值</p>
<ol start="8">
<li>字段表</li>
</ol>
<p>用于描述类和接口中声明的变量，包含类级别的变量和实例变量，但是不包含方法内部声明的局部变量，字段表也分为两个部分，第一部分是两个字节，描述字段个数，第二部分是每个字段的详细信息fields_info</p>
<ol start="9">
<li>方法表</li>
</ol>
<p>字段表结束后为方法表，方法表也分为两个部分，第一个部分是两个字节表述方法的个数，第二部分是每个方法的详细信息
方法的访问信息比较复杂，包括方法的访问标志、方法名、方法的描述符和方法的属性：</p>
<ol start="10">
<li>附加属性</li>
</ol>
<p>字节码的最后一部分，该项存放了在该文件中类或接口所定义属性的基本信息。</p>
<h2> class初始化过程是什么？</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JVM内存模型如何分配的？</h2>
<h2> JVM性能调优的原则有哪些？</h2>
<ol>
<li>多数的Java应用不需要在服务器上进行GC优化，虚拟机内部已有很多优化来保证应用的稳定运行，所以不要为了调优而调优，不当的调优可能适得其反</li>
<li>在应用上线之前，先考虑将机器的JVM参数设置到最优（适合）</li>
<li>在进行GC优化之前，需要确认项目的架构和代码等已经没有优化空间。我们不能指望一个系统架构有缺陷或者代码层次优化没有穷尽的应用，通过GC优化令其性能达到一个质的飞跃</li>
<li>GC优化是一个系统而复杂的工作，没有万能的调优策略可以满足所有的性能指标。GC优化必须建立在我们深入理解各种垃圾回收器的基础上，才能有事半功倍的效果</li>
<li>处理吞吐量和延迟问题时，垃圾处理器能使用的内存越大，即java堆空间越大垃圾收集效果越好，应用运行也越流畅。这称之为GC内存最大化原则</li>
<li>在这三个属性（吞吐量、延迟、内存）中选择其中两个进行jvm调优，称之为GC调优3选2</li>
</ol>
<h2> 什么情况下需要JVM调优？</h2>
<ul>
<li>Heap内存（老年代）持续上涨达到设置的最大内存值</li>
<li>Full GC 次数频繁</li>
<li>GC 停顿（Stop World）时间过长（超过1秒，具体值按应用场景而定）</li>
<li>应用出现OutOfMemory 等内存异常</li>
<li>应用出现OutOfDirectMemoryError等内存异常（ failed to allocate 16777216 byte(s) of direct memory (used: 1056964615, max:
1073741824)）</li>
<li>应用中有使用本地缓存且占用大量内存空间</li>
<li>系统吞吐量与响应性能不高或下降</li>
<li>应用的CPU占用过高不下或内存占用过高不下</li>
</ul>
<h2> 在JVM调优时，你关注哪些指标？</h2>
<ol>
<li><strong>吞吐量：</strong> 用户代码时间 / （用户代码执行时间 + 垃圾回收时间）。是评价垃圾收集器能力的重要指标之一，是不考虑垃圾收集引起的停顿时间或内存消耗，垃圾收集器能支撑应用程序达到的最高性能指标。吞吐量越高算法越好。</li>
<li><strong>低延迟：</strong> STW越短，响应时间越好。评价垃圾收集器能力的重要指标，度量标准是缩短由于垃圾收集引起的停顿时间或完全消除因垃圾收集所引起的停顿，避免应用程序运行时发生抖动。暂停时间越短算法越好</li>
<li>在设计（或使用）GC 算法时，我们必须确定我们的目标：一个 GC 算法只可能针对两个目标之一（即只专注于最大吞吐量或最小暂停时间），或尝试找到一个二者的折衷</li>
<li>MinorGC尽可能多的收集垃圾对象。我们把这个称作MinorGC原则，遵守这一原则可以降低应用程序FullGC 的发生频率。FullGC 较耗时，是应用程序无法达到延迟要求或吞吐量的罪魁祸首</li>
<li>堆大小调整的着手点、分析点：</li>
</ol>
<ul>
<li>统计Minor GC 持续时间</li>
<li>统计Minor GC 的次数</li>
<li>统计Full GC的最长持续时间</li>
<li>统计最差情况下Full GC频率</li>
<li>统计GC持续时间和频率对优化堆的大小是主要着手点</li>
<li>我们按照业务系统对延迟和吞吐量的需求，在按照这些分析我们可以进行各个区大小的调整</li>
</ul>
<ol start="7">
<li>一般来说吞吐量优先的垃圾回收器：-XX:+UseParallelGC -XX:+UseParallelOldGC，即常规的（PS/PO）</li>
<li>响应时间优先的垃圾回收器：CMS、G1</li>
</ol>
<h2> JVM常用参数有哪些？</h2>
<ol>
<li>
<p><strong>Xms</strong> 是指设定程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂时间变慢</p>
</li>
<li>
<p><strong>Xmx</strong> 是指设定程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常</p>
</li>
<li>
<p><strong>Xss</strong> 是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程大约需要占用多少内存，可能会有多少线程同时运行等</p>
</li>
<li>
<p><strong>-Xmn、-XX:NewSize/-XX:MaxNewSize、-XX:NewRatio</strong></p>
<p>高优先级：-XX:NewSize/-XX:MaxNewSize</p>
<p>中优先级：-Xmn（默认等效 -Xmn=-XX:NewSize=-XX:MaxNewSize=?）</p>
<p>低优先级：-XX:NewRatio</p>
</li>
<li>
<p>如果想在日志中追踪类加载与类卸载的情况，可以使用启动参数  <strong>-XX:TraceClassLoading -XX:TraceClassUnloading</strong></p>
</li>
</ol>
<h2> JVM常用性能调优工具有哪些？</h2>
<ol>
<li>MAT
提示可能的内存泄露的点</li>
<li>jvisualvm</li>
<li>jconsole</li>
<li>Arthas</li>
<li>show-busy-java-threads
<a href="https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#-show-busy-java-threads" target="_blank" rel="noopener noreferrer">https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#-show-busy-java-threads</a></li>
</ol>
<h2> 线上排查问题的一般流程是怎么样的？</h2>
<ol>
<li>
<p>CPU占用过高排查流程</p>
<p>利用 top 命令可以查出占 CPU 最高的的进程pid ，如果pid为 9876</p>
<p>然后查看该进程下占用最高的线程id【top -Hp 9876】</p>
<p>假设占用率最高的线程 ID 为 6900，将其转换为 16 进制形式 (因为 java native 线程以 16 进制形式输出) 【printf '%x\n' 6900】</p>
<p>利用 jstack 打印出 java 线程调用栈信息【jstack 9876 | grep '0x1af4' -A 50 --color】，这样就可以更好定位问题</p>
</li>
<li>
<p>内存占用过高排查流程</p>
<p>查找进程id: 【top -d 2 -c】</p>
<p>查看JVM堆内存分配情况：jmap -heap pid</p>
<p>查看占用内存比较多的对象 jmap -histo pid | head -n 100</p>
<p>查看占用内存比较多的存活对象 jmap -histo:live pid | head -n 100</p>
</li>
</ol>
<h2> 什么情况下，会抛出OOM呢？</h2>
<ul>
<li>JVM98%的时间都花费在内存回收</li>
<li>每次回收的内存小于2%</li>
</ul>
<p>满足这两个条件将触发OutOfMemoryException，这将会留给系统一个微小的间隙以做一些Down之前的操作，比如手动打印Heap Dump。并不是内存被耗空的时候才抛出</p>
<h2> 系统OOM之前都有哪些现象？</h2>
<ul>
<li>每次垃圾回收的时间越来越长，由之前的10ms延长到50ms左右，FullGC的时间也有之前的0.5s延长到4、5s</li>
<li>FullGC的次数越来越多，最频繁时隔不到1分钟就进行一次FullGC</li>
<li>老年代的内存越来越大并且每次FullGC后，老年代只有少量的内存被释放掉</li>
</ul>
<h2> 如何进行堆Dump文件分析？</h2>
<p>可以通过指定启动参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/app/data/dump/heapdump.hpro 在发生OOM的时候自动导出Dump文件</p>
<h2> 如何进行GC日志分析？</h2>
<p>为了方便分析GC日志信息，可以指定启动参数 【-Xloggc: app-gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps】,方便详细地查看GC日志信息</p>
<ol>
<li>使用 【jinfo pid】查看当前JVM堆的相关参数</li>
<li>继续使用 【jstat -gcutil 2315 1s 10】查看10s内当前堆的占用情况</li>
<li>也可以使用【jmap -heap pid】查看当前JVM堆的情况</li>
<li>我们可以继续使用 【jmap -F -histo pid | head -n 20】，查看前20行打印，即查看当前top20的大对象，一般从这里可以发现一些异常的大对象，如果没有，那么可以继续排名前50的大对象，分析</li>
<li>最后使用【jmap -F -dump:file=a.bin pid】，如果dump文件很大，可以压缩一下【tar -czvf a.tar.gz a.bin】</li>
<li>再之后，就是对dump文件进行分析了，使用MAT分析内存泄露</li>
<li>参考案例：  <a href="https://www.lagou.com/lgeduarticle/142372.html" target="_blank" rel="noopener noreferrer">https://www.lagou.com/lgeduarticle/142372.html</a></li>
</ol>
<h2> 线上死锁是如何排查的？</h2>
<ol>
<li>jps 查找一个可能有问题的<strong>进程id</strong></li>
<li>然后执行 【jstack -F <strong>进程id</strong>】</li>
<li>如果环境允许远程连接JVM，可以使用jconsole或者jvisualvm，图形化界面检测是否存在死锁</li>
</ol>
<h2> 线上YGC耗时过长优化方案有哪些？</h2>
<ol>
<li>如果生命周期过长的对象越来越多（比如全局变量或者静态变量等），会导致标注和复制过程的耗时增加</li>
<li>对存活对象标注时间过长：比如重载了Object类的Finalize方法，导致标注Final
Reference耗时过长；或者String.intern方法使用不当，导致YGC扫描StringTable时间过长。可以通过以下参数显示GC处理Reference的耗时-XX:+PrintReferenceGC</li>
<li>长周期对象积累过多：比如本地缓存使用不当，积累了太多存活对象；或者锁竞争严重导致线程阻塞，局部变量的生命周期变长</li>
<li>案例参考： <a href="https://my.oschina.net/lishangzhi/blog/4703942" target="_blank" rel="noopener noreferrer">https://my.oschina.net/lishangzhi/blog/4703942</a></li>
</ol>
<h2> 线上频繁FullGC优化方案有哪些？</h2>
<ol>
<li>线上频繁FullGC一般会有这么几个特征：</li>
</ol>
<ul>
<li>线上多个线程的CPU都超过了100%，通过jstack命令可以看到这些线程主要是垃圾回收线程</li>
<li>通过jstat命令监控GC情况，可以看到Full GC次数非常多，并且次数在不断增加</li>
</ul>
<ol start="2">
<li>排查流程：</li>
</ol>
<ul>
<li>top找到cpu占用最高的一个 <strong>进程id</strong></li>
<li>然后 【top -Hp 进程id】，找到cpu占用最高的 <strong>线程id</strong></li>
<li>【printf "%x\n" <strong>线程id 】</strong>，假设16进制结果为 a</li>
<li>jstack 线程id | grep '0xa' -A 50 --color</li>
<li>如果是正常的用户线程， 则通过该线程的堆栈信息查看其具体是在哪处用户代码处运行比较消耗CPU</li>
<li>如果该线程是 VMThread，则通过 jstat-gcutil命令监控当前系统的GC状况，然后通过 jmapdump:
format=b,file=导出系统当前的内存数据。导出之后将内存情况放到eclipse的mat工具中进行分析即可得出内存中主要是什么对象比较消耗内存，进而可以处理相关代码；正常情况下会发现VM Thread指的就是垃圾回收的线程</li>
<li>再执行【jstat -gcutil  **进程id】,**看到结果，如果FGC的数量很高，且在不断增长，那么可以定位是由于内存溢出导致FullGC频繁，系统缓慢</li>
<li>然后就可以Dump出内存日志，然后使用MAT的工具分析哪些对象占用内存较大，然后找到对象的创建位置，处理即可</li>
</ul>
<ol start="3">
<li>参考案例：<a href="https://mp.weixin.qq.com/s/g8KJhOtiBHWb6wNFrCcLVg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/g8KJhOtiBHWb6wNFrCcLVg</a></li>
</ol>
<h2> 如何进行线上堆外内存泄漏的分析？（Netty尤其居多）</h2>
<ol>
<li>JVM的堆外内存泄露的定位一直是个比较棘手的问题</li>
<li>对外内存的泄漏分析一般都是先从堆内内存分析的过程中衍生出来的。有可能我们分析堆内内存泄露过程中发现，我们计算出来的JVM堆内存竟然大于了整个JVM的<strong>Xmx</strong>的大小，那说明多出来的是堆外内存</li>
<li>如果使用了 Netty 堆外内存，那么可以自行监控堆外内存的使用情况，不需要借助第三方工具，我们是使用的“反射”拿到的堆外内存的情况</li>
<li>逐渐缩小范围，直到 Bug 被找到。当我们确认某个线程的执行带来 Bug 时，可单步执行，可二分执行，定位到某行代码之后，跟到这段代码，然后继续单步执行或者二分的方式来定位最终出 Bug 的代码。这个方法屡试不爽，最后总能找到想要的
Bug</li>
<li>熟练掌握 idea 的调试，让我们的“捉虫”速度快如闪电（“闪电侠”就是这么来的）。这里，最常见的调试方式是<strong>预执行表达式</strong>，以及通过<strong>线程调用栈</strong>，死盯某个对象，就能够掌握这个对象的定义、赋值之类</li>
<li>在使用直接内存的项目中，最好建议配置 -XX:MaxDirectMemorySize，设定一个系统实际可达的最大的直接内存的值，默认的最大直接内存大小等于 -Xmx的值</li>
<li>排查堆外泄露，建议指定启动参数： -XX:NativeMemoryTracking=summary -
Dio.netty.leakDetection.targetRecords=100-Dio.netty.leakDetection.level=PARANOID，后面两个参数是Netty的相关内存泄露检测的级别与采样级别</li>
<li></li>
</ol>
<p>参考案例：<a href="https://tech.meituan.com/2018/10/18/netty-direct-memory-screening.html" target="_blank" rel="noopener noreferrer">https://tech.meituan.com/2018/10/18/netty-direct-memory-screening.html</a></p>
<h2> 线上元空间内存泄露优化方案有哪些？</h2>
<ol>
<li>需要注意的一点是 Java8以及Java8+的JVM已经将永久代废弃了，取而代之的是元空间，且元空间是不是在JVM堆中的，而属于堆外内存，受最大物理内存限制。最佳实践就是我们在启动参数中最好设置上 -XX:
MetaspaceSize=1024m -XX:MaxMetaspaceSize=1024m。具体的值根据情况设置。为避免动态申请，可以直接都设置为最大值</li>
<li></li>
</ol>
<p>元空间主要存放的是类元数据，而且metaspace判断类元数据是否可以回收，是根据加载这些类元数据的Classloader是否可以回收来判断的，只要Classloader不能回收，通过其加载的类元数据就不会被回收。所以线上有时候会出现一种问题，由于框架中，往往大量采用类似ASM、javassist等工具进行字节码增强，生成代理类。如果项目中由主线程频繁生成动态代理类，那么就会导致元空间迅速占满，无法回收</p>
<ol start="3">
<li>具体案例可以参见：<a href="https://zhuanlan.zhihu.com/p/200802910" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/200802910</a></li>
</ol>
<h2> java类加载器有哪些？</h2>
<p><strong>Bootstrap类加载器</strong></p>
<p>启动类加载器主要加载的是JVM自身需要的类，这个类加载使用C++语言实现的，没有父类，是虚拟机自身的一部分，它负责将 <strong>&lt;JAVA_HOME&gt;/lib路径下的核心类库</strong>或**-Xbootclasspath参数指定的路径下的jar包**
加载到内存中，注意必由于虚拟机是按照文件名识别加载jar包的，如rt.jar，如果文件名不被虚拟机识别，即使把jar包丢到lib目录下也是没有作用的(出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头</p>
<p><strong>Extention 类加载器</strong></p>
<p>扩展类加载器是指Sun公司实现的sun.misc.Launcher$ExtClassLoader类，<strong>由Java语言实现的</strong>，父类加载器为null，是Launcher的静态内部类，它负责加载**&lt;JAVA_HOME&gt;
/lib/ext目录下<strong>或者由系统变量</strong>-Djava.ext.dir指定位路径中的类库**，开发者可以直接使用标准扩展类加载器</p>
<p><a href="https://blog.csdn.net/javazejian/article/details/73413292" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/javazejian/article/details/73413292</a></p>
<p><strong>Application类加载器</strong></p>
<p>称应用程序加载器是指 Sun公司实现的sun.misc.Launcher$AppClassLoader。父类加载器为ExtClassLoader，它负责加载<strong>系统类路径java -classpath</strong>或**-D
java.class.path 指定路径下的类库**，也就是我们经常用到的<strong>classpath路径</strong>
，开发者可以直接使用系统类加载器，一般情况下该类加载是程序中默认的类加载器，通过ClassLoader#getSystemClassLoader()方法可以获取到该类加载器</p>
<p><strong>Custom自定义类加载器</strong></p>
<p>应用程序可以自定义类加载器，父类加载器为AppClassLoader</p>
<h2> 双亲委派机制是什么？</h2>
<p>双亲委派机制</p>
<p>双亲委派模式是在Java 1.2后引入的，其工作原理的是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个<strong>请求委托给父类的加载器去执行</strong>，如果父类加载器还存在其父类加载器，则<strong>进一步向上委托，依次递归</strong>，**
请求最终将到达顶层的启动类加载器**，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</p>
<p>双亲委派的好处</p>
<ul>
<li>每一个类都只会被加载一次，避免了重复加载</li>
<li>每一个类都会被尽可能的加载（从引导类加载器往下，每个加载器都可能会根据优先次序尝试加载它）</li>
<li>有效避免了某些恶意类的加载（比如自定义了Java.lang.Object类，一般而言在双亲委派模型下会加载系统的Object类而不是自定义的Object类）</li>
</ul>
<p>另外，可以多讲一下，如何破坏双亲委派模型</p>
<ol>
<li>双亲委派模型的第一次“被破坏”是重写自定义加载器的loadClass(),jdk不推荐。一般都只是重写findClass()，这样可以保持双亲委派机制.而loadClass方法加载规则由自己定义，就可以随心所欲的加载类</li>
<li>双亲委派模型的第二次“被破坏”是ServiceLoader和Thread.setContextClassLoader()
。即线程上下文类加载器（contextClassLoader）。双亲委派模型很好地解决了各个类加载器的基础类统一问题(越基础的类由越上层的加载器进行加载)
，基础类之所以被称为“基础”，是因为它们总是作为被调用代码调用的API。但是，如果基础类又要调用用户的代码，那该怎么办呢？线程上下文类加载器就出现了。</li>
</ol>
<ul>
<li>SPI。这个类加载器可以通过java.lang.Thread类的setContextClassLoader()
方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个；如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。了有线程上下文类加载器，JNDI服务使用这个线程上下文类加载器去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型，但这也是无可奈何的事情。Java中所有涉及SPI的加载动作基本上都采用这种方式，例如JNDI,JDBC,JCE,JAXB和JBI等。</li>
<li>线程上下文类加载器默认情况下就是AppClassLoader，那为什么不直接通过getSystemClassLoader()
获取类加载器来加载classpath路径下的类的呢？其实是可行的，但这种直接使用getSystemClassLoader()
方法获取AppClassLoader加载类有一个缺点，那就是代码部署到不同服务时会出现问题，如把代码部署到Java
Web应用服务或者EJB之类的服务将会出问题，因为这些服务使用的线程上下文类加载器并非AppClassLoader，而是Java Web应用服自家的类加载器，类加载器不同。，所以我们应用该少用getSystemClassLoader()
。总之不同的服务使用的可能默认ClassLoader是不同的，但使用线程上下文类加载器总能获取到与当前程序执行相同的ClassLoader，从而避免不必要的问题</li>
</ul>
<ol start="3">
<li>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求导致的，这里所说的“动态性”指的是当前一些非常“热门”的名词：代码热替换、模块热部署等，简答的说就是机器不用重启，只要部署上就能用。</li>
</ol>
<h2> GC如何判断对象可以被回收？</h2>
<ol>
<li>引用计数法（已被淘汰的算法）</li>
</ol>
<ul>
<li>每一个对象有一个引用属性，新增一个引用时加一，引用释放时减一，计数为0的时候可以回收。</li>
</ul>
<p>但是这种计算方法，有一个致命的问题，无法解决循环引用的问题</p>
<ol start="2">
<li>可达性分析算法（根引用）</li>
</ol>
<ul>
<li>
<p>从GcRoot开始向下搜索，搜索所走过的路径被称为引用链，当一个对象到GcRoot没有任何引用链相连时，则证明此对象是不可用的，那么虚拟机就可以判定回收。</p>
</li>
<li>
<p>那么GcRoot有哪些？</p>
</li>
<li>
<ul>
<li>虚拟机栈中引用的对象</li>
</ul>
</li>
<li>
<ul>
<li>方法区中静态属性引用的对象。</li>
</ul>
</li>
<li>
<ul>
<li>方法区中常量引用的对象</li>
</ul>
</li>
<li>
<ul>
<li>本地方法栈中（即一般说的native方法）引用的对象</li>
</ul>
</li>
</ul>
<ol start="3">
<li>此外，不同的引用类型的回收机制是不一样的</li>
</ol>
<ul>
<li>
<p>强引用：通过关键字new的对象就是强引用对象，强引用指向的对象任何时候都不会被回收，宁愿OOM也不会回收。</p>
</li>
<li>
<p>软引用：如果一个对象持有软引用，那么当JVM堆空间不足时，会被回收。一个类的软引用可以通过java.lang.ref.SoftReference持有。</p>
</li>
<li>
<p>弱引用：如果一个对象持有弱引用，那么在GC时，只要发现弱引用对象，就会被回收。一个类的弱引用可以通过java.lang.ref.WeakReference持有。</p>
</li>
<li>
<p>虚引用：几乎和没有一样，随时可以被回收。通过PhantomReference持有。</p>
</li>
</ul>
<h2> 如何回收内存对象，有哪些回收算法？</h2>
<p><strong>1.标记-清除（Mark-Sweep）算法</strong></p>
<p>分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象.</p>
<p>它的主要不足有两个：</p>
<ul>
<li>效率问题，标记和清除两个过程的效率都不高。</li>
<li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>
</ul>
<ol start="2">
<li><strong>复制算法</strong></li>
</ol>
<p>为了解决效率问题，一种称为复制（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。
<strong>复制算法的代价</strong>是将内存缩小为了原来的一半，减少了实际可用的内存。现在的商业虚拟机都采用这种收集算法来回收新生代，IBM公司的专门研究表明，新生代中的对象98%是“朝生夕死”的，所以并不需要按照1:
1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:
1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保（Handle
Promotion）。</p>
<ol start="3">
<li><strong>标记-整理算法</strong></li>
</ol>
<p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。根据老年代的特点，有人提出了另外一种标记-整理（Mark-Compact）算法，标记过程仍然与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<ol start="4">
<li><strong>分代收集算法</strong></li>
</ol>
<p>当前商业虚拟机的垃圾收集都采用分代收集（Generational
Collection）算法，这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清理或者标记—整理算法来进行回收。</p>
<h2> jvm有哪些垃圾回收器，实际中如何选择？</h2>
<p>图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，则说明它们可以搭配使用。虚拟机所处的区域则表示它是属于新生代还是老年代收集器。</p>
<p>新生代收集器（全部的都是复制算法）：Serial、ParNew、Parallel Scavenge</p>
<p>老年代收集器：CMS（标记-清理）、Serial Old（标记-整理）、Parallel Old（标记整理）</p>
<p>整堆收集器： G1（一个Region中是标记-清除算法，2个Region之间是复制算法）</p>
<p>同时，先解释几个名词：</p>
<ol>
<li><strong>并行（Parallel）</strong>：多个垃圾收集线程并行工作，此时用户线程处于等待状态</li>
<li><strong>并发（Concurrent）</strong>：用户线程和垃圾收集线程同时执行</li>
<li><strong>吞吐量</strong>：运行用户代码时间／（运行用户代码时间＋垃圾回收时间）</li>
</ol>
<p><strong>1.Serial收集器是最基本的、发展历史最悠久的收集器。</strong></p>
<p><strong>特点：</strong>
单线程、简单高效（与其他收集器的单线程相比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop
The World）。</p>
<p><strong>应用场景</strong>：适用于Client模式下的虚拟机。</p>
<p>Serial / Serial Old收集器运行示意图:</p>
<p><strong>2.ParNew收集器其实就是Serial收集器的多线程版本。</strong></p>
<p>除了使用多线程外其余行为均和Serial收集器一模一样（参数控制、收集算法、Stop The World、对象分配规则、回收策略等）。</p>
<p><strong>特点</strong>：多线程、ParNew收集器默认开启的收集线程数与CPU的数量相同，在CPU非常多的环境中，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。
和Serial收集器一样存在Stop The World问题</p>
<p><strong>应用场景</strong>：ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器，因为它是除了Serial收集器外，唯一一个能与CMS收集器配合工作的。</p>
<p><em>ParNew/Serial Old组合收集器运行示意图如下：</em></p>
<p><strong>3.Parallel Scavenge 收集器与吞吐量关系密切，故也称为吞吐量优先收集器。</strong></p>
<p><strong>特点</strong>：属于新生代收集器也是采用复制算法的收集器，又是并行的多线程收集器（与ParNew收集器类似）。
该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与ParNew收集器最重要的一个区别）</p>
<p><strong>GC自适应调节策略</strong>：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:
SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold)
等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。</p>
<p>Parallel Scavenge收集器使用两个参数控制吞吐量：</p>
<ul>
<li>XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间</li>
<li>XX:GCRatio 直接设置吞吐量的大小。</li>
</ul>
<p><strong>4.Serial Old是Serial收集器的老年代版本。</strong></p>
<p><strong>特点</strong>：同样是单线程收集器，采用标记-整理算法。</p>
<p><strong>应用场景</strong>：主要也是使用在Client模式下的虚拟机中。也可在Server模式下使用。
Server模式下主要的两大用途</p>
<ol>
<li>在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用。</li>
<li>作为CMS收集器的后备方案，在并发收集Concurent Mode Failure时使用。</li>
</ol>
<p>Serial / Serial Old收集器工作过程图（Serial收集器图示相同）：</p>
<p><strong>5.Parallel Old是Parallel Scavenge收集器的老年代版本。</strong></p>
<p><strong>特点</strong>：多线程，采用标记-整理算法。</p>
<p><strong>应用场景</strong>：注重高吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge+Parallel Old 收集器。</p>
<p><em>Parallel Scavenge/Parallel Old收集器工作过程图：</em></p>
<p><strong>6.CMS收集器是一种以获取最短回收停顿时间为目标的收集器。</strong></p>
<p><strong>特点</strong>：基于标记-清除算法实现。并发收集、低停顿。</p>
<p><strong>应用场景</strong>：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b/s服务。</p>
<p><strong>CMS收集器的运行过程分为下列4步：</strong></p>
<ol>
<li><strong>初始标记</strong>：标记GC Roots能直接到的对象。速度很快但是仍存在Stop The World问题。</li>
<li><strong>并发标记</strong>：进行GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行。</li>
<li><strong>重新标记</strong>：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World问题。</li>
<li><strong>并发清除</strong>：对标记的对象进行清除回收。</li>
</ol>
<p>CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>
<p>CMS收集器的工作过程图：</p>
<p>CMS收集器的缺点：</p>
<ul>
<li>对CPU资源非常敏感。</li>
<li>无法处理浮动垃圾，可能出现Concurrent Model Failure失败而导致另一次Full GC的产生。</li>
<li>因为采用标记-清除算法所以会存在空间碎片的问题，导致大对象无法分配空间，不得不提前触发一次Full GC。</li>
</ul>
<p><strong>7.G1收集器一款面向服务端应用的垃圾收集器。</strong></p>
<p><strong>特点如下：</strong></p>
<p>并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿时间。部分收集器原本需要停顿Java线程来执行GC动作，G1收集器仍然可以通过并发的方式让Java程序继续运行。
分代收集：G1能够独自管理整个Java堆，并且采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。
空间整合：G1运作期间不会产生空间碎片，收集后能提供规整的可用内存。
可预测的停顿：G1除了追求低停顿外，还能建立可预测的停顿时间模型。能让使用者明确指定在一个长度为M毫秒的时间段内，消耗在垃圾收集上的时间不得超过N毫秒。</p>
<p><strong>G1收集器运行示意图：</strong></p>
<p>关于gc的选择
除非应用程序有非常严格的暂停时间要求，否则请先运行应用程序并允许VM选择收集器（如果没有特别要求。使用VM提供给的默认GC就好）。
如有必要，调整堆大小以提高性能。 如果性能仍然不能满足目标，请使用以下准则作为选择收集器的起点：</p>
<ul>
<li>如果应用程序的数据集较小（最大约100 MB），则选择带有选项-XX：+ UseSerialGC的串行收集器。</li>
<li>如果应用程序将在单个处理器上运行，并且没有暂停时间要求，则选择带有选项-XX：+ UseSerialGC的串行收集器。</li>
<li>如果（a）峰值应用程序性能是第一要务，并且（b）没有暂停时间要求或可接受一秒或更长时间的暂停，则让VM选择收集器或使用-XX：+ UseParallelGC选择并行收集器 。</li>
<li>如果响应时间比整体吞吐量更重要，并且垃圾收集暂停时间必须保持在大约一秒钟以内，则选择具有-XX：+ UseG1GC。（值得注意的是JDK9中CMS已经被Deprecated，不可使用！移除该选项）</li>
<li>如果使用的是jdk8，并且堆内存达到了16G，那么推荐使用G1收集器，来控制每次垃圾收集的时间。</li>
<li>如果响应时间是高优先级，或使用的堆非常大，请使用-XX：UseZGC选择完全并发的收集器。（值得注意的是JDK11开始可以启动ZGC，但是此时ZGC具有实验性质，在JDK15中[202009发布]
才取消实验性质的标签，可以直接显示启用，但是JDK15默认GC仍然是G1）</li>
</ul>
<p>这些准则仅提供选择收集器的起点，因为性能取决于堆的大小，应用程序维护的实时数据量以及可用处理器的数量和速度。
如果推荐的收集器没有达到所需的性能，则首先尝试调整堆和新生代大小以达到所需的目标。 如果性能仍然不足，尝试使用其他收集器
<strong>总体原则</strong>：减少STOP THE WORD时间，使用并发收集器（比如CMS+ParNew，G1）来减少暂停时间，加快响应时间，并使用并行收集器来增加多处理器硬件上的总体吞吐量。</p>
<h2> JVM8为什么要增加元空间？</h2>
<p>原因：</p>
<ol>
<li>字符串存在永久代中，容易出现性能问题和内存溢出。</li>
<li>类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。</li>
<li>永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。</li>
</ol>
<h2> JVM8中元空间有哪些特点？</h2>
<ol>
<li>每个加载器有专门的存储空间。</li>
<li>不会单独回收某个类。</li>
<li>元空间里的对象的位置是固定的。</li>
<li>如果发现某个加载器不再存货了，会把相关的空间整个回收</li>
</ol>
<h2> 如何解决线上gc频繁的问题？</h2>
<ol>
<li>查看监控，以了解出现问题的时间点以及当前FGC的频率（可对比正常情况看频率是否正常）</li>
<li>了解该时间点之前有没有程序上线、基础组件升级等情况。</li>
<li>了解JVM的参数设置，包括：堆空间各个区域的大小设置，新生代和老年代分别采用了哪些垃圾收集器，然后分析JVM参数设置是否合理。</li>
<li>再对步骤1中列出的可能原因做排除法，其中元空间被打满、内存泄漏、代码显式调用gc方法比较容易排查。</li>
<li>针对大对象或者长生命周期对象导致的FGC，可通过 jmap -histo 命令并结合dump堆内存文件作进一步分析，需要先定位到可疑对象。</li>
<li>通过可疑对象定位到具体代码再次分析，这时候要结合GC原理和JVM参数设置，弄清楚可疑对象是否满足了进入到老年代的条件才能下结论。</li>
</ol>
<h2> 内存溢出的原因有哪些，如何排查线上问题？</h2>
<ol>
<li><em>java.lang.OutOfMemoryError</em>: <code>......java heap space.....</code>  堆栈溢出，代码问题的可能性极大</li>
<li><em>java.lang.OutOfMemoryError</em>: <code>GC over head limit exceeded</code>
系统处于高频的GC状态，而且回收的效果依然不佳的情况，就会开始报这个错误，这种情况一般是产生了很多不可以被释放的对象，有可能是引用使用不当导致，或申请大对象导致，但是java heap
space的内存溢出有可能提前不会报这个错误，也就是可能内存就直接不够导致，而不是高频GC.</li>
<li><em>java.lang.OutOfMemoryError</em>: <code>PermGen space</code> jdk1.7之前才会出现的问题
，原因是系统的代码非常多或引用的第三方包非常多、或代码中使用了大量的常量、或通过intern注入常量、或者通过动态代码加载等方法，导致常量池的膨胀</li>
<li><em>java.lang.OutOfMemoryError</em>: <code>Direct buffer memory</code>
直接内存不足，因为jvm垃圾回收不会回收掉直接内存这部分的内存，所以可能原因是直接或间接使用了ByteBuffer中的allocateDirect方法的时候，而没有做clear</li>
<li><em>java.lang.StackOverflowError</em>: <code>- Xss</code>设置的太小了</li>
<li><em>java.lang.OutOfMemoryError</em>: <code>unable to create new native thread</code> 堆外内存不足，无法为线程分配内存区域</li>
<li><em>java.lang.OutOfMemoryError</em>: <code>request {} byte for {}out of swap</code> 地址空间不够</li>
</ol>
<h2> Happens-Before规则是什么？</h2>
<ol>
<li><strong>程序顺序规则</strong>：一个线程中的每一个操作，happens-before于该线程中的任意后续操作。</li>
<li><strong>监视器规则</strong>：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li>
<li><strong>volatile规则</strong>：对一个volatile变量的写，happens-before于任意后续对一个volatile变量的读。</li>
<li><strong>传递性</strong>：若果A happens-before B，B happens-before C，那么A happens-before C。</li>
<li><strong>线程启动规则</strong>：Thread对象的start()方法，happens-before于这个线程的任意后续操作。</li>
<li><strong>线程终止规则</strong>：线程中的任意操作，happens-before于该线程的终止监测。我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行。</li>
<li><strong>线程中断操作</strong>：对线程interrupt()方法的调用，happens-before于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测到线程是否有中断发生。</li>
<li><strong>对象终结规则</strong>：一个对象的初始化完成，happens-before于这个对象的finalize()方法的开始。</li>
</ol>
<h2> 介绍一下线程的生命周期及状态？</h2>
<p><strong>1.创建</strong>
当程序使用new关键字创建了一个线程之后，该线程就处于一个新建状态（初始状态），此时它和其他Java对象一样，仅仅由Java虚拟机为其分配了内存，并初始化了其成员变量值。此时的线程对象没有表现出任何线程的动态特征，程序也不会执行线程的线程执行体。</p>
<p><strong>2.就绪</strong>
当线程对象调用了Thread.start()方法之后，该线程处于就绪状态。Java虚拟机会为其创建方法调用栈和程序计数器，处于这个状态的线程并没有开始运行，它只是表示该线程可以运行了。从start()
源码中看出，start后添加到了线程列表中，接着在native层添加到VM中，至于该线程何时开始运行，取决于JVM里线程调度器的调度(如果OS调度选中了，就会进入到运行状态)。</p>
<p><strong>3.运行</strong>
当线程对象调用了Thread.start()方法之后，该线程处于就绪状态。添加到了线程列表中，如果OS调度选中了，就会进入到运行状态</p>
<p><strong>4.阻塞</strong>
阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况大概三种：</p>
<ul>
<li>1、<strong>等待阻塞</strong>：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</li>
<li>2、<strong>同步阻塞</strong>：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li>
<li>3、<strong>其他阻塞</strong>：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()
等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）。</li>
<li>线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。</li>
<li>线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0)
一样。唤醒线程后，就转为就绪（Runnable）状态。</li>
<li>线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。</li>
<li>线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</li>
<li>线程I/O：线程执行某些IO操作，因为等待相关的资源而进入了阻塞状态。<a href="http://xn--system-9n6jp66a8q5b07wur5c.in" target="_blank" rel="noopener noreferrer">比如说监听system.in</a>，但是尚且没有收到键盘的输入，则进入阻塞状态。</li>
<li>线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程，选择是任意性的，并在对实现做出决定时发生。类似的方法还有一个notifyAll()
，唤醒在此对象监视器上等待的所有线程。</li>
</ul>
<p><strong>5.死亡</strong>
线程会以以下三种方式之一结束，结束后就处于死亡状态:</p>
<ul>
<li>run()方法执行完成，线程正常结束。</li>
<li>线程抛出一个未捕获的Exception或Error。</li>
<li>直接调用该线程的stop()方法来结束该线程——该方法容易导致死锁，通常不推荐使用</li>
</ul>
<h2> 线程的sleep、wait、join、yield如何使用？</h2>
<p><strong>sleep</strong>:让线程睡眠，期间会出让cpu，在同步代码块中，不会释放锁</p>
<p><strong>wait</strong>(必须先获得对应的锁才能调用):让线程进入等待状态,释放当前线程持有的锁资源线程只有在notify 或者notifyAll方法调用后才会被唤醒,然后去争夺锁.</p>
<p><strong>join</strong>:线程之间协同方式,使用场景: 线程A必须等待线程B运行完毕后才可以执行,那么就可以在线程A的代码中加入ThreadB.join();</p>
<p><strong>yield</strong>:让当前正在运行的线程回到可运行状态，以允许具有相同优先级的其他线程获得运行的机会。因此，使用yield()的目的是让具有相同优先级的线程之间能够适当的轮换执行。但是，实际中无法保证yield()
达到让步的目的，因为，让步的线程可能被线程调度程序再次选中。</p>
<h2> 创建线程有哪些方式？</h2>
<ol>
<li>继承Thread类创建线程</li>
<li>实现Runnable接口创建线程</li>
<li>使用Callable和Future创建线程</li>
<li>使用线程池例如用Executor框架</li>
</ol>
<h2> 什么是守护线程？</h2>
<p>在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程)
任何一个守护线程都是整个JVM中所有非守护线程的保姆：
只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。</p>
<p>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。
User和Daemon两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，
虚拟机也就退出了。 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。</p>
<p>注意事项:</p>
<p>(1) thread.setDaemon(true)必须在thread.start()之前设置，否则会出现一个IllegalThreadStateException异常。只能在线程未开始运行之前设置为守护线程。</p>
<p>(2) 在Daemon线程中产生的新线程也是Daemon的。</p>
<p>(3) 不要认为所有的应用都可以分配给Daemon来进行读写操作或者计算逻辑，因为这会可能回到数据不一致的状态。</p>
<h2> ThreadLocal的原理是什么，使用场景有哪些？</h2>
<p>Thread类中有两个变量threadLocals和inheritableThreadLocals，二者都是ThreadLocal内部类ThreadLocalMap类型的变量，我们通过查看内部内ThreadLocalMap可以发现实际上它类似于一个HashMap。在默认情况下，每个线程中的这两个变量都为null:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当线程第一次调用ThreadLocal的set或者get方法的时候才会创建他们。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，每个线程的本地变量不是存放在ThreadLocal实例中，而是放在调用线程的<strong>ThreadLocals</strong>变量里面。也就是说，<strong>ThreadLocal类型的本地变量是存放在具体的线程空间上</strong>
，其本身相当于一个装载本地变量的载体，通过set方法将value添加到调用线程的threadLocals中，当调用线程调用get方法时候能够从它的threadLocals中取出变量。如果调用线程一直不终止，那么这个本地变量将会一直存放在他的threadLocals中，所以不使用本地变量的时候需要调用remove方法将threadLocals中删除不用的本地变量,防止出现内存泄漏。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ThreadLocal有哪些内存泄露问题，如何避免？</h2>
<p>每个Thread都有一个ThreadLocal.ThreadLocalMap的map，该map的key为ThreadLocal实例，它为一个弱引用，我们知道弱引用有利于GC回收。当ThreadLocal的key ==
null时，GC就会回收这部分空间，但是value却不一定能够被回收，因为他还与Current Thread存在一个强引用关系，如下</p>
<p>由于存在这个强引用关系，会导致value无法回收。如果这个线程对象不会销毁那么这个强引用关系则会一直存在，就会出现内存泄漏情况。所以说只要这个线程对象能够及时被GC回收，就不会出现内存泄漏。如果碰到线程池，那就更坑了。
那么要怎么避免这个问题呢？ 在前面提过，在ThreadLocalMap中的setEntry()、getEntry()，如果遇到key ==
null的情况，会对value设置为null。当然我们也可以显示调用ThreadLocal的remove()方法进行处理。 下面再对ThreadLocal进行简单的总结：</p>
<ul>
<li>ThreadLocal 不是用于解决共享变量的问题的，也不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制。这点至关重要。</li>
<li>每个Thread内部都有一个ThreadLocal.ThreadLocalMap类型的成员变量，该成员变量用来存储实际的ThreadLocal变量副本。</li>
<li>ThreadLocal并不是为线程保存对象的副本，它仅仅只起到一个索引的作用。它的主要木得视为每一个线程隔离一个类的实例，这个实例的作用范围仅限于线程内部。</li>
</ul>
<h2> 为什么要使用线程池？</h2>
<p>为了减少创建和销毁线程的次数，让每个线程可以多次使用,可根据系统情况<strong>调整执行</strong>的线程数量，防止消耗过多内存,所以我们可以使用线程池.</p>
<h2> 线程池线程复用的原理是什么？</h2>
<p>思考这么一个问题：任务结束后会不会回收线程？</p>
<p>答案是：allowCoreThreadTimeOut控制</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先线程池内的线程都被包装成了一个个的java.util.concurrent.ThreadPoolExecutor.Worker,然后这个worker会马不停蹄的执行任务,
执行完任务之后就会在while循环中去取任务,取到任务就继续执行,取不到任务就跳出while循环(这个时候worker就不能再执行任务了)执行
processWorkerExit方法,这个方法呢就是做清场处理,将当前woker线程从线程池中移除,并且判断是否是异常的进入processWorkerExit方法,
如果是非异常情况,就对当前线程池状态(RUNNING,shutdown)和当前工作线程数和当前任务数做判断,是否要加入一个新的线程去完成最后的任务
(防止没有线程去做剩下的任务)。</p>
<p>那么什么时候会退出while循环呢?取不到任务的时候(getTask() == null).下面看一下getTask方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面这个问题可以得出一个结论：当你的线程池参数配置合理的时候，执行完任务的线程是不会被销毁的，而是会从任务队列中取出任务继续执行！</p>
<h2> 如何预防死锁？</h2>
<ol>
<li>首先需要将死锁发生的是个必要条件讲出来:</li>
</ol>
<ul>
<li>互斥条件 同一时间只能有一个线程获取资源。</li>
<li>不可剥夺条件 一个线程已经占有的资源，在释放之前不会被其它线程抢占</li>
<li>请求和保持条件 线程等待过程中不会释放已占有的资源</li>
<li>循环等待条件 多个线程互相等待对方释放资源</li>
</ul>
<ol start="2">
<li>死锁预防，那么就是需要破坏这四个必要条件</li>
</ol>
<ul>
<li>由于资源互斥是资源使用的固有特性，无法改变，我们不讨论</li>
<li>破坏不可剥夺条件</li>
<li>
<ul>
<li>一个进程不能获得所需要的全部资源时便处于等待状态，等待期间他占有的资源将被隐式的释放重新加入到系统的资源列表中，可以被其他的进程使用，而等待的进程只有重新获得自己原有的资源以及新申请的资源才可以重新启动，执行</li>
</ul>
</li>
</ul>
<ol start="3">
<li>破坏请求与保持条件</li>
</ol>
<ul>
<li>第一种方法静态分配即每个进程在开始执行时就申请他所需要的全部资源</li>
<li>第二种是动态分配即每个进程在申请所需要的资源时他本身不占用系统资源</li>
</ul>
<ol start="4">
<li>破坏循环等待条件</li>
</ol>
<ul>
<li>采用资源有序分配其基本思想是将系统中的所有资源顺序编号，将紧缺的，稀少的采用较大的编号，在申请资源时必须按照编号的顺序进行，一个进程只有获得较小编号的进程才能申请较大编号的进程。</li>
</ul>
<h2> 描述一下线程安全活跃态问题？</h2>
<p>线程安全的活跃性问题可以分为 死锁、活锁、饥饿</p>
<ol>
<li>活锁 就是有时线程虽然没有发生阻塞，但是仍然会存在执行不下去的情况，活锁不会阻塞线程，线程会一直重复执行某个相同的操作，并且一直失败重试</li>
</ol>
<ul>
<li></li>
</ul>
<p>我们开发中使用的异步消息队列就有可能造成活锁的问题，在消息队列的消费端如果没有正确的ack消息，并且执行过程中报错了，就会再次放回消息头，然后再拿出来执行，一直循环往复的失败。这个问题除了正确的ack之外，往往是通过将失败的消息放入到延时队列中，等到一定的延时再进行重试来解决。</p>
<ul>
<li>解决活锁的方案很简单，尝试等待一个随机的时间就可以，会按时间轮去重试</li>
</ul>
<ol start="2">
<li>饥饿 就是 线程因无法访问所需资源而无法执行下去的情况</li>
</ol>
<ul>
<li>饥饿 分为两种情况：
<ul>
<li>一种是其他的线程在临界区做了无限循环或无限制等待资源的操作，让其他的线程一直不能拿到锁进入临界区，对其他线程来说，就进入了饥饿状态</li>
<li>另一种是因为线程优先级不合理的分配，导致部分线程始终无法获取到CPU资源而一直无法执行</li>
</ul>
</li>
<li>解决饥饿的问题有几种方案:
<ul>
<li>保证资源充足，很多场景下，资源的稀缺性无法解决</li>
<li>公平分配资源，在并发编程里使用公平锁，例如FIFO策略，线程等待是有顺序的，排在等待队列前面的线程会优先获得资源</li>
<li>避免持有锁的线程长时间执行，很多场景下，持有锁的线程的执行时间也很难缩短</li>
</ul>
</li>
</ul>
<ol start="3">
<li>死锁 线程在对同一把锁进行竞争的时候，未抢占到锁的线程会等待持有锁的线程释放锁后继续抢占，如果两个或两个以上的线程互相持有对方将要抢占的锁，互相等待对方先行释放锁就会进入到一个循环等待的过程，这个过程就叫做死锁</li>
</ol>
<h2> 线程安全的竞态条件有哪些？</h2>
<ol>
<li>同一个程序多线程访问同一个资源，如果对资源的访问顺序敏感，就称存在竞态条件，代码区成为临界区。 大多数并发错误一样，竞态条件不总是会产生问题，还需要不恰当的执行时序</li>
<li>最常见的竞态条件为</li>
</ol>
<ul>
<li>先检测后执行执行依赖于检测的结果，而检测结果依赖于多个线程的执行时序，而多个线程的执行时序通常情况下是不固定不可判断的，从而导致执行结果出现各种问题，见一种可能
的解决办法就是：在一个线程修改访问一个状态时，要防止其他线程访问修改，也就是加锁机制，保证原子性</li>
<li>延迟初始化（典型为单例）</li>
</ul>
<h2> 程序开多少线程合适？</h2>
<ol>
<li>CPU 密集型程序，一个完整请求，I/O操作可以在很短时间内完成，CPU还有很多运算要处理，也就是说 CPU 计算的比例占很大一部分，线程等待时间接近0</li>
</ol>
<ul>
<li>单核CPU： 一个完整请求，I/O操作可以在很短时间内完成， CPU还有很多运算要处理，也就是说 CPU 计算的比例占很大一部分，线程等待时间接近0。单核CPU处理CPU密集型程序，这种情况并不太适合使用多线程。</li>
<li>多核 ： 如果是多核CPU 处理 CPU 密集型程序，我们完全可以最大化的利用 CPU 核心数，应用并发编程来提高效率。CPU 密集型程序的最佳线程数就是：理论上线程数量 = CPU 核数（逻辑），但是实际上，数量一般会设置为 CPU
核数（逻辑）+ 1（经验值）,计算(CPU)密集型的线程恰好在某时因为发生一个页错误或者因其他原因而暂停，刚好有一个“额外”的线程，可以确保在这种情况下CPU周期不会中断工作</li>
</ul>
<ol start="2">
<li>I/O 密集型程序，与 CPU 密集型程序相对，一个完整请求，CPU运算操作完成之后还有很多 I/O 操作要做，也就是说 I/O
操作占比很大部分，等待时间较长，线程等待时间所占比例越高，需要越多线程；线程CPU时间所占比例越高，需要越少线程</li>
</ol>
<ul>
<li>I/O 密集型程序的最佳线程数就是： 最佳线程数 = CPU核心数 <em>(1/CPU利用率) = CPU核心数</em> (1 + (I/O耗时/CPU耗时))</li>
<li>如果几乎全是 I/O耗时，那么CPU耗时就无限趋近于0，所以纯理论你就可以说是 2N（N=CPU核数），当然也有说 2N + 1的，1应该是backup</li>
<li>一般我们说 2N + 1 就即可</li>
</ul>
<h2> synchronized和lock有哪些区别？</h2>
<table>
<thead>
<tr>
<th>区别类型</th>
<th>synchronized</th>
<th>Lock</th>
</tr>
</thead>
<tbody>
<tr>
<td>存在层次</td>
<td>Java的关键字，在jvm层面上</td>
<td>是JVM的一个接口</td>
</tr>
<tr>
<td>锁的获取</td>
<td>假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td>
<td>情况而定，Lock有多个锁获取的方式，大致就是可以尝试获得锁，线程可以不用一直等待(可以通过tryLock判断有没有锁)</td>
</tr>
<tr>
<td>锁的释放</td>
<td>1、以获取锁的线程执行完同步代码，释放锁2、线程执行发生异常，jvm会让线程释放</td>
<td>在finally中必须释放锁，不然容易造成线程死锁</td>
</tr>
<tr>
<td>锁类型</td>
<td>锁可重入、不可中断、非公平</td>
<td>可重入、可判断 可公平（两者皆可）</td>
</tr>
<tr>
<td>性能</td>
<td>少量同步</td>
<td>适用于大量同步</td>
</tr>
<tr>
<td>支持锁的场景</td>
<td>1. 独占锁</td>
<td>1. 公平锁与非公平锁</td>
</tr>
</tbody>
</table>
<h2> ABA问题遇到过吗，详细说一下？</h2>
<ol>
<li>有两个线程同时去修改一个变量的值，比如线程1、线程2，都更新变量值，将变量值从A更新成B。</li>
<li>首先线程1获取到CPU的时间片，线程2由于某些原因发生阻塞进行等待，此时线程1进行比较更新（CompareAndSwap），成功将变量的值从A更新成B。</li>
<li>更新完毕之后，恰好又有线程3进来想要把变量的值从B更新成A，线程3进行比较更新，成功将变量的值从B更新成A。</li>
<li>线程2获取到CPU的时间片，然后进行比较更新，发现值是预期的A，然后有更新成了B。但是线程1并不知道，该值已经有了A-&gt;B-&gt;A这个过程，这也就是我们常说的ABA问题。</li>
</ol>
<h2> volatile的可见性和禁止指令重排序怎么实现的？</h2>
<ul>
<li>
<p>可见性：</p>
<p>volatile的功能就是被修饰的变量在被修改后可以立即同步到主内存，被修饰的变量在每次是用之前都从主内存刷新。本质也是通过内存屏障来实现可见性</p>
<p>写内存屏障（Store Memory Barrier）可以促使处理器将当前store buffer（存储缓存）的值写回主存。读内存屏障（Load Memory Barrier）可以促使处理器处理invalidate
queue（失效队列）。进而避免由于Store Buffer和Invalidate Queue的非实时性带来的问题。</p>
</li>
<li>
<p>禁止指令重排序：
volatile是通过<strong>内存屏障</strong>来禁止指令重排序</p>
<p>JMM内存屏障的策略</p>
<ul>
<li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li>
<li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li>
<li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li>
<li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li>
</ul>
</li>
</ul>
<h2> ConcurrentHashMap底层原理是什么？</h2>
<p>1.7</p>
<p>数据结构：</p>
<p>内部主要是一个Segment数组，而数组的每一项又是一个HashEntry数组，元素都存在HashEntry数组里。因为每次锁定的是Segment对象，也就是整个HashEntry数组，所以又叫分段锁。</p>
<p>1.8</p>
<p>数据结构：</p>
<p>与HashMap一样采用：数组+链表+红黑树</p>
<p>底层原理则是采用锁链表或者红黑树头结点，相比于HashTable的方法锁，力度更细，是对数组（table）中的桶（链表或者红黑树）的头结点进行锁定，这样锁定，只会影响数组（table）当前下标的数据，不会影响其他下标节点的操作，可以提高读写效率。
putVal执行流程：</p>
<ol>
<li>判断存储的key、value是否为空，若为空，则抛出异常</li>
<li>计算key的hash值，随后死循环（该循环可以确保成功插入，当满足适当条件时，会主动终止），判断table表为空或者长度为0，则初始化table表</li>
<li>根据hash值获取table中该下标对应的节点，如果该节点为空，则根据参数生成新的节点，并以CAS的方式进行更新，并终止死循环。</li>
<li>如果该节点的hash值是MOVED(-1)，表示正在扩容，则辅助对该节点进行转移。</li>
<li></li>
</ol>
<p>对数组（table）中的节点，即桶的头结点进行锁定，如果该节点的hash大于等于0，表示此桶是链表，然后对该桶进行遍历（死循环），寻找链表中与put的key的hash值相等，并且key相等的元素，然后进行值的替换，如果到链表尾部都没有符合条件的，就新建一个node，然后插入到该桶的尾部，并终止该循环遍历。</p>
<ol start="6">
<li>如果该节点的hash小于0，并且节点类型是TreeBin，则走红黑树的插入方式。</li>
<li>判断是否达到转化红黑树的阈值，如果达到阈值，则链表转化为红黑树。</li>
</ol>
<h2> 分布式id生成方案有哪些？</h2>
<p>UUID,数据库主键自增，Redis自增ID，雪花算法。</p>
<table>
<thead>
<tr>
<th></th>
<th>描述</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>UUID</td>
<td>UUID是通用唯一标识码的缩写，其目的是让分布式系统中的所有元素都有唯一的辨识信息，而不需要通过中央控制器来指定唯一标识。</td>
<td>1. 降低全局节点的压力，使得主键生成速度更快；<br>2. 生成的主键全局唯一；<br>3. 跨服务器合并数据方便。</td>
<td>1. UUID占用16个字符，空间占用较多；<br>2. 不是递增有序的数字，数据写入IO随机性很大，且索引效率下降</td>
</tr>
<tr>
<td>数据库主键自增</td>
<td>MySQL数据库设置主键且主键自动增长</td>
<td>1. INT和BIGINT类型占用空间较小；<br>2. 主键自动增长，IO写入连续性好；<br>3. 数字类型查询速度优于字符串</td>
<td>1. 并发性能不高，受限于数据库性能；<br>2. 分库分表，需要改造，复杂；<br>3. 自增：数据和数据量泄露</td>
</tr>
<tr>
<td>Redis自增</td>
<td>Redis计数器，原子性自增</td>
<td>使用内存，并发性能好</td>
<td>1. 数据丢失；<br>2. 自增：数据量泄露</td>
</tr>
<tr>
<td>雪花算法（snowflake）</td>
<td>大名鼎鼎的雪花算法，分布式ID的经典解决方案</td>
<td>1. 不依赖外部组件；<br>2. 性能好</td>
<td>时钟回拨</td>
</tr>
</tbody>
</table>
<h2> 雪花算法生成的ID由哪些部分组成?</h2>
<ol>
<li>符号位，占用1位。</li>
<li>时间戳，占用41位，可以支持69年的时间跨度。</li>
<li>机器ID，占用10位。</li>
<li>序列号，占用12位。一毫秒可以生成4095个ID。</li>
</ol>
<h2> 分布式锁在项目中有哪些应用场景？</h2>
<p>使用分布式锁的场景一般需要满足以下场景：</p>
<ol>
<li>系统是一个分布式系统,集群集群，java的锁已经锁不住了。</li>
<li>操作共享资源，比如库里唯一的用户数据。</li>
<li>同步访问，即多个进程同时操作共享资源。</li>
</ol>
<h2> 分布锁有哪些解决方案？</h2>
<ol>
<li>Reids的分布式锁，很多大公司会基于Reidis做扩展开发。setnx key value ex 10s，Redisson。 watch dog.</li>
<li>基于Zookeeper。临时节点，顺序节点。</li>
<li>基于数据库，比如Mysql。主键或唯一索引的唯一性。</li>
</ol>
<h2> Redis做分布式锁用什么命令？</h2>
<p>SETNX</p>
<p>格式：setnx key value 将 key 的值设为 value ，当且仅当 key 不存在。</p>
<p>若给定的 key 已经存在，则 SETNX 不做任何动作,操作失败。</p>
<p>SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p>
<p>加锁：set key value nx ex 10s</p>
<p>释放锁：delete key</p>
<h2> Redis做分布式锁死锁有哪些情况，如何解决？</h2>
<p>情况1：加锁，没有释放锁。需要加释放锁的操作。比如delete key。</p>
<p>情况2：加锁后，程序还没有执行释放锁，程序挂了。需要用的key的过期机制。</p>
<h2> Redis如何做分布式锁？</h2>
<p>假设有两个服务A、B都希望获得锁，执行过程大致如下:</p>
<p><em>Step1</em>： 服务A为了获得锁，向Redis发起如下命令: SET productId:lock 0xx9p03001 NX EX 30000 其中，"productId"由自己定义，可以是与本次业务有关的id，"0xx9p03001"
是一串随机值，必须保证全局唯一，“NX"指的是当且仅当key(也就是案例中的"productId:lock”)在Redis中不存在时，返回执行成功，否则执行失败。"EX 30000"
指的是在30秒后，key将被自动删除。执行命令后返回成功，表明服务成功的获得了锁。</p>
<p><em>Step2</em>: 服务B为了获得锁，向Redis发起同样的命令: SET productId:lock 0000111 NX EX 30000
由于Redis内已经存在同名key，且并未过期，因此命令执行失败，服务B未能获得锁。服务B进入循环请求状态，比如每隔1秒钟(自行设置)向Redis发送请求，直到执行成功并获得锁。</p>
<p><em>Step3</em>: 服务A的业务代码执行时长超过了30秒，导致key超时，因此Redis自动删除了key。此时服务B再次发送命令执行成功，假设本次请求中设置的value值为0000222。此时需要在服务A中对key进行续期，watch
dog。</p>
<p><em>Step4</em>: 服务A执行完毕，为了释放锁，服务A会主动向Redis发起删除key的请求。注意:
在删除key之前，一定要判断服务A持有的value与Redis内存储的value是否一致。比如当前场景下，Redis中的锁早就不是服务A持有的那一把了，而是由服务2创建，如果贸然使用服务A持有的key来删除锁，则会误将服务2的锁释放掉。此外，由于删除锁时涉及到一系列判断逻辑，因此一般使用lua脚本，具体如下:</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 基于 ZooKeeper 的分布式锁实现原理是什么?</h2>
<p>顺序节点特性：</p>
<p>使用 ZooKeeper
的顺序节点特性，假如我们在/lock/目录下创建3个节点，ZK集群会按照发起创建的顺序来创建节点，节点分别为/lock/0000000001、/lock/0000000002、/lock/0000000003，最后一位数是依次递增的，节点名由zk来完成。</p>
<p>临时节点特性：</p>
<p>ZK中还有一种名为临时节点的节点，临时节点由某个客户端创建，当客户端与ZK集群断开连接，则该节点自动被删除。EPHEMERAL_SEQUENTIAL为临时顺序节点。</p>
<p>根据ZK中节点是否存在，可以作为分布式锁的锁状态，以此来实现一个分布式锁，下面是分布式锁的基本逻辑：</p>
<ol>
<li>客户端1调用create()方法创建名为“/业务ID/lock-”的临时顺序节点。</li>
<li>客户端1调用getChildren(“业务ID”)方法来获取所有已经创建的子节点。</li>
<li>客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点是所有节点中序号最小的，就是看自己创建的序列号是否排第一，如果是第一，那么就认为这个客户端1获得了锁，在它前面没有别的客户端拿到锁。</li>
<li>如果创建的节点不是所有节点中需要最小的，那么则监视比自己创建节点的序列号小的最大的节点，进入等待。直到下次监视的子节点变更的时候，再进行子节点的获取，判断是否获取锁。</li>
</ol>
<h2> ZooKeeper和Reids做分布式锁的区别？</h2>
<p>Reids：</p>
<ol>
<li>Redis只保证最终一致性，副本间的数据复制是异步进行（Set是写，Get是读，Reids集群一般是读写分离架构，存在主从同步延迟情况），主从切换之后可能有部分数据没有复制过去可能会 <strong>「丢失锁」</strong>
情况，故强一致性要求的业务不推荐使用Reids，推荐使用zk。</li>
<li>Redis集群各方法的响应时间均为最低。随着并发量和业务数量的提升其响应时间会有明显上升（公网集群影响因素偏大），但是极限qps可以达到最大且基本无异常</li>
</ol>
<p>ZooKeeper：</p>
<ol>
<li></li>
</ol>
<p>使用ZooKeeper集群，锁原理是使用ZooKeeper的临时顺序节点，临时顺序节点的生命周期在Client与集群的Session结束时结束。因此如果某个Client节点存在网络问题，与ZooKeeper集群断开连接，Session超时同样会导致锁被错误的释放（导致被其他线程错误地持有），因此ZooKeeper也无法保证完全一致。</p>
<ol start="2">
<li>ZK具有较好的稳定性；响应时间抖动很小，没有出现异常。但是随着并发量和业务数量的提升其响应时间和qps会明显下降。</li>
</ol>
<p>总结：</p>
<ol>
<li>Zookeeper每次进行锁操作前都要创建若干节点，完成后要释放节点，会浪费很多时间；</li>
<li>而Redis只是简单的数据操作，没有这个问题。</li>
</ol>
<h2> MySQL如何做分布式锁？</h2>
<p>在Mysql中创建一张表，设置一个 主键或者UNIQUE KEY 这个 KEY 就是要锁的 KEY（商品ID），所以同一个 KEY 在mysql表里只能插入一次了，这样对锁的竞争就交给了数据库，处理同一个 KEY
数据库保证了只有一个节点能插入成功，其他节点都会插入失败。</p>
<p>DB分布式锁的实现：通过主键id 或者 唯一索性
的唯一性进行加锁，说白了就是加锁的形式是向一张表中插入一条数据，该条数据的id就是一把分布式锁，例如当一次请求插入了一条id为1的数据，其他想要进行插入数据的并发请求必须等第一次请求执行完成后删除这条id为1的数据才能继续插入，实现了分布式锁的功能。</p>
<p>这样 lock 和 unlock 的思路就很简单了，伪代码：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 计数器算法是什么？</h2>
<p>​
计数器算法，是指在指定的时间周期内累加访问次数，达到设定的阈值时，触发限流策略。下一个时间周期进行访问时，访问次数清零。此算法无论在单机还是分布式环境下实现都非常简单，使用redis的incr原子自增性，再结合key的过期时间，即可轻松实现。</p>
<p>​ 从上图我们来看，我们设置一分钟的阈值是100，在0:00到1:00内请求数是60，当到1:00时，请求数清零，从0开始计算，这时在1:00到2:00之间我们能处理的最大的请求为100，超过100个的请求，系统都拒绝。</p>
<p>​ 这个算法有一个临界问题，比如在上图中，在0:00到1:00内，只在0:50有60个请求，而在1:00到2:00之间，只在1:10有60个请求，虽然在两个一分钟的时间内，都没有超过100个请求，但是在0:50到1:
10这20秒内，确有120个请求，虽然在每个周期内，都没超过阈值，但是在这20秒内，已经远远超过了我们原来设置的1分钟内100个请求的阈值。</p>
<h2> 滑动时间窗口算法是什么？</h2>
<p>​ 为了解决计数器算法的临界值的问题，发明了滑动窗口算法。在TCP网络通信协议中，就采用滑动时间窗口算法来解决网络拥堵问题。</p>
<p>​ 滑动时间窗口是将计数器算法中的实际周期切分成多个小的时间窗口，分别在每个小的时间窗口中记录访问次数，然后根据时间将窗口往前滑动并删除过期的小时间窗口。最终只需要统计滑动窗口范围内的小时间窗口的总的请求数即可。</p>
<p>​
在上图中，假设我们设置一分钟的请求阈值是100，我们将一分钟拆分成4个小时间窗口，这样，每个小的时间窗口只能处理25个请求，我们用虚线方框表示滑动时间窗口，当前窗口的大小是2，也就是在窗口内最多能处理50个请求。随着时间的推移，滑动窗口也随着时间往前移动，比如上图开始时，窗口是0:
00到0:30的这个范围，过了15秒后，窗口是0:15到0:45的这个范围，窗口中的请求重新清零，这样就很好的解决了计数器算法的临界值问题。</p>
<p>​ 在滑动时间窗口算法中，我们的小窗口划分的越多，滑动窗口的滚动就越平滑，限流的统计就会越精确。</p>
<h2> 漏桶限流算法是什么？</h2>
<p>​ 漏桶算法的原理就像它的名字一样，我们维持一个漏斗，它有恒定的流出速度，不管水流流入的速度有多快，漏斗出水的速度始终保持不变，类似于消息中间件，不管消息的生产者请求量有多大，消息的处理能力取决于消费者。</p>
<p>​ 漏桶的容量=漏桶的流出速度*可接受的等待时长。在这个容量范围内的请求可以排队等待系统的处理，超过这个容量的请求，才会被抛弃。</p>
<p>​ 在漏桶限流算法中，存在下面几种情况：</p>
<ol>
<li>
<p>当请求速度大于漏桶的流出速度时，也就是请求量大于当前服务所能处理的最大极限值时，触发限流策略。</p>
</li>
<li>
<p>请求速度小于或等于漏桶的流出速度时，也就是服务的处理能力大于或等于请求量时，正常执行。</p>
<p>漏桶算法有一个缺点：当系统在短时间内有突发的大流量时，漏桶算法处理不了。</p>
</li>
</ol>
<h2> 令牌桶限流算法是什么？</h2>
<p>​
令牌桶算法，是增加一个大小固定的容器，也就是令牌桶，系统以恒定的速率向令牌桶中放入令牌，如果有客户端来请求，先需要从令牌桶中拿一个令牌，拿到令牌，才有资格访问系统，这时令牌桶中少一个令牌。当令牌桶满的时候，再向令牌桶生成令牌时，令牌会被抛弃。</p>
<p>​ 在令牌桶算法中，存在以下几种情况：</p>
<ol>
<li>
<p>请求速度大于令牌的生成速度：那么令牌桶中的令牌会被取完，后续再进来的请求，由于拿不到令牌，会被限流。</p>
</li>
<li>
<p>请求速度等于令牌的生成速度：那么此时系统处于平稳状态。</p>
</li>
<li>
<p>请求速度小于令牌的生成速度：那么此时系统的访问量远远低于系统的并发能力，请求可以被正常处理。</p>
<p>令牌桶算法，由于有一个桶的存在，可以处理短时间大流量的场景。这是令牌桶和漏桶的一个区别。</p>
</li>
</ol>
<h2> 你设计微服务时遵循什么原则？</h2>
<ol>
<li>单一职责原则：让每个服务能独立，有界限的工作，每个服务只关注自己的业务。做到高内聚。</li>
<li>服务自治原则：每个服务要能做到独立开发、独立测试、独立构建、独立部署，独立运行。与其他服务进行解耦。</li>
<li>轻量级通信原则：让每个服务之间的调用是轻量级，并且能够跨平台、跨语言。比如采用RESTful风格，利用消息队列进行通信等。</li>
<li>粒度进化原则：对每个服务的粒度把控，其实没有统一的标准，这个得结合我们解决的具体业务问题。不要过度设计。服务的粒度随着业务和用户的发展而发展。</li>
</ol>
<p>​ 总结一句话，软件是为业务服务的，好的系统不是设计出来的，而是进化出来的。</p>
<h2> CAP定理是什么？</h2>
<p>​ CAP定理，又叫布鲁尔定理。指的是：在一个分布式系统中，最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p>
<ul>
<li>
<p>C：一致性（Consistency），数据在多个副本中保持一致，可以理解成两个用户访问两个系统A和B，当A系统数据有变化时，及时同步给B系统，让两个用户看到的数据是一致的。</p>
</li>
<li>
<p>A：可用性（Availability），系统对外提供服务必须一直处于可用状态，在任何故障下，客户端都能在合理时间内获得服务端非错误的响应。</p>
</li>
<li>
<p>P：分区容错性（Partition
tolerance），在分布式系统中遇到任何网络分区故障，系统仍然能对外提供服务。网络分区，可以这样理解，在分布式系统中，不同的节点分布在不同的子网络中，有可能子网络中只有一个节点，在所有网络正常的情况下，由于某些原因导致这些子节点之间的网络出现故障，导致整个节点环境被切分成了不同的独立区域，这就是网络分区。</p>
<p>我们来详细分析一下CAP，为什么只能满足两个。看下图所示：</p>
</li>
</ul>
<p>​ 用户1和用户2分别访问系统A和系统B，系统A和系统B通过网络进行同步数据。理想情况是：用户1访问系统A对数据进行修改，将data1改成了data2，同时用户2访问系统B，拿到的是data2数据。</p>
<p>​ 但是实际中，由于分布式系统具有八大谬论：</p>
<ul>
<li>
<p>网络相当可靠</p>
</li>
<li>
<p>延迟为零</p>
</li>
<li>
<p>传输带宽是无限的</p>
</li>
<li>
<p>网络相当安全</p>
</li>
<li>
<p>拓扑结构不会改变</p>
</li>
<li>
<p>必须要有一名管理员</p>
</li>
<li>
<p>传输成本为零</p>
</li>
<li>
<p>网络同质化</p>
</li>
</ul>
<p>我们知道，只要有网络调用，网络总是不可靠的。我们来一一分析。</p>
<ol>
<li>当网络发生故障时，系统A和系统B没法进行数据同步，也就是我们不满足P，同时两个系统依然可以访问，那么此时其实相当于是单机系统，就不是分布式系统了，所以既然我们是分布式系统，P必须满足。</li>
<li></li>
</ol>
<p>当P满足时，如果用户1通过系统A对数据进行了修改将data1改成了data2，也要让用户2通过系统B正确的拿到data2，那么此时是满足C，就必须等待网络将系统A和系统B的数据同步好，并且在同步期间，任何人不能访问系统B（让系统不可用），否则数据就不是一致的。此时满足的是CP。</p>
<ol start="3">
<li>当P满足时，如果用户1通过系统A对数据进行了修改将data1改成了data2，也要让系统B能继续提供服务，那么此时，只能接受系统A没有将data2同步给系统B（牺牲了一致性）。此时满足的就是AP。</li>
</ol>
<p>​ 我们在前面学过的注册中心Eureka就是满足
的AP，它并不保证C。而Zookeeper是保证CP，它不保证A。在生产中，A和C的选择，没有正确的答案，是取决于自己的业务的。比如12306，是满足CP，因为买票必须满足数据的一致性，不然一个座位多卖了，对铁路运输都是不可以接受的。</p>
<h2> BASE理论是什么？</h2>
<p>由于CAP中一致性C和可用性A无法兼得，eBay的架构师，提出了BASE理论，它是通过牺牲数据的强一致性，来获得可用性。它由于如下3种特征：</p>
<ul>
<li>
<p><strong>Basically Available</strong>（基本可用）：分布式系统在出现不可预知故障的时候，允许损失部分可用性，保证核心功能的可用。</p>
</li>
<li>
<p><strong>Soft state</strong>（软状态）：软状态也称为弱状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。、</p>
</li>
<li>
<p><strong>Eventually consistent</strong>
（最终一致性）：最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p>
</li>
</ul>
<p>​
BASE理论并没有要求数据的强一致性，而是允许数据在一定的时间段内是不一致的，但在最终某个状态会达到一致。在生产环境中，很多公司，会采用BASE理论来实现数据的一致，因为产品的可用性相比强一致性来说，更加重要。比如在电商平台中，当用户对一个订单发起支付时，往往会调用第三方支付平台，比如支付宝支付或者微信支付，调用第三方成功后，第三方并不能及时通知我方系统，在第三方没有通知我方系统的这段时间内，我们给用户的订单状态显示支付中，等到第三方回调之后，我们再将状态改成已支付。虽然订单状态在短期内存在不一致，但是用户却获得了更好的产品体验。</p>
<h2> 2PC提交协议是什么？</h2>
<p>二阶段提交(Two-phaseCommit)是指，在计算机网络以及数据库领域内，为了使基于分布式系统架构下的所有节点在进行事务提交时保持一致性而设计的一种算法(Algorithm)。通常，二阶段提交也被称为是一种协议(Protocol))
。在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为协调者的组件来统一掌控所有节点(称作参与者)
的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。因此，**
二阶段提交的算法思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。**</p>
<p>所谓的两个阶段是指：第一阶段：**准备阶段(投票阶段)**和第二阶段：<strong>提交阶段（执行阶段）</strong>。</p>
<p>准备阶段</p>
<p>事务协调者(事务管理器)给每个参与者(资源管理器)发送Prepare消息，每个参与者要么直接返回失败(如权限验证失败)，要么在本地执行事务，写本地的redo和undo日志，但不提交，到达一种“万事俱备，只欠东风”的状态。</p>
<p>可以进一步将准备阶段分为以下三个步骤：</p>
<blockquote>
<p>1）协调者节点向所有参与者节点询问是否可以执行提交操作(vote)，并开始等待各参与者节点的响应。</p>
<p>2）参与者节点执行询问发起为止的所有事务操作，并将Undo信息和Redo信息写入日志。（注意：若成功这里其实每个参与者已经执行了事务操作）</p>
<p>3）各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个”同意”消息；如果参与者节点的事务操作实际执行失败，则它返回一个”中止”消息。</p>
</blockquote>
<p>提交阶段</p>
<blockquote>
<p>如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:
必须在最后阶段释放锁资源)</p>
<p>接下来分两种情况分别讨论提交阶段的过程。</p>
<p>当协调者节点从所有参与者节点获得的相应消息都为”同意”时:</p>
<p><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/success.png" target="_blank" rel="noopener noreferrer">success.png</a></p>
<blockquote>
<p>1）协调者节点向所有参与者节点发出”正式提交(commit)”的请求。</p>
<p>2）参与者节点正式完成操作，并释放在整个事务期间内占用的资源。</p>
<p>3）参与者节点向协调者节点发送”完成”消息。</p>
<p>4）协调者节点受到所有参与者节点反馈的”完成”消息后，完成事务。</p>
</blockquote>
</blockquote>
<p>如果任一参与者节点在第一阶段返回的响应消息为”中止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：</p>
<p><a href="http://www.hollischuang.com/wp-content/uploads/2015/12/fail.png" target="_blank" rel="noopener noreferrer">fail.png</a></p>
<blockquote>
<p>1）协调者节点向所有参与者节点发出”回滚操作(rollback)”的请求。</p>
<p>2）参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。</p>
<p>3）参与者节点向协调者节点发送”回滚完成”消息。</p>
<p>4）协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。</p>
</blockquote>
<p>不管最后结果如何，第二阶段都会结束当前事务。</p>
<h2> 2PC提交协议有什么缺点？</h2>
<ol>
<li>
<p><strong>同步阻塞问题</strong>。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。</p>
</li>
<li>
<p><strong>单点故障</strong>
。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题）</p>
</li>
<li>
<p><strong>数据不一致</strong>
。在二阶段提交的阶段二中，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了commit请求。而在这部分参与者接到commit请求之后就会执行commit操作。但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。</p>
</li>
<li>
<p>二阶段无法解决的问题：协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</p>
</li>
</ol>
<h2> 3PC提交协议是什么？</h2>
<p>CanCommit阶段</p>
<p>3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p>
<blockquote>
<p><strong>1.事务询问</strong> 协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。</p>
<p><strong>2.响应反馈</strong> 参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No</p>
</blockquote>
<p>PreCommit阶段</p>
<p>协调者根据参与者的反应情况来决定是否可以进行事务的PreCommit操作。根据响应情况，有以下两种可能。</p>
<p><strong>假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。</strong></p>
<blockquote>
<p><strong>1.发送预提交请求</strong> 协调者向参与者发送PreCommit请求，并进入Prepared阶段。</p>
<p><strong>2.事务预提交</strong> 参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。</p>
<p><strong>3.响应反馈</strong> 如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</p>
</blockquote>
<p><strong>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</strong></p>
<blockquote>
<p><strong>1.发送中断请求</strong> 协调者向所有参与者发送abort请求。</p>
<p><strong>2.中断事务</strong> 参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</p>
</blockquote>
<p>pre阶段参与者没收到请求，rollback。</p>
<p>doCommit阶段</p>
<p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p>
<p><strong>执行提交</strong></p>
<blockquote>
<p><strong>1.发送提交请求</strong> 协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。</p>
<p><strong>2.事务提交</strong> 参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</p>
<p><strong>3.响应反馈</strong> 事务提交完之后，向协调者发送Ack响应。</p>
<p><strong>4.完成事务</strong> 协调者接收到所有参与者的ack响应之后，完成事务。</p>
</blockquote>
<p><strong>中断事务</strong> 协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</p>
<blockquote>
<p><strong>1.发送中断请求</strong> 协调者向所有参与者发送abort请求</p>
<p><strong>2.事务回滚</strong> 参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p>
<p><strong>3.反馈结果</strong> 参与者完成事务回滚之后，向协调者发送ACK消息</p>
<p><strong>4.中断事务</strong> 协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</p>
</blockquote>
<h2> 2PC和3PC的区别是什么？</h2>
<p>1、引入超时机制。同时在协调者和参与者中都引入超时机制。</p>
<p>2、三阶段在2PC的第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。</p>
<ul>
<li>
<h2> TCC解决方案是什么?</h2>
<p>​ TCC（Try-Confirm-Cancel）是一种常用的分布式事务解决方案，它将一个事务拆分成三个步骤：</p>
<ul>
<li>
<p>T（Try）：业务检查阶段，这阶段主要进行业务校验和检查或者资源预留；也可能是直接进行业务操作。</p>
</li>
<li>
<p>C（Confirm）：业务确认阶段，这阶段对Try阶段校验过的业务或者预留的资源进行确认。</p>
</li>
<li>
<p>C（Cancel）：业务回滚阶段，这阶段和上面的C（Confirm）是互斥的，用于释放Try阶段预留的资源或者业务。</p>
</li>
</ul>
</li>
</ul>
<h2> TCC空回滚是解决什么问题的？</h2>
<p>​
在没有调用TCC资源Try方法的情况下，调用了二阶段的Cancel方法。比如当Try请求由于网络延迟或故障等原因，没有执行，结果返回了异常，那么此时Cancel就不能正常执行，因为Try没有对数据进行修改，如果Cancel进行了对数据的修改，那就会导致数据不一致。
​ 解决思路是关键就是要识别出这个空回滚。思路很简单就是需要知道Try阶段是否执行，如果执行了，那就是正常回滚；如果没执行，那就是空回滚。建议TM在发起全局事务时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链条。再额外增加一张**
分支事务记录表**，其中有全局事务ID和分支事务ID，第一阶段Try方法里会插入一条记录，表示Try阶段执行了。Cancel接口里读取该记录，如果该记录存在，则正常回滚；如果该记录不存在，则是空回滚。</p>
<h2> 如何解决TCC幂等问题？</h2>
<p>为了保证TCC二阶段提交重试机制不会引发数据不一致，要求TCC的二阶段Confirm和Cancel接口保证幂等，这样不会重复使用或者释放资源。如果幂等控制没有做好，很有可能导致数据不一致等严重问题。
解决思路在上述 <strong>分支事务记录</strong>中增加执行状态，每次执行前都查询该状态。</p>
<p>分布式锁。</p>
<h2> 如何解决TCC中悬挂问题？</h2>
<p>悬挂就是对于一个分布式事务，其二阶段Cancel接口比Try接口先执行。
出现原因是在调用分支事务Try时，由于网络发生拥堵，造成了超时，TM就会通知RM回滚该分布式事务，可能回滚完成后，Try请求才到达参与者真正执行，而一个Try方法预留的业务资源，只有该分布式事务才能使用，该分布式事务第一阶段预留的业务资源就再也没有人能够处理了，对于这种情况，我们就称为悬挂，即业务资源预留后无法继续处理。
解决思路是如果二阶段执行完成，那一阶段就不能再继续执行。在执行一阶段事务时判断在该全局事务下，判断<strong>分支事务记录表</strong>中是否已经有二阶段事务记录，如果有则不执行Try。</p>
<h2> 可靠消息服务方案是什么？</h2>
<p>​ 可靠消息最终一致性方案指的是：当事务的发起方（事务参与者，消息发送者）执行完本地事务后，同时发出一条消息，事务参与方（事务参与者，消息的消费者）一定能够接受消息并可以成功处理自己的事务。</p>
<p>​ 这里面强调两点：</p>
<ol>
<li>可靠消息：发起方一定得把消息传递到消费者。</li>
<li>最终一致性：最终发起方的业务处理和消费方的业务处理得完成，达成最终一致。</li>
</ol>
<h2> 最大努力通知方案的关键是什么？</h2>
<ol>
<li>有一定的消息重复通知机制。因为接收通知方（上图中的我方支付系统）可能没有接收到通知，此时要有一定的机制对消息重复通知。</li>
<li>消息校对机制。如果尽最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询消息信息来满足需求。</li>
</ol>
<h2> 什么是分布式系统中的幂等？</h2>
<p>幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。</p>
<p>在编程中，一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。</p>
<p>例如，“getUsername()和 setTrue()”函数就是一个幂等函数. 更复杂的操作幂等保证是利用唯一交易号(流水号)实现. 我的理解：幂等就是一个操作，不论执行多少次，产生的效果和返回的结果都是一样的。</p>
<p>操作：查询，set固定值。逻辑删除。set 固定值。</p>
<p>流程：分布式系统中，网络调用，重试机制。</p>
<h2> 幂等有哪些技术解决方案？</h2>
<p>1.查询操作</p>
<p>查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select 是天然的幂等操作；</p>
<p>2.删除操作</p>
<p>删除操作也是幂等的，删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回 0，删除的数据多条，返回结果多个。</p>
<p>3.唯一索引</p>
<p>防止新增脏数据。比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建多个资金账户，那么给资金账户表中的用户 ID
加唯一索引，所以一个用户新增成功一个资金账户记录。要点：唯一索引或唯一组合索引来防止新增数据存在脏数据（当表存在唯一索引，并发时新增报错时，再查询一次就可以了，数据应该已经存在了，返回结果即可。</p>
<p>4.token 机制</p>
<p>防止页面重复提交。</p>
<p>**业务要求：**页面的数据只能被点击提交一次；</p>
<p>**发生原因：**由于重复点击或者网络重发，或者 nginx 重发等情况会导致数据被重复提交；</p>
<p>**解决办法：**集群环境采用 token 加 redis(redis 单线程的，处理需要排队)；单 JVM 环境：采用 token 加 redis 或 token 加 jvm 锁。</p>
<p><strong>处理流程：</strong></p>
<ol>
<li>数据提交前要向服务的申请 token，token 放到 redis 或 jvm 内存，token 有效时间；</li>
<li>提交后后台校验 token，同时删除 token，生成新的 token 返回。</li>
</ol>
<p>**token 特点：**要申请，一次有效性，可以限流。</p>
<p>注意：redis 要用删除操作来判断 token，删除成功代表 token 校验通过。</p>
<ol start="5">
<li>
<p>traceId</p>
<p>操作时唯一的。</p>
</li>
</ol>
<h2> 对外提供的API如何保证幂等？</h2>
<p>举例说明： 银联提供的付款接口：需要接入商户提交付款请求时附带：source 来源，seq 序列号。</p>
<p>source+seq 在数据库里面做唯一索引，防止多次付款(并发时，只能处理一个请求) 。重点：对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源 source，一个是来源方序列号
seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。</p>
<p>注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理。</p>
<h2> 双写一致性问题如何解决？</h2>
<p>先做一个说明，从理论上来说，给缓存设置过期时间，是保证最终一致性的解决方案。这种方案下，我们可以对存入缓存的数据设置过期时间，所有的写操作以数据库为准，对缓存操作只是尽最大努力更新即可。也就是说如果数据库写成功，缓存更新失败，那么只要到达过期时间，则后面的读请求自然会从数据库中读取新值然后回填缓存。因此，接下来讨论的思路不依赖于给缓存设置过期时间这个方案。
在这里，我们讨论<strong>三种</strong>更新策略：</p>
<ol>
<li>先更新缓存，再更新数据库。（不可取）</li>
<li>先更新数据库，再更新缓存。（不可取）</li>
<li>先删除缓存，再更新数据库。（不可取）</li>
<li>先更新数据库，再删除缓存。（可取，有问题待解决）</li>
</ol>
<h3> 大前提</h3>
<p>先读缓存，如果缓存没有，才从数据库读取。</p>
<h4> (1)先更新数据库，再更新缓存</h4>
<p>这套方案，大家是普遍反对的。为什么呢？有如下两点原因。</p>
<p><strong>原因一（线程安全角度）</strong></p>
<p>同时有请求A和请求B进行更新操作，那么会出现</p>
<ol>
<li>线程A更新了数据库</li>
<li>线程B更新了数据库</li>
<li>线程B更新了缓存</li>
<li>线程A更新了缓存</li>
</ol>
<p>这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据，因此不考虑。</p>
<p><strong>原因二（业务场景角度）</strong></p>
<p>有如下两点：</p>
<ol>
<li>如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。</li>
<li>如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。</li>
</ol>
<p>接下来讨论的就是争议最大的，先删缓存，再更新数据库。还是先更新数据库，再删缓存的问题。</p>
<h4> (2)先删缓存，再更新数据库</h4>
<p>该方案会导致不一致的原因是。同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么会出现如下情形:</p>
<ol>
<li>请求A进行写操作，删除缓存</li>
<li>请求B查询发现缓存不存在</li>
<li>请求B去数据库查询得到旧值</li>
<li>请求B将旧值写入缓存</li>
<li>请求A将新值写入数据库</li>
</ol>
<p>上述情况就会导致不一致的情形出现。而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。
那么，<strong>如何解决呢？采用延时双删策略</strong></p>
<ol>
<li>先淘汰缓存</li>
<li>再写数据库（这两步和原来一样）</li>
<li>休眠1秒，再次淘汰缓存</li>
</ol>
<p>这么做，可以将1秒内所造成的缓存脏数据，再次删除。</p>
<p><strong>那么，这个1秒怎么确定的，具体该休眠多久呢？</strong></p>
<p>针对上面的情形，读者应该自行评估自己的项目的读数据业务逻辑的耗时。然后写数据的休眠时间则在读数据业务逻辑的耗时基础上，加几百ms即可。这么做的目的，就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</p>
<p><strong>如果你用了mysql的读写分离架构怎么办？</strong></p>
<p>ok，在这种情况下，造成数据不一致的原因如下，还是两个请求，一个请求A进行更新操作，另一个请求B进行查询操作。</p>
<ol>
<li>请求A进行写操作，删除缓存</li>
<li>请求A将数据写入数据库了，</li>
<li>请求B查询缓存发现，缓存没有值</li>
<li>请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值</li>
<li>请求B将旧值写入缓存</li>
<li>数据库完成主从同步，从库变为新值</li>
</ol>
<p>上述情形，就是数据不一致的原因。还是使用双删延时策略。只是，睡眠时间修改为在主从同步的延时时间基础上，加几百ms。</p>
<p><strong>采用这种同步淘汰策略，吞吐量降低怎么办？</strong></p>
<p>ok，那就将第二次删除作为异步的。自己起一个线程，异步删除。这样，写的请求就不用沉睡一段时间后了，再返回。这么做，加大吞吐量。</p>
<p><strong>第二次删除,如果删除失败怎么办？</strong></p>
<p>这是个非常好的问题，因为第二次删除失败，就会出现如下情形。还是有两个请求，一个请求A进行更新操作，另一个请求B进行查询操作，为了方便，假设是单库：</p>
<ol>
<li>请求A进行写操作，删除缓存</li>
<li>请求B查询发现缓存不存在</li>
<li>请求B去数据库查询得到旧值</li>
<li>请求B将旧值写入缓存</li>
<li>请求A将新值写入数据库</li>
<li>请求A试图去删除，请求B写入对的缓存值，结果失败了。</li>
</ol>
<p>ok,这也就是说。如果第二次删除缓存失败，会再次出现缓存和数据库不一致的问题。</p>
<p><strong>如何解决呢？</strong></p>
<h4> (3)先更新数据库，再删缓存</h4>
<p>首先，先说一下。老外提出了一个缓存更新套路，名为<a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cache-aside" target="_blank" rel="noopener noreferrer">《Cache-Aside pattern》</a>
。其中就指出</p>
<ul>
<li><strong>失效</strong>：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li>
<li><strong>命中</strong>：应用程序从cache中取数据，取到后返回。</li>
<li><strong>更新</strong>：先把数据存到数据库中，成功后，再让缓存失效。</li>
</ul>
<p>另外，知名社交网站facebook也在论文<a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf" target="_blank" rel="noopener noreferrer">《Scaling Memcache at Facebook》</a>
中提出，他们用的也是先更新数据库，再删缓存的策略。
<strong>这种情况不存在并发问题么？</strong>
不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p>
<ol>
<li>缓存刚好失效</li>
<li>请求A查询数据库，得一个旧值</li>
<li>请求B将新值写入数据库</li>
<li>请求B删除缓存</li>
<li>请求A将查到的旧值写入缓存</li>
</ol>
<p>ok，如果发生上述情况，确实是会发生脏数据。</p>
<p><strong>然而，发生这种情况的概率又有多少呢？</strong></p>
<p>发生上述情况有一个先天性条件，就是步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（3）耗时比步骤（2）更短，这一情形很难出现。
假设，有人非要抬杠，有强迫症，一定要解决怎么办？</p>
<p><strong>如何解决上述并发问题？</strong></p>
<p>首先，给缓存设有效时间是一种方案。其次，采用策略（2）里给出的异步延时删除策略，保证读请求完成以后，再进行删除操作。</p>
<p><strong>还有其他造成不一致的原因么？</strong></p>
<p>有的，这也是缓存更新策略（2）和缓存更新策略（3）都存在的一个问题，如果删缓存失败了怎么办，那不是会有不一致的情况出现么。比如一个写数据请求，然后写入数据库了，删缓存失败了，这会就出现不一致的情况了。这也是缓存更新策略（2）里留下的最后一个疑问。</p>
<p><strong>如何解决？</strong></p>
<p>提供一个保障的重试机制即可，这里给出两套方案。</p>
<p><strong>方案一</strong>：</p>
<p>如下图所示</p>
<p>流程如下所示</p>
<ol>
<li>更新数据库数据；</li>
<li>缓存因为种种问题删除失败</li>
<li>将需要删除的key发送至消息队列</li>
<li>自己消费消息，获得需要删除的key</li>
<li>继续重试删除操作，直到成功</li>
</ol>
<p>然而，该方案有一个缺点，对业务线代码造成大量的侵入。于是有了方案二，在方案二中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作。</p>
<p><strong>方案二</strong>：</p>
<p>流程如下图所示：</p>
<ol>
<li>更新数据库数据</li>
<li>数据库会将操作信息写入binlog日志当中</li>
<li>订阅程序提取出所需要的数据以及key</li>
<li>另起一段非业务代码，获得该信息</li>
<li>尝试删除缓存操作，发现删除失败</li>
<li>将这些信息发送至消息队列</li>
<li>重新从消息队列中获得该数据，重试操作。</li>
</ol>
<p><strong>备注说明：</strong>
上述的订阅binlog程序在mysql中有现成的中间件叫canal，可以完成订阅binlog日志的功能。至于oracle中，博主目前不知道有没有现成中间件可以使用。另外，重试机制，博主是采用的是消息队列的方式。如果对一致性要求不是很高，直接在程序中另起一个线程，每隔一段时间去重试即可，这些大家可以灵活自由发挥，只是提供一个思路。</p>
<h2> 分布式微服务项目你是如何设计的？</h2>
<p>我一般设计成两层：业务层和能力层（中台），业务层接受用户请求，然后通过调用能力层来完成业务逻辑。</p>
<h2> 认证 (Authentication) 和授权 (Authorization)的区别是什么？</h2>
<p>Authentication（认证） 是验证您的身份的凭据（例如用户名/用户ID和密码），通过这个凭据，系统得以知道你就是你，也就是说系统存在你这个用户。所以，Authentication 被称为身份/用户验证。
Authorization（授权） 发生在 Authentication（认证） 之后。授权，它主要掌管我们访问系统的权限。比如有些特定资源只能具有特定权限的人才能访问比如admin，有些对系统资源操作比如删除、添加、更新只能特定人才具有。
这两个一般在我们的系统中被结合在一起使用，目的就是为了保护我们系统的安全性。</p>
<h2> Cookie 和 Session 有什么区别？如何使用Session进行身份验证？</h2>
<p>Session 的主要作用就是通过服务端记录用户的状态。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session
之后就可以标识这个用户并且跟踪这个用户了。</p>
<p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。相对来说 Session 安全性更高。如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie
信息加密然后使用到的时候再去服务器端解密。</p>
<p>那么，如何使用Session进行身份验证？</p>
<p>很多时候我们都是通过 SessionID 来实现特定的用户，SessionID 一般会选择存放在 Redis 中。举个例子：用户成功登陆系统，然后返回给客户端具有 SessionID 的 Cookie，当用户向后端发起请求的时候会把
SessionID 带上，这样后端就知道你的身份状态了。关于这种认证方式更详细的过程如下：</p>
<p>用户向服务器发送用户名和密码用于登陆系统。</p>
<p>服务器验证通过后，服务器为用户创建一个 Session，并将 Session信息存储 起来。</p>
<p>服务器向用户返回一个 SessionID，写入用户的 Cookie。</p>
<p>当用户保持登录状态时，Cookie 将与每个后续请求一起被发送出去。</p>
<p>服务器可以将存储在 Cookie 上的 Session ID 与存储在内存中或者数据库中的 Session 信息进行比较，以验证用户的身份，返回给用户客户端响应信息的时候会附带用户当前的状态。</p>
<p>使用 Session 的时候需要注意下面几个点：</p>
<ul>
<li>依赖Session的关键业务一定要确保客户端开启了Cookie。</li>
<li>注意Session的过期时间</li>
</ul>
<h2> 为什么Cookie 无法防止CSRF攻击，而token可以？</h2>
<p><strong>CSRF（Cross Site Request Forgery）</strong> 一般被翻译为 跨站请求伪造 。那么什么是 跨站请求伪造 呢？说简单用你的身份去发送一些对你不友好的请求。举个简单的例子：</p>
<p>小壮登录了某网上银行，他来到了网上银行的帖子区，看到一个帖子下面有一个链接写着“科学理财，年盈利率过万”，小壮好奇的点开了这个链接，结果发现自己的账户少了10000元。这是这么回事呢？原来黑客在链接中藏了一个请求，这个请求直接利用小壮的身份给银行发送了一个转账请求,也就是通过你的
Cookie 向银行发出请求。</p>
<p>进行Session 认证的时候，我们一般使用 Cookie 来存储
SessionId,当我们登陆后后端生成一个SessionId放在Cookie中返回给客户端，服务端通过Redis或者其他存储工具记录保存着这个Sessionid，客户端登录以后每次请求都会带上这个SessionId，服务端通过这个SessionId来标示你这个人。如果别人通过
cookie拿到了 SessionId 后就可以代替你的身份访问系统了。</p>
<p>Session 认证中 Cookie 中的 SessionId是由浏览器发送到服务端的，借助这个特性，攻击者就可以通过让用户误点攻击链接，达到攻击效果。</p>
<p>但是，我们使用 token 的话就不会存在这个问题，在我们登录成功获得 token 之后，一般会选择存放在 local storage 中。然后我们在前端通过某些方式会给每个发到后端的请求加上这个 token,这样就不会出现 CSRF
漏洞的问题。因为，即使有个你点击了非法链接发送了请求到服务端，这个非法请求是不会携带 token 的，所以这个请求将是非法的。</p>
<h2> 什么是 Token?什么是 JWT?如何基于Token进行身份验证？</h2>
<p>我们知道 Session 信息需要保存一份在服务器端。这种方式会带来一些麻烦，比如需要我们保证保存 Session 信息服务器的可用性、不适合移动端（依赖Cookie）等等。</p>
<p>有没有一种不需要自己存放 Session 信息就能实现身份验证的方式呢？使用 Token 即可！JWT （JSON Web Token） 就是这种方式的实现，通过这种方式服务器端就不需要保存 Session
数据了，只用在客户端保存服务端返回给客户的 Token 就可以了，扩展性得到提升。</p>
<p>JWT 本质上就一段签名的 JSON 格式的数据。由于它是带有签名的，因此接收者便可以验证它的真实性。</p>
<p>下面是 RFC 7519 对 JWT 做的较为正式的定义。</p>
<blockquote>
<p>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.
The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS)
structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally
signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted. ——JSON Web Token (JWT)</p>
</blockquote>
<p>JWT 由 3 部分构成:</p>
<p>Header :描述 JWT 的元数据。定义了生成签名的算法以及 Token 的类型。</p>
<p>Payload（负载）:用来存放实际需要传递的数据</p>
<p>Signature（签名）：服务器通过Payload、Header和一个密钥(secret)使用 Header 里面指定的签名算法（默认是 HMAC SHA256）生成。</p>
<p>在基于 Token 进行身份验证的的应用程序中，服务器通过Payload、Header和一个密钥(secret)创建令牌（Token）并将 Token 发送给客户端，客户端将 Token 保存在 Cookie 或者 localStorage
里面，以后客户端发出的所有请求都会携带这个令牌。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP Header 的 Authorization字段中：Authorization: Bearer
Token。</p>
<blockquote>
<p>用户向服务器发送用户名和密码用于登陆系统。</p>
<p>身份验证服务响应并返回了签名的 JWT，上面包含了用户是谁的内容。</p>
<p>用户以后每次向后端发请求都在Header中带上 JWT。</p>
<p>服务端检查 JWT 并从中获取用户相关信息。</p>
</blockquote>
<h2> 分布式架构下，Session 共享有什么方案?</h2>
<ol>
<li>不要有session：但是确实在某些场景下，是可以没有session的，其实在很多接口类系统当中，都提倡【API无状态服务】；也就是每一次的接口访问，都不依赖于session、不依赖于前一次的接口访问；</li>
<li>存入cookie中：将session存储到cookie中，但是缺点也很明显，例如每次请求都得带着session，数据存储在客户端本地，是有风险的；</li>
<li>session同步：对个服务器之间同步session，这样可以保证每个服务器上都有全部的session信息，不过当服务器数量比较多的时候，同步是会有延迟甚至同步失败；</li>
<li>使用Nginx（或其他复杂均衡软硬件）中的ip绑定策略，同一个ip只能在指定的同一个机器访问，但是这样做风险也比较大，而且也是去了负载均衡的意义；</li>
<li></li>
</ol>
<p>我们现在的系统会把session放到Redis中存储，虽然架构上变得复杂，并且需要多访问一次Redis，但是这种方案带来的好处也是很大的：实现session共享，可以水平扩展（增加Redis服务器），服务器重启session不丢失（不过也要注意session在Redis中的刷新/失效机制），不仅可以跨服务器session共享，甚至可以跨平台（例如网页端和APP端）。</p>
<h2> springcloud核心组件有哪些？</h2>
<ol>
<li>分布式系统套件版本：Spring Cloud + Alibaba / Netflix</li>
<li><strong>服务注册与发现</strong>：Eureka / Consul / Nacos / Zookeeper</li>
<li><strong>配置中心</strong>：Config / Nacos</li>
<li><strong>网关路由</strong>：Gateway / Netflix Zull (动态网关)</li>
<li><strong>服务调用</strong>：Netflix Feign / OpenFeign（推荐） / RestTemplate（使用繁琐、冗余，不推荐）</li>
<li><strong>负载均衡</strong>：SpringCloud LoadBalancer / Ribbon / Nginx</li>
<li><strong>服务熔断器</strong>：Sentinel / Hystrix (限流、熔断降级、负载保护) / Resilience4J</li>
<li><strong>分布式事务</strong>：Seata / TX-LCN  (可选组件)</li>
<li><strong>链路追踪</strong>：Sleuth + Zipkin / Skywalking / Pinpoint (可选组件)</li>
<li><strong>监控中心</strong>：SpringBoot Admin</li>
<li>工作流引擎框架：Flowable (可选组件)</li>
<li>分布式定时任务：xxl-job (可选组件)</li>
</ol>
<h2> 微服务架构原理是什么？</h2>
<p>主要是面向SOA理念，更细小粒度服务的拆分，将功能分解到各个服务当中，从而降低系统的耦合性，并提供更加灵活的服务支持。</p>
<h2> 注册中心的原理是什么？</h2>
<p>服务启动后向Eureka注册，Eureka Server会将注册信息向其他Eureka
Server进行同步，当服务消费者要调用服务提供者，则向服务注册中心获取服务提供者地址，然后会将服务提供者地址缓存在本地，下次再调用时，则直接从本地缓存中取，完成一次调用</p>
<h2> 配置中心的原理是什么？</h2>
<p>在服务运行之前，将所需的配置信息从配置仓库拉取到本地服务，达到统一化配置管理的目的</p>
<h2> 配置中心是如何实现自动刷新的？</h2>
<ol>
<li>
<p>配置中心Server端承担起配置刷新的职责</p>
</li>
<li>
<p>提交配置触发post请求给server端的bus/refresh接口</p>
</li>
<li>
<p>server端接收到请求并发送给Spring Cloud Bus总线</p>
</li>
<li>
<p>Spring Cloud bus接到消息并通知给其它连接到总线的客户端</p>
</li>
<li>
<p>其它客户端接收到通知，请求Server端获取最新配置</p>
</li>
<li>
<p>全部客户端均获取到最新的配置</p>
</li>
</ol>
<h2> 配置中心是如何保证数据安全的?</h2>
<p>1.保证容器文件访问的安全性，即保证所有的网络资源请求都需要登录</p>
<p>2.将配置中心里所有配置文件中的密码进行加密，保证其密文性</p>
<p>3.开发环境禁止拉取生产环境的配置文件</p>
<h2> 用zookeeper和eureka做注册中心有什么区别?</h2>
<p>Zookeeper保证的是CP（一致性，容错性）, 而Eureka则是AP（可用性，容错性）。</p>
<h2> Spring Cloud和Dubbo有哪些区别?</h2>
<ol>
<li>dubbo 是二进制传输，对象直接转成二进制，使用RPC通信。</li>
</ol>
<p>SpringCloud是http 传输，同时使用http协议一般会使用JSON报文，json再转二进制，消耗会更大。</p>
<ol start="2">
<li>Dubbo只是实现了服务治理，而Spring Cloud下面有几十个子项目分别覆盖了微服务架构下的方方面面，服务治理只是其中的一个方面，一定程度来说，Dubbo只是Spring Cloud Netflix中的一个子集。</li>
</ol>
<h2> Ribbon负载均衡原理是什么?</h2>
<ol>
<li>
<p>Ribbon通过ILoadBalancer接口对外提供统一的选择服务器(Server)的功能，此接口会根据不同的负载均衡策略(IRule)选择合适的Server返回给使用者。</p>
</li>
<li>
<p>IRule是负载均衡策略的抽象，ILoadBalancer通过调用IRule的choose()方法返回Server</p>
</li>
<li>
<p>IPing用来检测Server是否可用，ILoadBalancer的实现类维护一个Timer每隔10s检测一次Server的可用状态</p>
</li>
<li>
<p>IClientConfig主要定义了用于初始化各种客户端和负载均衡器的配置信息，器实现类为DefaultClientConfigImpl</p>
</li>
</ol>
<h2> 微服务熔断降级机制是什么?</h2>
<p>微服务框架是许多服务互相调用的，要是不做任何保护的话，某一个服务挂了，就会引起连锁反应，导致别的服务也挂。Hystrix 是隔离、熔断以及降级的一个框架。如果调用某服务报错（或者挂了），就对该服务熔断，在 5
分钟内请求此服务直接就返回一个默认值，不需要每次都卡几秒，这个过程，就是所谓的熔断。但是熔断了之后就会少调用一个服务，此时需要做下标记，标记本来需要做什么业务，但是因为服务挂了，暂时没有做，等该服务恢复了，就可以手工处理这些业务。这个过程，就是所谓的降级。</p>
<h2> 什么是Hystrix？实现原理是什么?</h2>
<p>Hystrix是一个延迟和容错库，旨在隔离对远程系统、服务和第三方库的访问点，停止级联故障，并在 不可避免发生故障的复杂分布式系统中实现快速恢复。主要靠Spring的AOP实现</p>
<p>实现原理</p>
<p>正常情况下，断路器关闭，服务消费者正常请求微服务</p>
<p>一段事件内，失败率达到一定阈值，断路器将断开，此时不再请求服务提供者，而是只是快速失败的方法（断路方法）</p>
<p>断路器打开一段时间，自动进入“半开”状态，此时，断路器可允许一个请求方法服务提供者，如果请求调用成功，则关闭断路器，否则继续保持断路器打开状态。</p>
<p>断路器hystrix是保证了局部发生的错误，不会扩展到整个系统，从而保证系统的即使出现局部问题也不会造成系统雪崩</p>
<h2> 注册中心挂了，或者服务挂了，应该如何处理?</h2>
<p>注册中心挂了，可以读取本地持久化里的配置</p>
<p>服务挂了 应该配有服务监控中心 感知到服务下线后可以通过配置的邮件通知相关人员排查问题。</p>
<h2> 说说你对RPC、RMI如何理解?</h2>
<p>RPC 远程过程调用协议，通过网络从远程计算机上请求调用某种服务。</p>
<p>RMI:远程方法调用 能够让在客户端Java虚拟机上的对象像调用本地对象一样调用服务端java 虚拟机中的对象上的方法。</p>
<h2> redis持久化机制：RDB和AOF</h2>
<h3> Redis 持久化</h3>
<p>Redis 提供了不同级别的持久化方式:</p>
<ul>
<li>
<p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储.</p>
</li>
<li>
<p>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大.</p>
</li>
<li>
<p>如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</p>
</li>
<li>
<p>你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</p>
</li>
<li>
<p>最重要的事情是了解RDB和AOF持久化方式的不同,让我们以RDB持久化方式开始:</p>
</li>
</ul>
<h3> RDB的优点</h3>
<ul>
<li>
<p>RDB是一个非常紧凑的文件,它保存了某个时间点得数据集,非常适用于数据集的备份,比如你可以在每个小时报保存一下过去24小时内的数据,同时每天保存过去30天的数据,这样即使出了问题你也可以根据需求恢复到不同版本的数据集.</p>
</li>
<li>
<p>RDB是一个紧凑的单一文件,很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于灾难恢复.</p>
</li>
<li>
<p>RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程,接下来的工作全部由子进程来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能.</p>
</li>
<li>
<p>与AOF相比,在恢复大的数据集的时候，RDB方式会更快一些.</p>
</li>
</ul>
<h3> RDB的缺点</h3>
<ul>
<li>
<p>如果你希望在redis意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么RDB不适合你.虽然你可以配置不同的save时间点(例如每隔5分钟并且对数据集有100个写的操作)
,是Redis要完整的保存整个数据集是一个比较繁重的工作,你通常会每隔5分钟或者更久做一次完整的保存,万一在Redis意外宕机,你可能会丢失几分钟的数据.</p>
</li>
<li>
<p>RDB
需要经常fork子进程来保存数据集到硬盘上,当数据集比较大的时候,fork的过程是非常耗时的,可能会导致Redis在一些毫秒级内不能响应客户端的请求.如果数据集巨大并且CPU性能不是很好的情况下,这种情况会持续1秒,AOF也需要fork,但是你可以调节重写日志文件的频率来提高数据集的耐久度.</p>
</li>
</ul>
<h3> AOF 优点</h3>
<ul>
<li>
<p>使用AOF 会让你的Redis更加耐久: 你可以使用不同的fsync策略：无fsync,每秒fsync,每次写的时候fsync.使用默认的每秒fsync策略,Redis的性能依然很好(
fsync是由后台线程进行处理的,主线程会尽力处理客户端请求),一旦出现故障，你最多丢失1秒的数据.</p>
</li>
<li>
<p>AOF文件是一个只进行追加的日志文件,所以不需要写入seek,即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令,你也也可使用redis-check-aof工具修复这些问题.</p>
</li>
<li>
<p>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF
文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF
文件进行追加操作。</p>
</li>
<li>
<p>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单：
举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL
执行之前的状态。</p>
</li>
</ul>
<h3> AOF 缺点</h3>
<ul>
<li>
<p>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</p>
</li>
<li>
<p>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。
不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</p>
</li>
</ul>
<h3> 4.X版本的整合策略</h3>
<p>在AOF重写策略上做了优化</p>
<p>在重写AOF文件时，4.x版本以前是把内存数据集的操作指令落地，而新版本是把内存的数据集以rdb的形式落地</p>
<p>这样重写后的AOF依然追加的是日志，但是，在恢复的时候是先rdb再增量的日志，性能更优秀</p>
<h3> 扩展知识</h3>
<p>异步线程知识点</p>
<p>计算机组成原理</p>
<p>fork</p>
<p>copy on write</p>
<p>系统IO</p>
<p>pagecache</p>
<p>fsync</p>
<hr>
<h2> redis的过期键有哪些删除策略</h2>
<h3> 过期精度</h3>
<p>在 Redis 2.4 及以前版本，过期期时间可能不是十分准确，有0-1秒的误差。</p>
<p>从 Redis 2.6 起，过期时间误差缩小到0-1毫秒。</p>
<h3> 过期和持久</h3>
<p>Keys的过期时间使用Unix时间戳存储(从Redis 2.6开始以毫秒为单位)。这意味着即使Redis实例不可用，时间也是一直在流逝的。</p>
<p>要想过期的工作处理好，计算机必须采用稳定的时间。 如果你将RDB文件在两台时钟不同步的电脑间同步，有趣的事会发生（所有的 keys装载时就会过期）。</p>
<p>即使正在运行的实例也会检查计算机的时钟，例如如果你设置了一个key的有效期是1000秒，然后设置你的计算机时间为未来2000秒，这时key会立即失效，而不是等1000秒之后。</p>
<h3> Redis如何淘汰过期的keys</h3>
<p>Redis keys过期有两种方式：被动和主动方式。</p>
<p>当一些客户端尝试访问它时，key会被发现并主动的过期。</p>
<p>当然，这样是不够的，因为有些过期的keys，永远不会访问他们。 无论如何，这些keys应该过期，所以定时随机测试设置keys的过期时间。所有这些过期的keys将会从密钥空间删除。</p>
<p>具体就是Redis每秒10次做的事情：</p>
<ol>
<li>测试随机的20个keys进行相关过期检测。</li>
<li>删除所有已经过期的keys。</li>
<li>如果有多于25%的keys过期，重复步奏1.</li>
</ol>
<p>这是一个平凡的概率算法，基本上的假设是，我们的样本是这个密钥控件，并且我们不断重复过期检测，直到过期的keys的百分百低于25%,这意味着，在任何给定的时刻，最多会清除1/4的过期keys。</p>
<h3> 在复制AOF文件时如何处理过期</h3>
<p>为了获得正确的行为而不牺牲一致性，当一个key过期，<code>DEL</code>将会随着AOF文字一起合成到所有附加的slaves。在master实例中，这种方法是集中的，并且不存在一致性错误的机会。</p>
<p>然而，当slaves连接到master时，不会独立过期keys（会等到master执行DEL命令），他们任然会在数据集里面存在，所以当slave当选为master时淘汰keys会独立执行，然后成为master。</p>
<h3> 扩展</h3>
<p>绝对时间点过期</p>
<p>相对时间点过期</p>
<p>时钟轮算法</p>
<h2> redis线程模型有哪些，单线程为什么快</h2>
<h3> IO模型维度的特征</h3>
<p>IO模型使用了多路复用器，在linux系统中使用的是EPOLL</p>
<p>类似netty的BOSS,WORKER使用一个EventLoopGroup(threads=1)</p>
<p>单线程的Reactor模型，每次循环取socket中的命令然后逐一操作，可以保证socket中的指令是按顺序的，不保证不同的socket也就是客户端的命令的顺序性</p>
<p>命令操作在单线程中顺序操作，没有多线程的困扰不需要锁的复杂度，在操作数据上相对来说是原子性质的</p>
<h3> 架构设计模型</h3>
<p>自身的内存存储数据，读写操作不设计磁盘IO</p>
<p>redis除了提供了Value具备类型还为每种类型实现了一些操作命令</p>
<p>实现了计算向数据移动，而非数据想计算移动，这样在IO的成本上有一定的优势</p>
<p>且在数据结构类型上，丰富了一些统计类属性，读写操作中，写操作会O(1)负载度更新length类属性，使得读操作也是O(1)的</p>
<h2> 缓存雪崩、缓存穿透、缓存击穿在实际中如何处理</h2>
<h3> 缓存穿透</h3>
<p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，
失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p>
<figure><figcaption>img2.png</figcaption></figure>
<blockquote>
<p>（[缓存、DB]都不存在数据）1000万条并发请求，缓存为null，全部跑到db查询，db可能直接宕机。</p>
</blockquote>
<h4> 解决方案</h4>
<p>有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，
从而避免了对底层存储系统的查询压力。另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数 据不存在，还是系统故障），
我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p>
<blockquote>
<p>.set("cataLogJson", cataLogJsonDB == null ? "1001" : cataLogJsonDB));</p>
</blockquote>
<h3> 缓存雪崩</h3>
<p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p>
<figure><figcaption>img3.png</figcaption></figure>
<blockquote>
<p>存在的数据，大面积数据同时失效)已经有很多数据存在，但有一些设置了同样的过期时间，导致了很多没命中。</p>
</blockquote>
<h4> 解决方案</h4>
<p>缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线 程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。
这里分享一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<p>设置过期时间(加随机值) 。存在的数据，大面积数据同时失效</p>
<blockquote>
<p>.set("cataLogJson", JSON.toJSONString(cataLogJsonFromDB == null ? "1001" : cataLogJsonFromDB), 1, TimeUnit.DAYS);</p>
</blockquote>
<h3> 缓存击穿</h3>
<p>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，
这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。</p>
<p>缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>
<figure><figcaption>img4.png</figcaption></figure>
<blockquote>
<p>（存在的数据，某一个数据热点失效）1000万条并发，，会全部跑到db查询，db可能直接宕机</p>
</blockquote>
<h4> 解决方案</h4>
<p>加锁，存在的数据，某一个数据热点失效</p>
<blockquote>
<p>通过redis ...</p>
</blockquote>
<p>1.使用互斥锁(mutex key)
业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作
（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。
SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。在redis2.6.1之前版本未实现setnx的过期时间</p>
<p>2."提前"使用互斥锁(mutex key)：
在value内部设置1个超时值(timeout1), timeout1比实际的memcache timeout(timeout2)小。当从cache读取到timeout1发现它已经过期时候，马上延长timeout1并重新设置到cache。
然后再从数据库加载数据并设置到cache中。</p>
<p>3."永远不过期"：<br>
这里的“永远不过期”包含两层意思：</p>
<p>(1) 从redis上看，确实没有设置过期时间，这就保证了，不会出现热点key过期问题，也就是“物理”不过期。</p>
<p>(2) 从功能上看，如果不过期，那不就成静态的了吗？所以我们把过期时间存在key对应的value里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建，也就是“逻辑”过期</p>
<p>从实战看，这种方法对于性能非常友好，唯一不足的就是构建缓存时候，其余线程(非构建缓存的线程)可能访问的是老数据，但是对于一般的互联网功能来说这个还是可以忍受。</p>
<h3> 总结</h3>
<p>1.<strong>穿透</strong> 是缓存不命中，DB也没有不命中</p>
<p>2.<strong>击穿</strong> 是一个热点key失效</p>
<p>3.<strong>雪崩</strong> 是很多key集体失效</p>
<h2> redis事务是怎么实现的</h2>
<p>MULTI 、 EXEC 、 DISCARD 和 WATCH 是 Redis 事务相关的命令。事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p>
<blockquote>
<p>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>
<p>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p>
</blockquote>
<p>EXEC 命令负责触发并执行事务中的所有命令：</p>
<blockquote>
<p>如果客户端在使用 MULTI 开启了一个事务之后，却因为断线而没有成功执行 EXEC ，那么事务中的所有命令都不会被执行。</p>
<p>另一方面，如果客户端成功在开启事务之后执行 EXEC ，那么事务中的所有命令都会被执行。</p>
</blockquote>
<p>当使用 AOF 方式做持久化的时候， Redis 会使用单个 write(2) 命令将事务写入到磁盘中。</p>
<p>然而，如果 Redis 服务器因为某些原因被管理员杀死，或者遇上某种硬件故障，那么可能只有部分事务命令会被成功写入到磁盘中。</p>
<p>如果 Redis 在重新启动时发现 AOF 文件出了这样的问题，那么它会退出，并汇报一个错误。</p>
<p>使用redis-check-aof程序可以修复这一问题：它会移除 AOF 文件中不完整事务的信息，确保服务器可以顺利启动。</p>
<p>从 2.2 版本开始，Redis 还可以通过乐观锁（optimistic lock）实现 CAS （check-and-set）操作，具体信息请参考文档的后半部分。</p>
<h3> 事务中的错误</h3>
<p>使用事务时可能会遇上以下两种错误：</p>
<blockquote>
<p>事务在执行 EXEC 之前，入队的命令可能会出错。比如说，命令可能会产生语法错误（参数数量错误，参数名错误，等等），或者其他更严重的错误，比如内存不足（如果服务器使用 maxmemory 设置了最大内存限制的话）。</p>
<p>命令可能在 EXEC 调用之后失败。举个例子，事务中的命令可能处理了错误类型的键，比如将列表命令用在了字符串键上面，诸如此类。</p>
</blockquote>
<p>对于发生在 EXEC 执行之前的错误，客户端以前的做法是检查命令入队所得的返回值：如果命令入队时返回 QUEUED ，那么入队成功；否则，就是入队失败。如果有命令在入队时失败，那么大部分客户端都会停止并取消这个事务。</p>
<p>不过，从 Redis 2.6.5 开始，服务器会对命令入队失败的情况进行记录，并在客户端调用 EXEC 命令时，拒绝执行并自动放弃这个事务。</p>
<p>在 Redis 2.6.5 以前， Redis 只执行事务中那些入队成功的命令，而忽略那些入队失败的命令。 而新的处理方式则使得在流水线（pipeline）中包含事务变得简单，因为发送事务和读取事务的回复都只需要和服务器进行一次通讯。</p>
<p>至于那些在 EXEC 命令执行之后所产生的错误， 并没有对它们进行特别处理： 即使事务中有某个/某些命令在执行时产生了错误， 事务中的其他命令仍然会继续执行。</p>
<h3> 为什么 Redis 不支持回滚（roll back）</h3>
<p>如果你有使用关系式数据库的经验， 那么 “Redis 在事务失败时不进行回滚，而是继续执行余下的命令”这种做法可能会让你觉得有点奇怪。</p>
<p>以下是这种做法的优点：</p>
<ul>
<li>Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。</li>
<li>因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。</li>
</ul>
<p>有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， 回滚并不能解决编程错误带来的问题。 举个例子，
如果你本来想通过 <a href="http://redis.cn/commands/incr.html" target="_blank" rel="noopener noreferrer">INCR</a> 命令将键的值加上 1 ， 却不小心加上了 2 ，
又或者对错误类型的键执行了 <a href="http://redis.cn/commands/incr.html" target="_blank" rel="noopener noreferrer">INCR</a> ， 回滚是没有办法处理这些情况的。</p>
<h2> redis集群方案有哪些</h2>
<h3> 常见集群分类</h3>
<p>主从复制集群</p>
<p>分片集群</p>
<h3> redis有那些</h3>
<p>主从复制集群，手动切换</p>
<p>带有哨兵的HA的主从复制集群</p>
<p>客户端实现路由索引的分片集群</p>
<p>使用中间件代理层的分片集群</p>
<p>redis自身实现的cluster分片集群</p>
<h2> redis主从复制的原理是什么</h2>
<h3> 主从复制机制</h3>
<blockquote>
<p>当一个 master 实例和一个 slave 实例连接正常时， master 会发送一连串的命令流来保持对 slave 的更新，以便于将自身数据集的改变复制给 slave ， ：包括客户端的写入、key 的过期或被逐出等等。</p>
<p>当 master 和 slave 之间的连接断开之后，因为网络问题、或者是主从意识到连接超时， slave 重新连接上 master 并会尝试进行部分重同步：这意味着它会尝试只获取在断开连接期间内丢失的命令流。</p>
<p>当无法进行部分重同步时， slave 会请求进行全量重同步。这会涉及到一个更复杂的过程，例如 master 需要创建所有数据的快照，将之发送给 slave ，之后在数据集更改时持续发送命令流到 slave 。</p>
</blockquote>
<h3> 主从复制的关注点</h3>
<blockquote>
<p>Redis 使用异步复制，slave 和 master 之间异步地确认处理的数据量</p>
<p>一个 master 可以拥有多个 slave</p>
<p>slave 可以接受其他 slave 的连接。除了多个 slave 可以连接到同一个 master 之外， slave 之间也可以像层叠状的结构（cascading-like structure）连接到其他 slave 。自 Redis
4.0 起，所有的 sub-slave 将会从 master 收到完全一样的复制流。</p>
<p>Redis 复制在 master 侧是非阻塞的。这意味着 master 在一个或多个 slave 进行初次同步或者是部分重同步时，可以继续处理查询请求。</p>
<p>复制在 slave 侧大部分也是非阻塞的。当 slave 进行初次同步时，它可以使用旧数据集处理查询请求，假设你在 redis.conf 中配置了让 Redis 这样做的话。否则，你可以配置如果复制流断开， Redis slave
会返回一个 error 给客户端。但是，在初次同步之后，旧数据集必须被删除，同时加载新的数据集。 slave 在这个短暂的时间窗口内（如果数据集很大，会持续较长时间），会阻塞到来的连接请求。自 Redis 4.0 开始，可以配置
Redis
使删除旧数据集的操作在另一个不同的线程中进行，但是，加载新数据集的操作依然需要在主线程中进行并且会阻塞 slave 。</p>
<p>复制既可以被用在可伸缩性，以便只读查询可以有多个 slave 进行（例如 O(N) 复杂度的慢操作可以被下放到 slave ），或者仅用于数据安全。</p>
<p>可以使用复制来避免 master 将全部数据集写入磁盘造成的开销：一种典型的技术是配置你的 master Redis.conf 以避免对磁盘进行持久化，然后连接一个 slave ，其配置为不定期保存或是启用
AOF。但是，这个设置必须小心处理，因为重新启动的 master 程序将从一个空数据集开始：如果一个 slave 试图与它同步，那么这个 slave 也会被清空。</p>
<p>任何时候数据安全性都是很重要的，所以如果 master 使用复制功能的同时未配置持久化，那么自动重启进程这项应该被禁用。</p>
</blockquote>
<h3> Redis 复制功能是如何工作的</h3>
<p>每一个 Redis master 都有一个 replication ID ：这是一个较大的伪随机字符串，标记了一个给定的数据集。每个 master 也持有一个偏移量，master 将自己产生的复制流发送给 slave
时，发送多少个字节的数据，自身的偏移量就会增加多少，目的是当有新的操作修改自己的数据集时，它可以以此更新 slave 的状态。复制偏移量即使在没有一个 slave 连接到 master 时，也会自增，所以基本上每一对给定的</p>
<blockquote>
<p>Replication ID, offset</p>
</blockquote>
<p>都会标识一个 master 数据集的确切版本。</p>
<p>当 slave 连接到 master 时，它们使用 PSYNC 命令来发送它们记录的旧的 master replication ID 和它们至今为止处理的偏移量。通过这种方式， master 能够仅发送 slave 所需的增量部分。但是如果
master 的缓冲区中没有足够的命令积压缓冲记录，或者如果 slave 引用了不再知道的历史记录（replication ID），则会转而进行一个全量重同步：在这种情况下， slave 会得到一个完整的数据集副本，从头开始。</p>
<p>下面是一个全量同步的工作细节：</p>
<p>master 开启一个后台保存进程，以便于生产一个 RDB 文件。同时它开始缓冲所有从客户端接收到的新的写入命令。当后台保存完成时， master 将数据集文件传输给 slave， slave将之保存在磁盘上，然后加载文件到内存。再然后
master 会发送所有缓冲的命令发给 slave。这个过程以指令流的形式完成并且和 Redis 协议本身的格式相同。</p>
<p>你可以用 telnet 自己进行尝试。在服务器正在做一些工作的同时连接到 Redis 端口并发出 <a href="https://redis.io/commands/sync" target="_blank" rel="noopener noreferrer">SYNC</a> 命令。你将会看到一个批量传输，并且之后每一个 master
接收到的命令都将在 telnet 回话中被重新发出。事实上 SYNC 是一个旧协议，在新的 Redis 实例中已经不再被使用，但是其仍然向后兼容：但它不允许部分重同步，所以现在 <strong>PSYNC</strong> 被用来替代 SYNC。</p>
<p>之前说过，当主从之间的连接因为一些原因崩溃之后， slave 能够自动重连。如果 master 收到了多个 slave 要求同步的请求，它会执行一个单独的后台保存，以便于为多个 slave 服务。</p>
<h3> 无需磁盘参与的复制</h3>
<p>正常情况下，一个全量重同步要求在磁盘上创建一个 RDB 文件，然后将它从磁盘加载进内存，然后 slave以此进行数据同步。</p>
<p>如果磁盘性能很低的话，这对 master 是一个压力很大的操作。Redis 2.8.18 是第一个支持无磁盘复制的版本。在此设置中，子进程直接发送 RDB 文件给 slave，无需使用磁盘作为中间储存介质。</p>
<h2> redis缓存如何回收</h2>
<h3> 回收策略</h3>
<blockquote>
<p>noeviction:返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）</p>
<p>allkeys-lru: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</p>
<p>volatile-lru: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。</p>
<p>allkeys-random: 回收随机的键使得新添加的数据有空间存放。</p>
<p>volatile-random: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</p>
<p>volatile-ttl: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</p>
<p>volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键</p>
<p>allkeys-lfu：从所有键中驱逐使用频率最少的键</p>
</blockquote>
<p>如果没有键满足回收的前提条件的话，策略<strong>volatile-lru</strong>, <strong>volatile-random</strong>以及<strong>volatile-ttl</strong>就和noeviction 差不多了。</p>
<p>选择正确的回收策略是非常重要的，这取决于你的应用的访问模式，不过你可以在运行时进行相关的策略调整，并且监控缓存命中率和没命中的次数，通过RedisINFO命令输出以便调优。</p>
<p>一般的经验规则:</p>
<ul>
<li>使用<strong>allkeys-lru</strong>策略：当你希望你的请求符合一个幂定律分布，也就是说，你希望部分的子集元素将比其它其它元素被访问的更多。如果你不确定选择什么，这是个很好的选择。.</li>
<li>使用<strong>allkeys-random</strong>：如果你是循环访问，所有的键被连续的扫描，或者你希望请求分布正常（所有元素被访问的概率都差不多）。</li>
<li>使用<strong>volatile-ttl</strong>：如果你想要通过创建缓存对象时设置TTL值，来决定哪些对象应该被过期。</li>
</ul>
<p><strong>allkeys-lru</strong> 和 <strong>volatile-random</strong>策略对于当你想要单一的实例实现缓存及持久化一些键时很有用。不过一般运行两个实例是解决这个问题的更好方法。</p>
<p>为了键设置过期时间也是需要消耗内存的，所以使用<strong>allkeys-lru</strong>这种策略更加高效，因为没有必要为键取设置过期时间当内存有压力时。</p>
<h3> <strong>回收进程如何工作</strong></h3>
<p>理解回收进程如何工作是非常重要的:</p>
<ul>
<li>一个客户端运行了新的命令，添加了新的数据。</li>
<li>Redi检查内存使用情况，如果大于maxmemory的限制, 则根据设定好的策略进行回收。</li>
<li>一个新的命令被执行，等等。</li>
<li>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。</li>
</ul>
<p>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p>
<h2> RabbitMQ的架构设计是什么样的</h2>
<h3> 是AMQP的实现，相关概念语义</h3>
<ol>
<li>Broker:它提供一种传输服务,它的角色就是维护一条从生产者到消费者的路线，保证数据能按照指定的方式进行传输</li>
<li>Exchange：消息交换机,它指定消息按什么规则,路由到哪个队列。</li>
<li>Queue:消息的载体,每个消息都会被投到一个或多个队列。</li>
<li>Binding:绑定，它的作用就是把exchange和queue按照路由规则绑定起来.</li>
<li>Routing Key:路由关键字,exchange根据这个关键字进行消息投递。</li>
<li>vhost:虚拟主机,一个broker里可以有多个vhost，用作不同用户的权限分离。</li>
<li>Producer:消息生产者,就是投递消息的程序.</li>
<li>Consumer:消息消费者,就是接受消息的程序.</li>
<li>Channel:消息通道,在客户端的每个连接里,可建立多个channel.</li>
</ol>
<h4> 核心概念</h4>
<p>在mq领域中，producer将msg发送到queue，然后consumer通过消费queue完成P.C解耦</p>
<p>kafka是由producer决定msg发送到那个queue</p>
<p>rabbitmq是由Exchange决定msg应该怎么样发送到目标queue，这就是binding及对应的策略</p>
<h4> Exchange</h4>
<p>Direct Exchange:直接匹配,通过Exchange名称+RountingKey来发送与接收消息.
Fanout Exchange:广播订阅,向所有的消费者发布消息,但是只有消费者将队列绑定到该路由器才能收到消息,忽略Routing Key.
Topic Exchange：主题匹配订阅,这里的主题指的是RoutingKey,RoutingKey可以采用通配符,如:*
或#，RoutingKey命名采用.来分隔多个词,只有消息这将队列绑定到该路由器且指定RoutingKey符合匹配规则时才能收到消息;
Headers Exchange:消息头订阅,消息发布前,为消息定义一个或多个键值对的消息头,然后消费者接收消息同时需要定义类似的键值对请求头:(如:x-mactch=all或者x_match=any)
，只有请求头与消息头匹配,才能接收消息,忽略RoutingKey.
默认的exchange:
如果用空字符串去声明一个exchange，那么系统就会使用”amq.direct”这个exchange，我们创建一个queue时,默认的都会有一个和新建queue同名的routingKey绑定到这个默认的exchange上去</p>
<h3> 复杂与精简</h3>
<p>在众多的MQ中间件中，首先学习Rabbitmq的时候，就理解他是一个单机的mq组件，为了系统的解耦，可以自己在业务层面做AKF</p>
<p>其在内卷能力做的非常出色，这得益于AMQP，也就是消息的传递形式、复杂度有exchange和queue的binding实现，这，对于P.C有很大的帮助</p>
<hr>
<h2> RabbitMQ如何确保消息发送和消息接收</h2>
<h3> 消息发送确认</h3>
<h4> 1 ConfirmCallback方法</h4>
<p>ConfirmCallback 是一个回调接口，消息发送到 Broker 后触发回调，确认消息是否到达 Broker 服务器，<strong>也就是只确认是否正确到达 Exchange 中。</strong></p>
<h4> 2 ReturnCallback方法</h4>
<p>通过实现 ReturnCallback 接口，启动消息失败返回，此接口是在交换器路由不到队列时触发回调，该方法可以不使用，因为交换器和队列是在代码里绑定的，如果消息成功投递到 Broker 后几乎不存在绑定队列失败，除非你代码写错了。</p>
<h3> 消息接收确认</h3>
<p>RabbitMQ
消息确认机制（ACK）默认是自动确认的，自动确认会在消息发送给消费者后立即确认，但存在丢失消息的可能，如果消费端消费逻辑抛出异常，假如你用回滚了也只是保证了数据的一致性，但是消息还是丢了，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息。</p>
<p>消息确认模式有：</p>
<ol>
<li>AcknowledgeMode.NONE：自动确认。</li>
<li>AcknowledgeMode.AUTO：根据情况确认。</li>
<li>AcknowledgeMode.MANUAL：手动确认。</li>
</ol>
<p>消费者收到消息后，手动调用 Basic.Ack 或 Basic.Nack 或 Basic.Reject 后，RabbitMQ 收到这些消息后，才认为本次投递完成。</p>
<ol start="4">
<li>Basic.Ack 命令：用于确认当前消息。</li>
<li>Basic.Nack 命令：用于否定当前消息（注意：这是AMQP 0-9-1的RabbitMQ扩展） 。</li>
<li>Basic.Reject 命令：用于拒绝当前消息。</li>
</ol>
<p>Nack,Reject后都有能力要求是否requeue消息或者进入死信队列</p>
<h2> RabbitMQ事务消息原理是什么</h2>
<h3> 事务V.S确认</h3>
<p>确认是对一件事的确认</p>
<p>事务是对批量的确认</p>
<p>增删改查中，事务是对于增删改的保证</p>
<h3> 发送方事务</h3>
<p>开启事务，发送多条数据，事务提交或回滚是原子的，要么都提交，要么都回滚</p>
<h3> 消费方事务</h3>
<p>消费方是读取行为，那么事务体现在哪里呢</p>
<p>rabbitmq的消费行为会触发queue中msg的是否删除、是否重新放回队列等行为，类增删改</p>
<p>所以，消费方的ack是要手动提交的，且最终确定以事务的提交和回滚决定</p>
<h2> RabbitMQ死信队列、延时队列分别是什么</h2>
<h3> 死信队列</h3>
<p>DLX（Dead Letter Exchange），<strong>死信交换器</strong>。</p>
<p>当队列中的消息被拒绝、或者过期会变成死信，死信可以被重新发布到另一个交换器，这个交换器就是DLX，与DLX绑定的队列称为死信队列。
造成死信的原因：</p>
<ul>
<li>信息被拒绝</li>
<li>信息超时</li>
<li>超过了队列的最大长度</li>
</ul>
<h4> 过期消息</h4>

<h3> 延迟队列</h3>
<p>延迟队列存储的是延迟消息</p>
<p>延迟消息指的是，当消息被发发布出去之后，并不立即投递给消费者，而是在指定时间之后投递。如：</p>
<p>在订单系统中，订单有30秒的付款时间，在订单超时之后在投递给消费者处理超时订单。</p>
<p>rabbitMq没有直接支持延迟队列，可以通过死信队列实现。</p>
<p>在死信队列中，可以为普通交换器绑定多个消息队列，假设绑定过期时间为5分钟，10分钟和30分钟，3个消息队列，然后为每个消息队列设置DLX，为每个DLX关联一个死信队列。</p>
<p>当消息过期之后，被转存到对应的死信队列中，然后投递给指定的消费者消费。</p>
<h2> 简述kafka架构设计是什么样</h2>
<p>语义概念</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>KAFKA天生是分布式的，满足AKF的XYZ轴特点，扩展性，可靠性，高性能是没得说</p>
<p>而且，kafka具备自己的特色，比如动态ISR集合，是在强一致性，过半一致性之外的另一个实现手段</p>
<h2> Kafka消息丢失的场景有哪些</h2>
<p>生产者在生产过程中的消息丢失</p>
<p>broker在故障后的消息丢失</p>
<p>消费者在消费过程中的消息丢失</p>
<h3> ACK机制</h3>
<p>ack有3个可选值，分别是1，0，-1。</p>
<h3> ack=0：生产者在生产过程中的消息丢失</h3>
<p>简单来说就是，producer发送一次就不再发送了，不管是否发送成功。</p>
<h3> ack=1：broker在故障后的消息丢失</h3>
<p>简单来说就是，producer只要收到一个分区副本成功写入的通知就认为推送消息成功了。这里有一个地方需要注意，这个副本必须是leader副本。只有leader副本成功写入了，producer才会认为消息发送成功。</p>
<p>注意，ack的默认值就是1。这个默认值其实就是吞吐量与可靠性的一个折中方案。生产上我们可以根据实际情况进行调整，比如如果你要追求高吞吐量，那么就要放弃可靠性。</p>
<h3> ack=-1：生产侧和存储侧不会丢失数据</h3>
<p>简单来说就是，producer只有收到分区内所有副本的成功写入的通知才认为推送消息成功了。</p>
<h3> Offset机制</h3>
<ol>
<li>kafka消费者的三种消费语义</li>
<li>at-most-once：最多一次，可能丢数据</li>
<li>at-least-once：最少一次，可能重复消费数据</li>
<li>exact-once message：精确一次</li>
</ol>
<h2> Kafka是pull？push？以及优劣势分析</h2>
<p>Kafka最初考虑的问题是，customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push。</p>
<p>Kafka遵循了一种大部分消息系统共同的传统的设计：producer将消息推送到broker，consumer从broker拉取消息。</p>
<p>一些消息系统比如Scribe和Apache Flume采用了push模式，将消息推送到下游的consumer。</p>
<p>这样做有好处也有坏处：由broker决定消息推送的速率，对于不同消费速率的consumer就不太好处理了。</p>
<p>消息系统都致力于让consumer以最大的速率最快速的消费消息，但不幸的是，push模式下，当broker推送的速率远大于consumer消费的速率时，consumer恐怕就要崩溃了。</p>
<p>最终Kafka还是选取了传统的pull模式。</p>
<p>Pull模式的另外一个好处是consumer可以自主决定是否批量的从broker拉取数据。</p>
<p>Push模式必须在不知道下游consumer消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。</p>
<p>如果为了避免consumer崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。</p>
<p>Pull模式下，consumer就可以根据自己的消费能力去决定这些策略。</p>
<p>Pull有个缺点是，如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到达。</p>
<p>为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发</p>
<h2> Kafka中zk的作用是什么</h2>
<p>Zookeeper是分布式协调，注意它不是数据库</p>
<p>kafka中使用了zookeeper的分布式锁和分布式配置及统一命名的分布式协调解决方案</p>
<p>在kafka的broker集群中的controller的选择，是通过zk的临时节点争抢获得的</p>
<p>brokerID等如果自增的话也是通过zk的节点version实现的全局唯一</p>
<p>kafka中broker中的状态数据也是存储在zk中，不过这里要注意，zk不是数据库，所以存储的属于元数据</p>
<p>而，新旧版本变化中，就把曾经的offset从zk中迁移出了zk</p>
<h2> Kafka中高性能如何保障</h2>
<p>首先，性能的最大瓶颈依然是IO，这个是不能逾越的鸿沟</p>
<p>虽然，broker在持久化数据的时候已经最大努力的使用了磁盘的顺序读写</p>
<p>更进一步的性能优化是零拷贝的使用，也就是从磁盘日志到消费者客户端的数据传递，因为kafka是mq，对于msg不具备加工处理，所以得以实现</p>
<p>然后就是大多数分布式系统一样，总要做tradeoff，在速度与可用性/可靠性中挣扎</p>
<p>ACK的0，1，-1级别就是在性能和可靠中权衡</p>
<h2> kafka的rebalance机制是什么</h2>
<h3> 消费者分区分配策略</h3>
<ol>
<li>Range 范围分区(默认的)</li>
<li>RoundRobin 轮询分区</li>
<li>Sticky策略</li>
</ol>
<h3> 触发 Rebalance 的时机</h3>
<p>Rebalance 的触发条件有3个。</p>
<ul>
<li>组成员个数发生变化。例如有新的 consumer 实例加入该消费组或者离开组。</li>
<li>订阅的 Topic 个数发生变化。</li>
<li>订阅 Topic 的分区数发生变化。</li>
</ul>
<h3> Coordinator协调过程</h3>
<p>消费者如何发现协调者</p>
<p>消费者如何确定分配策略</p>
<p>如果需要再均衡分配策略的影响</p>
<h2> zk的数据模型和节点类型有哪些</h2>
<h3> ZooKeeper数据模型</h3>
<p>ZooKeeper的数据模型，在结构上和标准文件系统的非常相似，拥有一个层次的命名空间，都是采用树形层次结构，ZooKeeper树中的每个节点被称为—Znode。</p>
<p>和文件系统的目录树一样，ZooKeeper树中的每个节点可以拥有子节点。但也有不同之处：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 节点类型</h3>
<p>Znode有两种，分别为临时节点和永久节点。
节点的类型在创建时即被确定，并且不能改变。
临时节点：该节点的生命周期依赖于创建它们的会话。一旦会话结束，临时节点将被自动删除，当然可以也可以手动删除。临时节点不允许拥有子节点。</p>
<p>永久节点：该节点的生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，他们才能被删除。</p>
<p>Znode还有一个序列化的特性，如果创建的时候指定的话，该Znode的名字后面会自动追加一个不断增加的序列号。序列号对于此节点的父节点来说是唯一的，这样便会记录每个子节点创建的先后顺序。它的格式为“%10d”(
10位数字，没有数值的数位用0补充，例如“0000000001”)</p>
<p>在ZooKeeper中，每个数据节点都是有生命周期的，其生命周期的长短取决于数据节点的节点类型。</p>
<p>1、持久节点（PERSISTENT）</p>
<p>该数据节点别创建后，就会一直存在于ZooKeeper服务器上，直到有删除操作来主动删除该节点。</p>
<p>2、持久顺序节点（PERSISTENT_SEQUENTIAL）</p>
<p>持久顺序节点的基本特性和持久节点是一致的，额外的特性表现在顺序性上。在ZooKeeper中，每个父节点都会为它的第一级子节点维护一份顺序，用于记录每个子节点创建的先后顺序。</p>
<p>3、临时节点（EPHEMERAL）</p>
<p>临时节点的生命周期和客户端的回话绑定在一起，如果客户端会话失效，那么这个节点就会被自动地清理掉。</p>
<p>ZooKeeper规定了不能基于临时节点来创建子节点，即临时节点只能作为叶子节点。</p>
<p>4、临时顺序节点（EPHEMERAL_SEQUENTIAL）</p>
<h2> Zookeeper watch机制是什么</h2>
<p>ZooKeeper是用来协调（同步）分布式进程的服务，提供了一个简单高性能的协调内核，用户可以在此之上构建更多复杂的分布式协调功能。</p>
<p>多个分布式进程通过ZooKeeper提供的API来操作共享的ZooKeeper内存数据对象ZNode来达成某种一致的行为或结果，这种模式本质上是基于状态共享的并发模型，与Java的多线程并发模型一致，他们的线程或进程都是”共享式内存通信“。</p>
<p>Java没有直接提供某种响应式通知接口来监控某个对象状态的变化，只能要么浪费CPU时间毫无响应式的轮询重试，或基于Java提供的某种主动通知（Notif）机制（内置队列）来响应状态变化，但这种机制是需要循环阻塞调用。</p>
<p>而ZooKeeper实现这些分布式进程的状态（ZNode的Data、Children）共享时，基于性能的考虑采用了类似的异步非阻塞的主动通知模式即Watch机制，使得分布式进程之间的“共享状态通信”更加实时高效，其实这也是ZooKeeper的主要任务决定的—协调。Consul虽然也实现了Watch机制，但它是阻塞的长轮询。</p>
<h3> ZooKeeper的Watch特性</h3>
<ol>
<li>Watch是一次性的，每次都需要重新注册，并且客户端在会话异常结束时不会收到任何通知，而快速重连接时仍不影响接收通知。</li>
<li>Watch的回调执行都是顺序执行的，并且客户端在没有收到关注数据的变化事件通知之前是不会看到最新的数据，另外需要注意不要在Watch回调逻辑中阻塞整个客户端的Watch回调</li>
<li>Watch是轻量级的，WatchEvent是最小的通信单元，结构上只包含通知状态、事件类型和节点路径。ZooKeeper服务端只会通知客户端发生了什么，并不会告诉具体内容。</li>
</ol>
<h3> Zookeeper状态</h3>
<ol>
<li>Disconnected：客户端是断开连接的状态，不能连接服务集合中的任意一个</li>
<li>SyncConnected：客户端是连接状态，连接其中的一个服务</li>
<li>AuthFailed：鉴权失败</li>
<li>ConnectedReadOnly：客户端连接只读的服务器</li>
<li>SaslAuthenticated：SASL认证</li>
<li>Expired：服务器已经过期了该客户端的Session</li>
</ol>
<h3> Zookeeper事件类型</h3>
<ol>
<li>None：无</li>
<li>NodeCreated：节点创建</li>
<li>NodeDeleted：节点删除</li>
<li>NodeDataChanged：节点数据改变</li>
<li>NodeChildrenChanged：子节点改变（添加/删除）</li>
</ol>
<h3> Watcher使用的注意事项</h3>
<p>Watcher是一次触发器，假如需要持续监听数据变更，需要在每次获取时设置Watcher
会话过期：当客户端会话过期时，该客户端注册的Watcher会失效
事件丢失：在接收通知和注册监视点之间，可能会丢失事件,但Zookeeper的状态变更和数据变化，都会记录在状态元数据信息和ZK数据节点上，所以能够获取最终一致的ZK信息状态
避免Watcher过多：服务器会对每一个注册Watcher事件的客户端发送通知，通知通过Socket连接的方式发送，当Watcher过多时，会产生一个尖峰的通知</p>
<h2> zk的命名服务、配置管理、集群管理分别是什么</h2>
<h3> 分布式协调</h3>
<p>大于等于一的情况下，才会有协调，在协调的事务进行分类得到一些名词，语义能够接受就可以</p>
<h3> 命名服务</h3>
<p>通过使用有序节点的特性做到协调命名规则</p>
<p>通过zk的事务ID递增，做到有序行命名规则</p>
<p>通过使用自己点做map映射，做到1:N的命名映射，比如DNS</p>
<p>顺序关系、映射关系</p>
<h3> 配置管理</h3>
<p>配置、元数据、状态等语义可以通过ZK的节点1MB存储，或者通过zk的节点目录结构特性存储</p>
<p>并且通过watch机制，满足配置变化的全局通知能力</p>
<h3> 集群管理</h3>
<p>通过zk的排他性，有序性</p>
<p>满足分布式锁、分布式选主、队列锁</p>
<p>串行化回调调度</p>
<p>分布式调度等</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="面试宝典"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-21T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Linux运维相关</title>
    <id>https://topjf.github.io/all/linux.html</id>
    <link href="https://topjf.github.io/all/linux.html"/>
    <updated>2023-03-05T09:31:01.000Z</updated>
    <summary type="text">参考地址 (https://zhuanlan.zhihu.com/p/533165245?utm_id=0) 一、Linux linux系统启动流程 第一步：开机自检，加载BIOS; 第二步：读取ＭＢＲ; 第三步：Boot Loader grub引导菜单; 第四步：加载kernel内核; 第五步：init进程依据inittab文件夹来设定运行级别; 第...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>运维面试题总结</h1>
<p><a href="https://zhuanlan.zhihu.com/p/533165245?utm_id=0" target="_blank" rel="noopener noreferrer">参考地址</a></p>
<h2> 一、Linux</h2>
<h3> linux系统启动流程</h3>
<ul>
<li>第一步：开机自检，加载BIOS</li>
<li>第二步：读取ＭＢＲ</li>
<li>第三步：Boot Loader grub引导菜单</li>
<li>第四步：加载kernel内核</li>
<li>第五步：init进程依据inittab文件夹来设定运行级别</li>
<li>第六步：init进程执行<code>rc.sysinit</code></li>
<li>第七步：启动内核模块</li>
<li>第八步：执行不同运行级别的脚本程序</li>
<li>第九步：执行<code>/etc/rc.d/rc.lo</code></li>
</ul>
<h3> linux文件类型</h3>
<table>
<thead>
<tr>
<th>文件属性</th>
<th>文件类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>-</td>
<td>常规文件，即file</td>
</tr>
<tr>
<td>d</td>
<td>目录文件</td>
</tr>
<tr>
<td>b</td>
<td>block device 即块设备文件，如硬盘;支持以block为单位进行随机访问</td>
</tr>
<tr>
<td>c</td>
<td>character device 即字符设备文件，如键盘支持以character为单位进行线性访问</td>
</tr>
<tr>
<td>l</td>
<td>symbolic link 即符号链接文件，又称软链接文件</td>
</tr>
<tr>
<td>p</td>
<td>pipe 即命名管道文件</td>
</tr>
<tr>
<td>s</td>
<td>socket 即套接字文件，用于实现两个进程进行通信</td>
</tr>
</tbody>
</table>
<h3> centos6和7怎么将源码安装的程序添加到开机自启动？</h3>
<p>通用方法：编辑<code>/etc/rc.d/rc.local</code>文件，在文件末尾添加启动服务命令</p>
<p><em>centos6</em></p>
<ul>
<li>① 进入到/etc/rc.d/init.d目录下；</li>
<li>② 新建一个服务启动脚本，脚本中指定chkconfig参数；</li>
<li>③ 添加执行权限；</li>
<li>④ 执行<code>chkconfig --add</code> 添加服务自启动；</li>
</ul>
<p><em>centos7</em></p>
<ul>
<li>① 进入到<code>/usr/lib/systemd/system</code>目录下；</li>
<li>② 新建自定义服务文件，文件中包含<code>[Unit]</code>、<code>[Service]</code>、<code>[Install]</code>相关配置，然后添加下执行权限；</li>
<li>③ 执行 <code>systemctl enable</code> 服务名称；</li>
</ul>
<h3> 简述lvm，如何给使用lvm的/分区扩容？</h3>
<p><strong>功能：可以对磁盘进行动态管理。动态按需调整大小概念：</strong></p>
<ul>
<li>
<p>① <em>PV-物理卷</em>：物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整个物理硬盘，也可以是raid设备。</p>
</li>
<li>
<p>② <em>VG-卷组</em>：卷组建立在物理卷之上，一个卷组中至少要包括一个物理卷，在卷组建立之后可动态添加物理卷到卷组中。
一个逻辑卷管理系统工程中可以只有一个卷组，也可以拥有多个卷组。</p>
</li>
<li>
<p>③ <em>LV-逻辑卷</em>：逻辑卷建立在卷组之上，卷组中的未分配空间可以用于建立新的逻辑卷，逻辑卷建立后可以动态地扩展和缩小空间。
系统中的多个逻辑卷可以属于同一个卷组，也可以属于不同的多个卷组。</p>
<figure><figcaption></figcaption></figure>
</li>
</ul>
<p><strong>给/分区扩容步骤：</strong></p>
<ul>
<li>① 添加磁盘</li>
<li>② 使用<code>fdisk</code>命令对新增加的磁盘进行分区</li>
<li>③ 分区完成后修改分区类型为<code>lvm</code></li>
<li>④ 使用<code>pvcreate</code>创建物理卷</li>
<li>⑤ 使用<code>vgextend</code>命令将新增加的分区加入到根目录分区中</li>
<li>⑥ 使用<code>lvextend</code>命令进行扩容</li>
<li>⑦ 使用<code>xfs_growfs</code>调整卷分区大小</li>
</ul>
<h3> 为何du和df统计结果不一致？</h3>
<ul>
<li>用户删除了大量的文件被删除后，在文件系统目录中已经不可见了，所以du就不会再统计它。</li>
<li>然而如果此时还有运行的进程持有这个已经被删除的文件句柄，那么这个文件就不会真正在磁盘中被删除，分区超级块中的信息也就不会更改，
df仍会统计这个被删除的文件。</li>
<li>可通过 lsof命令查询处于deleted状态的文件，被删除的文件在系统中被标记为deleted。如果系统有大量deleted状态的文件，
会导致du和df统计结果不一致。</li>
</ul>
<h3> 如何升级内核？</h3>
<p><em>方法一</em></p>
<ul>
<li>添加第三方yum源进行下载安装。</li>
</ul>
<p><a href="http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm" target="_blank" rel="noopener noreferrer">Centos 6 YUM源</a></p>
<p><a href="http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm" target="_blank" rel="noopener noreferrer">Centos 7 YUM源</a></p>
<ul>
<li>先导入elrepo的key，然后安装elrepo的yum源：</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>查看可用的内核相关包</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>方法二</em></p>
<ul>
<li>通过下载kernel image的rpm包进行安装。</li>
</ul>
<p><a href="http://elrepo.org/linux/kernel/el6/x86_64/RPMS/" target="_blank" rel="noopener noreferrer">官方 Centos 6</a></p>
<p><a href="http://elrepo.org/linux/kernel/el7/x86_64/RPMS/" target="_blank" rel="noopener noreferrer">官方 Centos 7</a></p>
<ul>
<li>获取下载链接进行下载安装即可</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>查看默认启动顺序</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>由上面可以看出新内核(4.12.4)目前位置在0，原来的内核(3.10.0)目前位置在1</p>
</blockquote>
<ul>
<li>设置默认启动</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>然后重启验证</li>
</ul>
<h3> nginx日志访问量前十的ip怎么统计？</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 如何删除/var/log/下.log结尾的30天前的日志？</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> ansible有哪些模块？功能是什么？</h3>
<p><a href="/linux/ansible/ansible.html" target="blank">Ansible 模块实例</a></p>
<table>
<thead>
<tr>
<th>模块</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>copy</td>
<td>拷贝文件到被控端</td>
</tr>
<tr>
<td>cron</td>
<td>定时任务</td>
</tr>
<tr>
<td>fetch</td>
<td>拷贝被控端文件到本地</td>
</tr>
<tr>
<td>file</td>
<td>文件模块</td>
</tr>
<tr>
<td>group</td>
<td>用户组模块</td>
</tr>
<tr>
<td>user</td>
<td>用户模块</td>
</tr>
<tr>
<td>hostname</td>
<td>主机名模块</td>
</tr>
<tr>
<td>script</td>
<td>脚本模块</td>
</tr>
<tr>
<td>service</td>
<td>服务启动模块</td>
</tr>
<tr>
<td>command</td>
<td>远程执行命令模块</td>
</tr>
<tr>
<td>shell</td>
<td>远程执行命令模块，command高级用法</td>
</tr>
<tr>
<td>yum</td>
<td>安装包组模块</td>
</tr>
<tr>
<td>setup</td>
<td>查看主机系统信息</td>
</tr>
</tbody>
</table>
<h3> nginx为什么比apache快？</h3>
<ul>
<li>nginx采用epoll模型</li>
<li>apache采用select模型</li>
</ul>
<h3> 四层负载和七层负载区别是什么？</h3>
<p>四层基于IP+端口进行转发</p>
<p>七层就是基于URL等应用层信息的负载均衡</p>
<h3> lvs有哪些工作模式？哪个性能高？</h3>
<ul>
<li>dr：直接路由模式，请求由 LVS 接受，由真实提供服务的服务器直接返回给用户，返回的时候不经过 LVS。（性能最高）</li>
<li>tun：隧道模式，客户端将访问vip报文发送给LVS服务器。LVS服务器将请求报文重新封装，发送给后端真实服务器。
后端真实服务器将请求报文解封，在确认自身有vip之后进行请求处理。后端真实服务器在处理完数据请求后，直接响应客户端。</li>
<li>nat：网络报的进出都要经过 LVS 的处理。LVS 需要作为 RS 的网关。当包到达 LVS 时，LVS 做目标地址转换（DNAT），
将目标 IP 改为 RS 的 IP。RS 接收到包以后，仿佛是客户端直接发给它的一样。RS处理完，返回响应时，源 IP 是 RS IP，
目标 IP 是客户端的 IP。这时 RS 的包通过网关（LVS）中转，LVS 会做源地址转换（SNAT），将包的源地址改为 VIP，这样，
这个包对客户端看起来就仿佛是 LVS 直接返回给它的。客户端无法感知到后端 RS 的存在。</li>
<li>fullnat模式：fullnat模式和nat模式相似，但是与nat不同的是nat模式只做了两次地址转换，fullnat模式却做了四次。</li>
</ul>
<h3> tomcat各个目录含义，如何修改端口，如何修改内存数？</h3>
<ul>
<li>bin 存放tomcat命令</li>
<li>conf 存放tomcat配置文件</li>
<li>lib 存放tomcat运行需要加载的jar包</li>
<li>log 存放Tomcat运行产生的日志</li>
<li>temp 运行过程中产生的临时文件</li>
<li>webapps 站点目录</li>
<li>work 存放tomcat运行时的编译后的文件</li>
<li>conf/server.xml 修改端口号</li>
<li>bin/catalina.sh 修改jvm内存</li>
</ul>
<h3> nginx反向代理时，如何使后端获取真正的访问来源ip？</h3>
<p>在location配置段添加以下内容：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> nginx负载均衡算法有哪些？</h3>
<ul>
<li>rr 轮训</li>
<li>weight 加权轮训</li>
<li>ip_hash 静态调度算法</li>
<li>fair 动态调度算法</li>
<li>url_hash url哈希</li>
<li>leat_conn 最小连接数</li>
</ul>
<h3> 如何进行压力测试？</h3>
<p>例如：模拟10个用户，对百度首页发起总共100次请求。</p>
<p>测试命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> curl命令如何发送https请求？如何查看response头信息？如何发送get和post表单信息？</h3>
<p>发送https请求：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>response头信息 ：curl -I</li>
<li>get：curl 请求地址<code>?key1=value1&amp;key2=value2&amp;key3=value3</code></li>
<li>post：<code>curl -d “key1=value1&amp;key2=value2&amp;key3=value3”</code></li>
</ul>
<h2> 二、mysql</h2>
<h3> 索引的为什么使查询加快？有啥缺点？</h3>
<p>默认的方式是根据搜索条件进行全表扫描，遇到匹配条件的就加入搜索结果集合。
如果我们对某一字段增加索引，查询时就会先去索引列表中一次
定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度</p>
<p><strong>缺点：</strong></p>
<ul>
<li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</li>
<li>索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果需要建立聚簇索引，那么需要占用的空间会更大</li>
<li>以表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了整数的维护速度</li>
</ul>
<h3> sql语句左外连接 右外连接 内连接 全连接区别</h3>
<figure><figcaption></figcaption></figure>
<p><strong>简单的连接查询</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>合并查询</strong></p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> mysql数据备份方式，如何恢复？你们的备份策略是什么？</h3>
<p><strong>物理完全备份</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>mysqldump逻辑备份</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>物理备份恢复</strong></p>
<p>先把原来的数据目录改名</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>逻辑备份数据恢复</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 如何配置数据库主从同步，实际工作中是否遇到数据不一致问题？如何解决？</h3>
<p>为每个服务器配置唯一值的server-id</p>
<p><strong>主库</strong></p>
<ul>
<li>开启binlog日志</li>
<li>创建主从复制用户</li>
<li>查看master的状态</li>
</ul>
<p><strong>从库</strong></p>
<ul>
<li>change master to设置主库信息</li>
<li>start slave开始复制</li>
</ul>
<h3> mysql约束有哪些？</h3>
<ul>
<li>非空约束</li>
<li>唯一约束</li>
<li>主键约束</li>
<li>外键约束</li>
</ul>
<h3> 二进制日志（binlog）用途？</h3>
<p>BINLOG记录数据库的变更过程。例如创建数据库、建表、修改表等DDL操作、以及数据表的相关DML操作，
这些操作会导致数据库产生变化，开启binlog以后导致数据库产生变化的操作会按照时间顺序以<code>事件</code>
的形式记录到binlog二进制文件中。</p>
<h3> mysql数据引擎有哪些？</h3>
<p><strong>myisam、innodb 区别</strong></p>
<ul>
<li>InnoDB：支持事务、外键、行锁，是聚族索引，不存储表的行数，
如 <code>select count() from table</code> 时，InnoDB 需要扫描一遍整个表来计算有多少行，
但是 MyISAM 只要简单的读出保存好的行数即可；
注意的是，当 <code>count()</code> 语句包含 where 条件时 MyISAM 也需要扫描整个表；
适合频繁修改以及涉及到安全性较高的应用。</li>
<li>MylSAM：不支持事务、外键；支持行锁，是非聚族索引，存储表的行数。适合查询以及插入为主的应用。</li>
<li>清空整个表时，InnoDB 是一行一行的删除，效率非常慢。MyISAM 则会重建表。</li>
<li>InnoDB 支持行锁（某些情况下还是锁整表，如 <code>update table set a=1 where user like ‘%lee%’</code>。</li>
</ul>
<h3> 引发索引失效问题</h3>
<p><a href="https://blog.csdn.net/sy_white/article/details/122112440" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/sy_white/article/details/122112440</a></p>
<ul>
<li>查询条件中带有or,除非所有的查询条件都建有索引，否则索引失效。</li>
<li>like查询是以%开头。</li>
<li>如果列类型是字符串，那在查询条件中需要将数据用引号引用起来，否则不走索引。</li>
<li>索引列上参与计算会导致索引失效。</li>
<li>违背最左匹配原则。</li>
</ul>
<h3> 如何查询mysql数据库存放路径？</h3>
<p>myisam</p>
<ul>
<li>.frm：保护表的定义</li>
<li>.myd：保存表的数据</li>
<li>.myi：表的索引文件</li>
</ul>
<h3> mysql数据库文件后缀名有哪些？用途什么？</h3>
<p><strong>myisam</strong></p>
<ul>
<li>.frm：保护表的定义</li>
<li>.myd：保存表的数据</li>
<li>.myi：表的索引文件</li>
</ul>
<p><strong>innodb</strong></p>
<ul>
<li>.frm：保存表的定义</li>
<li>.ibd：表空间</li>
</ul>
<h3> 如何修改数据库用户的密码？</h3>
<p><strong>mysql8之前</strong></p>
<ul>
<li><code>set password for 用户名@localhost = password('新密码');</code></li>
<li><code>mysqladmin -u用户名 -p旧密码 password 新密码</code></li>
<li><code>update user set password=password('123') where user='root' and host='localhost';</code></li>
</ul>
<p><strong>mysql8之后</strong></p>
<ul>
<li>mysql8初始对密码要求高，简单的字符串不让改。先改成:MyNewPass@123;</li>
<li><code>alter user 'root'@'localhost' identified by 'MyNewPass@123';</code></li>
</ul>
<p><em>降低密码难度</em></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>修改成简易密码</em></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 如何修改用户权限？如何查看？</h3>
<p>授权：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看权限</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 三、nosql</h2>
<h3> redis数据持久化有哪些方式？</h3>
<ul>
<li>rdb</li>
<li>aof</li>
</ul>
<h3> redis集群方案有哪些？</h3>
<ul>
<li>官方cluster方案</li>
<li>twemproxy代理方案</li>
<li>哨兵模式</li>
<li>codis</li>
<li>客户端分片</li>
</ul>
<h3> redis如何进行数据备份与恢复？</h3>
<p>备份</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行。</p>
</blockquote>
<p>还原</p>
<blockquote>
<p>只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> MongoDB如何进行数据备份？</h3>
<p><code>mongoexport / mongoimport</code></p>
<p><code>mongodump / mongorestore</code></p>
<h3> kafka为何比redis rabbitmq快？</h3>
<p><a href="https://www.zhihu.com/question/22480085" target="_blank" rel="noopener noreferrer">参考</a></p>
<h2> 四、docker</h2>
<h3> dockerfile有哪些关键字？用途是什么？</h3>
<figure><figcaption></figcaption></figure>
<h3> 如何减小dockerfile生成镜像体积？</h3>
<ul>
<li>尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择debian:wheezy或debian:jessie镜像，仅有不足百兆大小；</li>
<li>清理编译生成文件、安装包的缓存等临时文件；</li>
<li>安装各个软件时候要指定准确的版本号，并避免引入不需要的依赖；</li>
<li>从安全角度考虑，应用要尽量使用系统的库和依赖；</li>
<li>如果安装应用时候需要配置一些特殊的环境变量，在安装后要还原不需要保持的变量值；</li>
</ul>
<h3> dockerfile中CMD与ENTRYPOINT区别是什么？</h3>
<ul>
<li>CMD 和 ENTRYPOINT 指令都是用来指定容器启动时运行的命令。</li>
<li>指定 ENTRYPOINT 指令为 exec 模式时，CMD指定的参数会作为参数添加到 ENTRYPOINT 指定命令的参数列表中。</li>
</ul>
<h3> dockerfile中COPY和ADD区别是什么？</h3>
<ul>
<li>COPY指令和ADD指令都可以将主机上的资源复制或加入到容器镜像中</li>
<li>区别是ADD可以从 远程URL中的资源不会被解压缩。</li>
<li>如果是本地的压缩包ADD进去会被解压缩</li>
</ul>
<h3> docker的cs架构组件有哪些？</h3>
<figure><figcaption></figcaption></figure>
<h3> docker网络类型有哪些？</h3>
<ul>
<li>host模式</li>
<li>container模式</li>
<li>none模式</li>
<li>bridge模式</li>
</ul>
<h3> 如何配置docker远程访问？</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在ExecStart=后添加配置，注意，需要先空格后，再输入</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> docker核心namespace CGroups 联合文件系统功能是什么？</h3>
<ul>
<li>namespace：资源隔离</li>
<li>cgroup：资源控制</li>
<li>联合文件系统：支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下</li>
</ul>
<h3> 导入导出镜像，进入容器，设置重启容器策略，查看镜像环境变量，查看容器占用资源</h3>
<ul>
<li>导入镜像 <code>docker load -i xx.tar</code></li>
<li>导出镜像 <code>docker save -o xx.tar image_name</code></li>
<li>进入容器 <code>docker exec -it 容器ID /bin/bash</code></li>
<li>设置容器重启策略启动时 <code>--restart</code> 选项</li>
<li>查看容器环境变量 <code>docker exec {containerID} env</code></li>
<li>查看容器资源占用 <code>docker stats test2</code></li>
</ul>
<h3> 构建镜像有哪些方式？</h3>
<ul>
<li>dockerfile：<code>docker build -f 文件</code></li>
<li>容器提交为镜像： <code>docker commit -m "" -a "" 容器ID 镜像名称:版本</code></li>
</ul>
<h3> docker和vmware虚拟化区别？</h3>
<figure><figcaption></figcaption></figure>
<h2> 五、kubernetes</h2>
<h3> k8s的集群组件有哪些？功能是什么？</h3>
<figure><figcaption></figcaption></figure>
<h3> kubectl命令相关：如何修改副本数，如何滚动更新和回滚，如何查看pod的详细信息，如何进入pod交互？</h3>
<ul>
<li><em>修改副本数</em></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><em>活动更新</em></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><em>回滚</em></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><em>查看pod详细信息</em></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><em>进入pod交互</em></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> etcd数据如何备份？</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> k8s控制器有哪些？</h3>
<ul>
<li>副本集（ReplicaSet）</li>
<li>部署（Deployment）</li>
<li>状态集（StatefulSet）</li>
<li>Daemon集（DaemonSet）</li>
<li>一次任务（Job）</li>
<li>计划任务（CronJob）</li>
<li>有状态集（StatefulSet）</li>
</ul>
<h3> 哪些是集群级别的资源？</h3>
<ul>
<li>Namespace</li>
<li>Node</li>
<li>Role</li>
<li>ClusterRole</li>
<li>RoleBinding</li>
<li>ClusterRoleBinding</li>
</ul>
<h3> pod状态有哪些？</h3>
<ul>
<li>Pending 等待中</li>
<li>Running 运行中</li>
<li>Succeeded 正常终止</li>
<li>Failed 异常停止</li>
<li>Unkonwn 未知状态</li>
</ul>
<h3> pod创建过程是什么？</h3>
<figure><figcaption></figcaption></figure>
<h3> pod重启策略有哪些？</h3>
<p>Pod的重启策略有3种，默认值为Always。</p>
<ul>
<li>Always ：容器失效时，kubelet 自动重启该容器；</li>
<li>OnFailure ：容器终止运行且退出码不为0时重启；</li>
<li>Never ：不论状态为何， kubelet 都不重启该容器</li>
</ul>
<h3> 资源探针有哪些？</h3>
<ul>
<li>ExecAction：在容器中执行一个命令，并根据其返回的状态码进行诊断的操作称为Exec探测，状态码为0表示成功，否则即为不健康状态。</li>
<li>TCPSocketAction：通过与容器的某TCP端口尝试建立连接进行诊断，端口能够成功打开即为正常，否则为不健康状态。</li>
<li>HTTPGetAction：通过向容器IP地址的某指定端口的指定path发起HTTP GET请求进行诊断，响应码为2xx或3xx时即为成功，否则为失败。</li>
</ul>
<h3> requests和limits用途是什么？</h3>
<ul>
<li><code>requests</code> 属性定义其请求的确保可用值，即容器运行可能用不到这些额度的资源，但用到时必须要确保有如此多的资源可用。</li>
<li><code>limits</code> 属性则用于限制资源可用的最大值，即硬限制。</li>
</ul>
<h3> kubeconfig文件包含什么内容，用途是什么？</h3>
<p>包含集群参数（CA证书、API Server地址），客户端参数（上面生成的证书和私钥），集群context 信息（集群名称、用户名）。</p>
<h3> RBAC中role和clusterrole区别，rolebinding和 clusterrolebinding区别？</h3>
<ul>
<li>
<p>Role 可以定义在一个 namespace 中，如果想要跨 namespace 则可以创建 <code>ClusterRole</code>，<code>ClusterRole</code> 具有与 <code>Role</code> 相同的
权限角色控制能力，不同的是 <code>ClusterRole</code> 是集群级别的。</p>
</li>
<li>
<p>RoleBinding 适用于某个命名空间内授权，而 <code>ClusterRoleBinding</code> 适用于集群范围内的授权。</p>
</li>
</ul>
<h3> ipvs为啥比iptables效率高？</h3>
<ul>
<li>IPVS模式与iptables同样基于Netfilter，但是ipvs采用的hash表，iptables采用一条条的规则列表。</li>
<li>iptables又是为了防火墙设计的，集群数量越多iptables规则就越多，而iptables规则是从上到下匹配，所以效率就越是低下。</li>
<li>因此当service数量达到一定规模时，hash查表的速度优势就会显现出来，从而提高service的服务性能。</li>
</ul>
<h3> sc pv pvc用途，容器挂载存储整个流程是什么？</h3>
<ul>
<li>PVC：Pod 想要使用的持久化存储的属性，比如存储的大小、读写权限等。</li>
<li>PV ：具体的 Volume 的属性， 比如 Volume 的类型、挂载目录、远程存储服务器地址等。</li>
<li>StorageClass：充当 PV 的模板。并且，只有同属于一个 StorageClass 的 PV 和 PVC，才可以绑定在一起。当然，
StorageClass 的另一个重要作用，是指定 PV 的 Provisioner（存储插件）。
这时候，如果你的存储插件支持 <code>Dynamic Provisioning</code> 的话，Kubernetes 就可以自动为你创建 PV 了。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> nginx ingress的原理本质是什么？</h3>
<ul>
<li>ngress controller通过和kubernetes api交互，动态的去感知集群中ingress规则变化，</li>
<li>然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，</li>
<li>生成一段nginx配置，再写到<code>nginx-ingress-controller</code>的pod里，这个Ingress controller的pod里运行着一个Nginx服务，
控制器会把生成的nginx配置写入<code>/etc/nginx.conf</code>文件中，然后reload 一下使配置生效。以此达到域名分配置和动态更新的问题。</li>
</ul>
<h3> 描述不同node上的Pod之间的通信流程</h3>
<figure><figcaption></figcaption></figure>
<h3> k8s集群节点需要关机维护，需要怎么操作</h3>
<ul>
<li>进行pod驱逐：<code>kubelet drain &lt;node_name&gt;</code></li>
<li>检查node上是否无pod运行，切被驱逐的pod已经在其他节点运行正常</li>
<li>关机维护</li>
<li>开机启动相关服务（注意启动顺序）</li>
<li>解除node节点不可调度：<code>kubectl uncordon node</code></li>
<li>创建测试pod，并使用节点标签测试节点可以被正常调度</li>
</ul>
<h3> canal和flannel区别</h3>
<ul>
<li>Flannel（简单、使用居多）：基于Vxlan技术（叠加网络+二层隧道），不支持网络策略。</li>
<li>Calico（较复杂，使用率少于Flannel）： 也可以支持隧道网络，但是是三层隧道（IPIP），支持网络策略。</li>
<li>Calico项目既能够独立地为Kubernetes集群提供网络解决方案和网络策略，
也能与flannel结合在一起，由flannel提供网络解决方案，而Calico此时仅用于提供网络策略。</li>
</ul>
<h2> 六、prometheus</h2>
<h3> prometheus对比zabbix有哪些优势？</h3>
<p><a href="https://blog.csdn.net/wangyiyungw/article/details/85774969" target="_blank" rel="noopener noreferrer">参考</a></p>
<h3> prometheus组件有哪些，功能是什么？</h3>
<figure><figcaption></figcaption></figure>
<h3> 指标类型有哪些？</h3>
<ul>
<li>Counter（计数器）</li>
<li>Guage（仪表盘）</li>
<li>Histogram（直方图）</li>
<li>Summary（摘要）</li>
</ul>
<h3> 在应对上千节点监控时，如何保障性能</h3>
<ul>
<li>降低采集频率</li>
<li>缩小历史数据保存天数</li>
<li>使用集群联邦和远程存储</li>
</ul>
<h3> 简述从添加节点监控到grafana成图的整个流程</h3>
<ul>
<li>被监控节点安装exporter</li>
<li>prometheus服务端添加监控项</li>
<li>查看prometheus web界面——status——targets</li>
<li>grafana创建图表</li>
</ul>
<h3> 在工作中用到了哪些exporter</h3>
<ul>
<li>node-exporter监控linux主机</li>
<li>cAdvisor监控容器</li>
<li>MySQLD Exporter监控mysql</li>
<li>Blackbox Exporter网络探测</li>
<li>Pushgateway采集自定义指标监控</li>
<li>process exporter进程监控</li>
</ul>
<h2> 七、ELK</h2>
<h3> Elasticsearch的数据如何备份与恢复？</h3>
<p><a href="https://www.cnblogs.com/tcy1/p/13492361.html" target="_blank" rel="noopener noreferrer">参考</a></p>
<p><a href="https://blog.csdn.net/moxiaomomo/article/details/78401400?locationNum=8&amp;fps=1" target="_blank" rel="noopener noreferrer">参考</a></p>
<h3> 你们项目中使用的logstash过滤器插件是什么？实现哪些功能？</h3>
<ul>
<li>date 日期解析</li>
<li>grok 正则匹配解析</li>
<li>overwrite 写某个字段</li>
<li>dissect 分隔符解析</li>
<li>mutate 对字段做处理</li>
<li>json 解析</li>
<li>geoip 地理位置解析</li>
<li>ruby 修改logstash event</li>
</ul>
<h3> 是否用到了filebeat的内置module？用了哪些？</h3>
<figure><figcaption></figcaption></figure>
<h3> elasticsearch分片副本是什么？你们配置的参数是多少？</h3>
<p><a href="https://juejin.cn/post/6844903862088777736" target="_blank" rel="noopener noreferrer">参考</a></p>
<h2> 八、运维开发</h2>
<h3> 备份系统中所有容器镜像</h3>
<p>备份镜像列表</p>
<h3> 编写脚本，定时备份某个库，然后压缩，发送异机</h3>
<ul>
<li>公共部分定义函数，如获取时间戳，配置报警接口</li>
<li>多使用if判断是否存在异常并处理，如数据库大，检测任务是否完成。</li>
<li>检测生成文件大小是否是空文件</li>
</ul>
<h3> 批量获取所有主机的系统信息</h3>
<ul>
<li>使用python的paramiko库，ssh登陆主机执行查询操作</li>
<li>使用shell脚本批量ssh登陆主机并执行命令</li>
<li>使用ansible的setup模块获取主机信息</li>
<li>prometheus的node_exporter收集主机资源信息</li>
</ul>
<h3> django的mtv模式流程</h3>
<figure><figcaption></figcaption></figure>
<h3> python如何导出、导入环境依赖包</h3>
<p><strong>导出环境</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>导入环境</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> python创建，进入，退出，查看虚拟环境</h3>
<p><strong>安装软件包</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>检测安装是否成功</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>创建虚拟环境cd到要创建虚拟环境的目录</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>创建虚拟环境</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>激活虚拟环境</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>退出虚拟环境</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> flask和django区别，应用场景</h3>
<ul>
<li>Django功能大而全，Flask只包含基本的配置</li>
<li>Django的一站式解决的思路，能让开发者不用在开发之前就在选择应用的基础设施上花费大量时间。</li>
<li>Django有模板，表单，路由，认证，基本的数据库管理等等内建功能。与之相反，Flask只是一个内核，默认依赖于两个外部库：</li>
<li>Jinja2 模板引擎和 Werkzeug WSGI 工具集，其他很多功能都是以扩展的形式进行嵌入使用。</li>
<li>Flask 比 Django 更灵活用Flask来构建应用之前，选择组件的时候会给开发者带来更多的灵活性，
可能有的应用场景不适合使用一个标准的ORM(Object-Relational Mapping 对象关联映射)，或者需要
与不同的工作流和模板系统交互</li>
</ul>
<h3> 列举常用的git命令</h3>
<ul>
<li>git init <em>初始化</em></li>
<li>git config <em>配置</em></li>
<li>git add <em>添加到本地仓库</em></li>
<li>git commit <em>提交本地仓库</em></li>
<li>git branch <em>创建分支</em></li>
<li>git checkout <em>校验、检查</em></li>
<li>git tag <em>标签</em></li>
<li>git push <em>推送</em></li>
<li>git status <em>查看状态</em></li>
<li>git log <em>查看日志</em></li>
</ul>
<h3> git gitlab jenkins的CI/CD流程如何配置</h3>
<ul>
<li>开发者git提交代码至gitlab仓库</li>
<li>jenkins从gitlab拉取代码，触发镜像构建</li>
<li>镜像上传至harbor私有仓库</li>
<li>镜像下载至执行机器</li>
<li>镜像运行</li>
</ul>
<h2> 九、日常工作</h2>
<h3> 在日常工作中遇到了什么棘手的问题，如何排查</h3>
<ul>
<li>redis弱口令导致中挖矿病毒，排查，优化</li>
<li>k8s中开发的程序在用户上传文件时开启进程，未及时关闭，导致节点超出最大进程数</li>
</ul>
<h3> 日常故障处理流程</h3>
<ul>
<li>查看报警内容，快速定位大致故障主机，服务，影响范围</li>
<li>告知运维经理故障，并开始排查</li>
<li>如果需要修改配置文件，重启服务器等操作，告知相关开发人员</li>
<li>完成故障处理</li>
</ul>
<h3> 修改线上业务配置文件流程</h3>
<ul>
<li>先告知运维经理和业务相关开发人员</li>
<li>在测试环境测试，并备份之前的配置文件</li>
<li>测试无误后修改生产环境配置</li>
<li>观察生产环境是否正常，是否有报警</li>
<li>完成配置文件更改</li>
</ul>
<h3> 业务pv多少？集群规模多少？怎么保障业务高可用？</h3>
<h2> 十、开放性问题</h2>
<h3> 你认为初级运维工程师和高级运维工程师的区别？</h3>
<h3> 你认为未来运维发展方向?</h3>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="面试宝典"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-17T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">网络相关</title>
    <id>https://topjf.github.io/all/network.html</id>
    <link href="https://topjf.github.io/all/network.html"/>
    <updated>2023-03-05T09:31:01.000Z</updated>
    <summary type="text">基础 网络4-5-7模型 TCP TCP 在传输之前会进行三次沟通，一般称为“三次握手”，传完数据断开的时候要进行四次沟通，一般称为“四次挥手”。 三次握手 客户端–发送带有 SYN 标志的数据包–⼀次握⼿–服务端; 服务端–发送带有 SYN/ACK 标志的数据包–⼆次握⼿–客户端; 客户端–发送带有带有 ACK 标志的数据包–三次握⼿–服务端; 为什...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 基础</h2>
<h3> 网络4-5-7模型</h3>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> TCP</h2>
<p>TCP 在传输之前会进行三次沟通，一般称为“三次握手”，传完数据断开的时候要进行四次沟通，一般称为“四次挥手”。</p>
<h3> 三次握手</h3>
<figure><figcaption></figcaption></figure>
<ul>
<li>客户端–发送带有 SYN 标志的数据包–⼀次握⼿–服务端</li>
<li>服务端–发送带有 SYN/ACK 标志的数据包–⼆次握⼿–客户端</li>
<li>客户端–发送带有带有 ACK 标志的数据包–三次握⼿–服务端</li>
</ul>
<h3> 为什么要三次握⼿？</h3>
<p>三次握⼿的⽬的是建⽴可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，⽽三次握
⼿最主要的⽬的就是双⽅确认⾃⼰与对⽅的发送与接收是正常的。</p>
<h3> 四次挥手</h3>
<figure><figcaption></figcaption></figure>
<ul>
<li>客户端-发送⼀个 FIN，⽤来关闭客户端到服务器的数据传送。</li>
<li>服务器-收到这个 FIN，它发回⼀个 ACK，确认序号为收到的序号加1，和 SYN ⼀样，⼀个 FIN 将占⽤⼀个序号</li>
<li>服务器-关闭与客户端的连接，发送⼀个FIN给客户端。</li>
<li>客户端-发回 ACK 报⽂确认，并将确认序号设置为收到序号加1。</li>
</ul>
<h2> A、B、C、D、E类IP地址划分依据</h2>
<h3> IP 地址的格式</h3>
<p>IP 地址的格式：<code>IP 地址 = 网络地址 + 主机地址</code></p>
<p>如果 IP 进行了子网划分：<code>则IP地址 = 网络地址 + 子网地址 + 主机地址</code></p>
<p>网络地址 是互联网上的节点在网络中具有的逻辑地址。
MAC 地址处于<code>数据链路层</code>，IP 地址处于<code>网络层</code>，端口号处于<code>传输层</code>。</p>
<p>例如 IP 地址 <code>192.168.54.4</code></p>
<p>显然属于一个 C 类地址，网络地址为：<code>192.168.54.0</code></p>
<p>主机地址为：<code>0.0.0.4</code>。</p>
<p>在设计互联网络时，为了便于寻址以及层次化构造网络，每个 IP 地址包括两个标示码（ID），即网络 ID 和主机 ID。
同一个物理网络上的所有主机都使用同一个网络 ID，网络上的一个主机（包括网络上的工作站，服务器和路由器等）
有一个主机 ID 与其对应。IP 地址根据网路 ID 的不同分为 5 种类型：<strong>A 类地址，B 类地址，C 类地址，D 类地址 和 E 类地址</strong>。</p>
<h3> A 类 IP 地址</h3>
<p>一个 A 类 IP 地址由一个字节的网路地址和 3 个字节主机地址组成，网络地址的最高位必须是 “0”，最高字节网络的地址范围从<code>00000000-01111111</code>。</p>
<p>地址范围为：<code>1.0.0.0</code>到<code>126.0.0.0</code>。默认的子网掩码为：<code>255.0.0.0</code>。</p>
<p>数量：可用的 A 类网络有126 个。每个网路可以容纳<code>2^24-2</code>个，约一亿多个主机。</p>
<p>应用：A 类地址分配给规模特别大的网络使用。A 类网络用第一个字节表示网络本身的地址，后面三个字节作为连接于网络上的主机地址。</p>
<p>例如 MS 和 IBM，阿里这样公司的网络。</p>
<figure><figcaption></figcaption></figure>
<h3> B 类 IP 地址</h3>
<p>一个 B 类 IP 地址由 2 个字节的网路地址和 2 个字节的主机地址组成，网络地址的最高位必须是 10，</p>
<p>网络的地址范围从：<code>10000000.00000000-10111111.11111111</code>；</p>
<p>地址范围为：<code>128.0.0.0到191.255.255.255</code>，</p>
<p>默认的子网掩码为：<code>255.255.0.0</code>.</p>
<p>数量：可用的 B 类网络有：<code>2^8*64</code> 个，约有 1.6 万个，每个网络能容纳的主机有：<code>2^16</code>个，约 6 万多个。</p>
<p>应用：B 类地址一般分配给中性网络。</p>
<h3> C 类地址</h3>
<p>一个 C 类地址由 3 个字节的网络地址和 1 个字节的主机地址组成，网路地址的最高位必须是 “110”，</p>
<p>即网络地址的范围是：<code>11000000.00000000.00000000-11011111.11111111.11111111</code>，</p>
<p>转化为 10 进制为：<code>192.0.0.0</code>到<code>223.255.255.255</code>，</p>
<p>默认的子网掩码为：<code>255.255.255.0</code>.</p>
<p>数量：可用的 C 类网络有：<code>2^16*32</code> 个，约有 209 万个。每个网路能容纳的主机个数为：<code>254</code> 个。</p>
<p>应用：C 类地址一般分配给小型网路，如一般的局域网和校园网，它连接的主机数量比较少，把用户分为若干段进行管理。</p>
<h3> D 类地址</h3>
<p>D 类地址多用于多点广播（Multicast）。</p>
<p>D 类 IP 地址是以 <code>1110</code> 开始的，它是一个保留的地址。
它并不指向特定的网络，目前这一类地址被用在多点广播中。多点广播用来一次寻址一组计算机，它标识共享同一协议的一组计算机。</p>
<h3> E 类地址</h3>
<p>以 <code>11110</code> 开始，为将来使用保留。</p>
<p>注：全零 "0.0.0.0" 地址对应于当前的主机，全 1 地址（<code>255.255.255.255</code>）是当前子网的广播地址。</p>
<p>在 IP 地址 3 种主要类型里，各保留了 3 个区域作为私有地址，其地址范围如下：</p>
<p>IP 地址范围</p>
<p><code>0.0.0.0～255.255.255.255</code>，包括了 mask 地址。</p>
<h3> IP 地址划分</h3>
<ul>
<li>A 类地址：<code>1.0.0.1～126.255.255.254</code></li>
<li>B 类地址：<code>128.0.0.1～191.255.255.254</code></li>
<li>C 类地址：<code>192.168.0.0～192.168.255.255</code></li>
<li>D 类地址：<code>224.0.0.1～239.255.255.254</code></li>
<li>E 类地址：<code>240.0.0.1～255.255.255.254</code></li>
</ul>
<h3> 判断两个IP地址是否是同一个网段中</h3>
<blockquote>
<p>要判断两个 IP 地址是不是在同一个网段，就将它们的 IP 地址分别与子网掩码做与运算，得到的结果一网络号，
如果网络号相同，就在同一子网，否则，不在同一子网。</p>
</blockquote>
<p>例：假定选择了子网掩码255.255.254.0，现在分别将上述两个 IP 地址分别与掩码做与运算：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出, 得到的结果 (这个结果就是网络地址) 都是一样的，因此可以判断这两个 IP 地址在同一个子网。</p>
<h3> 如果没有进行子网划分</h3>
<ul>
<li>A 类网络的子网掩码为 <code>255.0.0.0</code></li>
<li>B 类网络的子网掩码为 <code>255.255.0.0</code></li>
<li>C 类网络的子网掩码为 <code>255.255.255.0</code></li>
<li>缺省情况子网掩码为 <code>255.255.255.0</code></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="面试宝典"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-11-16T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java书籍</title>
    <id>https://topjf.github.io/books/java.html</id>
    <link href="https://topjf.github.io/books/java.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java书籍推荐</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Java书籍推荐</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="计算机书籍"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Docker容器服务编排</title>
    <id>https://topjf.github.io/docker/docker-compose.html</id>
    <link href="https://topjf.github.io/docker/docker-compose.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">介绍 实战使用</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Docker容器服务编排</h1>
<h2> 介绍</h2>
<h2> 实战使用</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Docker从入门到上手干事</title>
    <id>https://topjf.github.io/docker/docker-in-action.html</id>
    <link href="https://topjf.github.io/docker/docker-in-action.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Docker介绍 什么是 Docker？ 说实话关于 Docker 是什么并不太好说，下面我通过四点向你说明 Docker 到底是个什么东西。 Docker 是世界领先的软件容器平台，基于 Go 语言 进行开发实现。; Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放开发人员。; 用户可以方便地创建和使用容器，把自己的应用放入容器...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Docker介绍</h2>
<h3> 什么是 Docker？</h3>
<p>说实话关于 Docker 是什么并不太好说，下面我通过四点向你说明 Docker 到底是个什么东西。</p>
<ul>
<li>Docker 是世界领先的软件容器平台，基于 <strong>Go 语言</strong> 进行开发实现。</li>
<li>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放开发人员。</li>
<li>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</li>
<li>Docker 可以<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。</strong> 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</li>
</ul>
<p>官网地址：<a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">https://www.docker.com/</a> 。</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/container.png" alt="认识容器" tabindex="0" loading="lazy"><figcaption>认识容器</figcaption></figure>
<h3> 为什么要用 Docker?</h3>
<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。</p>
<p>传统的开发流程中，我们的项目通常需要使用 MySQL、Redis、FastDFS 等等环境，这些环境都是需要我们手动去进行下载并配置的，安装配置流程极其复杂，而且不同系统下的操作也不一样。</p>
<p>Docker 的出现完美地解决了这一问题，我们可以在容器中安装 MySQL、Redis 等软件环境，使得应用和环境架构分开，它的优势在于：</p>
<ol>
<li>一致的运行环境，能够更轻松地迁移</li>
<li>对进程进行封装隔离，容器与容器之间互不影响，更高效地利用系统资源</li>
<li>可以通过镜像复制多个一致的容器</li>
</ol>
<p>另外，<a href="https://yeasy.gitbook.io/docker_practice/introduction/why" target="_blank" rel="noopener noreferrer">《Docker 从入门到实践》</a> 这本开源书籍中也已经给出了使用 Docker 的原因。</p>
<figure><img src="https://img-blog.csdnimg.cn/20210412220015698.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> Docker 的安装</h2>
<h3> Windows</h3>
<p>接下来对 Docker 进行安装，以 Windows 系统为例，访问 Docker 的官网：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-4e3146984adaee0067bdc5e9b1d757bb479.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>然后点击<code>Get Started</code>：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-96adfbfebe3e59097c8ba25e55f68ba7908.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>在此处点击<code>Download for Windows</code>即可进行下载。</p>
<p>如果你的电脑是<code>Windows 10 64位专业版</code>的操作系统，则在安装 Docker 之前需要开启一下<code>Hyper-V</code>，开启方式如下。打开控制面板，选择程序：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-73ce678240826de0f49225250a970b4d205.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击<code>启用或关闭Windows功能</code>：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-9c7a96c332e56b9506325a1f1fdb608a659.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>勾选上<code>Hyper-V</code>，点击确定即可：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-aad4a58c5e917f7185908d6320d7fb06861.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>完成更改后需要重启一下计算机。</p>
<p>开启了<code>Hyper-V</code>后，我们就可以对 Docker 进行安装了，打开安装程序后，等待片刻点击<code>Ok</code>即可：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-62ac3c9184bdc21387755294613ff5054c6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>安装完成后，我们仍然需要重启计算机，重启后，若提示如下内容：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-3585c7d6a4632134ed925493a7d43e14a43.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>它的意思是询问我们是否使用 WSL2，这是基于 Windows 的一个 Linux 子系统，这里我们取消即可，它就会使用我们之前勾选的<code>Hyper-V</code>虚拟机。</p>
<p>因为是图形界面的操作，这里就不介绍 Docker Desktop 的具体用法了。</p>
<h3> Mac</h3>
<p>直接使用 Homebrew 安装即可</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> Linux</h3>
<p>下面来看看 Linux 中如何安装 Docker，这里以 CentOS7 为例。</p>
<p>在测试或开发环境中，Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，执行这个脚本后就会自动地将一切准备工作做好，并且把 Docker 的稳定版本安装在系统中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后直接启动服务：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>推荐设置开机自启，执行指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> Docker 中的几个概念</h2>
<p>在正式学习 Docker 之前，我们需要了解 Docker 中的几个核心概念：</p>
<h3> 镜像</h3>
<p>镜像就是一个只读的模板，镜像可以用来创建 Docker 容器，一个镜像可以创建多个容器</p>
<h3> 容器</h3>
<p>容器是用镜像创建的运行实例，Docker 利用容器独立运行一个或一组应用。它可以被启动、开始、停止、删除，每个容器都是相互隔离的、保证安全的平台。 可以把容器看作是一个简易的 Linux 环境和运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的</p>
<h3> 仓库</h3>
<p>仓库是集中存放镜像文件的场所。仓库和仓库注册服务器是有区别的，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签。 仓库分为公开仓库和私有仓库两种形式，最大的公开仓库是 DockerHub，存放了数量庞大的镜像供用户下载，国内的公开仓库有阿里云、网易云等</p>
<h3> 总结</h3>
<p>通俗点说，一个镜像就代表一个软件；而基于某个镜像运行就是生成一个程序实例，这个程序实例就是容器；而仓库是用来存储 Docker 中所有镜像的。</p>
<p>其中仓库又分为远程仓库和本地仓库，和 Maven 类似，倘若每次都从远程下载依赖，则会大大降低效率，为此，Maven 的策略是第一次访问依赖时，将其下载到本地仓库，第二次、第三次使用时直接用本地仓库的依赖即可，Docker 的远程仓库和本地仓库的作用也是类似的。</p>
<h2> Docker 初体验</h2>
<p>下面我们来对 Docker 进行一个初步的使用，这里以下载一个 MySQL 的镜像为例<code>(在CentOS7下进行)</code>。</p>
<p>和 GitHub 一样，Docker 也提供了一个 DockerHub 用于查询各种镜像的地址和安装教程，为此，我们先访问 DockerHub：<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/</a></p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-37d083cc92fe36aad829e975646b9d27fa0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>在左上角的搜索框中输入<code>MySQL</code>并回车：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-ced37002391a059754def9b3a6c2aa4e342.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>可以看到相关 MySQL 的镜像非常多，若右上角有<code>OFFICIAL IMAGE</code>标识，则说明是官方镜像，所以我们点击第一个 MySQL 镜像：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-48ba3fdc99c93a96e18b929195ca8e93c6c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>右边提供了下载 MySQL 镜像的指令为<code>docker pull MySQL</code>，但该指令始终会下载 MySQL 镜像的最新版本。</p>
<p>若是想下载指定版本的镜像，则点击下面的<code>View Available Tags</code>：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-ed601649275c6cfe65bbe422b463c263a64.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>这里就可以看到各种版本的镜像，右边有下载的指令，所以若是想下载 5.7.32 版本的 MySQL 镜像，则执行：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而下载镜像的过程是非常慢的，所以我们需要配置一下镜像源加速下载，访问<code>阿里云</code>官网：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-0a46effd262d3db1b613a0db597efa31f34.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击控制台：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-60f198e0106be6b43044969d2900272504f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>然后点击左上角的菜单，在弹窗的窗口中，将鼠标悬停在产品与服务上，并在右侧搜索容器镜像服务，最后点击容器镜像服务：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-2f6706a979b405dab01bc44a29bb6b26fc4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击左侧的镜像加速器，并依次执行右侧的配置指令即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Docker 镜像指令</h2>
<p>Docker 需要频繁地操作相关的镜像，所以我们先来了解一下 Docker 中的镜像指令。</p>
<p>若想查看 Docker 中当前拥有哪些镜像，则可以使用 <code>docker images</code> 命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>REPOSITORY</code>为镜像名，<code>TAG</code>为版本标志，<code>IMAGE ID</code>为镜像 id(唯一的)，<code>CREATED</code>为创建时间，注意这个时间并不是我们将镜像下载到 Docker 中的时间，而是镜像创建者创建的时间，<code>SIZE</code>为镜像大小。</p>
<p>该指令能够查询指定镜像名：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若如此做，则会查询出 Docker 中的所有 MySQL 镜像：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该指令还能够携带<code>-q</code>参数：<code>docker images -q</code> ， <code>-q</code>表示仅显示镜像的 id：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若是要下载镜像，则使用：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>docker pull</code>是固定的，后面写上需要下载的镜像名及版本标志；若是不写版本标志，而是直接执行<code>docker pull MySQL</code>，则会下载镜像的最新版本。</p>
<p>一般在下载镜像前我们需要搜索一下镜像有哪些版本才能对指定版本进行下载，使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://oscimg.oschina.net/oscnet/up-559083ae80e7501e86e95fbbad25b6d571a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>不过该指令只能查看 MySQL 相关的镜像信息，而不能知道有哪些版本，若想知道版本，则只能这样查询：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://oscimg.oschina.net/oscnet/up-68394e25f652964bb042571151c5e0fd2e9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>若是查询的版本不存在，则结果为空：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-abfdd51b9ad2ced3711268369f52b077b12.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>删除镜像使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若是不指定版本，则默认删除的也是最新版本。</p>
<p>还可以通过指定镜像 id 进行删除：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而此时报错了：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为要删除的<code>hello-world</code>镜像正在运行中，所以无法删除镜像，此时需要强制执行删除：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该指令会将镜像和通过该镜像执行的容器全部删除，谨慎使用。</p>
<p>Docker 还提供了删除镜像的简化版本：<code>docker rmi 镜像名:版本标志</code> 。</p>
<p>此时我们即可借助<code>rmi</code>和<code>-q</code>进行一些联合操作，比如现在想删除所有的 MySQL 镜像，那么你需要查询出 MySQL 镜像的 id，并根据这些 id 一个一个地执行<code>docker rmi</code>进行删除，但是现在，我们可以这样：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先通过<code>docker images MySQL -q</code>查询出 MySQL 的所有镜像 id，<code>-q</code>表示仅查询 id，并将这些 id 作为参数传递给<code>docker rmi -f</code>指令，这样所有的 MySQL 镜像就都被删除了。</p>
<h2> Docker 容器指令</h2>
<p>掌握了镜像的相关指令之后，我们需要了解一下容器的指令，容器是基于镜像的。</p>
<p>若需要通过镜像运行一个容器，则使用：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然了，运行的前提是你拥有这个镜像，所以先下载镜像：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载完成后就可以运行了，运行后查看一下当前运行的容器：<code>docker ps</code> 。</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-bd48e20ef07b7c91ad16f92821a3dbca5b5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>其中<code>CONTAINER_ID</code>为容器的 id，<code>IMAGE</code>为镜像名，<code>COMMAND</code>为容器内执行的命令，<code>CREATED</code>为容器的创建时间，<code>STATUS</code>为容器的状态，<code>PORTS</code>为容器内服务监听的端口，<code>NAMES</code>为容器的名称。</p>
<p>通过该方式运行的 tomcat 是不能直接被外部访问的，因为容器具有隔离性，若是想直接通过 8080 端口访问容器内部的 tomcat，则需要对宿主机端口与容器内的端口进行映射：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释一下这两个端口的作用(<code>8080:8080</code>)，第一个 8080 为宿主机端口，第二个 8080 为容器内的端口，外部访问 8080 端口就会通过映射访问容器内的 8080 端口。</p>
<p>此时外部就可以访问 Tomcat 了：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-16d9ff4d29094681f51424ea8d0ee4fd73e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>若是这样进行映射：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则外部需访问 8088 端口才能访问 tomcat，需要注意的是，每次运行的容器都是相互独立的，所以同时运行多个 tomcat 容器并不会产生端口的冲突。</p>
<p>容器还能够以后台的方式运行，这样就不会占用终端：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动容器时默认会给容器一个名称，但这个名称其实是可以设置的，使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时的容器名称即为 tomcat01，容器名称必须是唯一的。</p>
<p>再来引申一下<code>docker ps</code>中的几个指令参数，比如<code>-a</code>：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该参数会将运行和非运行的容器全部列举出来：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-16d9ff4d29094681f51424ea8d0ee4fd73e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><code>-q</code>参数将只查询正在运行的容器 id：<code>docker ps -q</code> 。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若是组合使用，则查询运行和非运行的所有容器 id：<code>docker ps -qa</code> 。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是容器的停止、重启指令，因为非常简单，就不过多介绍了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过该指令能够将已经停止运行的容器运行起来，可以通过容器的 id 启动，也可以通过容器的名称启动。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该指令能够重启指定的容器。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该指令能够停止指定的容器。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该指令能够直接杀死指定的容器。</p>
<p>以上指令都能够通过容器的 id 和容器名称两种方式配合使用。</p>
<hr>
<p>当容器被停止之后，容器虽然不再运行了，但仍然是存在的，若是想删除它，则使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是容器的 id 无需全部写出来，只需唯一标识即可。</p>
<p>若是想删除正在运行的容器，则需要添加<code>-f</code>参数强制删除：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若是想删除所有容器，则可以使用组合指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先通过<code>docker ps -qa</code>查询出所有容器的 id，然后通过<code>docker rm -f</code>进行删除。</p>
<hr>
<p>当容器以后台的方式运行时，我们无法知晓容器的运行状态，若此时需要查看容器的运行日志，则使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样的方式显示的日志并不是实时的，若是想实时显示，需要使用<code>-f</code>参数：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>-t</code>参数还能够显示日志的时间戳，通常与<code>-f</code>参数联合使用：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>
<p>查看容器内运行了哪些进程，可以使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://oscimg.oschina.net/oscnet/up-7ec71a682712e56e90490f55c32cf660fd3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>若是想与容器进行交互，则使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://oscimg.oschina.net/oscnet/up-fd17796322f833685ca8ead592d38581898.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>此时终端将会进入容器内部，执行的指令都将在容器中生效，在容器内只能执行一些比较简单的指令，如：ls、cd 等，若是想退出容器终端，重新回到 CentOS 中，则执行<code>exit</code>即可。</p>
<p>现在我们已经能够进入容器终端执行相关操作了，那么该如何向 tomcat 容器中部署一个项目呢？</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>docker cp</code>指令能够将文件从 CentOS 复制到容器中，<code>./test.html</code>为 CentOS 中的资源路径，<code>289cc00dc5ed</code>为容器 id，<code>/usr/local/tomcat/webapps</code>为容器的资源路径，此时<code>test.html</code>文件将会被复制到该路径下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若是想将容器内的文件复制到 CentOS 中，则反过来写即可：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以现在若是想要部署项目，则先将项目上传到 CentOS，然后将项目从 CentOS 复制到容器内，此时启动容器即可。</p>
<hr>
<p>虽然使用 Docker 启动软件环境非常简单，但同时也面临着一个问题，我们无法知晓容器内部具体的细节，比如监听的端口、绑定的 ip 地址等等，好在这些 Docker 都帮我们想到了，只需使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://oscimg.oschina.net/oscnet/up-fca74d4350cdfebfc2b06101e1cab411619.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> Docker 数据卷</h2>
<p>学习了容器的相关指令之后，我们来了解一下 Docker 中的数据卷，它能够实现宿主机与容器之间的文件共享，它的好处在于我们对宿主机的文件进行修改将直接影响容器，而无需再将宿主机的文件再复制到容器中。</p>
<p>现在若是想将宿主机中<code>/opt/apps</code>目录与容器中<code>webapps</code>目录做一个数据卷，则应该这样编写指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而此时访问 tomcat 会发现无法访问：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-8fa1b23f6ea2567b5938370e7d7f636533f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>这就说明我们的数据卷设置成功了，Docker 会将容器内的<code>webapps</code>目录与<code>/opt/apps</code>目录进行同步，而此时<code>/opt/apps</code>目录是空的，导致<code>webapps</code>目录也会变成空目录，所以就访问不到了。</p>
<p>此时我们只需向<code>/opt/apps</code>目录下添加文件，就会使得<code>webapps</code>目录也会拥有相同的文件，达到文件共享，测试一下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>/opt/apps</code>目录下创建了一个 <code>test.html</code> 文件，那么容器内的<code>webapps</code>目录是否会有该文件呢？进入容器的终端：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器内确实已经有了该文件，那接下来我们编写一个简单的 Web 应用：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个非常简单的 Servlet，我们将其打包上传到<code>/opt/apps</code>中，那么容器内肯定就会同步到该文件，此时进行访问：</p>
<figure><img src="https://oscimg.oschina.net/oscnet/up-712716a8c8c444ba3a77ade8ff27e7c6cf5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>这种方式设置的数据卷称为自定义数据卷，因为数据卷的目录是由我们自己设置的，Docker 还为我们提供了另外一种设置数据卷的方式：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时的<code>aa</code>并不是数据卷的目录，而是数据卷的别名，Docker 会为我们自动创建一个名为<code>aa</code>的数据卷，并且会将容器内<code>webapps</code>目录下的所有内容复制到数据卷中，该数据卷的位置在<code>/var/lib/docker/volumes</code>目录下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们只需修改该目录的内容就能能够影响到容器。</p>
<hr>
<p>最后再介绍几个容器和镜像相关的指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该指令能够将容器打包成一个镜像，此时查询镜像：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若是想将镜像备份出来，则可以使用指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若是拥有<code>.tar</code>格式的镜像，该如何将其加载到 Docker 中呢？执行指令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">docker安装mysql-redis-nginx-nacos-mq-es</title>
    <id>https://topjf.github.io/docker/docker-install-mysql-redis-nginx-nacos-mq-es.html</id>
    <link href="https://topjf.github.io/docker/docker-install-mysql-redis-nginx-nacos-mq-es.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">docker桌面镜像加速 --name=&amp;quot;容器新名字&amp;quot;：为容器指定一个名称； -i：以交互模式运行容器，通常与-t或者-d同时使用； -t：为容器重新分配一个伪输入终端，通常与-i同时使用； -d: 后台运行容器，并返回容器ID； -P: 随机端口映射，容器内部端口随机映射到主机的端口 -p: 指定端口映射，格式为：主机(宿主)端口:容器端口 mysq...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1><a href="https://blog.csdn.net/qq_42476834/article/details/112675953" target="_blank" rel="noopener noreferrer">csdn 博客地址</a></h1>
<h1>docker安装 MySQL、Redis、Nginx、nacos、es+kibana、seata</h1>
<p>docker桌面镜像加速</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>--name="容器新名字"：为容器指定一个名称；
-i：以交互模式运行容器，通常与-t或者-d同时使用；
-t：为容器重新分配一个伪输入终端，通常与-i同时使用；
-d: 后台运行容器，并返回容器ID；
-P: 随机端口映射，容器内部端口随机映射到主机的端口
-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</p>
</blockquote>
<h2> mysql:5.7.x</h2>
<p><a href="https://hub.docker.com/search?q=mysql&amp;type=image" target="_blank" rel="noopener noreferrer">https://hub.docker.com/search?q=mysql&amp;type=image</a></p>
<blockquote>
<p>docker pull <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/mysql:5.7.38" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/mysql:5.7.38</a></p>
</blockquote>
<p>查看镜像</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行创建容器</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主机里配置mysql:</p>
<p>/docker/mysql/conf$  sudo vim my.cnf</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启MySQL容器，容器查看：docker exec -it mysql /bin/bash</p>
<h2> redis:buster</h2>
<p>使用教程：<a href="https://hub.docker.com/_/redis?tab=description" target="_blank" rel="noopener noreferrer">https://hub.docker.com/_/redis?tab=description</a></p>
<blockquote>
<p>docker pull redis:buster docker pull redis:latest</p>
<p>docker pull <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/redis:latest" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/redis:latest</a></p>
<p>docker tag  redis:latest <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/redis:latest" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/redis:latest</a></p>
<p>docker push <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/redis:latest" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/redis:latest</a></p>
</blockquote>
<p>查看镜像</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:6379 -&gt; 0.0.0.0:0: listen tcp 0.0.0.0:6379: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</p>
</blockquote>
<h2> docker 端口占用问题</h2>
<p>查看TCP：netsh interface ipv4 show excludedportrange protocol=tcp</p>

<p>更改：docker run -p 6491:6379</p>
<p>查看容器</p>
<p>docker logs --since 30m redis</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（存在问题：重启后数据清空）所以要</p>
<p>-- 持久化</p>
<p>vim /mydoc/redis/conf/redis.conf</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>登陆容器，登陆redis客户端</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> redisinsight web端管理</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="http://127.0.0.1:8001/" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8001/</a></p>
<h2> nginx:perl</h2>
<p>mkdir -p nginx/conf | logs</p>
<blockquote>
<p>docker pull <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/nginx:perl" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/nginx:perl</a></p>
</blockquote>
<p>日志格式：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>docker logs --tail="10" nginx</p>
<p>docker exec -it nginx /bin/bash</p>
</blockquote>
<p>E:\docker\nginx\conf\nginx.conf</p>
<div class="language-nginx line-numbers-mode" data-ext="nginx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E:\docker\nginx\conf.d\自己的配置文件.conf</p>
<div class="language-nginx line-numbers-mode" data-ext="nginx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>time.txt</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跨域 : 在server location下添加add_header</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> nacos</h2>
<p>当前推荐的稳定版本为1.4.x或2.0.x。<a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener noreferrer">官网文档</a>
<a href="https://blog.csdn.net/qq_42476834/article/details/121149424" target="_blank" rel="noopener noreferrer">推荐参考：docker安装nacos2.0.x + mysql5.7</a>
<a href="https://hub.docker.com/r/nacos/nacos-server" target="_blank" rel="noopener noreferrer">docker 镜像</a></p>
<blockquote>
<p>docker pull <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/nacos-server:1.4.2" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/nacos-server:1.4.2</a></p>
<p>docker pull <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/nacos-server:2.0.3" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/nacos-server:2.0.3</a></p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>docker exec -it nacos /bin/bash</p>
<p>docker exec -it web /bin/bash</p>
</blockquote>
<p>登陆：<a href="http://localhost:8848/nacos" target="_blank" rel="noopener noreferrer">http://localhost:8848/nacos</a> 账号、密码：nacos</p>
<h2> rabbitmq:3.8.x-management</h2>
<p><a href="https://www.rabbitmq.com/networking.html" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/networking.html</a></p>
<p>下载镜像</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行容器</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://localhost:15672/#/" target="_blank" rel="noopener noreferrer">http://localhost:15672/#/</a> 账号：guest</p>
<h2> elasticsearch+kibana</h2>
<p>安装</p>
<p><a href="https://www.elastic.co/cn/downloads/elasticsearch#ga-release" target="_blank" rel="noopener noreferrer">https://www.elastic.co/cn/downloads/elasticsearch#ga-release</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置</p>
<h3> elasticsearch</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>elasticsearch.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="http://localhost:9200" target="_blank" rel="noopener noreferrer">http://localhost:9200</a></p>
<p><a href="http://localhost:9200/_cat/nodes" target="_blank" rel="noopener noreferrer">http://localhost:9200/_cat/nodes</a></p>
<h3> kibana</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="http://localhost:5601" target="_blank" rel="noopener noreferrer">http://localhost:5601</a></p>
<p>kibana.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ik 分词器</h3>
<p>下载：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener noreferrer">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.4/elasticsearch-analysis-ik-7.17.4.zip" target="_blank" rel="noopener noreferrer">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.4/elasticsearch-analysis-ik-7.17.4.zip</a></p>
<p>解压到es：plugins</p>
<p>重启 es</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Docker 基本概念解读</title>
    <id>https://topjf.github.io/docker/docker-intro.html</id>
    <link href="https://topjf.github.io/docker/docker-intro.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="html"><![CDATA[<p><strong>本文只是对 Docker 的概念做了较为详细的介绍，并不涉及一些像 Docker 环境的安装以及 Docker 的一些常见操作和命令。</strong></p>
]]></summary>
    <content type="html"><![CDATA[<p><strong>本文只是对 Docker 的概念做了较为详细的介绍，并不涉及一些像 Docker 环境的安装以及 Docker 的一些常见操作和命令。</strong></p>
<!-- more -->
<h2> 一 认识容器</h2>
<p><strong>Docker 是世界领先的软件容器平台</strong>，所以想要搞懂 Docker 的概念我们必须先从容器开始说起。</p>
<h3> 1.1 什么是容器?</h3>
<h4> 先来看看容器较为官方的解释</h4>
<p><strong>一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。</strong></p>
<ul>
<li><strong>容器镜像是轻量的、可执行的独立软件包</strong> ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li>
<li><strong>容器化软件适用于基于 Linux 和 Windows 的应用，在任何环境中都能够始终如一地运行。</strong></li>
<li><strong>容器赋予了软件独立性</strong>，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。</li>
</ul>
<h4> 再来看看容器较为通俗的解释</h4>
<p><strong>如果需要通俗地描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。</strong></p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/container.png" alt="认识容器" tabindex="0" loading="lazy"><figcaption>认识容器</figcaption></figure>
<h3> 1.2 图解物理机,虚拟机与容器</h3>
<p>关于虚拟机与容器的对比在后面会详细介绍到，这里只是通过网上的图片加深大家对于物理机、虚拟机与容器这三者的理解(下面的图片来源于网络)。</p>
<p><strong>物理机：</strong></p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/物理机图解.png" alt="物理机" tabindex="0" loading="lazy"><figcaption>物理机</figcaption></figure>
<p><strong>虚拟机：</strong></p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/虚拟机图解.png" alt="虚拟机" tabindex="0" loading="lazy"><figcaption>虚拟机</figcaption></figure>
<p><strong>容器：</strong></p>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/image-20211110104003678.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>通过上面这三张抽象图，我们可以大概通过类比概括出： <strong>容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。</strong></p>
<hr>
<p><strong>相信通过上面的解释大家对于容器这个既陌生又熟悉的概念有了一个初步的认识，下面我们就来谈谈 Docker 的一些概念。</strong></p>
<h2> 二 再来谈谈 Docker 的一些概念</h2>
<h3> 2.1 什么是 Docker?</h3>
<p>说实话关于 Docker 是什么并太好说，下面我通过四点向你说明 Docker 到底是个什么东西。</p>
<ul>
<li><strong>Docker 是世界领先的软件容器平台。</strong></li>
<li><strong>Docker</strong> 使用 Google 公司推出的 <strong>Go 语言</strong> 进行开发实现，基于 <strong>Linux 内核</strong> 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 <strong>UnionFS</strong> 等技术，<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。</strong> 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</li>
<li><strong>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</strong></li>
<li><strong>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</strong></li>
</ul>
<h3> 2.2 Docker 思想</h3>
<ul>
<li><strong>集装箱</strong></li>
<li><strong>标准化：</strong> ① 运输方式 ② 存储方式 ③ API 接口</li>
<li><strong>隔离</strong></li>
</ul>
<h3> 2.3 Docker 容器的特点</h3>
<ul>
<li><strong>轻量</strong> :  在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</li>
<li><strong>标准</strong> : Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。</li>
<li><strong>安全</strong> : Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</li>
</ul>
<h3> 2.4 为什么要用 Docker ?</h3>
<ul>
<li><strong>Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题；——一致的运行环境</strong></li>
<li><strong>可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间</strong></li>
<li><strong>避免公用的服务器，资源会容易受到其他用户的影响。——隔离性</strong></li>
<li><strong>善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展</strong></li>
<li><strong>可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便</strong></li>
<li><strong>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署</strong></li>
</ul>
<hr>
<h2> 三 容器 VS 虚拟机</h2>
<p><strong>每当说起容器，我们不得不将其与虚拟机做一个比较。就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。</strong></p>
<p>简单来说： <strong>容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</strong></p>
<h3> 3.1 两者对比图</h3>
<p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/2e2b95eebf60b6d03f6c1476f4d7c697.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 3.2 容器与虚拟机总结</h3>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/4ef8691d67eb1eb53217099d0a691eb5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li>
<p><strong>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。</strong> <strong>多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行</strong> 。与虚拟机相比， <strong>容器占用的空间较少</strong>（容器镜像大小通常只有几十兆），<strong>瞬间就能完成启动</strong> 。</p>
</li>
<li>
<p><strong>虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。</strong> 管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 <strong>占用大量空间</strong> 。而且 VM <strong>启动也十分缓慢</strong> 。</p>
</li>
</ul>
<p>通过 Docker 官网，我们知道了这么多 Docker 的优势，但是大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。<strong>虚拟机更擅长于彻底隔离整个运行环境</strong>。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 <strong>Docker 通常用于隔离不同的应用</strong> ，例如前端，后端以及数据库。</p>
<h3> 3.3 容器与虚拟机两者是可以共存的</h3>
<p>就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。</p>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/056c87751b9dd7b56f4264240fe96d00.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<hr>
<h2> 四 Docker 基本概念</h2>
<p><strong>Docker 中有非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。</strong></p>
<ul>
<li><strong>镜像（Image）</strong></li>
<li><strong>容器（Container）</strong></li>
<li><strong>仓库（Repository）</strong></li>
</ul>
<p>理解了这三个概念，就理解了 Docker 的整个生命周期</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/docker基本概念.png" alt="docker基本概念" tabindex="0" loading="lazy"><figcaption>docker基本概念</figcaption></figure>
<h3> 4.1 镜像(Image):一个特殊的文件系统</h3>
<p><strong>操作系统分为内核和用户空间</strong>。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。</p>
<p><strong>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。</strong> 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<p>Docker 设计时，就充分利用 <strong>Union FS</strong> 的技术，将其设计为<strong>分层存储的架构</strong> 。镜像实际是由多层文件系统联合组成。</p>
<p><strong>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</strong> 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>
<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
<h3> 4.2 容器(Container):镜像运行时的实体</h3>
<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，<strong>容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</strong> 。</p>
<p><strong>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。</strong></p>
<p><strong>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</strong></p>
<p>按照 Docker 最佳实践的要求，<strong>容器不应该向其存储层内写入任何数据</strong> ，容器存储层要保持无状态化。<strong>所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录</strong>，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， <strong>使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</strong></p>
<h3> 4.3 仓库(Repository):集中存放镜像文件的地方</h3>
<p>镜像构建完成后，可以很容易的在当前宿主上运行，但是， <strong>如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</strong></p>
<p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：<strong>镜像仓库是 Docker 用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</strong></p>
<p>通常，<strong>一个仓库会包含同一个软件不同版本的镜像</strong>，而<strong>标签就常用于对应该软件的各个版本</strong> 。我们可以通过<code>&lt;仓库名&gt;:&lt;标签&gt;</code>的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。</p>
<p><strong>这里补充一下 Docker Registry 公开服务和私有 Docker Registry 的概念：</strong></p>
<p><strong>Docker Registry 公开服务</strong> 是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p>
<p>最常使用的 Registry 公开服务是官方的 <strong>Docker Hub</strong> ，这也是默认的 Registry，并拥有大量的高质量的官方镜像，网址为：<a href="https://hub.docker.com/" title="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/</a> 。官方是这样介绍 Docker Hub 的：</p>
<blockquote>
<p>Docker Hub 是 Docker 官方提供的一项服务，用于与您的团队查找和共享容器镜像。</p>
</blockquote>
<p>比如我们想要搜索自己想要的镜像：</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/Screen Shot 2019-11-04 at 8.21.39 PM.png" alt="利用Docker Hub 搜索镜像" tabindex="0" loading="lazy"><figcaption>利用Docker Hub 搜索镜像</figcaption></figure>
<p>在 Docker Hub 的搜索结果中，有几项关键的信息有助于我们选择合适的镜像：</p>
<ul>
<li><strong>OFFICIAL Image</strong> ：代表镜像为 Docker 官方提供和维护，相对来说稳定性和安全性较高。</li>
<li><strong>Stars</strong> ：和点赞差不多的意思，类似 GitHub 的 Star。</li>
<li><strong>Dowloads</strong> ：代表镜像被拉取的次数，基本上能够表示镜像被使用的频度。</li>
</ul>
<p>当然，除了直接通过 Docker Hub 网站搜索镜像这种方式外，我们还可以通过 <code>docker search</code> 这个命令搜索 Docker Hub 中的镜像，搜索的结果是一致的。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在国内访问<strong>Docker Hub</strong> 可能会比较慢国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://www.tenxcloud.com/" title="时速云镜像库" target="_blank" rel="noopener noreferrer">时速云镜像库</a>、<a href="https://www.163yun.com/product/repo" title="网易云镜像服务" target="_blank" rel="noopener noreferrer">网易云镜像服务</a>、<a href="https://www.daocloud.io/" title="DaoCloud 镜像市场" target="_blank" rel="noopener noreferrer">DaoCloud 镜像市场</a>、<a href="https://www.aliyun.com/product/containerservice?utm_content=se_1292836" title="阿里云镜像库" target="_blank" rel="noopener noreferrer">阿里云镜像库</a>等。</p>
<p>除了使用公开服务外，用户还可以在 <strong>本地搭建私有 Docker Registry</strong> 。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。</p>
<hr>
<h2> 五 常见命令</h2>
<h3> 5.1 基本命令</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.2 拉取镜像</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.3 删除镜像</h3>
<p>比如我们要删除我们下载的 mysql 镜像。</p>
<p>通过 <code>docker rmi [image]</code> （等价于<code>docker image rm [image]</code>）删除镜像之前首先要确保这个镜像没有被容器引用（可以通过标签名称或者镜像 ID删除）。通过我们前面讲的<code>docker ps</code>命令即可查看。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 mysql 正在被 id 为 c4cd691d9f80 的容器引用，我们需要首先通过 <code>docker stop c4cd691d9f80</code> 或者 <code>docker stop mysql</code>暂停这个容器。</p>
<p>然后查看 mysql 镜像的 id</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 IMAGE ID  或者 REPOSITORY 名字即可删除</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 六 Build Ship and Run</h2>
<p><strong>Docker 的概念以及常见命令基本上已经讲完，我们再来谈谈：Build, Ship, and Run。</strong></p>
<p>如果你搜索 Docker 官网，会发现如下的字样：<strong>“Docker - Build, Ship, and Run Any App, Anywhere”</strong>。那么 Build, Ship, and Run 到底是在干什么呢？</p>
<figure><img src="https://img-blog.csdnimg.cn/2419919953764fc690c929d3844f7011.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li><strong>Build（构建镜像）</strong> ： 镜像就像是集装箱包括文件以及运行环境等等资源。</li>
<li><strong>Ship（运输镜像）</strong> ：主机和仓库间运输，这里的仓库就像是超级码头一样。</li>
<li><strong>Run （运行镜像）</strong> ：运行的镜像就是一个容器，容器就是运行程序的地方。</li>
</ul>
<p><strong>Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器。所以，我们也常常将 Docker 称为码头工人或码头装卸工，这和 Docker 的中文翻译搬运工人如出一辙。</strong></p>
<h2> 七 简单了解一下 Docker 底层原理</h2>
<h3> 7.1 虚拟化技术</h3>
<p>首先，Docker <strong>容器虚拟化</strong>技术为基础的软件，那么什么是虚拟化技术呢？</p>
<p>简单点来说，虚拟化技术可以这样定义：</p>
<blockquote>
<p>虚拟化技术是一种资源管理技术，是将计算机的各种[实体资源](<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%BA%90_" target="_blank" rel="noopener noreferrer">https://zh.wikipedia.org/wiki/資源_</a>(計算機科學 "实体资源"))（<a href="https://zh.wikipedia.org/wiki/CPU" title="CPU" target="_blank" rel="noopener noreferrer">CPU</a>、<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98" title="内存" target="_blank" rel="noopener noreferrer">内存</a>、<a href="https://zh.wikipedia.org/wiki/%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4" title="磁盘空间" target="_blank" rel="noopener noreferrer">磁盘空间</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E9%81%A9%E9%85%8D%E5%99%A8" title="网络适配器" target="_blank" rel="noopener noreferrer">网络适配器</a>等），予以抽象、转换后呈现出来并可供分割、组合为一个或多个电脑配置环境。由此，打破实体结构间的不可切割的障碍，使用户可以比原本的配置更好的方式来应用这些电脑硬件资源。这些资源的新虚拟部分是不受现有资源的架设方式，地域或物理配置所限制。一般所指的虚拟化资源包括计算能力和数据存储。</p>
</blockquote>
<h3> 7.2 Docker 基于 LXC 虚拟容器技术</h3>
<p>Docker 技术是基于 LXC（Linux container- Linux 容器）虚拟容器技术的。</p>
<blockquote>
<p>LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。</p>
</blockquote>
<p>LXC 技术主要是借助 Linux 内核中提供的 CGroup 功能和 namespace 来实现的，通过 LXC 可以为软件提供一个独立的操作系统运行环境。</p>
<p><strong>cgroup 和 namespace 介绍：</strong></p>
<ul>
<li>
<p><strong>namespace 是 Linux 内核用来隔离内核资源的方式。</strong> 通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。</p>
<p>（以上关于 namespace 介绍内容来自<a href="https://www.cnblogs.com/sparkdev/p/9365405.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/sparkdev/p/9365405.html</a> ，更多关于 namespace 的呢内容可以查看这篇文章 ）。</p>
</li>
<li>
<p><strong>CGroup 是 Control Groups 的缩写，是 Linux 内核提供的一种可以限制、记录、隔离进程组 (process groups) 所使用的物力资源 (如 cpu memory i/o 等等) 的机制。</strong></p>
<p>（以上关于 CGroup 介绍内容来自 <a href="https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html" target="_blank" rel="noopener noreferrer">https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html</a> ，更多关于 CGroup 的内容可以查看这篇文章 ）。</p>
</li>
</ul>
<p><strong>cgroup 和 namespace 两者对比：</strong></p>
<p>两者都是将进程进行分组，但是两者的作用还是有本质区别。namespace 是为了隔离进程组之间的资源，而 cgroup 是为了对一组进程进行统一的资源监控和限制。</p>
<h2> 八 总结</h2>
<p>本文主要把 Docker 中的一些常见概念做了详细的阐述，但是并不涉及 Docker 的安装、镜像的使用、容器的操作等内容。这部分东西，希望读者自己可以通过阅读书籍与官方文档的形式掌握。如果觉得官方文档阅读起来很费力的话，这里推荐一本书籍《Docker 技术入门与实战第二版》。</p>
<h2> 九 推荐阅读</h2>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/53260098" title="10分钟看懂Docker和K8S" target="_blank" rel="noopener noreferrer">10 分钟看懂 Docker 和 K8S</a></li>
<li><a href="https://www.infoq.cn/article/te70FlSyxhltL1Cr7gzM" title="从零开始入门 K8s：详解 K8s 容器基本概念" target="_blank" rel="noopener noreferrer">从零开始入门 K8s：详解 K8s 容器基本概念</a></li>
</ul>
<h2> 十 参考</h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000009732550" title="Linux Namespace和Cgroup" target="_blank" rel="noopener noreferrer">Linux Namespace 和 Cgroup</a></li>
<li><a href="https://www.upguard.com/articles/docker-vs-lxc" title="LXC vs Docker: Why Docker is Better" target="_blank" rel="noopener noreferrer">LXC vs Docker: Why Docker is Better</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html" title="CGroup 介绍、应用实例及原理描述" target="_blank" rel="noopener noreferrer">CGroup 介绍、应用实例及原理描述</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Docker基础</title>
    <id>https://topjf.github.io/docker/docker-note.html</id>
    <link href="https://topjf.github.io/docker/docker-note.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">前导 Docker 包括三个基本概念: 镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。; 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Centos7 Docker使用</h1>
<h2> 前导</h2>
<p>Docker 包括三个基本概念:</p>
<ul>
<li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>
<li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Docker</th>
<th style="text-align:left">面向对象</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">镜像</td>
<td style="text-align:left">类</td>
</tr>
<tr>
<td style="text-align:left">容器</td>
<td style="text-align:left">对象</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">概念</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Docker 镜像(Images)</td>
<td style="text-align:left">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td>
</tr>
<tr>
<td style="text-align:left">Docker 容器(Container)</td>
<td style="text-align:left">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td>
</tr>
<tr>
<td style="text-align:left">Docker 客户端(Client)</td>
<td style="text-align:left">Docker 客户端通过命令行或者其他工具使用 Docker SDK (<a href="https://docs.docker.com/develop/sdk/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/develop/sdk/</a>) 与 Docker 的守护进程通信。</td>
</tr>
<tr>
<td style="text-align:left">Docker 主机(Host)</td>
<td style="text-align:left">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>
</tr>
<tr>
<td style="text-align:left">Docker Registry</td>
<td style="text-align:left">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。一个 Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td>
</tr>
<tr>
<td style="text-align:left">Docker Machine</td>
<td style="text-align:left">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>
</tr>
</tbody>
</table>
<hr>
<h2> 一、下载与安装</h2>
<p>请确保您 <a href="https://docs.docker.com/engine/install/centos/#prerequisites" target="_blank" rel="noopener noreferrer">满足先决条件</a>，然后 <a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener noreferrer">安装Docker</a>。</p>
<p>安装 <a href="https://docs.docker.com/desktop/windows/install/" target="_blank" rel="noopener noreferrer">window</a>、<a href="https://docs.docker.com/desktop/linux/install/debian/" target="_blank" rel="noopener noreferrer">linux</a> 桌面版</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> A、前提条件</h3>
<h4> 1、卸载旧版本</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> B、安装方法</h3>
<h4> 1、设置存储库《centos》</h4>
<p>centos</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>debian</p>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、添加Docker官方的GPG密钥</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 <strong>稳定</strong> 存储库</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>sudo apt-get update</p>
</blockquote>
<h4> 3、安装</h4>
<p><em><strong>（1、2 选其一安装）</strong></em>*</p>
<p>1 <strong>默认最新版本</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2 <strong>指定版本</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#%E5%8A%A0%E9%80%9F">设置镜像加速</a></p>
<p>1 <strong>启动Docker</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20211025122421088</figcaption></figure>
<h4> 非root用户</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请记住注销并重新登录才能生效！</p>
<h3> C、卸载Docker</h3>
<p>卸载Docker Engine，CLI和Containerd软件包：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>您必须手动删除所有已编辑的配置文件。</p>
<h2> 二、Docker 镜像加速<a name="加速"></a></h2>
<p><a href="https://console.huaweicloud.com/swr/?region=cn-north-4#/app/swr/huaweiOfficialList" target="_blank" rel="noopener noreferrer">华为加速</a></p>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener noreferrer">阿里云镜像</a></p>
<h3> 2、在/etc/docker配置daemon.json</h3>
<p>基本</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>k8s集群</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>启动服务</h1>
<p>sudo systemctl daemon-reload
sudo systemctl restart docker</p>
<h2> 三、常用操作指令</h2>
<p>sudo vim ~/.bashrc</p>
<div class="language-BASH line-numbers-mode" data-ext="BASH"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- 镜像 ---</h3>
<h4> 1、docker镜像检索</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、docker镜像下载</h4>
<p>可以在这里查看镜像： <a href="https://hub.docker.com/_/centos?tab=tags&amp;page=1" target="_blank" rel="noopener noreferrer">https://hub.docker.com/_/centos?tab=tags&amp;page=1</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、docker镜像列表</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>REPOSITORY</th>
<th>镜像的仓库源</th>
</tr>
</thead>
<tbody>
<tr>
<td>TAG</td>
<td>镜像的标签（版本）同一个仓库有多个TAG的镜像，多个版本；我们用REPOSITORY:TAG来定义不同的镜像；</td>
</tr>
<tr>
<td>IMAGE ID</td>
<td>镜像ID，镜像的唯一标识</td>
</tr>
<tr>
<td>CREATE</td>
<td>镜像创建时间</td>
</tr>
<tr>
<td>SIZE</td>
<td>镜像大小</td>
</tr>
</tbody>
</table>
<p><strong>OPTIONS 可选参数：</strong></p>
<table>
<thead>
<tr>
<th>-a</th>
<th>显示所有镜像（包括中间层）</th>
</tr>
</thead>
<tbody>
<tr>
<td>**-**q</td>
<td>只显示镜像ID</td>
</tr>
<tr>
<td>-qa</td>
<td>可以组合</td>
</tr>
<tr>
<td>--digests</td>
<td>显示镜像的摘要信息</td>
</tr>
<tr>
<td>--no-trunc</td>
<td>显示完整的镜像信息</td>
</tr>
</tbody>
</table>
<h4> 4、docker镜像删除</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、删除所有镜像</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> --- 容器 ---</h3>
<h4> 指令</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1、创建并运行容器</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、容器列表</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、启动容器</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、停止容器</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、删除容器</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 6、删除所有容器</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 7、容器日志</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8、登陆、进入\退出容器</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中， -t 选项让Docker分配一个伪终端（ pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p>
<h4> 9、宿主机和容器之间文件拷贝</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10、提交运行时容器成为镜像 commit</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 11、推送镜像到hub服务器</h4>
<p><a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/</a> 注册得到docker id和密码,用docker login登陆hub服务器,docker push推送</p>
<p>查看: 登陆 <a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/</a>  点击 Repositories 菜单</p>
<h4> 12、推送镜像到阿里云&lt;推荐&gt;<a name="推送到阿里镜像仓库"></a></h4>
<h5>a, <a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener noreferrer">阿里开通镜像服务</a></h5>
<h5>b, 创建命名空间-创建镜像仓库</h5>
<figure><figcaption>image-20210716144517921</figcaption></figure>
<p>创建镜像仓库</p>
<figure><figcaption>image-20210716144319159</figcaption></figure>
<figure><figcaption>image-20210716144339073</figcaption></figure>
<figure><figcaption>image-20210716144351814</figcaption></figure>
<h5>c. 登录阿里云Docker Registry</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p>
<h5>d. 从Registry中拉取镜像</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5>e. 将镜像推送到Registry</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>g. 示例</h5>
<p>使用"docker tag"命令重命名镜像，并将它通过专有网络地址推送至Registry。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20210716152647038</figcaption></figure>
<h4> 13、查看容器元信息</h4>
<p>docker inspect 容器ID</p>
<h4> 14、docker update 修改容器配置</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 四、容器目录挂载</h2>
<p>作用：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实现：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载目录只读：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 五、DockerFile 构建镜像</h2>
<h3> 常用指令</h3>
<ul>
<li><strong>FROM</strong>  #定制的镜像都是基于 FROM 的镜像[<code>nginx，centos...</code>]</li>
<li><strong>RUN</strong> ["可执行文件", "参数1", "参数2"] #构建镜像时需要运行的[Linux、自定义]命令（可以写多条，建议使用 <strong>&amp;&amp;</strong> 连接符）；是在 docker build 时运行。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>CMD</strong> #指定容器启动时要运行的命令，假如有多个CMD，最后一个生效；用于运行程序，在 docker run 时运行。CMD &lt;shell 命令&gt; ；</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>MAINTAINER</strong> xxx #声明镜像维护者信息</li>
<li><strong>LABEL</strong> name="xxx" \ build-date="20201212" #镜像描述元信息（可以写多条）</li>
<li><strong>WORKDIR</strong> /root/xx #设置终端默认登录进来的工作目录</li>
<li><strong>EXPOSE</strong> 8088 #当前容器对外暴露出的端口</li>
<li><strong>ADD</strong> 文件 容器内部目录  #将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后<strong>自动解压</strong></li>
<li><strong>COPY</strong> ["源文件" "容器内部路径"] #和ADD相似，但是如果有压缩文件是<strong>不能解压</strong></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>VOLUME</strong> #创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等</li>
<li><strong>ENV</strong> &lt;key&gt;=&lt; value&gt;：为容器设置 Linux 环境变量 ，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>ARG</strong> &lt;key&gt;=&lt; value&gt;： 设置环境变量，环境变量只作用于Dockerfile内。</li>
<li><strong>ENTRYPOINT</strong> #指定容器启动时要运行的命令</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>USER</strong> 用于指定执行后续命令的用户和用户组 USER 用户名:用户组
<ul>
<li>USER kong:k</li>
</ul>
</li>
<li><strong>ONBUILD</strong>  #当构建一个被继承的Dockerfile时运行的命令，父镜像在被子镜像继承后父镜像的onbuild被触发。可以把ONBUID理解为一个触发器。</li>
</ul>
<h3> DockerFile 示例</h3>
<h4> 基于nginxDockerFile<a name="nginxDockerFile"></a></h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 基于CentosDockerFile<a name="CentosDockerFile"></a></h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 基于TomcatDockerFile<a name="基于TomcatDockerFile"></a></h4>
<p><strong>tomcat:9.0.62-jre8-temurin-focal、tomcat:8.5.78-jre8-temurin-focal</strong></p>
<p><strong>tomcat:9.0.62-jre11-temurin-focal、tomcat:8.5.78-jre11-temurin-focal</strong></p>
<p><strong>tomcat:9.0.62-jre17-temurin-focal、tomcat:8.5.78-jre17-temurin-focal</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 基于centos7的java项目镜像<a name="基于centos7的java镜像"></a></h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 基于jdk的java项目镜像&lt;推荐&gt;<a name="基于jdk的java镜像"></a></h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> DockerFile 构建java项目镜像</h3>
<h4> a, 编写DockerFile文件</h4>
<p><a href="#%E5%9F%BA%E4%BA%8Ejdk%E7%9A%84java%E9%95%9C%E5%83%8F"># 基于jdk的java镜像</a></p>
<h4> b, 开始构建镜像</h4>
<p>docker build -f [DockerFile文件] -t [设置标签]:版本 .</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构建镜像OK后,推送到阿里镜像仓库 | docker hub镜像仓库</p>
<p><a href="#%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93">#推送到阿里镜像仓库</a></p>
<h4> c, 运行镜像</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> d, 查看镜像历史</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 六、Docker Compose</h2>
<h3> 基础</h3>
<p>Compose 使用的三个步骤：</p>
<ul>
<li>使用 Dockerfile 定义应用程序的环境。</li>
<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>
<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>
</ul>
<p>docker-compose.yml 的配置案例如下:</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载 Docker Compose 的当前稳定版本：（GitHub，可能不太稳定。）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>composetest/app.py</p>
<div class="language-ini line-numbers-mode" data-ext="ini"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>composetest/requirements.txt</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Dockerfile</p>
<div class="language-ini line-numbers-mode" data-ext="ini"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker-compose.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Compose 命令构建和运行您的应用</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> N、docker 私有仓库</h2>
<p>Docker私有仓库主要是企业内部用来存放镜像的仓库，相对官方仓库以及阿里云仓库，具有更高的保密安全级别；</p>
<h3> A 搭建仓库</h3>
<h4> 第一步：拉取私有仓库镜像 （私有仓库程序本身就是一个镜像）</h4>
<p>docker pull registry</p>
<h4> 第二步：启动私有仓库容器</h4>
<p>docker run -d -v /opt/registry:/var/lib/registry --name=myRegistry -p 5000:5000  registry</p>
<p>docker run -d -v /opt/registry:/var/lib/registry --name=myRegistry -p 5000:5000  --restart=always registry</p>
<h4> 第三步：测试</h4>
<p><a href="http://localhost:5000/v2/_catalog" target="_blank" rel="noopener noreferrer">http://localhost:5000/v2/_catalog</a></p>
<figure><figcaption></figcaption></figure>
<p>看到这个 说明启动OK。因为仓库里还没有镜像，所以就是空的；</p>
<h4> 第四步：etc/docker 修改daemon.json，让docker信任私有仓库地址</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 第五步：修改配置后重启docker</h4>
<p>systemctl restart docker</p>
<h3> B 添加镜像到仓库</h3>
<h4> 第一步：标记此镜像为私有仓库的镜像</h4>
<p>docker tag nginx:stable-perl localhost:5000/nginx:1.0</p>
<h4> 第二步：上传镜像到私有仓库</h4>
<p>docker push localhost:5000/nginx:1.0</p>
<figure><figcaption>image-20210716175146294</figcaption></figure>
<p>此时私有仓库里已经有了这个镜像；</p>
<h4> 第三步：删除localhost:5000/nginx本地仓库镜像</h4>
<p>dkrmi localhost:5000/nginx:1.0</p>
<h4> 第四步：从私有仓库拉取localhost:5000/nginx镜像，并运行</h4>
<p>docker pull localhost:5000/nginx:1.0</p>
<p>docker run -it -p 80:80 localhost:5000/nginx:1.0</p>
<h4> 第五步：浏览器运行 <a href="http://localhost:8080" target="_blank" rel="noopener noreferrer">http://localhost:8080</a>测试</h4>
<figure><figcaption>image-20210716175240487</figcaption></figure>
<h3> C 搭建管理界面 harbor-2.2.x</h3>
<p><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener noreferrer">下载地址</a></p>
<h4> 设置本地域名/etc/hosts</h4>
<p>192.168.101.6   <a href="http://dk.harbor.com" target="_blank" rel="noopener noreferrer">dk.harbor.com</a>
192.168.101.6   dkharbor.qyk8.top</p>
<h4> 生成证书颁发机构证书</h4>
<h5>---生成 CA 证书私钥</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5>---生成 CA 证书</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 生成服务器证书</h4>
<h5>---生成私钥</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5>---生成证书签名请求 (CSR)</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>---生成 x509 v3 扩展文件</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>---使用 <code>v3.ext</code>文件为您的 Harbor 主机生成证书</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 向 Harbor 和 Docker 提供证书</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2,兑换 <code>yourdomain.com.crt</code>至 <code>yourdomain.com.cert</code>，供 Docker 使用。</p>
<p>Docker 守护进程解释 <code>.crt</code>文件作为 CA 证书和 <code>.cert</code>文件作为客户端证书。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3,将服务器证书、密钥和 CA 文件复制到 Harbor 主机上的 Docker 证书文件夹中。  您必须先创建适当的文件夹。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您映射默认 <code>nginx</code>端口 443 到不同的端口，创建文件夹 <code>/etc/docker/certs.d/yourdomain.com:port</code>， 或者 <code>/etc/docker/certs.d/harbor_IP:port</code>.</p>
<p>4,重启 Docker 引擎。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 启动</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> HTTPS访问</h4>
<p>某些浏览器可能会显示一条警告，指出证书颁发机检查 <code>/etc/docker/daemon.json</code>文件以确保 <code>-insecure-registry</code>未为 设置选项 <a href="https://yourdomain.com" target="_blank" rel="noopener noreferrer">https://yourdomain.com</a>。</p>
<p>从 Docker 客户端登录 Harbor。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>帐号密码为 admin/Harbor12345 (<a href="https://dkharbor.qyk8.top/" target="_blank" rel="noopener noreferrer">https://dkharbor.qyk8.top/</a>)</p>
<h4> 上传实例</h4>
<h5>-- 新建项目</h5>
<figure><figcaption>image-20210716221821041</figcaption></figure>
<h5>-- 推送</h5>
<p>dktag b84b6fdf2183 dkharbor.qyk8.top/test/nginx:1.0.1</p>
<p>dkpush dkharbor.qyk8.top/test/nginx:1.0.1</p>
<figure><figcaption>image-20210716221950684</figcaption></figure>
<figure><figcaption>image-20210716222615232</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">DockerFile基于centos7并设置中文UTF-8字符集</title>
    <id>https://topjf.github.io/docker/dockerfile-centos.html</id>
    <link href="https://topjf.github.io/docker/dockerfile-centos.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">dockerfile脚本</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>DockerFile 配置基于centos7 安装运行jdk、Java项目jar包、并设置中文UTF-8字符集</h1>
<h2> dockerfile脚本</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-20T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">DockerFile基于jdk</title>
    <id>https://topjf.github.io/docker/dockerfile-jdk.html</id>
    <link href="https://topjf.github.io/docker/dockerfile-jdk.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <content type="html"><![CDATA[<!-- more -->
<h1>DockerFile 配置基于jdk</h1>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Docker"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-20T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">23种设计模式整理</title>
    <id>https://topjf.github.io/java/23-design-patterns.html</id>
    <link href="https://topjf.github.io/java/23-design-patterns.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="html"><![CDATA[<p>六大设计原则，23种设计模式</p>
]]></summary>
    <content type="html"><![CDATA[<p>六大设计原则，23种设计模式</p>
<!-- more -->
<h2> 6大设计原则</h2>
<h2> 1).单一职责原则</h2>
<p>也就是说一个类应该只负责一件事情。</p>
<p>优点：</p>
<blockquote>
<ol>
<li>可以降低类的复杂度，一个类只负责一项职责，这样逻辑也简单很多</li>
<li>提高类的可读性，和系统的维护性，因为不会有其他奇怪的方法来干扰我们理解这个类的含义</li>
<li>当发生变化的时候，能将变化的影响降到最小，因为只会在这个类中做出修改。</li>
</ol>
</blockquote>
<h2> 2).里氏替换原则（通俗的讲就是：子类可以去扩展父类的功能，但是不能改变父类原有的功能）</h2>
<p>定义</p>
<blockquote>
<p>如果对每一个类型为T1的对象o1,都有类型为T2的对象o2,使得以T1定义的所有程序P在所有对象o1都替换成o2的时候，程序P的行为都没有发生变化，那么类型T2是类型T1的子类型。</p>
</blockquote>
<p>简单的定义</p>
<blockquote>
<p>所有引用基类的地方必须能够透明地使用其子类的对象。</p>
</blockquote>
<p>通俗的去讲就是：子类可以去扩展父类的功能，但是不能改变父类原有的功能。</p>
<blockquote>
<ol>
<li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法。</li>
<li>子类可以增加自己独有的方法。</li>
<li>当子类的方法重载父类的方法时候，方法的形参要比父类的方法的输入参数更加宽松。</li>
<li>当子类的方法实现父类的抽象方法时，方法的返回值要比父类更严格。</li>
</ol>
</blockquote>
<p>里氏替换原则之所以这样要求是因为继承有很多缺点，他虽然是复用代码的一种方法，但同时继承在一定程度上违反了封装。父类的属性和方法对子类都是透明的，子类可以随意修改父类的成员。这也导致了，如果需求变更，子类对父类的方法进行一些复写的时候，其他的子类无法正常工作。所以里氏替换法则被提出来。</p>
<h2> 3).依赖倒置原则（面向接口编程）</h2>
<p>简单来说就是</p>
<blockquote>
<p>高层模块（指的是调用端）不应该依赖底层模块（具体的实现类），两者都应该依赖其抽象</p>
<p>抽象不应该依赖细节</p>
<p>细节应该依赖抽象</p>
</blockquote>
<h2> 4).接口隔离原则</h2>
<p>客户端不应该依赖他不需要的接口</p>
<blockquote>
<p>我们知道在Java中一个具体类实现了一个接口，那必然就要实现接口中的所有方法。如果我们有一个类A和类B通过接口I来依赖，类B是对类A依赖的实现，这个接口I有5个方法。但是类A与类B只通过方法1,2,3依赖，然后类C与类D通过接口I来依赖，类D是对类C依赖的实现但是他们却是通过方法1,4,5依赖。那么是必在实现接口的时候，类B就要有实现他不需要的方法4和方法5 而类D就要实现他不需要的方法2，和方法3。这简直就是一个灾难的设计。
所以我们需要对接口进行拆分，就是把接口分成满足依赖关系的最小接口，类B与类D不需要去实现与他们无关接口方法。比如在这个例子中，我们可以把接口拆成3个，第一个是仅仅由方法1的接口，第二个接口是包含2,3方法的，第三个接口是包含4,5方法的。这样，我们的设计就满足了接口隔离原则。</p>
</blockquote>
<h2> 5).迪米特法则（说白了，就是一种中介的方式）</h2>
<p>定义：</p>
<blockquote>
<p>一个对象应该对其他对象保持最小的了解。</p>
</blockquote>
<p>更简单的定义：</p>
<blockquote>
<p>只与直接的朋友通信。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。</p>
</blockquote>
<p>例子：</p>
<blockquote>
<p>比如我们需要一张CD,我们可能去音像店去问老板有没有我们需要的那张CD，老板说现在没有，等有的时候你们来拿就行了。在这里我们不需要关心老板是从哪里，怎么获得的那张CD，我们只和老板（直接朋友）沟通，至于老板从他的朋友那里通过何种条件得到的CD，我们不关心，我们不和老板的朋友（陌生人）进行通信，这个就是迪米特的一个应用。说白了，就是一种中介的方式。我们通过老板这个中介来和真正提供CD的人发生联系。</p>
</blockquote>
<h2> 6).开闭原则</h2>
<blockquote>
<p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p>
</blockquote>
<p>定义</p>
<ul>
<li>用抽象构建框架，用实现扩展细节。</li>
<li>不以改动原有类的方式来实现新需求，而是应该以实现事先抽象出来的接口（或具体类继承抽象类）的方式来实现。</li>
</ul>
<p>优点</p>
<p>实践开闭原则的优点在于可以在不改动原有代码的前提下给程序扩展功能。增加了程序的可扩展性，同时也降低了程序的维护成本。</p>
<figure><figcaption></figcaption></figure>
<h1>一、创建型模</h1>
<h2> 1.单例模式 （Singleton Pattern）</h2>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 单态定义</h3>
<blockquote>
<p>Singleton 模式主要作用是保证在 Java 应用程序中，一个类 Class 只有一个实例存在。</p>
<p>在很多操作中，比如建立目录 数据库连接都需要这样的单线程操作。</p>
<p>还有, singleton 能够被状态化; 这样，多个单态类在一起就可以作为一个状态仓库一样向外提供服务，比如，你要论坛中的帖子计数器，每次浏览一次需要计数，单态类能否保持住这个计数，并且能 synchronize 的安全自动加 1，如果你要把这个数字永久保存到数据库，你可以在不修改单态接口的情况下方便的做到。</p>
<p>另外方面，Singleton 也能够被无状态化。提供工具性质的功能。</p>
<p>Singleton 模式就为我们提供了这样实现的可能。使用 Singleton 的好处还在于可以节省内存，因为它限制了实例的个数，有利于 Java 垃圾回收（garbage collection）。</p>
<p>我们常常看到工厂模式中类装入器(class loader)中也用 Singleton 模式实现的,因为被装入的类实际也属于资源。 如何使用?</p>
</blockquote>
<h3> 使用场景</h3>
<blockquote>
<p>● 要求生成唯一序列号的环境；</p>
<p>● 在整个项目中需要一个共享访问点或共享数据，例如一个Web页面上的计数器，可以不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并确保是线程安全的；</p>
<p>● 创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源；</p>
<p>● 需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式（当然，也可以直接声明为static的方式）。</p>
</blockquote>
<h3> 优点</h3>
<blockquote>
<p>● 由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。</p>
<p>● 由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决（在Java EE中采用单例模式时需要注意JVM垃圾回收机制）。</p>
<p>● 单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。</p>
<p>● 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。</p>
</blockquote>
<h3> 缺点</h3>
<blockquote>
<p>● 单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。单例模式为什么不能增加接口呢？因为接口对单例模式是没有任何意义的，它要求“自行实例化”，并且提供单一实例、接口或抽象类是不可能被实例化的。当然，在特殊情况下，单例模式可以实现接口、被继承等，需要在系统开发中根据环境判断。</p>
<p>● 单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用mock的方式虚拟一个对象。</p>
<p>● 单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。</p>
</blockquote>
<h3> Singleton 模式几种形式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>使用 Singleton.getInstance()可以访问单态类。</p>
<p>上面第二中形式是 lazy initialization，也就是说第一次调用时初始 Singleton，以后就不用再生成了。</p>
<p>注意到 lazy initialization 形式中的 synchronized，这个 synchronized 很重要，如果没有synchronized，那么使用 getInstance()是有可能得到多个 Singleton 实例。关于 lazy initialization 的 Singleton 有很多涉及 double-checked locking (DCL)的讨论，有兴趣者进一步研究。</p>
<p>一般认为第一种形式要更加安全些。</p>
<p>使用 Singleton 注意事项：</p>
<p>有时在某些情况下，使用 Singleton 并不能达到 Singleton 的目的，如有多个 Singleton 对象同时被不同的类装入器装载；在EJB 这样的分布式系统中使用也要注意这种情况，因为 EJB 是跨服务器，跨 JVM 的。</p>
<p>我们以 SUN 公司的宠物店源码(Pet Store 1.3.1)的 ServiceLocator 为例稍微分析一下：</p>
<p>在 Pet Store 中 ServiceLocator 有两种，一个是 EJB 目录下；一个是 WEB 目录下，我们检查这两个 ServiceLocator 会发现内容差不多，都是提供 EJB 的查询定位服务，可是为什么要分开呢？仔细研究对这两种 ServiceLocator 才发现区别：在 WEB 中的ServiceLocator 的采取 Singleton 模式，ServiceLocator 属于资源定位，理所当然应该使用 Singleton 模式。但是在 EJB 中，Singleton 模式已经失去作用，所以 ServiceLocator 才分成两种，一种面向 WEB 服务的，一种是面向 EJB 服务的。</p>
<p>Singleton 模式看起来简单，使用方法也很方便，但是真正用好，是非常不容易，需要对 Java 的类线程内存等概念有相当的了解。</p>
<p>总之：如果你的应用基于容器，那么 Singleton 模式少用或者不用，可以使用相关替代技术。</p>
</blockquote>
<h2> 2.工厂方法模式（Factory Method Pattern）</h2>
<h3> 简单工厂模式</h3>
<figure><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 工厂方法模式</h3>
<figure><figcaption>img</figcaption></figure>
<p>抽象产品</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体产品类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象工厂</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体产品的抽象工厂</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 升级：通过单例模式来创建对象 <a name="升级：通过单例模式来创建对象"></a></h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 升级为多个工厂类（推荐）</h3>
<figure><figcaption>image-20220417213230976</figcaption></figure>
<p>每个人种（具体的产品类）都对应了一个创建者，每个创建者都独立负责创建对应的产
品对象，非常符合单一职责原则。</p>
<p>Human接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BlackHuman\WhiteHuman\YellowHuman</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AbstractHumanFactory</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BlackHumanFactory\WhiteHumanFactory\YellowHumanFactory</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 多工厂类问题？</h3>
<blockquote>
<p>但是给可扩展性和可维护性带来了一定的影响。为什么这么说呢？如果要扩展一个产品类，就需要建立一个相应的工厂类，这样就增加了扩展的难度。因为工厂类和产品类的数量相同，维护时需要考虑两个对象之间的关系。</p>
</blockquote>
<p>解决：<a href="#%E5%8D%87%E7%BA%A7%EF%BC%9A%E9%80%9A%E8%BF%87%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%9D%A5%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1">升级：通过单例模式来创建对象</a></p>
<h3> 定义</h3>
<p>通过工厂类来new实例</p>
<h3> <strong>为何使用 ?</strong></h3>
<p>为什么工厂模式是如此常用？因为工厂模式就相当于创建实例对象的 new，我们经常要根据类 Class 生成实例对象，如 A a=new A() 工厂模式也是用来创建实例对象的，所以以后 new 时就要多个心眼，是否可以考虑实用工厂模式，虽然这样做，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。</p>
<p>使用工厂方法 要注意几个角色，首先你要定义产品接口</p>
<h2> 3.抽象工厂模式（Abstract Factory Pattern）</h2>
<h3> 什么是抽象？</h3>
<p><strong>抽象</strong>：就是对所有子类的共性封装</p>
<h3> 创造人示例</h3>
<figure><figcaption>image-20220417220002782</figcaption></figure>
<p>顶级公共属性接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>公共抽象类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现具体的抽象类（实现生产不同肤色的性别【女性、男性】的生产车间原料）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>公共生产车间接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的生产车间（负责拿到这个生产车间对象，可以生产什么产品，由生产线来使用）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产线（开始生产具体产品）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 优点</h3>
<ul>
<li><strong>封装性</strong>：每个产品的实现类不是高层模块要关心的，它要关心的是什么？是接口，是抽象，它不关心对象是如何创建出来，这由谁负责呢？工厂类，只要知道工厂类是谁，我就能创建出一个需要的对象，省时省力。</li>
<li><strong>产品族内的约束为非公开状态</strong>：就应该有这样的一个约束：每生产1个女性，就同时生产出1.2个男性，这样的生产过程对调用工厂类的高层模块来说是透明的，它不需要知道这个约束，我就是要一个黄色女性产品就可以了，具体的产品族内的约束是在工厂内实现的。</li>
</ul>
<h3> 缺点</h3>
<p>最大缺点就是产品族<strong>扩展</strong>非常困难，为什么这么说呢？我们以通用代码为例，如果要增加一个产品C，产品家族由原来的2个增加到3个，<strong>抽象类 Abstract类</strong>要增加一个<em>方法</em> createProductC()，然后<em>两个实现类</em>都要修改，想想看，这严重违反了开闭原则，而且我们一直说明抽象类和接口是一个契约。</p>
<blockquote>
<p>每增加一个产品，就需要在抽象类、接口里添加一个方法，然后去修改实现类</p>
</blockquote>
<h3> 定义</h3>
<blockquote>
<p>为创建一组相关或相互依赖的对象提供一个接口，而且无须指定它们的具体类</p>
</blockquote>
<h3> 使用场景</h3>
<blockquote>
<p>一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。</p>
<p>大家在软件产品开发过程中，涉及不同操作系统的时候，都可以考虑使用抽象工厂模式，例如一个应用，需要在三个不同平台（Windows、Linux、Android（Google发布的智能终端操作系统））上运行，你会怎么设计？分别设计三套不同的应用？非也，通过抽象工厂模式屏蔽掉操作系统对应用的影响。三个不同操作系统上的软件功能、应用逻辑、UI都应该是非常类似的，唯一不同的是调用不同的工厂方法，由不同的产品类去处理与操作系统交互的信息。</p>
</blockquote>
<figure><figcaption>image-20220417230557522</figcaption></figure>
<blockquote>
<p>例如制造汽车的左侧门和右侧门，这两个应该是数量相等的——两个对象之间的约束，每个型号的车门都是不一样的，这是产品等级结构约束的。</p>
</blockquote>
<p>从上面看到两个工厂各自生产出一套 Sample 和 Sample2,也许你会疑问，为什么我不可以使用两个工厂方法来分别生产Sample 和 Sample2?</p>
<p>抽象工厂还有另外一个关键要点，是因为 SimpleFactory 内，生产 Sample 和生产 Sample2 的方法之间有一定联系， 所以才要将这两个方法捆绑在一个类中，这个工厂类有其本身特征，也许制造过程是统一的，比如：制造工艺比较简单，所以名称叫 SimpleFactory。</p>
<p>在实际应用中，工厂方法用得比较多一些，而且是和动态类装入器组合在一起应用，</p>
<h3> <strong>举例：</strong></h3>
<p>我们以 Jive 的 ForumFactory 为例，这个例子在前面的 Singleton 模式中我们讨论过，现在再讨论其工厂模式:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为现在的 Jive 是通过数据库系统存放论坛帖子等内容数据,如果希望更改为通过文件系统实现,这个工厂方法</p>
<p><code>ForumFactory</code> 就提供了提供动态接口:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以使用自己开发的创建 forum 的方法代替 <code>com.jivesoftware.forum.database.DbForumFactory</code> 就可以. 在上面的一段代码中一共用了三种模式,除了工厂模式外,还有 Singleton 单态模式,以及 proxy 模式,proxy 模式主要用来授权用户对 forum 的访问,因为访问 forum 有两种人:一个是注册用户 一个是游客 guest,那么那么相应的权限就不一样,而且这个权限是贯穿整个系统的,因此建立一个 proxy,类似网关的概念,可以很好的达到这个效果。</p>
<p>看看 Java 宠物店中的 <code>CatalogDAOFactory</code>:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CatalogDAOFactory 是典型的 <em>工厂方法</em>，catDao 是通过动态类装入器 className 获得 CatalogDAOFactory 具体实现子类，这个实现子类在 Java 宠物店是用来操作 catalog 数据库，用户可以根据数据库的类型不同，定制自己的具体实现子类，将自己的子类名给与 CATALOG_DAO_CLASS 变量就可以。</p>
<p>由此可见，工厂方法确实为系统结构提供了非常灵活强大的动态扩展机制，只要我们更换一下具体的工厂方法，系统其他</p>
<p>地方无需一点变换，就有可能将系统功能进行改头换面的变化。</p>
<h2> 4.建造者模式（Builder Pattern）</h2>
<figure><figcaption>image-20211224123746326</figcaption></figure>
<h3> 示例</h3>
<p>演变1</p>

<p>演变2</p>
<p>演变3</p>
<figure><figcaption>image-20220418165046397</figcaption></figure>

<h4> 导演安排</h4>
<p>导演类起到封装的作用，避免高层模块深入到建造者内部的实现类。当然，在建造者模式比较庞大时，导演类可以有多个。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 抽象的组装汽车</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体组装汽车</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 车辆模型的抽象类</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体车辆模型</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 开始生产</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 优点</h3>
<blockquote>
<ul>
<li>封装性</li>
</ul>
<p>使用建造者模式可以使客户端不必知道产品内部组成的细节，如例子中我们就不需要关心每一个具体的模型内部是如何实现的，产生的对象类型就是CarModel。</p>
<ul>
<li>建造者独立，容易扩展</li>
</ul>
<p>BenzBuilder和BMWBuilder是相互独立的，对系统的扩展非常有利。</p>
<ul>
<li>便于控制细节风险</li>
</ul>
<p>由于具体的建造者是独立的，因此可以对建造过程逐步细化，而不对其他的模块产生任何影响。</p>
</blockquote>
<h3> 使用场景</h3>
<blockquote>
<ul>
<li>
<p>相同的方法，不同的执行顺序，产生不同的事件结果时，可以采用建造者模式。</p>
</li>
<li>
<p>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时，则可以使用该模式。</p>
</li>
<li>
<p>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候使用建造者模式非常合适。</p>
</li>
<li>
<p>在对象创建过程中会使用到系统中的一些其他对象，这些对象在产品对象的创建过程中不易得到时，也可以采用建造者模式封装该对象的创建过程。该种场景只能是一个补偿方法，因为一个对象不容易获得，而在设计阶段竟然没有发觉，而要通过创建者模式柔化创建过程，本身已经违反设计的最初目标。</p>
</li>
</ul>
</blockquote>
<h3> 定义</h3>
<p>将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示.</p>
<p>Builder 模式是一步一步创建一个复杂的对象,它允许用户可以只通过指定复杂对象的类型和内容就可以构建它们。用户不知道内部的具体构建细节。Builder 模式是非常类似抽象工厂模式，细微的区别大概只有在反复使用中才能体会到。</p>
<h3> <strong>为何使用?</strong></h3>
<p>是为了将构建复杂对象的过程和它的部件解耦.注意: 是解耦过程和部件.</p>
<p>因为一个复杂的对象,不但有很多大量组成部分,如汽车,有很多部件:车轮 方向盘 发动机还有各种小零件等等,部件很多,但远不止这些,如何将这些部件装配成一辆汽车,这个装配过程也很复杂(需要很好的组装技术),Builder 模式就是为了将部件和组装过程分开.</p>
<h3> <strong>如何使用?</strong></h3>
<p>首先，假设一个复杂对象是由多个部件组成的,Builder 模式是把复杂对象的创建和部件的创建分别开来,分别用Builder 类和Director 类来表示。</p>
<p>首先，需要一个接口,它定义如何创建复杂对象的各个部件:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 Director 构建最后的复杂对象,而在上面 Builder 接口中封装的是如何创建一个个部件(复杂对象是由这些部件组成的),也就是说 Director 的内容是如何将部件最后组装成成品:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Builder 的具体实现 ConcreteBuilder:</p>
<p>通过具体完成接口 Builder 来构建或装配产品的部件;</p>
<p>定义并明确它所要创建的是什么具体东西;</p>
<p>提供一个可以重新获取产品的接口:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂对象:产品 Product:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5.原型模式（Prototype Pattern）核心：clone()方法</h2>
<figure><figcaption>image-20211224123854319</figcaption></figure>
<h3> 示例</h3>
<p>广告短信模板</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mail 原型类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>标题：XX银行国庆信用卡抽奖活动 收件人：avAfJ@JLhKyMve.com ...发送成功！ 内容国庆抽奖活动通知：只要刷卡就送你一百万！...
标题：XX银行国庆信用卡抽奖活动 收件人：qQSlI@wOAPKTIF.com ...发送成功！ 内容国庆抽奖活动通知：只要刷卡就送你一百万！...</p>
</blockquote>
<h3> 定义</h3>
<blockquote>
<p>原型模式（Prototype Pattern）的简单程度仅次于单例模式和迭代器模式。</p>
<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<p>原型模式的核心是一个clone方法</p>
</blockquote>
<h3> 优点</h3>
<blockquote>
<ul>
<li>
<p>性能优良</p>
<p>原型模式是在内存以二进制流的拷贝*（具体地说就是堆内存以二进制流的方式进行拷贝，重新分配
一个内存块）*，要比直接new一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</p>
</li>
<li>
<p>逃避构造函数的约束</p>
<p>这既是它的优点也是缺点，直接在内存中拷贝，<strong>构造函数是不会执行</strong>的。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。</p>
</li>
</ul>
</blockquote>
<h3> 使用场景</h3>
<blockquote>
<ul>
<li>
<p>资源优化场景</p>
<p>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。</p>
</li>
<li>
<p>性能和安全要求的场景</p>
<p>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</p>
</li>
<li>
<p>一个对象多个修改者的场景</p>
<p>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。</p>
</li>
</ul>
</blockquote>
<h3> 注意</h3>
<blockquote>
<p>一般是和工厂方法模式一起出现，通过clone的方法创建一个对象，然后由工厂方法提供给调用者。</p>
</blockquote>
<h3> 浅拷贝和深拷贝</h3>
<h4> 浅拷贝</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是仅一个“张三”吗？</p>
<blockquote>
<p>怎么会这样呢？怎么会有李四呢？是因为Java做了一个偷懒的拷贝动作，Object类提供的方法<strong>clone只是拷贝本对象，其对象内部的数组、引用对象等都不拷贝</strong>，还是指向原生对象的内部元素地址，这种拷贝就叫做<strong>浅拷贝</strong>。确实是非常浅，两个对象共享了一个私有变量，你改我改大家都能改，是一种非常不安全的方式，在实际项目中使用还是比较少的（当然，这也是一种“危机”环境的一种救命方式）。你可能会比较奇怪，为什么在Mail那个类中就可以使用String类型，而不会产生由浅拷贝带来的问题呢？内部的数组和引用对象才不拷贝，其他的原始类型比如int、long、char等都会被拷贝，但是对于String类型，Java就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，读者在使用的时候就把String当做基本类使用即可。</p>
</blockquote>
<h5>注意</h5>
<blockquote>
<p>使用原型模式时，引用的成员变量必须满足两个条件才不会被拷贝：一是类的成员变量，而不是方法内变量；二是必须是一个可变的引用对象，而不是一个原始类型或不可变对象。</p>
</blockquote>
<h4> 深拷贝</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>注意</h5>
<blockquote>
<p>深拷贝和浅拷贝建议不要混合使用，特别是在涉及类的继承时，父类有多个引用的情况就非常复杂，建议的方案是深拷贝和浅拷贝分开实现。</p>
</blockquote>
<h3> clone与final两个冤家</h3>
<p>要使用clone方法，类的成员变量上不要增加final关键字。</p>
<h1>二、结构型模式</h1>
<h1></h1>
<h2> 6.适配器模式（Adapter Pattern）</h2>
<figure><figcaption>image-20211224124029169</figcaption></figure>
<h3> 定义</h3>
<p>将两个不兼容的类纠合在一起使用，属于结构型模式,需要有 Adaptee(被适配者)和 Adaptor(适配器)两个身份.</p>
<h3> 为何使用?</h3>
<p>我们经常碰到要将两个没有关系的类组合在一起使用,第一解决方案是：修改各自类的接口，但是如果我们没有源代码，或者，我们不愿意为了一个应用而修改各自的接口。怎么办?</p>
<p>使用 Adapter，在这两种接口之间创建一个混合接口(混血儿).</p>
<h3> 如何使用?</h3>
<figure><figcaption>image-20211224124235678</figcaption></figure>
<figure><figcaption>image-20211224124247598</figcaption></figure>
<p>实现 Adapter 方式,其实"think in Java"的"类再生"一节中已经提到,有两种方式：组合(composition)和继承(inheritance).</p>
<p>假设我们要打桩，有两种类：方形桩、圆形桩。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在有一个应用,需要既打方形桩,又打圆形桩.那么我们需要将这两个没有关系的类综合应用.假设 RoundPeg 我们没有源代码,或源代码我们不想修改,那么我们使用 Adapter 来实现这个应用:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中,RoundPeg 属于 Adaptee,是被适配者.PegAdapter 是 Adapter,将 Adaptee(被适配者 RoundPeg)和Target(目标 SquarePeg)进行适配.实际上这是将组合方法(composition)和继承(inheritance)方法综合运用。</p>
<p>PegAdapter 首先继承 SquarePeg，然后使用 new 的组合生成对象方式，生成 RoundPeg 的对象 roundPeg，再重载父类 insert()方法。从这里,你也了解使用 new 生成对象和使用 extends 继承生成对象的不同,前者无需对原来的类修改,甚至无需要知道其内部结构和源代码.</p>
<p>如果你有些 Java 使用的经验，已经发现，这种模式经常使用。</p>
<p>进一步使用上面的 PegAdapter 是继承了 SquarePeg,如果我们需要两边继承，即继承 SquarePeg 又继承 RoundPeg,因为 Java 中不允许多继承，但是我们可以实现(implements)两个接口(interface)。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种叫 Pluggable Adapters,可以动态的获取几个 adapters 中一个。使用 Reflection 技术，可以动态的发现类中的Public 方法。</p>
<h2> 7.代理模式（Proxy Pattern）</h2>
<figure><figcaption>image-20211224125015055</figcaption></figure>
<h3> 示例</h3>

<figure><figcaption>image-20220419155010072</figcaption></figure>
<h4> 抽象主题类可以是抽象类也可以是接口（法院打官司的流程）</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 受委托的对象（具体是谁要打官司？谁就要遵循法院的流程）</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 代理方（你打官司了，律师来为你全程处理：调查、取证、辩护等等）</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 法院开庭了，律师已准备好了，我要开始去法院了</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 普通代理</h3>
<blockquote>
<p>就是客户端只能访问代理角色，而不能访问真实角色（我们以上面的例子作为扩展，我自己作为一个游戏玩家，我肯定自己不练级了，也就是场景类不能再直接new一个GamePlayer对象了，它必须由 GamePlayerProxy 来进行模拟场景）。</p>
</blockquote>

<p>真实角色</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代理公司去代理角色</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代理员上机</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 强制代理</h3>
<figure><figcaption>image-20220419170634838</figcaption></figure>
<blockquote>
<p>类似：<em>必须是我指定的律师才能辩护</em></p>
<p>强制代理的概念就是要从真实角色查找到代理角色，不允许直接访问真实角色。</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>请使用指定的代理访问
请使用指定的代理访问
请使用指定的代理访问
升级花费了💰[352.06354]元！获得了💰190金币
👨玩家登录：🎅代练登录：zhangSan,密码：888888
张三 💢在打怪！
张三 👉升级！
升级花费了💰[978.7789]元！获得了💰416金币</p>
</blockquote>
<h3> 动态代理 AOP</h3>
<h4> 使用场景</h4>
<blockquote>
<p>对于日志、事务、权限等都可以在系统设计阶段不用考虑，而在设计后通过AOP的方式切过去。</p>
</blockquote>
<h4> 示例1</h4>
<figure><figcaption>image-20220419174706185</figcaption></figure>
<blockquote>
<p>相对来说，自己写代理类的方式就是静态代理。</p>
<p>现在有一个非常流行的名称叫做面向横切面编程，也就是 AOP（Aspect Oriented Programming），其核心就是采用了动态代理机制。</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>👨玩家登录：zhangSan,密码：888888
张三 💢在打怪！
张三 👉升级！
升级花费了💰[877.64105]元！获得了💰566金币
有人在用我的账号登录！</p>
</blockquote>
<h4> 示例2</h4>
<figure><figcaption>image-20220419183148990</figcaption></figure>
<hr>
<h5>Subject 接口</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>实现 Subject 接口</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>实现 InvocationHandler</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>DynamicProxy 前置通知（调用方法执行之前）</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>通知接口及实现 IAdvice、BeforeAdvice</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>测试1</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>执行顺序</h5>

<h5>扩展 GamePlayerDynamicProxy 继承 DynamicProxy，更加方便</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>测试2</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 注意</h4>
<blockquote>
<p>要实现动态代理的首要条件是：被代理类必须实现一个接口，回想一下前面的分
析吧。当然了，现在也有很多技术如CGLIB可以实现不需要接口也可以实现动态代理的方
式。</p>
<p>切面（Aspect）、切入点（JoinPoint）、通知（Advice）、织入（Weave）</p>
</blockquote>
<hr>
<h3> 定义</h3>
<blockquote>
<p>为其他对象提供一种代理以控制对这个对象的访问.</p>
</blockquote>
<h3> 优点</h3>
<ul>
<li>
<p>职责清晰</p>
<p>真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件事务，附带的结果就是编程简洁清晰。</p>
</li>
<li>
<p>高扩展性
具体主题角色是随时都会发生变化的，只要它实现了接口，甭管它如何变化，都逃不脱如来佛的手掌（接口），那我们的代理类完全就可以在不做任何修改的情况下使用。</p>
</li>
<li>
<p>智能化
这在我们以上的讲解中还没有体现出来，不过在我们以下的动态代理章节中你就会看到代理的智能化有兴趣的读者也可以看看Struts是如何把表单元素映射到对象上的。</p>
</li>
</ul>
<h3> 使用场景</h3>
<p>打官司为什么要找个律师，喝酒了回家找代驾；Spring AOP，这是一个非常典型的动态代理</p>
<h3> 为什么要使用 Proxy?</h3>
<p>1.<strong>授权机制</strong> 不同级别的用户对同一对象拥有不同的访问权利,如 Jive 论坛系统中,就使用 Proxy 进行授权机制控制,访问论坛有两种人:注册用户和游客(未注册用户),Jive 中就通过类似 ForumProxy 这样的代理来控制这两种用户对论坛的访问权限.</p>
<p>2.某个客户端不能直接操作到某个对象,但又必须和那个对象有所互动.</p>
<p>举例两个具体情况:</p>
<blockquote>
<p>(1)如果那个对象是一个是很大的图片,需要花费很长时间才能显示出来,那么当这个图片包含在文档中时,使用编辑器或浏览器打开这个文档,打开文档必须很迅速,不能等待大图片处理完成,这时需要做个图片 Proxy 来代替真正的图片.</p>
<p>(2)如果那个对象在 Internet 的某个远端服务器上,直接操作这个对象因为网络速度原因可能比较慢,那我们可以先用Proxy 来代替那个对象.</p>
</blockquote>
<p>总之原则是,对于开销很大的对象,只有在使用它时才创建,这个原则可以为我们节省很多宝贵的 Java 内存. 所以,有些人认为 Java 耗费资源内存,我以为这和程序编制思路也有一定的关系.</p>
<h3> 如何使用 Proxy?</h3>
<p>以 <em>Jive 论坛系统</em>为例,访问论坛系统的用户有多种类型:注册普通用户 论坛管理者 系统管理者 游客,注册普通用户才能发言;论坛管理者可以管理他被授权的论坛;系统管理者可以管理所有事务等,这些权限划分和管理是使用 Proxy 完成的.</p>
<p>Forum 是 Jive 的核心接口,在 Forum 中陈列了有关论坛操作的主要行为,如论坛名称 论坛描述的获取和修改,帖子发表删除编辑等.</p>
<p>在 ForumPermissions 中定义了各种级别权限的用户:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此,Forum 中各种操作权限是和 ForumPermissions 定义的用户级别有关系的,作为接口 Forum 的实现:ForumProxy正是将这种对应关系联系起来.比如,修改 Forum 的名称,只有论坛管理者或系统管理者可以修改,代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 DbForum 才是接口 Forum 的真正实现,以修改论坛名称为例:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>凡是涉及到对论坛名称修改这一事件,其他程序都首先得和ForumProxy打交道,由ForumProxy决定是否有权限做某一样事情,ForumProxy 是个名副其实的"网关","安全代理系统".</p>
<p>在平时应用中,无可避免总要涉及到系统的授权或安全体系,不管你有无意识的使用 Proxy,实际你已经在使用 Proxy 了.</p>
<p>我们继续结合 Jive 谈入深一点,下面要涉及到工厂模式了,如果你不了解工厂模式。</p>
<p>我们已经知道,使用 Forum 需要通过 ForumProxy,Jive 中创建一个 Forum 是使用 Factory 模式,有一个总的抽象类ForumFactory,在这个抽象类中,调用 ForumFactory 是通过 getInstance()方法实现,这里使用了 Singleton(也是设计模式之一,由于介绍文章很多,我就不写了),getInstance()返回的是 ForumFactoryProxy.</p>
<p>为什么不返回 ForumFactory,而返回 ForumFactory 的实现 ForumFactoryProxy?</p>
<p>原因是明显的,需要通过代理确定是否有权限创建 forum.</p>
<p>在 ForumFactoryProxy 中我们看到代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法 createForum 返回的也是 ForumProxy, Proxy 就象一道墙,其他程序只能和 Proxy 交互操作.</p>
<p>注意到这里有两个 Proxy:ForumProxy 和 ForumFactoryProxy. 代表两个不同的职责:使用 Forum 和创建 Forum;</p>
<p>至于为什么将使用对象和创建对象分开,这也是为什么使用 Factory 模式的原因所在:是为了"封装" "分派";换句话说,尽可能功能单一化,方便维护修改.</p>
<p>Jive 论坛系统中其他如帖子的创建和使用,都是按照 Forum 这个思路而来的.</p>
<p>以上我们讨论了如何使用Proxy 进行授权机制的访问,Proxy 还可以对用户隐藏另外一种称为 copy-on-write的优化方式.拷贝一个庞大而复杂的对象是一个开销很大的操作,如果拷贝过程中,没有对原来的对象有所修改,那么这样的拷贝开销就没有必要.用代理延迟这一拷贝过程.</p>
<p>比如:我们有一个很大的 Collection,具体如 hashtable,有很多客户端会并发同时访问它.其中一个特别的客户端要进行连续的数据获取,此时要求其他客户端不能再向 hashtable 中增加或删除 东东.</p>
<p>最直接的解决方案是:使用 collection 的 lock,让这特别的客户端获得这个 lock,进行连续的数据获取,然后再释放 lock.</p>
<blockquote>
<p>public void foFetches(Hashtable ht){</p>
<p>synchronized(ht){</p>
<p>//具体的连续数据获取动作..</p>
<p>}</p>
<p>}</p>
</blockquote>
<p>但是这一办法可能锁住 Collection 会很长时间,这段时间,其他客户端就不能访问该 Collection 了.</p>
<p>第二个解决方案是clone这个Collection,然后让连续的数据获取针对 clone出来的那个Collection 操作.这个方案前提是,这个 Collection 是可 clone 的,而且必须有提供深度 clone 的方法.Hashtable 就提供了对自己的 clone 方法,但不是 Key 和value 对象的 clone,关于 Clone 含义可以参考专门文章.</p>
<blockquote>
<p>public void foFetches(Hashtable ht){</p>
<p>Hashttable newht=(Hashtable)ht.clone();</p>
<p>}</p>
</blockquote>
<p>问题又来了,由于是针对clone出来的对象操作,如果原来的母体被其他客户端操作修改了, 那么对clone出来的对象操作就没有意义了.</p>
<p>最后解决方案:我们可以等其他客户端修改完成后再进行 clone,也就是说,这个特别的客户端先通过调用一个叫 clone 的方法来进行一系列数据获取操作.但实际上没有真正的进行对象拷贝,直至有其他客户端修改了这个对象 Collection.</p>
<h2> 8.外观模式（Facade Pattern）</h2>
<h3> 定义</h3>
<p>为子系统中的一组接口提供一个一致的界面.</p>
<p>Facade 一个典型应用就是数据库 JDBC 的应用,如下例对数据库的操作:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例是 Jsp 中最通常的对数据库操作办法.
在应用中,经常需要对数据库操作,每次都写上述一段代码肯定比较麻烦,需要将其中不变的部分提炼出来,做成一个接口,这就引入了 facade 外观对象.如果以后我们更换 Class.forName 中的&lt;driver&gt;也非常方便,比如从 Mysql 数据库换到 Oracle数据库,只要更换 facade 接口中的 driver 就可以.
我们做成了一个 Facade 接口,使用该接口,上例中的程序就可以更改如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见非常简单,所有程序对数据库访问都是使用改接口,降低系统的复杂性,增加了灵活性.</p>
<p>如果我们要使用连接池,也只要针对 facade 接口修改就可以.</p>
<figure><figcaption>image-20211223215245703</figcaption></figure>
<p>由上图可以看出, facade 实际上是个理顺系统间关系,降低系统间耦合度的一个常用的办法,也许你已经不知不觉在使用,尽管不知道它就是 facade.</p>
<h2> 9.组合模式（Composite Pattern）</h2>
<figure><figcaption>image-20211224124607334</figcaption></figure>
<figure><figcaption>image-20211224124617396</figcaption></figure>
<figure><figcaption>image-20211224124630093</figcaption></figure>
<h3> 定义</h3>
<p>将对象以树形结构组织起来,以达成“部分－整体” 的层次结构，使得客户端对单个对象和组合对象的使用具有一致性.</p>
<p>Composite 比较容易理解，想到 Composite 就应该想到树形结构图。组合体内这些对象都有共同接口,当组合体一个对象的方法被调用执行时，Composite 将遍历(Iterator)整个树形结构,寻找同样包含这个方法的对象并实现调用执行。可以用牵一动百来形容。</p>
<p>所以 Composite 模式使用到 Iterator 模式，和 Chain of Responsibility 模式类似。</p>
<h3> 好处</h3>
<p>1.使客户端调用简单，客户端可以一致的使用组合结构或其中单个对象，用户就不必关系自己处理的是单个对象还是整个组合结构，这就简化了客户端代码。</p>
<p>2.更容易在组合体内加入对象部件. 客户端不必因为加入了新的对象部件而更改代码。</p>
<h3> 如何使用 Composite?</h3>
<p>首先定义一个接口或抽象类，这是设计模式通用方式了，其他设计模式对接口内部定义限制不多，Composite 却有个规定，那就是要在接口内部定义一个用于访问和管理 Composite 组合体的对象们（或称部件 Component）.</p>
<p>下面的代码是以抽象类定义，一般尽量用接口 interface:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象类 Equipment 就是 Component 定义，代表着组合体类的对象们,Equipment 中定义几个共同的方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Disk 是组合体内的一个对象，或称一个部件，这个部件是个单独元素( Primitive)。</p>
<p>还有一种可能是，一个部件也是一个组合体，就是说这个部件下面还有'儿子'，这是树形结构中通常的情况，应该比较容易理解。</p>
<p>现在我们先要定义这个组合体：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 CompositeEquipment 继承了 Equipment,同时为自己里面的对象们提供了外部访问的方法,重载了</p>
<p>Iterator,Iterator 是 Java 的 Collection 的一个接口，是 Iterator 模式的实现.</p>
<p>我们再看看 CompositeEquipment 的两个具体类:盘盒 Chassis 和箱子 Cabinet，箱子里面可以放很多东西，如底板，电源盒，硬盘盒等；盘盒里面可以放一些小设备，如硬盘 软驱等。无疑这两个都是属于组合体性质的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此我们完成了整个 Composite 模式的架构。</p>
<p>我们可以看看客户端调用 Composote 代码:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面调用的方法 netPrice()或 discountPrice()，实际上 Composite 使用 Iterator 遍历了整个树形结构,寻找同样包含这个方法的对象并实现调用执行.</p>
<p>Composite 是个很巧妙体现智慧的模式，在实际应用中，如果碰到树形结构，我们就可以尝试是否可以使用这个模式。</p>
<p>以论坛为例，一个版(forum)中有很多帖子(message),这些帖子有原始贴，有对原始贴的回应贴，是个典型的树形结构，那么当然可以使用 Composite 模式，那么我们进入 Jive中看看，是如何实现的.</p>
<p><strong>Jive 解剖</strong></p>
<p>在 Jive 中 ForumThread 是 ForumMessages 的容器 container(组合体).也就是说，ForumThread 类似我们上例中的CompositeEquipment.它和 messages 的关系如图：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 ForumThread 看到如下代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似 CompositeEquipment, 提供用于访问自己组合体内的部件方法: 增加 删除 遍历。结合我的其他模式中对 Jive 的分析，我们已经基本大体理解了 Jive 论坛体系的框架，如果你之前不理解设计模式，而直接去看Jive 源代码，你肯定无法看懂。</p>
<h2> 10.装饰器模式（Decorator Pattern）</h2>
<figure><figcaption>image-20211224124859045</figcaption></figure>
<p>装饰模式:Decorator 常被翻译成"装饰",我觉得翻译成"油漆工"更形象点,油漆工(decorator)是用来刷油漆的,那么被刷油漆的对象我们称 decoratee.这两种实体在 Decorator 模式中是必须的.</p>
<h3> 示例</h3>
<h3> 定义</h3>
<p>动态给一个对象添加一些额外的职责,就象在墙上刷油漆.使用 Decorator 模式相比用生成子类方式达到功能的扩充显得更为灵活.</p>
<h3> 为什么使用 Decorator?</h3>
<p>我们通常可以使用继承来实现功能的拓展,如果这些需要拓展的功能的种类很繁多,那么势必生成很多子类,增加系统的复杂性，同时,使用继承实现功能拓展,我们必须可预见这些拓展功能,这些功能是编译时就确定了,是静态的.
使用Decorator的理由是:这些功能需要由用户动态决定加入的方式和时机.Decorator提供了"即插即用"的方法,在运行期间决定何时增加何种功能.</p>
<h3> 如何使用?</h3>
<p>建立一个接口:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接口 Work 有一个具体实现:插入方形桩或圆形桩,这两个区别对 Decorator 是无所谓.我们以插入方形桩为例:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在有一个应用:需要在桩打入前,挖坑,在打入后,在桩上钉木板,这些额外的功能是动态,可能随意增加调整修改,比如,可能又需要在打桩之后钉架子(只是比喻).</p>
<p>那么我们使用 Decorator 模式,这里方形桩 SquarePeg 是 decoratee(被刷油漆者),我们需要在 decoratee 上刷些"油漆",这些油漆就是那些额外的功能.</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上例中,我们把挖坑和钉木板都排在了打桩 insert 前面,这里只是举例说明额外功能次序可以任意安排。</p>
<p>Decorator 模式出来了,我们看如何调用:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Decorator 模式至此完成.</p>
<p>如果你细心,会发现,上面调用类似我们读取文件时的调用:</p>
<blockquote>
<p>FileReader fr = new FileReader(filename);</p>
<p>BufferedReader br = new BufferedReader(fr);</p>
</blockquote>
<p>实际上 Java 的 I/O API 就是使用 Decorator 实现的,I/O 变种很多,如果都采取继承方法,将会产生很多子类,显然相当繁琐。</p>
<p><strong>Jive 中的 Decorator 实现</strong></p>
<p>在论坛系统中,有些特别的字是不能出现在论坛中如"打倒 XXX",我们需要过滤这些"反动"的字体.不让他们出现或者高亮度显示.</p>
<p>在 IBM Java 专栏中专门谈 Jive 的文章中,有谈及 Jive 中 ForumMessageFilter.java 使用了 Decorator 模式,其实,该程序并没有真正使用 Decorator,而是提示说:针对特别论坛可以设计额外增加的过滤功能,那么就可以重组 ForumMessageFilter 作为 Decorator 模式了.</p>
<p>所以,我们在分辨是否真正是Decorator模式,以及会真正使用Decorator模式,一定要把握好Decorator模式的定义,以及其中参与的角色(Decoratee 和 Decorator).</p>
<h2> 11.桥接模式（Bridge Pattern）</h2>
<figure><figcaption>image-20211224124334509</figcaption></figure>
<h3> 定义</h3>
<p><strong>将抽象和行为划分开来,各自独立,但能动态的结合。</strong></p>
<p>任何事物对象都有抽象和行为之分，例如人，人是一种抽象，人分男人和女人等；人有行为，行为也有各种具体表现，所以，“人”与“人的行为”两个概念也反映了抽象和行为之分。</p>
<p>在面向对象设计的基本概念中，对象这个概念实际是由属性和行为两个部分组成的，属性我们可以认为是一种静止的，是一种抽象，一般情况下，行为是包含在一个对象中，但是，在有的情况下，我们需要将这些行为也进行归类，形成一个总的行为接口，这就是桥模式的用处。</p>
<h3> 为什么使用?</h3>
<p>不希望抽象部分和行为有一种固定的绑定关系，而是应该可以动态联系的。</p>
<p>如果一个抽象类或接口有多个具体实现(子类、concrete subclass),这些子类之间关系可能有以下两种情况:</p>
<p>1.这多个子类之间概念是并列的,如前面举例,打桩,有两个 concrete class:方形桩和圆形桩;这两个形状上的桩是并列的,没有概念上的重复。</p>
<p>2.这多个子类之中有内容概念上重叠.那么需要我们把抽象共同部分和行为共同部分各自独立开来,原来是准备放在一个接口里,现在需要设计两个接口：抽象接口和行为接口，分别放置抽象和行为.</p>
<p>例如,一杯咖啡为例,子类实现类为四个：中杯加奶、大杯加奶、 中杯不加奶、大杯不加奶。</p>
<p>但是，我们注意到：上面四个子类中有概念重叠，可从另外一个角度进行考虑，这四个类实际是两个角色的组合：抽象 和行为，其中抽象为：中杯和大杯；行为为：加奶 不加奶（如加橙汁 加苹果汁）.</p>
<p>实现四个子类在抽象和行为之间发生了固定的绑定关系，如果以后动态增加加葡萄汁的行为，就必须再增加两个类：中杯加葡萄汁和大杯加葡萄汁。显然混乱,扩展性极差。</p>
<p>那我们从分离抽象和行为的角度，使用 Bridge 模式来实现。</p>
<h3> 如何实现?</h3>
<p>以上面提到的咖啡 为例. 我们原来打算只设计一个接口(抽象类),使用 Bridge 模式后,我们需要将抽象和行为分开,加奶和不加奶属于行为,我们将它们抽象成一个专门的行为接口.</p>
<p>先看看抽象部分的接口代码:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bridge 模式的基本框架我们已经搭好了,别忘记定义中还有一句:动态结合,我们现在可以喝到至少四种咖啡:</p>
<blockquote>
<p>1.中杯加奶</p>
<p>2.中杯不加奶</p>
<p>3.大杯加奶</p>
<p>4.大杯不加奶</p>
</blockquote>
<p>看看是如何动态结合的,在使用之前,我们做个准备工作,设计一个单态类(Singleton)用来 hold 当前的 CoffeeImp:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看中杯加奶 和大杯加奶 是怎么出来的:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: Bridge 模式的执行类如 CoffeeImp 和 Coffee 是一对一的关系, 正确创建 CoffeeImp 是该模式的关键。</p>
<p><strong>Bridge 模式在 EJB 中的应用：</strong></p>
<p>EJB 中有一个 Data Access Object (DAO)模式,这是将商业逻辑和具体数据资源分开的,因为不同的数据库有不同的数据库操作.将操作不同数据库的行为独立抽象成一个行为接口 DAO.如下:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 12.享元模式（Flyweight Pattern）</h2>
<h3> 定义</h3>
<p>避免大量拥有相同内容的小类的开销(如耗费内存),使大家共享一个类(元类).</p>
<h3> 为什么使用?</h3>
<p>面向对象语言的原则就是一切都是对象,但是如果真正使用起来,有时对象数可能显得很庞大,比如,字处理软件,如果以每个文字都作为一个对象,几千个字,对象数就是几千,无疑耗费内存,那么我们还是要"求同存异",找出这些对象群的共同点,设计一个元类,封装可以被共享的类,另外,还有一些特性是取决于应用(context),是不可共享的,这也 Flyweight 中两个重要概念内部状态intrinsic 和外部状态 extrinsic 之分.</p>
<p>说白点,就是先捏一个的原始模型,然后随着不同场合和环境,再产生各具特征的具体模型,很显然,在这里需要产生不同的新对象,所以Flyweight模式中常出现Factory模式.Flyweight的内部状态是用来共享的,Flyweight factory负责维护一个Flyweight pool(模式池)来存放内部状态的对象.</p>
<p>Flyweight 模式是一个提高程序效率和性能的模式,会大大加快程序的运行速度.应用场合很多:比如你要从一个数据库中读取一系列字符串,这些字符串中有许多是重复的,那么我们可以将这些字符串储存在 Flyweight 池(pool)中.</p>
<h3> 如何使用?</h3>
<p>我们先从 Flyweight 抽象接口开始:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是接口的具体实现(ConcreteFlyweight) ,并为内部状态增加内存空间, ConcreteFlyweight 必须是可共享的,它保存的任何状态都必须是内部(intrinsic),也就是说,ConcreteFlyweight 必须和它的应用环境场合无关.</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然,并不是所有的 Flyweight 具体实现子类都需要被共享的,所以还有另外一种不共享的 ConcreteFlyweight:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flyweight factory 负责维护一个 Flyweight 池(存放内部状态),当客户端请求一个共享 Flyweight 时,这个 factory 首先搜索池中是否已经有可适用的,如果有,factory 只是简单返回送出这个对象,否则,创建一个新的对象,加入到池中,再返回送出这个对象.池</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此,Flyweight 模式的基本框架已经就绪,我们看看如何调用: FlyweightFactory factory = new FlyweightFactory();</p>
<p>Flyweight fly1 = factory.getFlyweight( "Fred" ); Flyweight fly2 = factory.getFlyweight( "Wilma" );</p>
<hr>
<p>从调用上看,好象是个纯粹的 Factory 使用,但奥妙就在于 Factory 的内部设计上.</p>
<h3> Flyweight 模式在 XML 等数据源中应用</h3>
<p>我们上面已经提到,当大量从数据源中读取字符串,其中肯定有重复的,那么我们使用Flyweight模式可以提高效率,以唱片CD为</p>
<p>例,在一个 XML 文件中,存放了多个 CD 的资料.</p>
<p>每个 CD 有三个字段:</p>
<blockquote>
<p>1.出片日期(year)</p>
<p>2.歌唱者姓名等信息(artist)</p>
<p>3.唱片曲目 (title)</p>
</blockquote>
<p>其中,歌唱者姓名有可能重复,也就是说,可能有同一个演唱者的多个不同时期 不同曲目的 CD.我们将"歌唱者姓名"作为可共享的 ConcreteFlyweight.其他两个字段作为 UnsharedConcreteFlyweight.</p>
<p><em>数据源 XML 文件的内容:</em></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然上面举例 CD 只有 3 张,CD 可看成是大量重复的小类,因为其中成分只有三个字段,而且有重复的(歌唱者姓名)。</p>
<p>CD 就是类似上面接口 Flyweight:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将"歌唱者姓名"作为可共享的 ConcreteFlyweight:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看 Flyweight factory,专门用来制造上面的可共享的 ConcreteFlyweight:Artist</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你有几千张甚至更多 CD 时,Flyweight 模式将节省更多空间,共享的 flyweight 越多,空间节省也就越大.</p>
<h1>三、行为型模式</h1>
<h2> 13.命令模式（Command Pattern）</h2>
<figure><figcaption>image-20211224125040935</figcaption></figure>
<blockquote>
<ul>
<li>Receive 接收者角色</li>
</ul>
<p>该角色就是干活的角色，命令传递到这里是应该被执行的，具体到我们上面的例子中就是Group的三个实现类。</p>
<ul>
<li>Command 命令角色</li>
</ul>
<p>需要执行的所有命令都在这里声明。</p>
<ul>
<li>Invoker 调用者角色</li>
</ul>
<p>接收到命令，并执行命令。在例子中，我（项目经理）就是这个角色。</p>
</blockquote>
<h3> 示例</h3>

<blockquote>
<p>例如，客户说“界面上删除一条记录”，Invoker类接收到该String类型命令后，通知美工组PageGroup开始delete，然后再找到代码组CodeGroup后台不要存到数据库中，最后反馈给客户一个执行计划。这是一个挺好的方案，但是客户的命令是一个String类型的，这有非常多的变化，仅仅通过一个字符串来传递命令并不是一个非常好的方案，因为在系统设计中，字符串没有约束力，根据字符串判断相关的业务逻辑不是一个优秀的解决方案。那怎么才是一个优秀的方案呢？解决方案是：对客户发出的命令进行封装，每个命令是一个对象，避免客户、负责人、组员之间的交流误差，封装后的结果就是客户只要说一个命令，我的项目组就立刻开始启动，不用思考、解析命令字符串。</p>
<p>如下图 👇</p>
</blockquote>

<hr>
<h4> 命令接收器（项目接头负责人）Invoker</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 抽象命令执行器 Command</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体的命令执行器 xxCommand extends Command</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 抽象工作组 abstractGroup</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体的工作组 Group</h4>
<p>需求组</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>美工组</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码组</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 客户下发指令</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 定义</h3>
<blockquote>
<p>将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。</p>
</blockquote>
<h3> 优点</h3>
<blockquote>
<ul>
<li>
<p>类间解耦</p>
<p>调用者角色与接收者角色之间没有任何依赖关系，调用者实现功能时只需调用Command抽象类的execute方法就可以，不需要了解到底是哪个接收者执行。</p>
</li>
<li>
<p>可扩展性</p>
<p>Command的子类可以非常容易地扩展，而调用者Invoker和高层次的模块Client不产生严重的代码耦合。</p>
</li>
<li>
<p>命令模式结合其他模式会更优秀</p>
<p>命令模式可以结合责任链模式，实现命令族解析任务；结合模板方法模式，则可以减少Command子类的膨胀问题。</p>
</li>
</ul>
</blockquote>
<h3> 缺点</h3>
<blockquote>
<p>请看 Command 的子类：如果有N个命令，问题就出来了，Command 的子类就可不是几个，而是N个，这个类膨胀得非常大，这个就需要读者在项目中慎重考虑使用。</p>
</blockquote>
<h3> 使用场景</h3>
<blockquote>
<p>只要你认为是命令的地方就可以采用命令模式，例如，在GUI开发中，一个按钮的点击是一个命令，可以采用命令模式；模拟DOS命令的时候，当然也要采用命令模式；触发－反馈机制的处理等。</p>
</blockquote>
<h3> 扩展</h3>
<blockquote>
<p>上面的例子我们还没有说完。想想看，客户要求增加一项需求，那是不是页面也增加，同时功能也要增加呢？如果不使用命令模式，客户就需要先找需求组，然后找美工组，再找代码组……你想让客户跳楼啊！使用命令模式后，客户只管发命令模式，例如，需要增加一项需求，没问题，我内部调动三个组通力合作，然后把结果反馈给你，这也正是客户需要的。那这个要怎么修改呢？想想看，很简单的！在 AddRequirementCommand 类的execute方法中增加对PageGroup和CodePage的调用就可以了，修改后的代码如下所示。</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反悔问题</p>
<hr>
<h2> 14.观察者模式（Observer Pattern）</h2>
<figure><figcaption>image-20211224125949160</figcaption></figure>
<p>Java 深入到一定程度,就不可避免的碰到设计模式(design pattern)这一概念,了解设计模式,将使自己对 java 中的接口或抽象类应用有更深的理解.设计模式在 java 的中型系统中应用广泛,遵循一定的编程模式,才能使自己的代码便于理解,易于交流,Observer(观察者)模式是比较常用的一个模式,尤其在界面设计中应用广泛,而本站所关注的是 Java 在电子商务系统中应用,因此想从电子商务实例中分析 Observer 的应用.</p>
<p>虽然网上商店形式多样,每个站点有自己的特色,但也有其一般的共性,单就"商品的变化,以便及时通知订户"这一点,是很多网上商店共有的模式,这一模式类似 Observer patern 观察者模式.</p>
<p>具体的说,如果网上商店中商品在名称 价格等方面有变化,如果系统能自动通知会员,将是网上商店区别传统商店的一大特色.这就需要在商品 product 中加入 Observer 这样角色,以便 product 细节发生变化时,Observer 能自动观察到这种变化,并能进行及时的 update 或 notify 动作.</p>
<figure><figcaption>image-20211223215345882</figcaption></figure>
<p>Java 的 API 还为为我们提供现成的 Observer 接口 Java.util.Observer.我们只要直接使用它就可以.</p>
<p>我们必须 extends Java.util.Observer 才能真正使用它:</p>
<p>1.提供 Add/Delete observer 的方法;</p>
<p>2.提供通知(notisfy) 所有 observer 的方法;</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们注意到,在 product 类中 的 setXXX 方法中,我们设置了 notify(通知)方法, 当 Jsp 表单调用 setXXX(如何调用见我的另外一篇文章),实际上就触发了 notisfyObservers 方法,这将通知相应观察者应该采取行动了.</p>
<p>下面看看这些观察者的代码,他们究竟采取了什么行动:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行改 Jsp 程序,会出现一个表单录入界面, 需要输入产品名称 产品价格, 点按 Submit 后,还是执行该 jsp 的</p>
<p>if (request.getParameter("save")!=null)之间的代码.</p>
<p>由于这里使用了数据 javabeans 的自动赋值概念,实际程序自动执行了 setName setPrice 语句.你会在服务器控制台中发现下面信息::</p>
<blockquote>
<p>NameObserver :name changet to ?????(Jsp 表单中输入的产品名称)</p>
<p>PriceObserver :price changet to ???(Jsp 表单中输入的产品价格);</p>
</blockquote>
<p>这说明观察者已经在行动了.!!</p>
<p>同时你会在执行 jsp 的浏览器端得到信息:</p>
<p><strong>产品数据变动 保存! 并已经自动通知客户</strong></p>
<p>上文由于使用 jsp 概念,隐含很多自动动作,现将调用观察者的 Java 代码写如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会在发现下面信息::</p>
<blockquote>
<p>NameObserver :name changet to 橘子红了</p>
<p>PriceObserver :price changet to 9.22</p>
</blockquote>
<p>这说明观察者在行动了.!!</p>
<h2> 15.模板模式（Template Pattern）</h2>

<h3> 示例</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 定义</h3>
<blockquote>
<p>定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<p>抽象模板中的基本方法尽量设计为protected类型，符合迪米特法则，不需要暴露的属性或方法尽量不要设置为protected类型。实现类若非必要，尽量不要扩大父类中的访问权限。</p>
<ul>
<li>基本方法</li>
</ul>
<p>基本方法也叫做基本操作，是由子类实现的方法，并且在模板方法被调用。</p>
<ul>
<li>模板方法</li>
</ul>
<p>可以有一个或几个，一般是一个具体方法，也就是一个框架，实现对基本方法的调度，完成固定的逻辑。为了防止恶意的操作，一般模板方法都加上final关键字，不允许被覆写</p>
</blockquote>
<h3> 优点</h3>
<blockquote>
<ul>
<li>
<p>封装不变部分，扩展可变部分</p>
<p>把认为是不变部分的算法封装到父类实现 <strong>run()</strong>，而可变部分的则可以通过继承来继续扩展。在红旗模型例子中，是不是就非常容易扩展？例如增加一个H3型号的红旗模型，很容易呀，增加一个子类，实现父类的基本方法就可以了。</p>
</li>
<li>
<p>提取公共部分代码，便于维护</p>
<p>我们例子中刚刚走过的弯路就是最好的证明，如果我们不抽取 <strong>run()</strong> 到父类中，任由这种散乱的代码发生，想想后果是什么样子？维护人员为了修正一个缺陷，需要到处查找类似的代码！</p>
</li>
<li>
<p>行为由父类控制，子类实现</p>
<p>基本方法是由子类实现的，因此子类可以通过扩展的方式增加相应的功能，符合开闭原则。</p>
</li>
</ul>
</blockquote>
<h3> 缺点</h3>
<blockquote>
<p>抽象类负责声明最抽象、最一般的事物属性和方法，实现类完成具体的事物属性和方法。但是模板方法模式却颠倒了，抽象类定义了部分抽象方法，由子类实现，子类执行的结果影响了父类的结果，也就是子类对父类产生了影响，这在复杂的项目中，会带来代码阅读的难度，而且也会让新手产生不适感。</p>
</blockquote>
<h3> 使用场景</h3>
<blockquote>
<ul>
<li>多个子类有公有的方法，并且逻辑基本相同时。</li>
<li>重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。</li>
<li>重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数（见“模板方法模式的扩展”）约束其行为。</li>
</ul>
</blockquote>
<h3> 扩展</h3>
<p>场景：看你怎么设计的，车子一启动，喇叭就狂响，吵死人了！客户提出H1型号的悍马喇叭想让它响就响，H2型号的喇叭不要有声音，赶快修改一下。</p>

<p>抽象模板</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了钩子方法 <strong>isAlarm()</strong> -模板方法模式才算完美，大家可以想想，由子类的一个方法返回值决定公共部分的执行结果，是不是很有吸引力呀！</p>
<p>模板方法模式就是在模板方法中按照一定的规则和顺序调用基本方法，具体到前面那个例子，就是run()方法按照规定的顺序（先调用start()，然后再调用engineBoom()，再调用alarm()，最后调用stop()）调用本类的其他方法，并且由isAlarm()方法的返回值确定run()中的执行顺序变更。</p>
<h2> 16.策略模式（Strategy Pattern）</h2>
<figure><figcaption>image-20211224130125400</figcaption></figure>
<p>Strategy 策略模式是属于设计模式中 <code>对象行为型模式</code>,主要是定义一系列的算法,把这些算法一个个封装成单独的类.</p>
<p>Stratrgy 应用比较广泛,比如, 公司经营业务变化图, 可能有两种实现方式,一个是线条曲线,一个是框图(bar),这是两种算法,可以使用 Strategy 实现.</p>
<p>这里以字符串替代为例, 有一个文件,我们需要读取后,希望替代其中相应的变量,然后输出.关于替代其中变量的方法可能有多种方法,这取决于用户的要求,所以我们要准备几套变量字符替代方案.</p>
<figure><figcaption>image-20211223215423884</figcaption></figure>
<p>首先,我们建立一个抽象类 RepTempRule 定义一些公用变量和方法:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 RepTempRule 中 有一个抽象方法 abstract 需要继承明确,这个 replace 里其实是替代的具体方法.</p>
<p>我们现在有两个字符替代方案：</p>
<blockquote>
<p>1.将文本中 aaa 替代成 bbb;</p>
<p>2.将文本中 aaa 替代成 ccc;</p>
</blockquote>
<p>对应的类分别是 RepTempRuleOne RepTempRuleTwo</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：我们要建立一个算法解决类，用来提供客户端可以自由选择算法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用如下:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们达到了在运行期间，可以自由切换算法的目的。</p>
<p>实际整个 Strategy 的核心部分就是抽象类的使用,使用 Strategy 模式可以在用户需要变化时,修改量很少,而且快速.</p>
<p>Strategy 和 Factory 有一定的类似,Strategy 相对简单容易理解,并且可以在运行时刻自由切换。Factory 重点是用来创建对象。</p>
<h3> Strategy 适合下列场合</h3>
<blockquote>
<p>1.以不同的格式保存文件;</p>
<p>2.以不同的算法压缩文件;</p>
<p>3.以不同的算法截获图象;</p>
<p>4.以不同的格式输出同样数据的图形,比如曲线 或框图 bar 等</p>
</blockquote>
<h2> 17.责任链模式（Chain of Responsibility Pattern）</h2>
<h3> 示例</h3>
<figure><figcaption>image-20220420215442687</figcaption></figure>
<hr>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 定义</h3>
<blockquote>
<p>使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p>
</blockquote>
<h3> 优点</h3>
<blockquote>
<p>责任链模式非常显著的优点是将请求和处理分开。请求者可以不用知道是谁处理的，处理者可以不用知道请求的全貌（例如在J2EE项目开发中，可以剥离出无状态Bean由责任链处理），两者解耦，提高系统的灵活性。</p>
</blockquote>
<h3> 缺点</h3>
<blockquote>
<p>一是性能问题，每个请求都是从链头遍历到链尾，特别是在链比较长的时候，性能是一个非常大的问题。</p>
<p>二是调试不很方便，特别是链条比较长，环节比较多的时候，由于采用了类似递归的方式，调试的时候逻辑可能比较复杂。</p>
</blockquote>
<h3> 注意事项</h3>
<blockquote>
<p>链中节点数量需要控制，避免出现超长链的情况，一般的做法是在Handler中设置一个最大节点数量，在setNext方法中判断是否已经是超过其阈值，超过则不允许该链建立，避免无意识地破坏系统性能。</p>
</blockquote>
<h3> 如何使用?</h3>
<p>虽然这一段是如何使用 CoR,但是也是演示什么是 CoR.</p>
<p>有一个 Handler 接口:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个处理 request 的事例， 如果有多种 request,比如 请求帮助 请求打印 或请求格式化：</p>
<p>最先想到的解决方案是：在接口中增加多个请求：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体是一段实现接口 Handler 代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一共有三个这样的具体实现类，上面是处理 help,还有处理 Print 处理 Format 这大概是我们最常用的编程思路。</p>
<p>虽然思路简单明了，但是有一个扩展问题，如果我们需要再增加一个请求 request 种类,需要修改接口及其每一个实现。</p>
<p>第二方案:将每种 request 都变成一个接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个办法在增加新的请求 request 情况下，只是节省了接口的修改量，接口实现 ConcreteHandler 还需要修改。而且代码显然不简单美丽。</p>
<p>解决方案 3: 在 Handler 接口中只使用一个参数化方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里先假设 request 是 String 类型，如果不是怎么办？当然我们可以创建一个专门类 Request</p>
<p>最后解决方案:接口 Handler 的代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Request 类的定义:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 Handler 实现代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个解决方案就是 CoR, 在一个链上,都有相应职责的类,因此叫 Chain of Responsibility.</p>
<h3> CoR 优点</h3>
<p>因为无法预知来自外界（客户端）的请求是属于哪种类型，每个类如果碰到它不能处理的请求只要放弃就可以。</p>
<h3> CoR 缺点</h3>
<p>效率低，因为一个请求的完成可能要遍历到最后才可能完成，当然也可以用树的概念优化。 在 Java AWT1.0 中，对于鼠标按键事情的处理就是使用 CoR,到 Java.1.1 以后，就使用 Observer 代替 CoR扩展性差，因为在 CoR 中，一定要有一个统一的接口 Handler。</p>
<h3> 与 Command 模式区别</h3>
<p>Command 模式需要事先协商客户端和服务器端的调用关系，比如 1 代表 start 2 代表 move 等，这些 都是封装在request 中，到达服务器端再分解。</p>
<p>CoR 模式就无需这种事先约定，服务器端可以使用 CoR 模式进行客户端请求的猜测，一个个猜测 试验。</p>
<h2> 18.中介者模式（Mediator Pattern）</h2>
<figure><figcaption>image-20211224125558787</figcaption></figure>
<h3> 基于结构图 示例1</h3>
<p>抽象中介者</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体中介者角色</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象同事类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体同事类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 进销存 示例</h3>
<figure><figcaption>image-20220419214656783</figcaption></figure>
<p><a name="星型网络拓扑"></a></p>
<figure><figcaption>星型网络拓扑</figcaption></figure>

<figure><figcaption>image-20220419220345054</figcaption></figure>
<hr>
<h4> 抽象中介者 AbstractMediator</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体中介者 Mediator</h4>
<p>中介者最重要的方法叫做事件方法，处理多个对象之间的关系</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 抽象同事类 AbstractColleague</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体同事类 Purchase（采购）</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体同事类 Sale（销售）</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 具体同事类 Stock（库存）</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h3> 定义</h3>
<blockquote>
<p>用一个中介对象封装一系列的对象交互，中介者使各对象不需要显示地相互作用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
</blockquote>
<h3> 优点</h3>
<blockquote>
<p>中介者模式的优点就是减少类间的依赖，把原有的一对多的依赖变成了一对一的依赖，同事类只依赖中介者，减少了依赖，当然同时也降低了类间的耦合。</p>
</blockquote>
<h3> 缺点</h3>
<blockquote>
<p>中介者会膨胀得很大，而且逻辑复杂，原本N个对象直接的相互依赖关系转换为中介者和同事类的依赖关系，同事类越多，中介者的逻辑就越复杂。</p>
</blockquote>
<h3> 使用场景</h3>
<blockquote>
<p>中介者模式适用于多个对象之间紧密耦合的情况，紧密耦合的标准是：在类图中出现了蜘蛛网状结构，考虑使用中介者模式，这有利于把蜘蛛网梳理为星型结构<a href="#%E6%98%9F%E5%9E%8B%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91">#星型网络拓扑</a>。</p>
</blockquote>
<h3> 在如下的情况下尝试使用中介者模式</h3>
<blockquote>
<ul>
<li>N个对象之间产生了相互的依赖关系（N＞2）。</li>
<li>多个对象有依赖关系，但是依赖的行为尚不确定或者有发生改变的可能，在这种情况下一般建议采用中介者模式，降低变更引起的风险扩散。</li>
<li>产品开发。一个明显的例子就是MVC框架，把中介者模式应用到产品中，可以提升产品的性能和扩展性，但是对于项目开发就未必，因为项目是以交付投产为目标，而产品则是以稳定、高效、扩展为宗旨。</li>
</ul>
</blockquote>
<h3> 实际应用</h3>
<blockquote>
<ul>
<li>
<p>机场调度中心</p>
<p>比如，某架飞机（同事类）飞到机场上空了，就询问调度中心（中介者）“我是否可以降落”以及“降落到哪个跑道”，调度中心（中介者）查看其他飞机（同事类）情况，然后通知飞机降落。如果没有机场调度中心，飞机飞到机场了，飞行员要先看看有没有飞机和自己一起降落的，有没有空跑道，停机位是否具备等情况，这种局面是难以想象的！</p>
</li>
<li>
<p>MVC框架</p>
</li>
</ul>
<p>大家都应该使用过Struts，MVC框架，其中的C（Controller）就是一个中介者，叫做前端控制器(Front Controller)，它的作用就是把M(Model，业务逻辑)和V（View，视图）隔离开，协调M和V协同工作，把M运行的结果和V代表的视图融合成一个前端可以展示的页面，减少M和V的依赖关系。MVC框架已经成为一个非常流行、成熟的开发框架，这也是中介者模式的优点的一个体现。</p>
<ul>
<li>
<p>媒体网关</p>
<p>媒体网关也是一个典型的中介者模式，比如使用MSN时，张三发消息给李四，其过程应该是这样的：张三发送消息，MSN服务器(中介者)接收到消息，查找李四，把消息发送到李四，同时通知张三，消息已经发送。</p>
</li>
<li>
<p>中介服务</p>
<p>比如租房中介、出国中介，这些也都是中介模式的具体体现，比如你去租房子，如果没有房屋中介，你就必须一个一个小区去找，看看有没有空房子，有没有适合自己的房子，找到房子后还要和房东签合约，自己检查房屋的家具、水电煤等；有了中介后，你就省心多了，找中介，然后安排看房子，看中了，签合约，中介帮你检查房屋家具、水电煤等等。</p>
</li>
</ul>
</blockquote>
<h3> 为何使用 Mediator</h3>
<p>各个对象之间的交互操作非常多;每个对象的行为操作都依赖彼此对方,修改一个对象的行为,同时会涉及到修改很多其他对象的行为,如果使用 Mediator 模式,可以使各个对象间的耦合松散,只需关心和 Mediator 的关系,使多对多的关系变成了一对多的关系,可以降低系统的复杂性,提高可修改扩展性.</p>
<h2> 19.状态模式（State Pattern）</h2>
<figure><figcaption>image-20211224130224624</figcaption></figure>
<h3> 定义</h3>
<p>不同的状态,不同的行为;或者说,每个状态有着相应的行为.</p>
<h3> 何时使用 ?</h3>
<p>State 模式在实际使用中比较多,适合"状态的切换".因为我们经常会使用 If elseif else 进行状态切换, 如果针对状态的这样判断切换反复出现,我们就要联想到是否可以采取 State 模式了.</p>
<p>不只是根据状态,也有根据属性.如果某个对象的属性不同,对象的行为就不一样,这点在数据库系统中出现频率比较高,我们经常会在一个数据表的尾部,加上 property 属性含义的字段,用以标识记录中一些特殊性质的记录,这种属性的改变(切换)又是随时可能发生的,就有可能要使用 State.</p>
<h3> 是否使用 ?</h3>
<p>在实际使用,类似开关一样的状态切换是很多的,但有时并不是那么明显,取决于你的经验和对系统的理解深度.</p>
<p>这里要阐述的是"开关切换状态" 和" 一般的状态判断"是有一些区别的, " 一般的状态判断"也是有 if..elseif 结构,例如:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个 " 一般的状态判断",state 值的不同是根据 which 变量来决定的,which 和 state 没有关系.如果改成:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是 "开关切换状态",是将 state 的状态从"hello"切换到"hi",再切换到""bye";在切换到"hello",好象一个旋转开关,这种状态改变就可以使用 State 模式了.</p>
<p>如果单纯有上面一种将"hello"--&gt;"hi"--&gt;"bye"--&gt;"hello"这一个方向切换,也不一定需要使用 State 模式,因为 State 模式会建立很多子类,复杂化,但是如果又发生另外一个行为:将上面的切换方向反过来切换,或者需要任意切换,就需要 State 了.</p>
<p>请看下例:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上例中,我们有两个动作 push 推和 pull 拉,这两个开关动作,改变了 Context 颜色,至此,我们就需要使用 State 模式优化它.</p>
<p>另外注意:但就上例,state 的变化,只是简单的颜色赋值,这个具体行为是很简单的,State 适合巨大的具体行为,因此在,就本例,</p>
<p>实际使用中也不一定非要使用 State 模式,这会增加子类的数目,简单的变复杂.</p>
<p><strong>例如</strong>：银行帐户, 经常会在 Open 状态和 Close 状态间转换.</p>
<p><strong>例如</strong>： 经典的 TcpConnection, Tcp 的状态有创建 侦听 关闭三个,并且反复转换,其创建 侦听 关闭的具体行为不是简单一两句就能完成的,适合使用 State</p>
<p><strong>例如</strong>：信箱 POP 帐号, 会有四种状态, start HaveUsername Authorized quit,每个状态对应的行为应该是比较大的.适合使用State</p>
<p><strong>例如</strong>：在工具箱挑选不同工具,可以看成在不同工具中切换,适合使用 State.如 具体绘图程序,用户可以选择不同工具绘制方框直线 曲线,这种状态切换可以使用 State.</p>
<h3> 如何使用?</h3>
<p>State 需要两种类型实体参与:</p>
<p><strong>1.state manager</strong>状态管理器 ,就是开关 ,如上面例子的 Context 实际就是一个 state manager, 在 state manager 中有对状态的切换动作.</p>
<p>2.用抽象类或接口实现的父类,,不同状态就是继承这个父类的不同子类.</p>
<p>以上面的 Context 为例.我们要修改它,建立两个类型的实体.</p>
<p>第一步: 首先建立一个父类:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父类中的方法要对应 state manager 中的开关行为,在 state manager 中 本例就是 Context 中,有两个开关动作 push 推和pull 拉.那么在状态父类中就要有具体处理这两个动作:handlepush() handlepull(); 同时还需要一个获取 push 或 pull 结果的方法 getcolor()</p>
<p>下面是具体子类的实现:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样 其他状态的子类实现如 blue 一样.</p>
<p>第二步: 要重新改写 State manager 也就是本例的 Context:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此,我们也就实现了 State 的 refactorying 过程.</p>
<p>以上只是相当简单的一个实例,在实际应用中,handlepush 或 handelpull 的处理是复杂的.</p>
<h3> 优点</h3>
<p>（1） 封装转换过程，也就是转换规则</p>
<p>（2） 枚举可能的状态，因此，需要事先确定状态种类。</p>
<p>状态模式可以允许客户端改变状态的转换行为，而状态机则是能够自动改变状态，状态机是一个比较独立的而且复杂的机制，具体可参考一个状态机开源项目：<a href="http://sourceforge.net/projects/smframework/" target="_blank" rel="noopener noreferrer">http://sourceforge.net/projects/smframework/</a></p>
<p>状态模式在工作流或游戏等各种系统中有大量使用，甚至是这些系统的核心功能设计，例如政府 OA 中，一个批文的状态有多种：未办；正在办理；正在批示；正在审核；已经完成等各种状态，使用状态机可以封装这个状态的变化规则，从而达到扩充状态时，不必涉及到状态的使用者。</p>
<p>在网络游戏中，一个游戏活动存在开始；开玩；正在玩；输赢等各种状态，使用状态模式就可以实现游戏状态的总控，而游戏状态决定了游戏的各个方面，使用状态模式可以对整个游戏架构功能实现起到决定的主导作用。</p>
<h3> 实质</h3>
<p>使用状态模式前，客户端外界需要介入改变状态，而状态改变的实现是琐碎或复杂的。</p>
<p>使用状态模式后，客户端外界可以直接使用事件 Event 实现，根本不必关心该事件导致如何状态变化，这些是由状态机等内部实现。</p>
<p>这是一种 Event-condition-State，状态模式封装了 condition-State 部分。</p>
<p>每个状态形成一个子类，每个状态只关心它的下一个可能状态，从而无形中形成了状态转换的规则。如果新的状态加入，只涉及它的前一个状态修改和定义。</p>
<p>状态转换有几个方法实现：一个在每个状态实现 next()，指定下一个状态；还有一种方法，设定一个 StateOwner，在StateOwner 设定 stateEnter 状态进入和 stateExit 状态退出行为。</p>
<p>状态从一个方面说明了流程，流程是随时间而改变，状态是截取流程某个时间片。</p>
<h2> 20.备忘录模式 (Memento Pattern）</h2>
<figure><figcaption>image-20211224125835813</figcaption></figure>
<h3> 定义</h3>
<p>memento 是一个保存另外一个对象内部状态拷贝的对象.这样以后就可以将该对象恢复到原先保存的状态.</p>
<p>Memento 模式相对也比较好理解,我们看下列代码:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再看看 Memento 类:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见 Memento 中保存了 Originator 中的 number 和 file 的值. 通过调用 Originator 中 number 和 file 值改变的话,通过调用 setMemento()方法可以恢复.</p>
<p>Memento 模式的缺点是耗费大,如果内部状态很多,再保存一份,无意要浪费大量内存.</p>
<h3> Memento 模式在 Jsp+Javabean 中的应用</h3>
<p>在 Jsp 应用中,我们通常有很多表单要求用户输入,比如用户注册,需要输入姓名和 Email 等, 如果一些表项用户没有填写或者填写错误,我们希望在用户按"提交Submit"后,通过Jsp程序检查,发现确实有未填写项目,则在该项目下红字显示警告或错误,同时,还要显示用户刚才已经输入的表项.</p>
<p>如下图中 First Name 是用户已经输入,Last Name 没有输入,我们则提示红字警告.:</p>
<figure><figcaption>image-20211223215601467</figcaption></figure>
<p>这种技术的实现,就是利用了 Javabean 的 scope="request"或 scope="session"特性,也就是 Memento 模式.</p>
<p>具体示例和代码见 JavaWorld 的英文原文 , Javabean 表单输入特性参见我的 另外一篇文章.</p>
<h2> 21.解释器模式（Interpreter Pattern）</h2>
<figure><figcaption>image-20211224125104505</figcaption></figure>
<h3> 定义</h3>
<p>定义语言的文法 ,并且建立一个解释器来解释该语言中的句子.</p>
<p>Interpreter 似乎使用面不是很广,它描述了一个语言解释器是如何构成的,在实际应用中,我们可能很少去构造一个语言的文法.</p>
<p>首先要建立一个接口,用来描述共同的操作.</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看包含解释器之外的一些全局信息</p>
<blockquote>
<p>public interface Context</p>
</blockquote>
<p>AbstractExpression 的具体实现分两种:终结符表达式和非终结符表达式:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于文法中没一条规则,非终结符表达式都必须的:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 22.迭代器模式（Iterator Pattern）</h2>
<h3> 定义：？？？</h3>
<figure><figcaption>image-20211224123512983</figcaption></figure>
<h2> 23.访问者模式（Visitor Pattern）</h2>
<figure><figcaption>image-20211224130417325</figcaption></figure>
<h3> 定义</h3>
<p>作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作.</p>
<p>在 Java 中,Visitor 模式实际上是分离了 collection 结构中的元素和对这些元素进行操作的行为.</p>
<h3> 为何使用 Visitor?</h3>
<p>Java 的 Collection(包括 Vector 和 Hashtable)是我们最经常使用的技术,可是 Collection 好象是个黑色大染缸,本来有各种鲜明类型特征的对象一旦放入后,再取出时,这些类型就消失了.那么我们势必要用 If 来判断,如:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上例中,我们使用了 instanceof 来判断 o 的类型.</p>
<p>很显然,这样做的缺点代码 If else if 很繁琐.我们就可以使用 Visitor 模式解决它.</p>
<h3> 如何使用 Visitor?</h3>
<p>针对上例,定义接口叫 Visitable,用来定义一个 Accept 操作,也就是说让 Collection 每个元素具备可访问性.</p>
<p>被访问者是我们 Collection 的每个元素 Element,我们要为这些 Element 定义一个可以接受访问的接口(访问和被访问是互动的,只有访问者,被访问者如果表示不欢迎,访问者就不能访问),取名为 Visitable，也可取名为 Element。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是被访问者是字符串类型，下面再建立一个 Float 类型的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们设计一个接口 visitor 访问者，在这个接口中,有一些访问操作，这些访问操作是专门访问对象集合 Collection 中有可能的所有类，目前我们假定有三个行为：访问对象集合中的字符串类型；访问对象集合中的 Float 类型；访问对象集合中的对象集合类型。注意最后一个类型是集合嵌套，通过这个嵌套实现可以看出使用访问模式的一个优点。</p>
<p>接口 visitor 访问者如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问者的实现:</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的 visitCollection 我们实现了对 Collection 每个元素访问,只使用了一个判断语句,只要判断其是否可以访问.</p>
<p>StringElement 只是一个实现，可以拓展为更多的实现，整个核心奥妙在 accept 方法中，在遍历 Collection 时，通过相应的accept 方法调用具体类型的被访问者。这一步确定了被访问者类型，</p>
<p>如果是 StringElement，而 StringElement 则回调访问者的 visiteString 方法，这一步实现了行为操作方法。</p>
<p>客户端代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端代码中的 list 对象集合中放置了多种数据类型，对对象集合中的访问不必象一开始那样，使用 instance of 逐个判断，而是通过访问者模式巧妙实现了。</p>
<p>至此,我们完成了 Visitor 模式基本结构.</p>
<h3> 使用 Visitor 模式的前提</h3>
<p>使用访问者模式是对象群结构中(Collection) 中的对象类型很少改变。</p>
<p>在两个接口 Visitor 和 Visitable 中,确保 Visitable 很少变化,也就是说，确保不能老有新的 Element 元素类型加进来，可以变化的是访问者行为或操作，也就是 Visitor 的不同子类可以有多种,这样使用访问者模式最方便.</p>
<p>如果对象集合中的对象集合经常有变化, 那么不但 Visitor 实现要变化，Visistable 也要增加相应行为，GOF 建议是,不如在这些对象类中直接逐个定义操作，无需使用访问者设计模式。</p>
<p>但是在 Java 中，Java 的 Reflect 技术解决了这个问题，因此结合 reflect 反射机制，可以使得访问者模式适用范围更广了。</p>
<p>Reflect 技术是在运行期间动态获取对象类型和方法的一种技术,具体实现参考 Javaworld 的英文原文。</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="设计模式"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-06T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">异步</title>
    <id>https://topjf.github.io/java/asynchronous.html</id>
    <link href="https://topjf.github.io/java/asynchronous.html"/>
    <updated>2023-03-05T14:57:36.000Z</updated>
    <summary type="text">1.1 线程 前3种不用。 1.2 CompletableFuture A、.completedFuture 返回一个新的 CompletableFuture，它已经用给定的值完成了 B、.supplyAsync 返回一个新的 CompletableFuture，它由在给定执行器中运行的任务异步完成，其值是通过调用给定供应商获得的 C、.runAsyn...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>1 异步 CompletableFuture</h1>
<h2> 1.1 线程</h2>
<figure><figcaption></figcaption></figure>
<p>前3种不用。</p>
<h2> 1.2 CompletableFuture</h2>
<h3> A、<strong>.completedFuture</strong> 返回一个新的 CompletableFuture，它已经用给定的值完成了</h3>
<h3> B、<strong>.supplyAsync</strong> 返回一个新的 CompletableFuture，它由在给定执行器中运行的任务异步完成，其值是通过调用给定供应商获得的</h3>
<h3> C、<strong>.runAsync</strong> 返回一个新的 CompletableFuture，它在运行给定操作后由 {@link} 中运行的任务异步完成</h3>
<h3> <strong>简单实例</strong></h3>
<h3> 1.2.1 方法完成后的处理</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2.2 方法执行完，后端处理 （supplyAsync）</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2.3 线程串行化</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <strong>thenApply</strong> 方法：当一个线程依赖另一个线程时，获取上一个任务返回的结果，并返回当前任务的返回值</h4>
<h4> <strong>thenAccept</strong> 方法：消费处理结果。接收任务的处理结果，并消费处理，无返回结果</h4>
<h4> <strong>thenRun</strong> 方法：只要上面的任务执行完成，就开始执行<em>thenRun</em>,只是处理完任务后，执行<em>thenRun</em>的后续操作</h4>
<h4> 实例</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2.4 两任务组合</h3>
<h4> A、所有线程池都要完成</h4>
<h5>runAfterBothAsync、thenAcceptBothAsync、thenCombineAsync</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> B、线程池只要一个完成</h4>
<h5><strong>applyToEither</strong>：两个任务有一个执行完成，获取它的返回值，处理任务并有新的返回值</h5>
<h5><strong>appl</strong>acceptEither**：两个任务有一个执行完成，获取它的返回值，处理任务，没有新的返回值</h5>
<h5><strong>appl</strong>runAfterEither**：两个任务有一个执行完成，不需要获取future的结果，处理任务，没有返回值</h5>
<ul>
<li>applyToEitherAsync: 感知结果，自己有返回值</li>
<li>acceptEitherAsync: 感知结果，自己没有返回值</li>
<li>runAfterEitherAsync: 不感知结果，自己没有返回值</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 业务实用场景</h2>
<p>订单+购物车模块</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-12-10T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">分布式锁、缓存</title>
    <id>https://topjf.github.io/java/cloud-lock-cache.html</id>
    <link href="https://topjf.github.io/java/cloud-lock-cache.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">1. 双写模式：写数据库，写缓存 2. 失效模式：缓存失效（删除缓存），写数据库 读取缓存步骤数据一致性一般没有什么问题，但是一旦涉及到数据更新：数据库和缓存更新，就容易出现缓存(Redis)和数据库（MySQL）间的数据一致性问题。 不管先保存到MySQL，还是先保存到Redis都面临着一个保存成功而另外一个保存失败的情况。 不管是先写MySQL数据...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>缓存一致性</h1>
<ol>
<li>双写模式：写数据库，写缓存</li>
<li>失效模式：缓存失效（删除缓存），写数据库</li>
</ol>
<blockquote>
<p>读取缓存步骤数据一致性一般没有什么问题，但是一旦涉及到数据更新：数据库和缓存更新，就容易出现<strong>缓存(Redis)和数据库（MySQL）间的数据一致性问题</strong>。</p>
<p>不管先保存到MySQL，还是先保存到Redis都面临着一个保存成功而另外一个保存失败的情况。</p>
<p>不管是先写MySQL数据库，再删除Redis缓存；还是先删除缓存，再写库，都有可能出现数据不一致的情况。举一个例子：</p>
<p>1.如果删除了缓存Redis，还没有来得及写库MySQL，另一个线程就来读取，发现缓存为空，则去数据库中读取数据写入缓存，此时缓存中为脏数据。</p>
<p>2.如果先写了库，在删除缓存前，写库的线程宕机了，没有删除掉缓存，则也会出现数据不一致情况。</p>
<p>因为写和读是并发的，没法保证顺序,就会出现缓存和数据库的数据不一致的问题。</p>
</blockquote>
<h2> 解决</h2>
<h3> 1 基于mysql的binlog日志（canal）</h3>
<h3> 2 消息队列MQ</h3>
<h1>1、本地缓存&amp;分布式缓存</h1>
<h2> 1.1 使用场景</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1.2 使用流程</h2>
<figure><figcaption></figcaption></figure>
<h2> 1.3 简单实例格式</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1.4 本地缓存</h2>
<p>Map&lt;String,Object&gt;：在多分布式部署实例时会存在：各自使用自己的本地缓存</p>
<figure><figcaption></figcaption></figure>
<p>​ 解决办法：分布式缓存</p>
<h2> 1.5 分布式缓存</h2>
<h3> 1.5.1 缓存穿透 <a name="缓存穿透"></a></h3><a name="缓存穿透">
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<blockquote>
<p>（[缓存、DB]都不存在数据）1000万条并发请求，缓存为null，全部跑到db查询，db可能直接宕机。</p>
</blockquote>
</a><h3><a name="缓存穿透"></a> 1.5.2 缓存雪崩 <a name="缓存雪崩"></a></h3><a name="缓存雪崩">
<figure><figcaption></figcaption></figure>
<blockquote>
<p>存在的数据，大面积数据同时失效)已经有很多数据存在，但有一些设置了同样的过期时间，导致了很多没命中。</p>
</blockquote>
</a><h3><a name="缓存雪崩"></a> 1.5.3 缓存击穿 <a name="缓存击穿"></a></h3><a name="缓存击穿">
<figure><figcaption></figcaption></figure>
<blockquote>
<p>（存在的数据，某一个数据热点失效）1000万条并发，，会全部跑到db查询，db可能直接宕机。</p>
</blockquote>
</a><h3><a name="缓存击穿"></a> 1.5.4 缓存穿透、击穿、雪崩的区别</h3>
<h4> 1.穿透是缓存不命中，DB也没有不命中</h4>
<h4> 2.击穿是一个热点key失效</h4>
<h4> 3.雪崩是很多key集体失效</h4>
<h2> 1.6 总结</h2>
<h3> 1.6.1、<strong>解决缓存穿透：空结果缓存</strong></h3>
<blockquote>
<p>.set("cataLogJson", cataLogJsonDB == null ? "1001" : cataLogJsonDB));</p>
</blockquote>
<h3> 1.6.2、<strong>解决缓存雪崩：设置过期时间(加随机值) 。存在的数据，大面积数据同时失效</strong></h3>
<blockquote>
<p>.set("cataLogJson", JSON.toJSONString(cataLogJsonFromDB == null ? "1001" : cataLogJsonFromDB), 1, TimeUnit.DAYS);</p>
</blockquote>
<h3> 1.6.3、<strong>解决缓存击穿【难点】：加锁，存在的数据，某一个数据热点失效</strong></h3>
<blockquote>
<p>通过redis ...</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<h1>2、分布式锁+redis 配置</h1>
<figure><figcaption></figcaption></figure>
<p>博客地址：<a href="https://blog.csdn.net/qq_42476834/article/details/125108089" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_42476834/article/details/125108089</a></p>
<h2> 2.1 业务测试</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：<a href="http://yumall.com/" target="_blank" rel="noopener noreferrer">http://yumall.com/</a></p>
<p>无缓存--时间：40</p>
<p>有缓存-----时间：1</p>
<h2> 2.2 压力测试与bug解决</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.3 加锁解决<code>缓存击穿</code></h2>
<p>单体：本地锁在分布式</p>
<p>//只要是同一把锁，就能锁住需要这个锁的所有线程
//1、synchronized (this): SpringBoot所有的组件在容器中都是单例的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟并发80：<em>没有锁住</em></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>
<p>解决：</p>

<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试80结果：查询数据库放入缓存</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2.4 本地锁在分布式服务</h2>
<p>模拟多台服务器的商品服务，端口不一: --server.port=8101, 8102, 8103</p>
<p>发现：本地锁将只是对与本实例起作用。</p>
<p>解决：分布式锁</p>
<h2> 2.5 分布式锁原理&amp;使用</h2>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 2.5.1 redis锁</h3>
<p>文档：<a href="http://redis.cn/commands.html" target="_blank" rel="noopener noreferrer">http://redis.cn/commands.html</a></p>
<p>SET命令 [key value]</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.5.2 简单的业务+分析</h3>
<h4> A、测试问题1：setnx占好了位，业务代码异常或者程序在页面过程中宕机。没有执行删除锁逻辑，这就造成了死锁</h4>
<figure><figcaption></figcaption></figure>

<h5>- - 解决: 设置锁的自动过期，即使没有删除，会自动删除</h5>
<hr>
<h4> B、测试问题2：setnx设置好， 正要去设置过期时间，宕机。又死锁了</h4>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h5>- - 解决: 设置过期时间和占位必须是原子的。redis支持使用setnx ex命令</h5>
<hr>
<h4> C、测试问题3（加锁原子型）：删除锁直接删除？？? 如果由于业务时间很长（<em>超时</em>），锁自己过期了，我们直接删除，有可能把别人正在持有的锁删除了</h4>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h5>- - 解决: 占锁的时候，值指定为uuid,每个人匹配是自己的锁才删除</h5>
<hr>
<h4> D、 测试问题4：占锁时指定为uuid,每个人匹配是自己的锁才删除。如果正好判断是当前值，正要删除锁的时候，锁已经过期了，别人已经设置到了新的值，那么我们删除的就是别人的锁了</h4>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h5>- - 解决: lua脚本解锁</h5>
<hr>
<h4> E、 测试问题5：lua脚本解锁（最终形态）</h4>
<figure><figcaption></figcaption></figure>
<h2> 2.6 完整业务实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> <strong>发现加锁与解锁重复，把他提出来到工具类，但分布式框架有成型产品《RedisSon 整合》</strong></h2>
<h1>3、分布式锁 RedisSon</h1>
<p><a href="https://redis.io/topics/distlock" target="_blank" rel="noopener noreferrer">https://redis.io/topics/distlock</a></p>
<h2> 3.1. RedisSon 整合</h2>
<h3> - - 依赖</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> - - 配置</h3>
<p>文档：<a href="https://github.com/redisson/redisson/wiki" target="_blank" rel="noopener noreferrer">https://github.com/redisson/redisson/wiki</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> - - 测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.2. RedisSon-lock 锁测试</h2>
<h3> - - 简单测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> lock特点</h3>
<p>加锁、阻塞式等待。
锁的自动续期，如果业务超长，运行期间自动给锁续上新的30s。不用担心业务时间长，锁自动过期被删掉。
加锁的业务只要运行完成，就不会给当前锁续期，即使不手动解锁，锁默认在30s以后自动删除。</p>
<h2> 3.3. RedisSon-lock 看门狗原理</h2>
<h2> 3.4. RedisSon 读写锁 ReadWriteLock</h2>
<h3> - - 测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> - - 结论</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 3.5. RedisSon 闭锁CountDownLatch 测试</h2>
<h3> - - 放假，锁门 测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> - - 结论</h3>
<p>等待某一事物处理全部业务完成后，在执行某操作</p>
<h2> 3.6. RedisSon 信号量Semaphore 测试</h2>
<h3> - - 车库停车测试</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3.7. RedisSon 缓存一致性解决</h2>
<h3> - - 原理：双写模式、失效模式</h3>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> - - 解决方案</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> - - Canal</h3>
<figure><figcaption></figcaption></figure>
<h3> - - 使用失效模式</h3>
<p>我们系统的一致性解决方案:
1、 缓存的所有数据都有过期时间，数据过期下一次查询触发主动更新
2、读写数据的时候，加上分布式的读写锁。
经常写，经常读</p>
<p>使用SpringCache</p>
<h2> RedissonLock完整业务实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>4、SpringCache</h1>
<figure><figcaption></figcaption></figure>
<h2> 4.1. 整合</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.2. @Cacheable细节设置</h2>
<p>@Cacheable(value="myCache")，代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。如果缓存中没有，会调用方法。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.3. 自定义缓存设置</h2>
<p>指定：key，时间，json化</p>
<p>key，时间:配置文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>json化+配置文件时间失效</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.4. @CacheEvict+Caching 失效模式使用</h2>
<p>@CachEvict 的作用 主要针对方法配置，能够根据一定的条件对缓存进行清空。</p>
<h3> 4.4.1 删除一个</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4.4.2 删除多个</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 4.5. @CachePut 双写模式使用</h2>
<h2> 4.6. 原理与不足</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.7. 总结</h2>
<p><strong>常规数据</strong>：(读多写少，即时性，-致性要求不高的数据) ;完全可以使用Spring-Cache，写模式(只要缓存的数据有过期时间就足够了
<strong>特殊数据</strong>：特殊设计</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <category term="Cloud"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-05-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">分布式session</title>
    <id>https://topjf.github.io/java/cloud-session.html</id>
    <link href="https://topjf.github.io/java/cloud-session.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">分布式 session 7.1 分析 7.2 解决session已知弊端 使用第一种，但是存在子域名问题，所以使用SpringSession 7.3 开始 7.3.1 依赖、启动类 7.3.2 配置，放大作用域 7.3.2 开始</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 分布式 session</h2>
<h3> 7.1 分析</h3>
<figure><figcaption></figcaption></figure>
<h3> 7.2 解决session已知弊端</h3>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>使用第一种，但是存在子域名问题，所以使用SpringSession</p>
<figure><figcaption></figcaption></figure>
<h3> 7.3 开始</h3>
<h4> 7.3.1 依赖、启动类</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 7.3.2 配置，放大作用域</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7.3.2 开始</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <category term="Cloud"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-05-13T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">异常处理</title>
    <id>https://topjf.github.io/java/java-exception.html</id>
    <link href="https://topjf.github.io/java/java-exception.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">全局异常 错误码和错误信息定义类 1. 错误码定义规则为5为数字 2. 前两位表示业务场景，最后三位表示错误码。例如：10001。10:通用 001:系统未知异常 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式 控制器统一的异常处理（ExceptionControllerAdvice） comment</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 全局异常</h2>
<blockquote>
<p>错误码和错误信息定义类</p>
<ol>
<li>错误码定义规则为5为数字</li>
<li>前两位表示业务场景，最后三位表示错误码。例如：10001。10:通用 001:系统未知异常</li>
<li>维护错误码后需要维护错误描述，将他们定义为枚举形式</li>
</ol>
</blockquote>
<h3> 控制器统一的异常处理（ExceptionControllerAdvice）</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> comment</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-16T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">JSR303校验</title>
    <id>https://topjf.github.io/java/java-jsr303.html</id>
    <link href="https://topjf.github.io/java/java-jsr303.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">1 分组校验 1.1 创建组接口 1.2 使用Controller 1.3 实体类Entity 1.4 测试 ​ 2 自定义校验 5）、自定义校验 1）、编写一个自定义的校验注解 2）、编写一个自定义的校验器 ConstraintValidator 3）、关联自定义的校验器和自定义的校验注解 2.1 自定义校验注解 ValidationMessages...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>JSR303校验</h1>
<div class="language-Java line-numbers-mode" data-ext="Java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 1 分组校验</h2>
<h3> 1.1  创建组接口</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2 使用Controller</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.3 实体类Entity</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.4 测试</h3>
<p>​ <a href="http://localhost:50000/api/product/brand/save" target="_blank" rel="noopener noreferrer">http://localhost:50000/api/product/brand/save</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2 自定义校验</h2>
<blockquote>
<p>5）、自定义校验</p>
<p>1）、编写一个自定义的校验注解</p>
<p>2）、编写一个自定义的校验器 ConstraintValidator</p>
<p>3）、关联自定义的校验器和自定义的校验注解</p>
</blockquote>
<h3> 2.1 自定义校验注解</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ValidationMessages.properties</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2.2 自定义的校验器</h3>
<p>自定义的校验器 ConstraintValidator</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.3 关联自定义</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-20T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java日志框架</title>
    <id>https://topjf.github.io/java/java-log.html</id>
    <link href="https://topjf.github.io/java/java-log.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">设置日志输出级别：系统设置级别为： DEBUG（打印 DEBUG+INFO+WARN+ERROR 的信息） INFO（打印 INFO+WARN+ERROR 的信息） WARN（打印 WARN+ERROR 的信息） ERROR（打印 ERROR 的信息） logback-spring.xml 使用配置</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>日志级别说明</h1>
<p>设置日志输出级别：系统设置级别为：</p>
<blockquote>
<p>DEBUG（打印 DEBUG+INFO+WARN+ERROR 的信息）</p>
<p>INFO（打印 INFO+WARN+ERROR 的信息）</p>
<p>WARN（打印 WARN+ERROR 的信息）</p>
<p>ERROR（打印 ERROR 的信息）</p>
</blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>1、logback</h1>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>logback-spring.xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>2、log4j</h1>
<h1>3、log4j2</h1>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">jmeter性能压测</title>
    <id>https://topjf.github.io/java/jmeter.html</id>
    <link href="https://topjf.github.io/java/jmeter.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">-- 指标 -- Jmeter 下载： 常用： 受【cpu,jvm,数据库，网络IO，中间件】分配等影响 -- 堆内存&amp;垃圾回收 jvm 堆空间 堆： 新生代 老年代 -- 性能监控 jconsole&amp; jvisualvm 安装插件报错地址： 运行压力测试+visualvm，检测jvm使用情况 测试指标 压测线程数 吞吐量/s 90%响应时间 99%响...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> -- 指标</h2>
<p>
</p>
<h2> -- Jmeter</h2>
<p>下载：<a href="https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.tgz" target="_blank" rel="noopener noreferrer">https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.tgz</a></p>
<p><a href="https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.zip" target="_blank" rel="noopener noreferrer">https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.3.zip</a></p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>常用：</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>受【cpu,jvm,数据库，网络IO，中间件】分配等影响</p>
<h2> -- 堆内存&amp;垃圾回收</h2>
<p>jvm</p>
<figure><figcaption></figcaption></figure>
<hr>
<p>堆空间</p>
<figure><figcaption></figcaption></figure>
<hr>
<p>堆：</p>
<p>新生代</p>
<figure><figcaption></figcaption></figure>
<p>老年代</p>
<figure><figcaption></figcaption></figure>
<hr>
<h2> -- 性能监控</h2>
<p>jconsole&amp; jvisualvm</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>安装插件报错地址：<a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener noreferrer">https://visualvm.github.io/pluginscenters.html</a></p>
<p>运行压力测试+visualvm，检测jvm使用情况</p>
<table>
<thead>
<tr>
<th style="text-align:left">测试指标</th>
<th style="text-align:center">压测线程数</th>
<th style="text-align:center">吞吐量/s</th>
<th style="text-align:center">90%响应时间</th>
<th style="text-align:center">99%响应时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Nginx</td>
<td style="text-align:center">80</td>
<td style="text-align:center">40,063.148</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:left">Gateway</td>
<td style="text-align:center">80</td>
<td style="text-align:center">36,176.975</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:left">简单服务 8100:hello</td>
<td style="text-align:center">80</td>
<td style="text-align:center">45,053.433</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:left">Gateway+简单服务</td>
<td style="text-align:center">80</td>
<td style="text-align:center">12,609.957</td>
<td style="text-align:center">10</td>
<td style="text-align:center">18</td>
</tr>
<tr>
<td style="text-align:left">全链路</td>
<td style="text-align:center">80</td>
<td style="text-align:center">12,444.525</td>
<td style="text-align:center">11</td>
<td style="text-align:center">18</td>
</tr>
<tr>
<td style="text-align:left">全链路（Nginx动静分离）</td>
<td style="text-align:center">200</td>
<td style="text-align:center">16,049.027</td>
<td style="text-align:center">18</td>
<td style="text-align:center">58</td>
</tr>
<tr>
<td style="text-align:left">全链路（Nginx动静分离+缓存+去log+索引）</td>
<td style="text-align:center">200</td>
<td style="text-align:center">16,060.535</td>
<td style="text-align:center">18</td>
<td style="text-align:center">56</td>
</tr>
<tr>
<td style="text-align:left">首页1级菜单渲染</td>
<td style="text-align:center">80</td>
<td style="text-align:center">1,373.826(db,渲染)</td>
<td style="text-align:center">66</td>
<td style="text-align:center">86</td>
</tr>
<tr>
<td style="text-align:left">首页渲染(开缓存)</td>
<td style="text-align:center">80</td>
<td style="text-align:center">2,204.165</td>
<td style="text-align:center">53</td>
<td style="text-align:center">85</td>
</tr>
<tr>
<td style="text-align:left">首页渲染(开缓存+去log+sql索引)</td>
<td style="text-align:center">80</td>
<td style="text-align:center">3,156.914</td>
<td style="text-align:center">29</td>
<td style="text-align:center">37</td>
</tr>
<tr>
<td style="text-align:left">3级分类数据获取</td>
<td style="text-align:center">80</td>
<td style="text-align:center">27.616(db)</td>
<td style="text-align:center">3,207</td>
<td style="text-align:center">3,414</td>
</tr>
<tr>
<td style="text-align:left">3级分类数据获取(开缓存+去log+sql索引)</td>
<td style="text-align:center">80</td>
<td style="text-align:center">49.132</td>
<td style="text-align:center">1,703</td>
<td style="text-align:center">1,927</td>
</tr>
<tr>
<td style="text-align:left">3级分类数据获取(业务优化+关缓存+log+sql索引)</td>
<td style="text-align:center">80</td>
<td style="text-align:center">310.131</td>
<td style="text-align:center">436</td>
<td style="text-align:center">646</td>
</tr>
<tr>
<td style="text-align:left">3级分类数据获取(redis+业务优化+关缓存+log+sql索引)</td>
<td style="text-align:center">80</td>
<td style="text-align:center">4,890.867</td>
<td style="text-align:center">25</td>
<td style="text-align:center">43</td>
</tr>
<tr>
<td style="text-align:left">首页全量数据获取</td>
<td style="text-align:center">80</td>
<td style="text-align:center">19.157</td>
<td style="text-align:center">661</td>
<td style="text-align:center">798</td>
</tr>
<tr>
<td style="text-align:left">首页全量数据获取(开缓存+去log+sql索引)</td>
<td style="text-align:center">80</td>
<td style="text-align:center">65.36</td>
<td style="text-align:center">1,513</td>
<td style="text-align:center">1,845</td>
</tr>
<tr>
<td style="text-align:left">首页全量数据获取(Nginx动静分离+开缓存+去log+sql索引)</td>
<td style="text-align:center">80/200</td>
<td style="text-align:center">17,460.284/16,066.387</td>
<td style="text-align:center">8/18</td>
<td style="text-align:center">21/59</td>
</tr>
<tr>
<td style="text-align:left">Nginx+Gateway</td>
<td style="text-align:center">80</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>1、中间件有多，性能损失越大</p>
<p>业务：db(MySQL+创建索引)、模板的渲染速度、静态资源</p>
<h3> --- 首页渲染(开缓存+去log+sql)</h3>
<p>getLevel1Categorys-》db无索引，开缓存，去log：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getLevel1Categorys-》db有索引，开缓存，去log：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- Nginx动静分离</h2>
<figure><figcaption></figcaption></figure>
<p>1、以后将所有项目的静态资源都应该放在nginx里面
2、规则: /static/**所有请求都由nginx直接返回</p>
<figure><figcaption></figcaption></figure>
<p>配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://yumall.com/static/index/img/img_01.png" target="_blank" rel="noopener noreferrer">http://yumall.com/static/index/img/img_01.png</a></p>
<p>压力测试</p>
<h2> -- 示例：getCataLogJson优化</h2>
<p>将数据库的多次查询放到一次，</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">jvm</title>
    <id>https://topjf.github.io/java/jvm.html</id>
    <link href="https://topjf.github.io/java/jvm.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">1.1 加载过程介绍 如果 JVM 想要执行这个 .class 文件，我们需要将其装进一个类加载器中，它就像一个搬运工一样，会把所有的 .class 文件全部搬进 JVM 里面来。 重点知识： Java 文件经过编译后变成 .class 字节码文件；; 字节码文件通过类加载器被搬运到 JVM 虚拟机中；; 虚拟机主要的 5 大块：方法区，堆都为线程共享...</summary>
    <content type="html"><![CDATA[<!-- more -->
<figure><figcaption></figcaption></figure>
<h1>1. 类的加载过程</h1>
<h2> 1.1 加载过程介绍</h2>
<p>如果 JVM 想要执行这个 .class 文件，我们需要将其装进一个类加载器中，它就像一个搬运工一样，会把所有的 .class 文件全部搬进 JVM 里面来。</p>
<figure><figcaption></figcaption></figure>
<p>重点知识：</p>
<ul>
<li>Java 文件经过编译后变成 .class 字节码文件；</li>
<li>字节码文件通过类加载器被搬运到 JVM 虚拟机中；</li>
<li>虚拟机主要的 5 大块：方法区，堆都为线程共享区域，有线程安全问题，栈和本地方法栈和计数器都是独享区域，不存在线程安全问题，而 JVM 的调优主要就是围绕堆，栈两大块进行。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 1.2 类加载流程</h2>
<p>类加载的过程包括了<strong>加载、验证、准备、解析、初始化</strong>五个阶段。</p>
<p>在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定（也成为动态绑定或晚期绑定）。</p>
<p>另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p>
<figure><figcaption></figcaption></figure>
<ul>
<li>
<p><strong>加载</strong>：查找并加载类的二进制数据，在 Java 堆中也创建一个 java.lang.Class 类的对象；</p>
</li>
<li>
<p><strong>连接</strong>：连接又包含三块内容：验证、准备、初始化；</p>
<ul>
<li>
<ul>
<li>1）验证：文件格式、元数据、字节码、符号引用验证；</li>
</ul>
</li>
<li>2）准备：为类的静态变量分配内存，并将其初始化为默认值；</li>
<li>3）解析：把类中的符号引用转换为直接引用。</li>
</ul>
</li>
<li>
<p><strong>初始化</strong>：为类的静态变量赋予正确的初始值；</p>
</li>
<li>
<p><strong>使用</strong>：new出对象程序中使用；</p>
</li>
<li>
<p><strong>卸载</strong>：执行垃圾回收。</p>
</li>
</ul>
<h2> 1.3 类加载器</h2>
<p>加载一个 Class 类的顺序也是有优先级的，类加载器从最底层开始往上的顺序是这样的：</p>
<ul>
<li>BootStrap ClassLoader：rt.jar</li>
<li>Extention ClassLoader：加载扩展的 jar 包</li>
<li>App ClassLoader：指定的 classpath 下面的 jar 包</li>
<li>Custom ClassLoader：自定义的类加载器</li>
</ul>
<figure><figcaption></figcaption></figure>
<h1>2. 垃圾回收</h1>
<h2> 2.1 如何确定对象已死</h2>
<p>通常，判断一个对象是否被销毁有两种方法：</p>
<ul>
<li><strong>引用计数算法</strong>：为对象添加一个引用计数器，每当对象在一个地方被引用，则该计数器加 1，每当对象引用失效时，计数器减 1，但计数器为 0 的时候，就表明该对象没有被引用。</li>
<li><strong>可达性分析算法</strong>：通过一系列被称之为 “GC Roots” 的根节点开始，沿着引用链进行搜索，凡是在引用链上的对象都不会被回收。</li>
</ul>
<figure><figcaption></figcaption></figure>
<p>就像上图的那样，绿色部分的对象都在 GC Roots 的引用链上，就不会被垃圾回收器回收，灰色部分的对象没有在引用链上，自然就被判定为可回收对象。</p>
<h2> 2.2 垃圾回收算法</h2>
<h3> 2.2.1 标记--清除算法</h3>
<p>见名知义，“标记--清除算法” 就是对无效的对象进行标记，然后清除。</p>
<figure><figcaption></figcaption></figure>
<h3> 2.2.2 复制算法</h3>
<p>标记--复制算法就是把 Java 堆分成两块，每次垃圾回收时只使用其中一块，然后把存活的对象全部移动到另一块区域。</p>
<figure><figcaption></figcaption></figure>
<h3> 2.2.3 标记--整理算法</h3>
<p><strong>“标记--整理算法” 算是一种折中的垃圾收集算法</strong>，在对象标记的过程，和前面两个执行的是一样步骤。</p>
<p>进行标记之后，存活的对象会移动到堆的一端，然后直接清理存活对象以外的区域就可以了。这样，既避免了内存碎片，也不存在堆空间浪费的说法了。</p>
<p>但是，每次进行垃圾回收的时候，都要暂停所有的用户线程，特别是对老年代的对象回收，则需要更长的回收时间，这对用户体验是非常不好的。</p>
<figure><figcaption></figcaption></figure>
<h2> 2.3 垃圾收集器</h2>
<h3> 2.3.1 Serial 收集器</h3>
<p><strong>Serial 收集器是最基础、历史最悠久的收集器，是一个单线程工作的收集器。</strong></p>
<p>使用 Serial收集器，无论是进行 Minor gc 还是 Full GC ，清理堆空间时，所有的应用线程都会被暂停。</p>
<figure><figcaption></figcaption></figure>
<h3> 2.3.2 ParNew 收集器</h3>
<p><strong>ParNew 收集器实质上是 Serial 收集器的多线程并行版本。</strong></p>
<p>除了同时使用多条线程进行垃圾收集之外，其余的行为包括 Serial 收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与 Serial 收集器完全一致。</p>
<figure><figcaption></figcaption></figure>
<h3> 2.3.3 Parallel Scavenge 收集器</h3>
<p><strong>Parallel Scavenge 收集器也是一款新生代收集器，基于标记——复制算法实现</strong>，能够并行收集的多线程收集器和 ParNew 非常相似。</p>
<p>Parallel Scavenge 收集器的目标则是达到一个可控制的吞吐量（Throughput）。</p>
<p>所谓吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比值。如果虚拟机完成某个任务，用户代码加上垃圾收集总共耗费了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。</p>
<h3> 2.3.4 Serial Old 收集器</h3>
<p><strong>Serial Old 是 Serial 收集器的老年代版本</strong>，它同样是一个单线程收集器，使用 “标记-整理算法”。</p>
<figure><figcaption></figcaption></figure>
<h3> 2.3.5 Parallel Old 收集器</h3>
<p><strong>Parallel Old 是 Parallel Scavenge 收集器的老年代版本</strong>，支持多线程并发收集，基于标记-整理算法实现。</p>
<figure><figcaption></figcaption></figure>
<h3> 2.3.6 CMS收集器</h3>
<p><strong>CMS 收集器设计的初衷是为了消除 Parallel 收集器和 Serial 收集器 Full gc 周期中的长时间停顿。</strong></p>
<p>CMS收集器在 Minor gc 时会暂停所有的应用线程，并以多线程的方式进行垃圾回收。</p>
<figure><figcaption></figcaption></figure>
<h3> 2.3.7 垃圾收集器对比</h3>
<figure><figcaption></figcaption></figure>
<h1>3. 运行时数据区域</h1>
<p>什么是运行时数据区域？</p>
<p>Java 程序在运行时，会为 JVM 单独划出一块内存区域，而这块内存区域又可以再次划分出一块运行时数据区，<strong>运行时数据区域大致可以分为五个部分</strong>：</p>
<figure><figcaption></figcaption></figure>
<h2> 3.1 Java 堆（Heap）</h2>
<p>栈管运行，堆管存储，<strong>虚拟机栈负责运行代码，而虚拟机堆负责存储数据。</strong></p>
<p>Java 堆区具有下面几个特点：</p>
<ul>
<li>存储的是我们 new 来的对象，不存放基本类型和对象引用；</li>
<li>由于创建了大量的对象，垃圾回收器主要工作在这块区域；</li>
<li>线程共享区域，因此是线程不安全的；</li>
<li>能够发生 OutOfMemoryError。</li>
</ul>
<p>其实，Java 堆区还可以划分为新生代和老年代，新生代又可以进一步划分为 Eden 区、Survivor 1 区、Survivor 2 区。</p>
<h2> 3.2 虚拟机栈（JVM Stacks）</h2>
<p>Java 虚拟机栈也是一块被开发者重点关注的地方，同样，先把干货放上来：</p>
<ul>
<li>Java 虚拟机栈是线程私有的，每一个线程都有独享一个虚拟机栈，它的生命周期与线程相同。</li>
<li>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</li>
<li>存放基本数据类型（boolean、byte、char、short、int、float、long、double）以及对象的引用（reference  类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和 returnAddress 类型（指向了一条字节码指令的地址）。</li>
<li>这个区域可能有两种异常：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常；如果虚拟机栈可以动态扩，当扩展时无法申请到足够的内存时会抛出 OutOfMemoryError异常。</li>
</ul>
<h2> 3.3 本地方法栈（Native Method Stacks）</h2>
<p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，其区别不过是<strong>虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的 Native 方法服务。</strong></p>
<p>虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如 Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。</p>
<p>与虚拟机栈一样，本地方法栈区域也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>
<h2> 3.4 方法区（Method Area）</h2>
<p>方法区也是一块被重点关注的区域，主要特点如下：</p>
<ul>
<li>线程共享区域，因此这是线程不安全的区域。</li>
<li>它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li>
<li>当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</li>
</ul>
<h2> 3.5 程序计数器（Program Counter Register）</h2>
<p>它的作用就是记录当前线程所执行的位置。这样，当线程重新获得 CPU 的执行权的时候，就直接从记录的位置开始执行，分支、循环、跳转、异常处理也都依赖这个程序计数器来完成。</p>
<h1>4. JVM堆内存</h1>
<h2> 4.1 堆内存结构</h2>
<p><strong>Java 堆区可以划分为新生代和老年代，新生代又可以进一步划分为 Eden 区、Survivor 1 区、Survivor 2 区</strong>。具体比例参数的话，可以看一下这张图。</p>
<figure><figcaption></figcaption></figure>
<h2> 4.2 GC类型</h2>
<ul>
<li>Minor GC/Young GC：针对新生代的垃圾收集；</li>
<li>Major GC/Old GC：针对老年代的垃圾收集。</li>
<li>Full GC：针对整个 Java 堆以及方法区的垃圾收集。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 4.3 Minor GC 工作原理</h2>
<p>通常情况下，初次被创建的对象存放在新生代的 Eden 区，当第一次触发 Minor GC，Eden 区存活的对象被转移到 Survivor区 的某一块区域。</p>
<p>以后再次触发 Minor GC 的时候，Eden区的对象连同一块 Survivor 区的对象一起，被转移到了另一块 Survivor 区。</p>
<p>可以看到，这两块 Survivor 区我们每一次只使用其中的一块，这样也仅仅是浪费了一块 Survivor 区。</p>
<figure><figcaption></figcaption></figure>
<h2> 4.4 Full GC 工作原理</h2>
<p>老年代是存储长期存活的对象的，占满时就会触发我们最常听说的 Full GC，期间会停止所有线程等待 GC 的完成。</p>
<p>所以对于响应要求高的应用应该尽量去减少发生 Full GC 从而避免响应超时的问题。</p>
<figure><figcaption></figcaption></figure>
<h1>5. GC 日志</h1>
<h2> 5.1 GC 日志开启</h2>
<p>偷个懒，直接贴网上的内容：</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> 5.2 理解 GC 日志</h2>
<p>Minor GC 日志：</p>
<p>Full GC 日志：</p>
<h1>6. JVM 常用命令</h1>
<p>Sun JDK监控和故障处理命令有 jps、jstat、jmap、jhat、jstack、jinfo。</p>
<h2> 6.1 jps</h2>
<p>JVM Process Status Tool，<strong>显示指定系统内所有的 HotSpot 虚拟机进程。</strong></p>
<h2> 6.2 jstat</h2>
<p>jstat(JVM statistics Monitoring)是用于<strong>监视虚拟机运行时状态</strong>信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。</p>
<h2> 6.3 jmap</h2>
<p><strong>dump 堆到文件</strong>，可用于对文件的分析。</p>
<h2> 6.4 jhat</h2>
<p>jhat(JVM Heap Analysis Tool)命令是与 jmap 搭配使用，<strong>用来分析 jmap 生成的 dump</strong>，jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 的分析结果后，可以在浏览器中查看。</p>
<p>在此要注意，一般不会直接在服务器上进行分析，因为 jhat 是一个耗时并且耗费硬件资源的过程，一般把服务器生成的 dump 文件复制到本地或其他机器上进行分析。</p>
<h2> 6.5 jstack</h2>
<p><strong>jstack 用于生成 java 虚拟机当前时刻的线程快照。</strong></p>
<p>线程快照是当前 java 虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。</p>
<p>线程出现停顿的时候通过 jstack 来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。</p>
<h1>7. 性能检测工具</h1>
<h2> 7.1 jconsole</h2>
<p>Jconsole（Java Monitoring and Management Console）是从 java5 开始，在 JD K中自带的 java 监控和管理控制台，<strong>用于对 JVM 中内存，线程和类等的监控</strong>，是一个基于 JMX（java management extensions）的 GUI 性能监测工具。</p>
<p>jconsole 使用 jvm 的扩展机制获取并展示虚拟机中运行的应用程序的性能和资源消耗等信息。</p>
<p>概览：包括堆内存使用情况、线程、类、CPU 使用情况四项信息的曲线图。</p>
<figure><figcaption></figcaption></figure>
<p>线程：相当于可视化的 jstack 命令，同时也可以点击 “检测死锁” 来检查线程之间是否有死锁的情况。</p>
<figure><figcaption></figcaption></figure>
<h2> 7.2 VisualVM</h2>
<p><strong>VisualVM（All-in-One Java Troubleshooting Tool）是功能最强大的运行监视和故障处理程序之一</strong>，曾经在很长一段时间内是 Oracle 官方主力发展的虚拟机故障处理工具。</p>
<p>相比一些第三方工具，VisualVM 有一个很大的优点：不需要被监视的程序基于特殊 Agent 去运行，因此它的通用性很强，对应用程序实际性能的影响也较小，使得它可以直接应用在生产环境中。</p>
<p>Visual GC 是常常使用的一个功能，需要通过插件，可以明显的看到年轻代、老年代的内存变化，以及 gc 频率、gc 的时间等，感觉这个插件很酷！</p>
<figure><figcaption></figcaption></figure>
<p>监控的主页其实也就是，cpu、内存、类、线程的图表，这里面可以执行堆 dump。</p>
<figure><figcaption></figcaption></figure>
<p>最后就是堆 dump：</p>
<figure><figcaption></figcaption></figure>
<h1>8. JVM 调优</h1>
<h2> 8.1 选择合适的垃圾回收器</h2>
<ul>
<li><strong>CPU 单核</strong>：那么毫无疑问 Serial 垃圾收集器是你唯一的选择；</li>
<li><strong>CPU 多核</strong>：关注吞吐量 ，那么选择 PS+PO 组合；</li>
<li><strong>CPU 多核</strong>：关注用户停顿时间，JDK 版本 1.6 或者 1.7，那么选择 CMS；</li>
<li><strong>CPU 多核</strong>：关注用户停顿时间，JDK1.8 及以上，JVM 可用内存 6G 以上，那么选择 G1。</li>
</ul>
<p>参数配置：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.2 调整内存大小</h2>
<p><strong>现象</strong>：垃圾收集频率非常频繁。</p>
<p><strong>原因</strong>：如果内存太小，就会导致频繁的需要进行垃圾收集才能释放出足够的空间来创建新的对象，所以增加堆内存大小的效果是非常显而易见的。</p>
<p><strong>注意</strong>：如果垃圾收集次数非常频繁，但是每次能回收的对象非常少，那么这个时候并非内存太小，而可能是内存泄露导致对象无法回收，从而造成频繁 GC。</p>
<p>参数配置：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.3 设置符合预期的停顿时间</h2>
<p><strong>现象</strong>：程序间接性的卡顿</p>
<p><strong>原因</strong>：如果没有确切的停顿时间设定，垃圾收集器以吞吐量为主，那么垃圾收集时间就会不稳定。</p>
<p><strong>注意</strong>：不要设置不切实际的停顿时间，单次时间越短也意味着需要更多的 GC 次数才能回收完原有数量的垃圾.</p>
<p>参数配置：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.4 调整内存区域大小比率</h2>
<p><strong>现象</strong>：某一个区域的GC频繁，其他都正常。</p>
<p><strong>原因</strong>：如果对应区域空间不足，导致需要频繁GC来释放空间，在JVM堆内存无法增加的情况下，可以调整对应区域的大小比率。</p>
<p><strong>注意</strong>：也许并非空间不足，而是因为内存泄造成内存无法回收，从而导致 GC 频繁。</p>
<p>参数配置：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.5 调整对象升老年代的年龄</h2>
<p><strong>现象</strong>：老年代频繁 GC，每次回收的对象很多。</p>
<p><strong>原因</strong>：如果升代年龄小，新生代的对象很快就进入老年代了，导致老年代对象变多，而这些对象其实在随后的很短时间内就可以回收，这时候可以调整对象的升级代年龄，让对象不那么容易进入老年代解决老年代空间不足频繁 GC 问题。</p>
<p><strong>注意</strong>：增加了年龄之后，这些对象在新生代的时间会变长可能导致新生代的 GC 频率增加，并且频繁复制这些对象新生的 GC 时间也可能变长。</p>
<p>配置参数：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.6 调整大对象的标准</h2>
<p><strong>现象</strong>：老年代频繁 GC，每次回收的对象很多,而且单个对象的体积都比较大。</p>
<p><strong>原因</strong>：如果大量的大对象直接分配到老年代，导致老年代容易被填满而造成频繁 GC，可设置对象直接进入老年代的标准。</p>
<p><strong>注意</strong>：这些大对象进入新生代后可能会使新生代的 GC 频率和时间增加。</p>
<p>配置参数：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.7 调整GC的触发时机</h2>
<p><strong>现象</strong>：CMS，G1 经常 Full GC，程序卡顿严重。</p>
<p><strong>原因</strong>：G1 和 CMS 部分 GC 阶段是并发进行的，业务线程和垃圾收集线程一起工作，也就说明垃圾收集的过程中业务线程会生成新的对象，所以在 GC  的时候需要预留一部分内存空间来容纳新产生的对象，如果这个时候内存空间不足以容纳新产生的对象，那么JVM就会停止并发收集暂停所有业务线程（STW）来保证垃圾收集的正常运行。这个时候可以调整GC触发的时机（比如在老年代占用 60% 就触发 GC），这样就可以预留足够的空间来让业务线程创建的对象有足够的空间分配。</p>
<p><strong>注意</strong>：提早触发 GC 会增加老年代 GC 的频率。</p>
<p>配置参数：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.8 调整 JVM本地内存大小</h2>
<p><strong>现象</strong>：GC 的次数、时间和回收的对象都正常，堆内存空间充足，但是报 OOM</p>
<p><strong>原因</strong>：JVM 除了堆内存之外还有一块堆外内存，这片内存也叫本地内存，可是这块内存区域不足了并不会主动触发 GC，只有在堆内存区域触发的时候顺带会把本地内存回收了，而一旦本地内存分配不足就会直接报 OOM 异常。</p>
<p><strong>注意</strong>：本地内存异常的时候除了上面的现象之外，异常信息可能是 OutOfMemoryError：Direct buffer memory。解决方式除了调整本地内存大小之外，也可以在出现此异常时进行捕获，手动触发 GC（System.gc()）。</p>
<p>配置参数：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1>9. JVM 调试实战</h1>
<h2> 9.1 网站流量浏览量暴增后，网站反应页面响很慢</h2>
<p>1、问题推测：在测试环境测速度比较快，但是一到生产就变慢，所以推测可能是因为垃圾收集导致的业务线程停顿。</p>
<p>2、定位：为了确认推测的正确性，在线上通过 jstat -gc 指令 看到 JVM 进行 GC 次数频率非常高，GC 所占用的时间非常长，所以基本推断就是因为 GC 频率非常高，所以导致业务线程经常停顿，从而造成网页反应很慢。</p>
<p>3、解决方案：因为网页访问量很高，所以对象创建速度非常快，导致堆内存容易填满从而频繁 GC，所以这里问题在于新生代内存太小，所以这里可以增加 JVM 内存就行了，所以初步从原来的 2G 内存增加到 16G 内存。</p>
<p>4、第二个问题：增加内存后的确平常的请求比较快了，但是又出现了另外一个问题，就是不定期的会间断性的卡顿，而且单次卡顿的时间要比之前要长很多。</p>
<p>5、问题推测：之前的优化加大了内存，所以推测可能是因为内存加大了，从而导致单次 GC 的时间变长从而导致间接性的卡顿。</p>
<p>6、定位：还是通过 jstat -gc 指令 查看到 的确 FGC 次数并不是很高，但是花费在 FGC 上的时间是非常高的，根据 GC 日志 查看到单次 FGC 的时间有达到几十秒的。</p>
<p>7、解决方案：因为 JVM 默认使用的是 PS+PO 的组合，PS+PO 垃圾标记和收集阶段都是  STW，所以内存加大了之后，需要进行垃圾回收的时间就变长了，所以这里要想避免单次 GC 时间过长，所以需要更换并发类的收集器，因为当前的 JDK 版本为 1.7，所以最后选择 CMS 垃圾收集器，根据之前垃圾收集情况设置了一个预期的停顿的时间，上线后网站再也没有了卡顿问题。</p>
<h2> 9.2 后台导出数据引发的 OOM</h2>
<p><strong>问题描述</strong>：公司的后台系统，偶发性的引发 OOM 异常，堆内存溢出。</p>
<p>1、因为是偶发性的，所以第一次简单的认为就是堆内存不足导致，所以单方面的加大了堆内存从 4G 调整到 8G。</p>
<p>2、但是问题依然没有解决，只能从堆内存信息下手，通过开启了 -XX:+HeapDumpOnOutOfMemoryError 参数 获得堆内存的 dump 文件。</p>
<p>3、VisualVM 对堆 dump 文件进行分析，通过 VisualVM 查看到占用内存最大的对象是 String 对象，本来想跟踪着 String  对象找到其引用的地方，但 dump 文件太大，跟踪进去的时候总是卡死，而 String  对象占用比较多也比较正常，最开始也没有认定就是这里的问题，于是就从线程信息里面找突破点。</p>
<p>4、通过线程进行分析，先找到了几个正在运行的业务线程，然后逐一跟进业务线程看了下代码，发现有个引起我注意的方法，导出订单信息。</p>
<p>5、因为订单信息导出这个方法可能会有几万的数据量，首先要从数据库里面查询出来订单信息，然后把订单信息生成 excel，这个过程会产生大量的 String 对象。</p>
<p>6、为了验证自己的猜想，于是准备登录后台去测试下，结果在测试的过程中发现到处订单的按钮前端居然没有做点击后按钮置灰交互事件，结果按钮可以一直点，因为导出订单数据本来就非常慢，使用的人员可能发现点击后很久后页面都没反应，结果就一直点，结果就大量的请求进入到后台，堆内存产生了大量的订单对象和 EXCEL 对象，而且方法执行非常慢，导致这一段时间内这些对象都无法被回收，所以最终导致内存溢出。</p>
<p>7、知道了问题就容易解决了，最终没有调整任何 JVM 参数，只是在前端的导出订单按钮上加上了置灰状态，等后端响应之后按钮才可以进行点击，然后减少了查询订单信息的非必要字段来减少生成对象的体积，然后问题就解决了。</p>
<h1>10. JVM参数设置优化</h1>
<p>不管是YGC还是Full GC,GC过程中都会对导致程序运行中中断,正确的选择<a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037029.html" target="_blank" rel="noopener noreferrer">不同的GC策略</a>,调整JVM、GC的参数，可以极大的减少由于GC工作，而导致的程序运行中断方面的问题，进而适当的提高Java程序的工作效率。</p>
<h2> JVM参数的含义</h2>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>含义</th>
<th>默认值</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>-Xms</td>
<td>初始堆大小</td>
<td>物理内存的1/64(&lt;1GB)</td>
<td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>
</tr>
<tr>
<td>-Xmx</td>
<td>最大堆大小</td>
<td>物理内存的1/4(&lt;1GB)</td>
<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>
</tr>
<tr>
<td>-Xmn</td>
<td>年轻代大小(1.4or lator)</td>
<td></td>
<td><strong>注意</strong>：此处的大小是（eden+ 2 survivor  space).与jmap -heap中显示的New gen是不同的。   整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.   增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>
</tr>
<tr>
<td>-XX:NewSize</td>
<td>设置年轻代大小(for 1.3/1.4)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:MaxNewSize</td>
<td>年轻代最大值(for 1.3/1.4)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:PermSize</td>
<td>设置持久代(perm gen)初始值</td>
<td>物理内存的1/64</td>
<td></td>
</tr>
<tr>
<td>-XX:MaxPermSize</td>
<td>设置持久代最大值</td>
<td>物理内存的1/4</td>
<td></td>
</tr>
<tr>
<td>-Xss</td>
<td>每个线程的堆栈大小</td>
<td></td>
<td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右   一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）   和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:"”   -Xss is translated in a VM flag named ThreadStackSize”   一般设置这个值就可以了。</td>
</tr>
<tr>
<td>-<em>XX:ThreadStackSize</em></td>
<td>Thread Stack Size</td>
<td></td>
<td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256  prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in  5.0 and earlier); all others 0.]</td>
</tr>
<tr>
<td>-XX:NewRatio</td>
<td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>
<td></td>
<td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5   Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>
</tr>
<tr>
<td>-XX:SurvivorRatio</td>
<td>Eden区与Survivor区的大小比值</td>
<td></td>
<td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>
</tr>
<tr>
<td>-XX:LargePageSizeInBytes</td>
<td>内存页的大小不可设置过大， 会影响Perm的大小</td>
<td></td>
<td>=128m</td>
</tr>
<tr>
<td>-XX:+UseFastAccessorMethods</td>
<td>原始类型的快速优化</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:+DisableExplicitGC</td>
<td>关闭System.gc()</td>
<td></td>
<td>这个参数需要严格的测试</td>
</tr>
<tr>
<td>-XX:MaxTenuringThreshold</td>
<td>垃圾最大年龄</td>
<td></td>
<td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率   该参数只有在串行GC时才有效.</td>
</tr>
<tr>
<td>-XX:+AggressiveOpts</td>
<td>加快编译</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:+UseBiasedLocking</td>
<td>锁机制的性能改善</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-Xnoclassgc</td>
<td>禁用垃圾回收</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:SoftRefLRUPolicyMSPerMB</td>
<td>每兆堆空闲空间中SoftReference的存活时间</td>
<td>1s</td>
<td>softly reachable objects will remain alive for some amount of time after  the last time they were referenced. The default value is one second of  lifetime per free megabyte in the heap</td>
</tr>
<tr>
<td>-XX:PretenureSizeThreshold</td>
<td>对象超过多大是直接在旧生代分配</td>
<td>0</td>
<td>单位字节 新生代采用Parallel Scavenge GC时无效   另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>
</tr>
<tr>
<td>-XX:TLABWasteTargetPercent</td>
<td>TLAB占eden区的百分比</td>
<td>1%</td>
<td></td>
</tr>
<tr>
<td>-XX:+<em>CollectGen0First</em></td>
<td>FullGC时是否先YGC</td>
<td>false</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>并行收集器相关参数</strong></p>
<table>
<thead>
<tr>
<th>-XX:+UseParallelGC</th>
<th>Full GC采用parallel MSC   (此项待验证)</th>
<th></th>
<th>选择垃圾收集器为并行收集器.此配置仅对年轻代有效.即上述配置下,年轻代使用并发收集,而年老代仍旧使用串行收集.(此项待验证)</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseParNewGC</td>
<td>设置年轻代为并行收集</td>
<td></td>
<td>可与CMS收集同时使用   JDK5.0以上,JVM会根据系统配置自行设置,所以无需再设置此值</td>
</tr>
<tr>
<td>-XX:ParallelGCThreads</td>
<td>并行收集器的线程数</td>
<td></td>
<td>此值最好配置与处理器数目相等 同样适用于CMS</td>
</tr>
<tr>
<td>-XX:+UseParallelOldGC</td>
<td>年老代垃圾收集方式为并行收集(Parallel Compacting)</td>
<td></td>
<td>这个是JAVA 6出现的参数选项</td>
</tr>
<tr>
<td>-XX:MaxGCPauseMillis</td>
<td>每次年轻代垃圾回收的最长时间(最大暂停时间)</td>
<td></td>
<td>如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值.</td>
</tr>
<tr>
<td>-XX:+UseAdaptiveSizePolicy</td>
<td>自动选择年轻代区大小和相应的Survivor区比例</td>
<td></td>
<td>设置此选项后,并行收集器会自动选择年轻代区大小和相应的Survivor区比例,以达到目标系统规定的最低相应时间或者收集频率等,此值建议使用并行收集器时,一直打开.</td>
</tr>
<tr>
<td>-XX:GCTimeRatio</td>
<td>设置垃圾回收时间占程序运行时间的百分比</td>
<td></td>
<td>公式为1/(1+n)</td>
</tr>
<tr>
<td>-XX:+<em>ScavengeBeforeFullGC</em></td>
<td>Full GC前调用YGC</td>
<td>true</td>
<td>Do young generation GC prior to a full GC. (Introduced in 1.4.1.)</td>
</tr>
</tbody>
</table>
<p><strong>CMS****相关参数</strong></p>
<table>
<thead>
<tr>
<th>-XX:+UseConcMarkSweepGC</th>
<th>使用CMS内存收集</th>
<th></th>
<th>测试中配置这个以后,-XX:NewRatio=4的配置失效了,原因不明.所以,此时年轻代大小最好用-Xmn设置.???</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+AggressiveHeap</td>
<td></td>
<td></td>
<td>试图是使用大量的物理内存   长时间大内存使用的优化，能检查计算资源（内存， 处理器数量）   至少需要256MB内存   大量的CPU／内存， （在1.4.1在4CPU的机器上已经显示有提升）</td>
</tr>
<tr>
<td>-XX:CMSFullGCsBeforeCompaction</td>
<td>多少次后进行内存压缩</td>
<td></td>
<td>由于并发收集器不对内存空间进行压缩,整理,所以运行一段时间以后会产生"碎片",使得运行效率降低.此值设置运行多少次GC以后对内存空间进行压缩,整理.</td>
</tr>
<tr>
<td>-XX:+CMSParallelRemarkEnabled</td>
<td>降低标记停顿</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX+UseCMSCompactAtFullCollection</td>
<td>在FULL GC的时候， 对年老代的压缩</td>
<td></td>
<td>CMS是不会移动内存的， 因此， 这个非常容易产生碎片， 导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 增加这个参数是个好习惯。   可能会影响性能,但是可以消除碎片</td>
</tr>
<tr>
<td>-XX:+UseCMSInitiatingOccupancyOnly</td>
<td>使用手动定义初始化定义开始CMS收集</td>
<td></td>
<td>禁止hostspot自行触发CMS GC</td>
</tr>
<tr>
<td>-XX:CMSInitiatingOccupancyFraction=70</td>
<td>使用cms作为垃圾回收   使用70％后开始CMS收集</td>
<td>92</td>
<td>为了保证不出现promotion failed(见下面介绍)错误,该值的设置需要满足以下公式**<a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html#CMSInitiatingOccupancyFraction_value" target="_blank" rel="noopener noreferrer">CMSInitiatingOccupancyFraction计算公式</a>**</td>
</tr>
<tr>
<td>-XX:CMSInitiatingPermOccupancyFraction</td>
<td>设置Perm Gen使用到达多少比率时触发</td>
<td>92</td>
<td></td>
</tr>
<tr>
<td>-XX:+CMSIncrementalMode</td>
<td>设置为增量模式</td>
<td></td>
<td>用于单CPU情况</td>
</tr>
<tr>
<td>-XX:+CMSClassUnloadingEnabled</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>辅助信息</strong></p>
<table>
<thead>
<tr>
<th>-XX:+PrintGC</th>
<th></th>
<th></th>
<th>输出形式:  [GC 118250K-&gt;113543K(130112K),  0.0094143 secs]   [Full GC 121376K-&gt;10414K(130112K), 0.0650971 secs]</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+PrintGCDetails</td>
<td></td>
<td></td>
<td>输出形式:[GC [DefNew: 8614K-&gt;781K(9088K),  0.0123035 secs] 118250K-&gt;113543K(130112K), 0.0124633 secs]   [GC [DefNew: 8614K-&gt;8614K(9088K), 0.0000665 secs][Tenured:  112761K-&gt;10414K(121024K), 0.0433488 secs] 121376K-&gt;10414K(130112K),  0.0436268 secs]</td>
</tr>
<tr>
<td>-XX:+PrintGCTimeStamps</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:+PrintGC:PrintGCTimeStamps</td>
<td></td>
<td></td>
<td>可与-XX:+PrintGC  -XX:+PrintGCDetails混合使用   输出形式:11.851: [GC 98328K-&gt;93620K(130112K),  0.0082960 secs]</td>
</tr>
<tr>
<td>-XX:+PrintGCApplicationStoppedTime</td>
<td>打印垃圾回收期间程序暂停的时间.可与上面混合使用</td>
<td></td>
<td>输出形式:Total time for which application threads  were stopped: 0.0468229 seconds</td>
</tr>
<tr>
<td>-XX:+PrintGCApplicationConcurrentTime</td>
<td>打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用</td>
<td></td>
<td>输出形式:Application time: 0.5291524 seconds</td>
</tr>
<tr>
<td>-XX:+PrintHeapAtGC</td>
<td>打印GC前后的详细堆栈信息</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-Xloggc:filename</td>
<td>把相关日志信息记录到文件以便分析.   与上面几个配合使用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:+PrintClassHistogram</td>
<td>garbage collects before printing the histogram.</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:+PrintTLAB</td>
<td>查看TLAB空间的使用情况</td>
<td></td>
<td></td>
</tr>
<tr>
<td>XX:+PrintTenuringDistribution</td>
<td>查看每次minor GC后新的存活周期的阈值</td>
<td></td>
<td>Desired survivor size 1048576 bytes, new  threshold 7 (max 15)   new threshold 7即标识新的存活周期的阈值为7。</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-08-22T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">本地事务、分布式事务及seata</title>
    <id>https://topjf.github.io/java/local-cloud-affairs-seata.html</id>
    <link href="https://topjf.github.io/java/local-cloud-affairs-seata.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">image-20211004222533328 image-20211004223125542 1、事物本质：原子性、一致性、隔离性、持久性 数据库事务的几个特性：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation) 和持久性(Durabilily),简称就是ACID; ●原子性：一系列的操作整体...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>分布式事物<a name="分布式事物"></a></h1>
<figure><figcaption>image-20211004222533328</figcaption></figure>
<figure><figcaption>image-20211004223125542</figcaption></figure>
<h2> 1、事物本质：原子性、一致性、隔离性、持久性</h2>
<p>数据库事务的几个特性：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation)
和持久性(Durabilily),简称就是ACID;
●<strong>原子性</strong>：一系列的操作整体不可拆分，要么同时成功，要么同时失败
●<strong>一致性</strong>：数据在事务的前后，业务整体一致。
■转账。A:1000; B:1000;转200事务成功;A: 800B: 1200
●<strong>隔离性</strong>：事务之间互相隔离。
●<strong>持久性</strong>:一旦事务成功，数据一定会落盘在数据库。</p>
<h2> 2、隔离级别 Isolation：读未提交 &lt; 读已提交 &lt; 可重复读（MySQL默认） &lt; 序列化</h2>
<p>级别越大，并发性越低。</p>
<h3> 脏读</h3>
<p>一个事务可以读取另一个事务未提交的数据</p>
<h3> 不可重复读</h3>
<p>一个事务可以读取另一个事务已提交的数据  单条记录前后不匹配</p>
<h3> 虚读（幻读）</h3>
<p>一个事务可以读取另一个事务已提交的数据  读取的数据前后多了点或者少了点</p>
<h3> READ UNCOMTTTED (读未提交)</h3>
<p>​ 该隔离级别的事务会读到其它未提交事务的数据，此现象也称之为<code>**脏读**</code>。</p>
<h3> READ COMMITTED (读已提交)</h3>
<p>​ 一个事务可以读取另一个已提交的事务，多次读取会造成不一样的结果，此现象称为<code>**不可重复读问题**</code>，Oracle和SQL Server的默认隔离级别。</p>
<h3> REPEATABLE READ (可重复读)</h3>
<p>​ 该隔离级别是MySQL默认的隔离级别，在同一个事务里，select 的结果是事务开始时时间点的状态，因此，同样的select操作读到的结果会是一致的， 但是，会有<strong>幻读现象</strong>。MySQL的InnoDB引擎可以通过next-keylocks 机制(参考下文行锁的算法"一节)来避免幻读。</p>
<h3> SERIALIZABLE (序列化)</h3>
<p>​ 在该隔离级别下事务都是串行顺序执行的，MySQL数据库的InnoDB 引擎会给读操作隐式加一把读共享锁，从而避免了脏读、不可重读复读和幻读问题。</p>
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DEFAULT</td>
<td style="text-align:left">使用底层数据存储的默认隔离级别。 所有其他级别对应于 JDBC 隔离级别。</td>
</tr>
<tr>
<td style="text-align:center">READ_UNCOMMITTED</td>
<td style="text-align:left">指示可能发生脏读、不可重复读和幻读的常量。 此级别允许由一个事务更改的行在提交该行中的任何更改之前被另一个事务读取（“脏读”）。 如果任何更改被回滚，则第二个事务将检索到无效行。</td>
</tr>
<tr>
<td style="text-align:center">READ_COMMITTED</td>
<td style="text-align:left">指示可能发生脏读、不可重复读和幻读的常量。 此级别允许由一个事务更改的行在提交该行中的任何更改之前被另一个事务读取（“脏读”）。 如果任何更改被回滚，则第二个事务将检索到无效行。</td>
</tr>
<tr>
<td style="text-align:center"><strong>REPEATABLE_READ</strong></td>
<td style="text-align:left">表示防止脏读的常量； 可能会发生不可重复读和幻读。 此级别仅禁止事务读取其中包含未提交更改的行。<em>MySQL 默认的隔离级别</em></td>
</tr>
<tr>
<td style="text-align:center">SERIALIZABLE</td>
<td style="text-align:left">指示防止脏读、不可重复读和幻读的常量。 该级别包括ISOLATION_REPEATABLE_READ的禁止，并进一步禁止这样一种情况，即一个事务读取满足WHERE条件的所有行，第二个事务插入满足WHERE条件的行，第一个事务为相同条件重新读取，检索额外的“第二次阅读中的幻影”行。</td>
</tr>
</tbody>
</table>
<h3> 相关命令</h3>
<p>查看全局事务隔离级别：SELECT @@global.tx_isolation</p>
<p>设置全局事务隔离级别：set global transaction isolation level read committed;</p>
<p><strong>查看当前会话事务隔离级别：SELECT @@tx_isolation</strong></p>
<p><strong>设置当前会话事务隔离级别：set session transaction isolation level read committed;</strong></p>
<p>查看mysql默认自动提交状态：select @@autocommit</p>
<p>设置mysql默认自动提交状态：set autocommit = 0;【不自动提交】</p>
<p><strong>开启一个事务：start transaction;</strong></p>
<p><strong>提交事务：commit</strong></p>
<p><strong>回滚事务： rollback</strong></p>
<p>在事务中创建一个保存点：savepoint tx1</p>
<p>回滚到保存点：rollback to tx1</p>
<h2> 3、7种传播行为 Propagation：常用（required、required_new）</h2>
<table>
<thead>
<tr>
<th style="text-align:center">传播行为</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>REQUIRED（常用）</strong></td>
<td style="text-align:left">支持当前事务，如果不存在则创建一个新事务。<br>这是事务注释的默认设置。</td>
</tr>
<tr>
<td style="text-align:center">SUPPORTS</td>
<td style="text-align:left">支持当前事务，如果不存在则以非事务方式执行。</td>
</tr>
<tr>
<td style="text-align:center">MANDATORY</td>
<td style="text-align:left">支持当前事务，如果不存在则抛出异常。</td>
</tr>
<tr>
<td style="text-align:center"><strong>REQUIRES_NEW（常用）</strong></td>
<td style="text-align:left">创建一个新事务，存不存在都创建新的事物。</td>
</tr>
<tr>
<td style="text-align:center">NOT_SUPPORTED</td>
<td style="text-align:left">以非事务方式执行，如果存在则暂停当前事务。</td>
</tr>
<tr>
<td style="text-align:center">NEVER</td>
<td style="text-align:left">以非事务方式执行，如果存在事务则抛出异常。</td>
</tr>
<tr>
<td style="text-align:center">NESTED</td>
<td style="text-align:left">如果当前事务存在，则在嵌套事务中执行，否则行为类似于REQUIRED 。</td>
</tr>
</tbody>
</table>
<h3> 1.4.1.   伪代码练习</h3>
<p>传播行为伪代码模拟：有a,b,c,d,e等5个方法，a中调用b,c,d,e方法的传播行为在小括号中标出</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p>
<ol>
<li>a方法的业务出现异常，会怎样？a,b,d回滚 c,e不回滚</li>
<li>d方法出现异常，会怎样？a,b,d回滚 c,e不回滚</li>
<li>e方法出现异常，会怎样？a,b,d,e回滚 c不回滚，e方法出异常会上抛影响到上级方法</li>
<li>b方法出现异常，会怎样？a,b回滚 c,d,e未执行</li>
</ol>
<p>加点难度：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p>
<ol>
<li>a方法业务出异常</li>
<li>e方法出异常</li>
<li>d方法出异常</li>
<li>h,i方法分别出异常</li>
<li>i方法出异常</li>
<li>f,g方法分别出异常</li>
</ol>
<h3> 1.4.2.   改造商品新增代码</h3>
<p>现在商品保存的方法结构如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了测试事务传播行为，我们在SpuInfoService接口中把saveSkuInfoWithSaleInfo、saveBaseAttrs、saveSpuDesc、saveSpuInfo声明为service接口方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再把SpuInfoServiceImpl实现类的对应方法改成public：</p>
<h3> 1.4.3.   测试1：同一 service + requires_new</h3>
<blockquote>
<p>springboot 1.x 使用事务需要在引导类上添加 @EnableTransactionManagement 注解开启事务支持</p>
<p>springboot 2.x 可直接使用 @Transactional 玩事务，传播行为默认是REQUIRED</p>
</blockquote>
<p>添加事务：</p>
<blockquote>
<p>这时，在保存商品的主方法中制造异常：</p>
<p>由于保存商品描述方法使用的是requires_new，spu应该会回滚，spu_desc应该保存成功。</p>
<p>清空pms_spu_desc表，再添加一个spu保存。</p>
<p>结果pms_spu_desc表中依然没有数据。</p>
<p>但是控制台打印了新增pms_spu_desc表的sql语句：</p>
<p>说明saveSpuDesc方法的事务回滚了，也就是说该方法配置的事务传播机制没有生效。</p>
</blockquote>
<p>解决方案：</p>
<ol>
<li>把service方法放到不同的service中</li>
<li>使用动态代理对象调用该方法</li>
</ol>
<h3> 1.4.4.   测试2：不同service + requires_new</h3>
<p>把saveSpuDesc方法放到SpuDescService中：</p>
<p>在实现类中实现该方法，可以把之前的实现copy过来：</p>
<p>改造SpuServiceImpl中保存商品的方法，调用SpuDescServiceImpl的saveSpuDesc方法：</p>
<p>再次重启gmall-pms，虽然控制台依然报错，但是数据可以保存成功，说明没有在一个事务中。</p>
<p>为什么测试1的事务传播行为没有生效，而测试2的事务传播行为生效了？</p>
<p>spring的事务是声明式事务，而声明式事务的本质是Spring AOP，SpringAOP的本质是动态代理。</p>
<h3> <strong>事务要生效必须是代理对象在调用。</strong></h3>
<p>测试1：通过this调用同一个service中的方法，this是指service实现类对象本身，不是代理对象，就相当于方法中的代码粘到了大方法里面，相当于还是一个方法。</p>
<p>测试2：通过其他service对象（spuDescService）调用，这个service对象本质是动态代理对象</p>
<p>接下来debug，打个断点看看：</p>
<ol>
<li>
<p>spuDescService：</p>
</li>
<li>
<p>this:</p>
</li>
</ol>
<h3> 1.4.5.   在同一个service中使用传播行为</h3>
<p>只需要把测试1中的<code>this.方法名()</code>替换成<code>this代理对象.方法名()</code>即可。</p>
<p>问题是怎么在service中获取当前类的代理对象？</p>
<h4> 在类中获取代理对象分三个步骤</h4>
<ol>
<li>导入aop的场景依赖：<code>spring-boot-starter-aop</code></li>
<li>开启AspectJ的自动代理，同时要暴露代理对象：<code>@EnableAspectJAutoProxy(exposeProxy=true)</code></li>
<li>获取代理对象：<code>SpuInfoService proxy = (SpuInfoService) AopContext.currentProxy();</code></li>
</ol>
<p>具体如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启后测试：先清空pms_spu_info_desc表中数据</p>
<p>表中数据新增成功，说明saveSpuDesc方法走的是自己的事务，传播行为生效了。</p>
<p>debug可以看到，spuInfoService是一个代理对象。</p>
<h2> 4、本地事务失效问题</h2>
<p>同一个对象内事务方法互调默认失效，原因绕过了代理对象，事务使用代理对象来控制的</p>
<p>解决：使用代理对象调用事物方法</p>
<p>​ 引入starter-aop代理模式</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 开启@EnableAspectJAutoProxy(exposeProxy = true)，不使用jdk的代理，exposeProxy对外暴露代理对象</p>
<p>​ </p>
<h2> 5、CAP定理、RAFT</h2>
<h3> CAP</h3>
<p>● 一致性(Consistency) :
■在分布式系统中 的所有数据备份，在同一时刻是否同样的值。(等同于所有节点访问同一份最新的数据副本)
●可用性(Avilbility)
■在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。(对数据更新具备高可用性)
●分区容错性(Partition tolerance)
■大多 数分布式系统都分布在多个子网络。每个子网络就叫做一一个区(partition) 。分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。</p>
<p>CAP原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p>
<p><strong>注意：CP、AP，不可能CA</strong></p>
<h3> RAFT</h3>
<p>演示：<a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener noreferrer">http://thesecretlivesofdata.com/raft/</a></p>
<h3> BASE：基本使用、软状态、最终一致性</h3>
<p>对CA的延伸</p>
<h2> 6、解决方案</h2>
<h3> 2PC模式</h3>
<h3> TCC</h3>
<h3> 最大努力通知方案</h3>
<h3> 可靠消息+最终一致性（异步确保型）</h3>
<h2> 7、seata 控制分布式事物 AT模式介（2PC）绍与安装</h2>
<h3> 7.1 介绍</h3>
<p>文档：<a href="http://seata.io/zh-cn/docs/user/quickstart.html" target="_blank" rel="noopener noreferrer">http://seata.io/zh-cn/docs/user/quickstart.html</a></p>
<p>服务器下载：<a href="https://github.com/seata/seata/releases%EF%BC%88https://github.com/seata/seata/releases/download/v1.3.0/seata-server-1.3.0.tar.gz" target="_blank" rel="noopener noreferrer">https://github.com/seata/seata/releases（https://github.com/seata/seata/releases/download/v1.3.0/seata-server-1.3.0.tar.gz</a>）</p>
<figure><figcaption>img</figcaption></figure>
<p>seata-server相当于<strong>TC</strong></p>
<h3> 7.2 创建 UNDO_LOG 表</h3>
<h3> 7.3 安装seata-server1.3.0 注意版本关系</h3>
<p>springboot-2.1.13 &lt;-&gt; spring cloud alibaba-2.1.4 &lt;-&gt; seata-server-1.3.0.tar.gz</p>
<p>docker</p>
<h4> 指定自定义配置文件启动</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> registry.conf 注册中心</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> file.conf 配置中心，事务日志存储到哪里</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先启动nacos、再启动seata</p>
<p>查看 nacos 服务列表：服务名（seata-server）</p>
<h3> 7.4 使用 @GlobalTransactional</h3>
<p>5、启动测试分布式事务
6、给分布式大事务的入口标注@GlobalTransactional,高并发的接口不适用
7、每一个远程的小事务用@Transactional</p>
<h3> 7.5 使用 seata 代理各个服务的数据源 注入 DataSourceProxy</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.6 各个服务导入 registry.conf、file.conf 到 resources</h3>
<h3> 7.7 在高并发情况下，seata（AT模式）GlobalTransactional就不适用了，为了保证高并发，不推荐使用seata，因为是加锁，并行化，提升不了效率,可以发消息给库存服务</h3>
<figure><figcaption>image-20211010191739943</figcaption></figure>
<h2> 8、数据最终一致性，MQ+MQ延迟队列</h2>
<p><a href="#MQ%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97">前去MQ延迟队列</a></p>
<h2> 9、如何保证消息可靠性</h2>
<h3> a）、消息丢失</h3>
<p>– <strong>消息发送出去</strong>，由于网络问题没有抵达服务器</p>
<p>​ <code>做好容错方法(try-catch)，发送消息可能会网络失败，失败后要有重试机制，可记录到数据库，采用定期扫描重发的方式</code></p>
<p>​ <code>做好日志记录，每个消息状态是否都被服务器收到都应该记录</code></p>
<p>​ <code>做好定期重发，如果消息没有发送成功，定期去数据库扫描未成功的消息进行重发</code></p>
<p>– <strong>消息抵达Broker</strong>，Broker要将消息写入磁盘（(持久化)才算成功。此时Broker尚未持久化完成，宕机。</p>
<p>​ <code>publisher也必须加入确认回调机制，确认成功的消息，修改数据库消息状态。</code></p>
<p>– <strong>自动ACK的状态下</strong>。消费者收到消息，但没来得及消息然后宕机
<code>定开启手动ACK，消费成功才移除，失败或者没来得及处理就noAck并重新入队</code></p>
<h3> b）、消息重复</h3>
<p>– <strong>消息消费成功</strong>，事务已经提交，ack时，机器宕机。导致没有ack成功，Broker的消息重新由unack变为ready，并发送给其他消费者</p>
<p>– <strong>消息消费失败</strong>，由于重试机制，自动又将消息发送出去</p>
<p>– <strong>成功消费</strong>，ack时宕机，消息由unack变为ready，Broker又重新发送</p>
<p>​ <code>消费者的业务消费接口应该设计为幂等性的。比如扣库存有工作单的状态标志</code></p>
<p>​ <code>使用防重表(redis/mysql)，发送消息每一个都有业务的唯一标识，处理过就不用处理</code></p>
<p>​ <code>rabbitMQ的每一个消息都有redelivered字段，可以获取是否是被重新投递过来的，而不是第一次投递过来的</code></p>
<h3> c）、消息积压</h3>
<p>– <strong>消费者宕机积压</strong></p>
<p>– <strong>消费者消费能力不足积压</strong></p>
<p>– <strong>发送者发送流量太大</strong>
<code>上线更多的消费者，进行正常消费</code>
<code>上线专门的队列消费服务，将消息先批量取出来，记录数据库，离线慢慢处理</code></p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <category term="Cloud"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">整合mybatis-plus</title>
    <id>https://topjf.github.io/java/mybatis-plus.html</id>
    <link href="https://topjf.github.io/java/mybatis-plus.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">1、commen引入依赖 2、数据源 3、测试id自增 ```java RunWith(SpringRunner.class) SpringBootTest public class DemoTest { @Autowired private BrandService brandService; @Test public void getAotuId(...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>整合mybatis-plus</h1>
<h2> 1、commen引入依赖</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、数据源</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、测试id自增</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、启动controller测试：coupon</h2>
<p><a href="http://localhost:8400/coupon/coupon/info/1" target="_blank" rel="noopener noreferrer">http://localhost:8400/coupon/coupon/info/1</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="mybatis"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">nacos-gateway-sentinel-sleuth</title>
    <id>https://topjf.github.io/java/nacos-gateway-sentinel-sleuth.html</id>
    <link href="https://topjf.github.io/java/nacos-gateway-sentinel-sleuth.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">1、Nacos 官方地址： github地址： 面试题：微服务间远程交互的过程？ 1. 先去注册中心查询服务的服务器地址 2. 调用方给对方发送http请求 可以干什么 Nacos是以服务为主要服务对象的中间件，Nacos支持所有主流的服务发现、配置和管理。 Nacos主要提供以下四大功能： 1. 服务发现和服务健康监测 2. 动态配置服务 3. 动态...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 1、Nacos</h2>
<p>官方地址：<a href="https://nacos.io" target="_blank" rel="noopener noreferrer">https://nacos.io</a></p>
<p>github地址：<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/nacos</a></p>
<p><a href="https://nacos.io/zh-cn/docs/quick-start-spring-boot.html" target="_blank" rel="noopener noreferrer">https://nacos.io/zh-cn/docs/quick-start-spring-boot.html</a></p>
<h3> 面试题：微服务间远程交互的过程？</h3>
<ol>
<li>先去注册中心查询服务的服务器地址</li>
<li>调用方给对方发送http请求</li>
</ol>
<h3> 可以干什么</h3>
<p>Nacos是以服务为主要服务对象的中间件，Nacos支持所有主流的服务发现、配置和管理。</p>
<p>Nacos主要提供以下四大功能：</p>
<ol>
<li>服务发现和服务健康监测</li>
<li>动态配置服务</li>
<li>动态DNS服务</li>
<li>服务及其元数据管理</li>
</ol>
<h3> A、spring cloud</h3>
<table>
<thead>
<tr>
<th>版本</th>
<th>spring cloud</th>
<th>springboot</th>
</tr>
</thead>
<tbody>
<tr>
<td>Spring Cloud Greenwich</td>
<td>2.1.x. RELEASE</td>
<td>2.1 x.RELEASE</td>
</tr>
<tr>
<td>Spring Cloud Finchley</td>
<td>2.0.x. RELEASE</td>
<td>2.0.x.RELEASE</td>
</tr>
<tr>
<td>Spring Cloud Edgware</td>
<td>1.5.x.RELEASE</td>
<td>1.5.x.REL EASE</td>
</tr>
</tbody>
</table>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> nacos 注册中心</h4>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在应用的 application.properties 配置文件中配置 Nacos Server 地址</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A、需要下载nacos：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/nacos/releases</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>B、docker 安装nacos： docker pull nacos/nacos-mysql:5.7（docker pull nacos/nacos-server）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> nacos 配置中心</h4>
<h5>手动加载</h5>
<p>common</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yumall-coupon</p>
<p>创建bootstrap，优先于xxxx.properties</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试 <a href="http://localhost:8400/coupon/coupon/test" target="_blank" rel="noopener noreferrer">http://localhost:8400/coupon/coupon/test</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5>自动加载配置文件</h5>
<p>nacos--》配置列表-》新建：yumall-coupon.properties</p>
<div class="language-Java line-numbers-mode" data-ext="Java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 总结</h4>
<p>优先使用配置中心的配置</p>
<div class="language-Java line-numbers-mode" data-ext="Java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 细节</h4>
<h5>命名空间、配置集、配置集ID、配置分组</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6>创建命名空间</h6>
<p>在prod空间创建 yumall-coupon.properties</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件使用</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</p>
<table>
<thead>
<tr>
<th style="text-align:left">命名空间名称</th>
<th style="text-align:left">命名空间ID</th>
<th style="text-align:left">配置数</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">public(保留空间)</td>
<td style="text-align:left"></td>
<td style="text-align:left">1</td>
<td style="text-align:left">详情删除编辑</td>
</tr>
<tr>
<td style="text-align:left">coupon</td>
<td style="text-align:left">ce7e5c1c-645e-460f-b486-bc4659d2207b</td>
<td style="text-align:left">0</td>
<td style="text-align:left">详情删除编辑</td>
</tr>
<tr>
<td style="text-align:left">product</td>
<td style="text-align:left">9b620b25-6af6-46b3-a430-2f5e9fd79e5a</td>
<td style="text-align:left">0</td>
<td style="text-align:left">详情删除编辑</td>
</tr>
<tr>
<td style="text-align:left">ware</td>
<td style="text-align:left">aa5b7425-7db2-4ed9-a608-e84163837478</td>
<td style="text-align:left">0</td>
<td style="text-align:left">详情删除编辑</td>
</tr>
<tr>
<td style="text-align:left">member</td>
<td style="text-align:left">acce6cd5-2d58-412f-903a-7d22ab41d7ea</td>
<td style="text-align:left">0</td>
<td style="text-align:left">详情删除编辑</td>
</tr>
<tr>
<td style="text-align:left">order</td>
<td style="text-align:left">afdf7969-5d7b-460f-8e53-f4c35da8c060</td>
<td style="text-align:left">0</td>
<td style="text-align:left">详情删除编辑</td>
</tr>
<tr>
<td style="text-align:left">coupon</td>
<td style="text-align:left">ce7e5c1c-645e-460f-b486-bc4659d2207b</td>
<td style="text-align:left">0</td>
<td style="text-align:left">详情删除编辑</td>
</tr>
</tbody>
</table>
<p>把克隆到自己的命名空间内，并项目更新配置文件</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>刷新OK</p>
<h6>配置分组</h6>
<ul>
<li>默认所有的配置集都属于：DEFAULT_GROUP；</li>
<li>test，618，1212</li>
</ul>
<p>coupon空间新建配置 yumall-coupon.properties</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">Data Id</th>
<th style="text-align:left">Group</th>
<th style="text-align:left">操作</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">yumall-coupon.properties</td>
<td style="text-align:left">DEFAULT_GROUP</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">yumall-coupon.properties</td>
<td style="text-align:left">test</td>
<td style="text-align:left"></td>
<td></td>
</tr>
</tbody>
</table>
<p>指定组</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每个微服务创建自己的命名空间，使用配置分组区分环境，dev，test，prod</p>
<p>yumall-coupon.properties</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">Data Id</th>
<th style="text-align:left">Group</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">yumall-coupon.properties</td>
<td style="text-align:left">test</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">yumall-coupon.properties</td>
<td style="text-align:left">prod</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">yumall-coupon.properties</td>
<td style="text-align:left">dev</td>
</tr>
</tbody>
</table>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="http://localhost:8400/coupon/coupon/test" target="_blank" rel="noopener noreferrer">http://localhost:8400/coupon/coupon/test</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 全部加载多配置集</h4>
<h5>nacos创建配置集</h5>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">Data Id</th>
<th style="text-align:left">Group</th>
<th style="text-align:left">归属应用:</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">yumall-coupon.properties</td>
<td style="text-align:left">prod</td>
<td style="text-align:left"></td>
<td style="text-align:left">详情|示例代码|编辑|删除|更多</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">datasource.yml</td>
<td style="text-align:left">dev</td>
<td style="text-align:left"></td>
<td style="text-align:left">详情|示例代码|编辑|删除|更多</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">mybatis.yml</td>
<td style="text-align:left">dev</td>
<td style="text-align:left"></td>
<td style="text-align:left">详情|示例代码|编辑|删除|更多</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">redis.yml</td>
<td style="text-align:left">dev</td>
<td style="text-align:left"></td>
<td style="text-align:left">详情|示例代码|编辑|删除|更多</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">nacos.yml</td>
<td style="text-align:left">dev</td>
<td style="text-align:left"></td>
<td style="text-align:left">详情|示例代码|编辑|删除|更多</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">yumall-coupon.properties</td>
<td style="text-align:left">dev</td>
<td style="text-align:left"></td>
<td style="text-align:left">详情|示例代码|编辑|删除|更多</td>
</tr>
</tbody>
</table>
<h5>配置文件</h5>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 总结</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 全部测试</h4>
<p><a href="http://localhost:8100/product/attr/test" target="_blank" rel="noopener noreferrer">http://localhost:8100/product/attr/test</a> <a href="http://localhost:8200/order/order/test" target="_blank" rel="noopener noreferrer">http://localhost:8200/order/order/test</a></p>
<p><a href="http://localhost:8300/ware/wareinfo/test" target="_blank" rel="noopener noreferrer">http://localhost:8300/ware/wareinfo/test</a> <a href="http://localhost:8400/coupon/coupon/test" target="_blank" rel="noopener noreferrer">http://localhost:8400/coupon/coupon/test</a></p>
<p><a href="http://localhost:8500/member/member/test" target="_blank" rel="noopener noreferrer">http://localhost:8500/member/member/test</a></p>
<h3> B、spring boot</h3>
<p>​ 项目中没有使用nacos官方提供的方式使用SpringBoot的集成方式来进行集成，而是使用了Alibaba Spring  Cloud的依赖包进行集成。</p>
<p>​ 原因是因为官网提供的SpringBoot集成方式中，同时使用配置中心和服务发现功能，会使得服务发现功能配置的部分属性冲突不生效。最直接的就是配置中心和服务发现功能不可以配置2个不同的namespace，会默认选择使用配置中心中配置的namespace作为服务发现的 namespace。</p>
<p>​ <strong>由于spring cloud alibaba nacos  config的加载机制问题，配置信息如果写在了 application-{xx}.yml  的配置文件中无法被解析。所以如果需要分多环境动态加载，可以写在 bootstrap-{xxx}.yml 文件中。</strong></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bootstrap-{xxx}.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、 服务网关 Gateway</h2>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建gateway项目，引入gateway依赖，</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.properties</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bootstrap.properties</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>断言:application.yml</p>
<p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.5.RELEASE/single/spring-cloud-gateway.html" target="_blank" rel="noopener noreferrer">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.5.RELEASE/single/spring-cloud-gateway.html</a></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试  <a href="http://localhost:50000/hello?foo=ba" target="_blank" rel="noopener noreferrer">http://localhost:50000/hello?foo=ba</a> ----  <a href="http://localhost:50000/hello?url=baidu" target="_blank" rel="noopener noreferrer">http://localhost:50000/hello?url=baidu</a></p>
<h2> 3、openfeign 远程调用服务</h2>
<ul>
<li>1、想要远程调用别的服务
<ul>
<li>1）、引入open-feign</li>
<li>2）、编写一个接口，告诉SpringCloud这个接口需要调用远程服务
<ul>
<li>1、声明接口的每一个方法都是调用哪个远程服务的那个请求</li>
</ul>
</li>
<li>3）、开启远程调用功能</li>
</ul>
</li>
</ul>
<p>member调用coupon</p>
<p>准备</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写一个接口，告诉SpringCloud这个接口需要调用远程服务</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启远程调用功能</p>
<div class="language-Java line-numbers-mode" data-ext="Java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p>
<div class="language-Java line-numbers-mode" data-ext="Java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://localhost:8500/member/member/coupons" target="_blank" rel="noopener noreferrer">http://localhost:8500/member/member/coupons</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 4. Sentinel</h2>
<figure><figcaption>image-20211118143201690</figcaption></figure>
<p>官网：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p>
<h3> 1、安装+配置</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sentinel界面下载：<a href="https://github.com/alibaba/Sentinel/releases/tag/v1.8.0" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/Sentinel/releases/tag/v1.8.0</a></p>
<p>运行： java -jar .\sentinel-dashboard-1.8.0.jar --server.port=8999</p>
<p><a href="http://127.0.0.1:8999" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8999</a> sentinel</p>
<p>配置控制台信息：</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试 <a href="http://localhost:8700/getCurrentSeckillSkus" target="_blank" rel="noopener noreferrer">http://localhost:8700/getCurrentSeckillSkus</a> <a href="http://seckill.yumall.com/getCurrentSeckillSkus" target="_blank" rel="noopener noreferrer">http://seckill.yumall.com/getCurrentSeckillSkus</a></p>
<figure><figcaption>image-20211118150210630</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、自定义流控</h3>
<p>导入spring-boot-starter-actuator</p>
<p>配置，暴露所有端点：management.endpoints.web.exposure.include=*</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、熔断、降级</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SeckillFeignService</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、自定义受保护的资源</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.1. Sentinel 是什么？</h3>
<p>Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p>Sentinel 分为两个部分:</p>
<ul>
<li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li>
<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>
</ul>
<p>Sentinel 可以简单的分为 Sentinel 核心库和 Dashboard。核心库不依赖 Dashboard，但是结合 Dashboard 可以取得最好的效果。</p>
<h3> 4.2. 基本概念及作用</h3>
<p>基本概念：</p>
<p><strong>资源</strong>：是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p>
<p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>
<p><strong>规则</strong>：围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>
<p>主要作用：</p>
<ol>
<li>流量控制</li>
<li>熔断降级</li>
<li>系统负载保护</li>
</ol>
<p>我们说的资源，可以是任何东西，服务，服务里的方法，甚至是一段代码。使用 Sentinel 来进行资源保护，主要分为几个步骤:</p>
<ol>
<li>定义资源</li>
<li>定义规则</li>
<li>检验规则是否生效</li>
</ol>
<p>先把可能需要保护的资源定义好，之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。</p>
<h3> 4.3. 快速开始</h3>
<p>官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p>
<h4> 4.3.1. 搭建Dashboard控制台</h4>
<p>您可以从 release 页面 下载最新版本的控制台 jar 包。</p>
<p><a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/Sentinel/releases</a></p>
<p>下载的jar包（课前资料已下发），copy到一个没有空格或者中文的路径下，打开dos窗口切换到jar包所在目录。</p>
<p>执行：java -jar sentinel-dashboard-xxx.jar</p>
<p>在浏览器中访问sentinel控制台，默认端口号是8080。进入登录页面，管理页面用户名和密码：sentinel/sentinel</p>
<p>此时页面为空，这是因为还没有监控任何服务。另外，sentinel是懒加载的，如果服务没有被访问，也看不到该服务信息。</p>
<h4> 4.3.2. 改造nacos-consumer</h4>
<ol>
<li>引入 sentinel 依赖</li>
</ol>
<p>使用 group ID 为 <code>com.alibaba.cloud</code> 和 artifact ID 为 <code>spring-cloud-starter-alibaba-sentinel</code> 的 starter。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>在application.properties中添加配置</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启nacos-consumer工程，在浏览器中反复访问：<a href="http://localhost:18080/hi" target="_blank" rel="noopener noreferrer">http://localhost:18080/hi</a></p>
<p>再次查看sentinel控制台页面：</p>
<h3> 4.4. 整合Feign组件</h3>
<p>Sentinel 适配了 Feign 组件。使用分三步：</p>
<ol>
<li>引入依赖：</li>
</ol>
<p>引入feign及sentinel的依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>开启sentinel监控功能</li>
</ol>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>代码实现</li>
</ol>
<p>添加feign接口的熔断类ProviderFallback：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在feign接口ProviderClient中指定熔断类：</p>
<p>测试之前，先在服务提供方的controller方法中添加异常：</p>
<p>再重启nacos-provider和nacos-consumer服务。在浏览器中地址栏访问消费方测试：</p>
<h3> 4.5. 流量控制</h3>
<h4> 4.5.1. 什么是流量控制</h4>
<p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p>
<p>流量控制有以下几个角度:</p>
<ul>
<li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li>
<li>运行指标，例如 QPS、线程数等；</li>
<li>控制的效果，例如直接限流（快速失败）、冷启动（Warm Up）、匀速排队（排队等待）等。</li>
</ul>
<p>Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>
<p>配置如下：</p>
<h4> 4.5.2. QPS流量控制</h4>
<p>当 QPS 超过某个阈值的时候，则采取措施进行流量控制。流量控制的效果包括以下几种：<strong>直接拒绝</strong>、<strong>Warm Up</strong>、<strong>匀速排队</strong>。</p>
<h5>4.5.2.1. 直接拒绝</h5>
<p><strong>直接拒绝</strong>（<code>RuleConstant.CONTROL_BEHAVIOR_DEFAULT</code>）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<code>FlowException</code>。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p>
<p>这里做一个最简单的配置：</p>
<p>​    阈值类型选择：QPS</p>
<p>​    单机阈值：2</p>
<p>综合起来的配置效果就是，该接口的限流策略是每秒最多允许2个请求进入。</p>
<p>点击新增按钮之后，可以看到如下界面：</p>
<p>在浏览器访问：<a href="http://localhost:18080/hi" target="_blank" rel="noopener noreferrer">http://localhost:18080/hi</a>，并疯狂刷新，出现如下信息：</p>
<h5>4.5.2.2. Warm Up（预热）</h5>
<p>Warm Up（<code>RuleConstant.CONTROL_BEHAVIOR_WARM_UP</code>）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过"冷启动"，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</p>
<p>疯狂访问：<a href="http://localhost:18080/hi" target="_blank" rel="noopener noreferrer">http://localhost:18080/hi</a></p>
<p>可以发现前几秒会发生熔断，几秒钟之后就完全没有问题了</p>
<h5>4.5.2.3. 匀速排队</h5>
<p>匀速排队（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p>
<p>测试配置如下：1s处理一个请求，排队等待，等待时间20s。</p>
<p>在postman中，新建一个collection（这里collection名称是sentinel），并把一个请求添加到该collection</p>
<p>请求添加成功后，点击run按钮：</p>
<p>配置每隔100ms发送一次请求，一共发送20个请求：</p>
<p>点击“run sentinel”按钮</p>
<p>查看控制台，效果如下：可以看到基本每隔1s打印一次</p>
<h4> 4.5.3. 关联限流</h4>
<p>关联限流：当关联的资源请求达到阈值时，就限流自己。</p>
<p>配置如下：/hi2的关联资源/hi，并发数超过2时，/hi2就限流自己</p>
<p>给消费者添加一个controller方法</p>
<p>测试：</p>
<p>postman配置如下：每个400ms发送一次请求，一共发送50个。每秒钟超过了2次</p>
<p>在浏览器中访问/hi2  已经被限流。</p>
<h4> 4.5.4. 链路限流</h4>
<p>一棵典型的调用树如下图所示：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上图中来自入口 <code>Entrance1</code> 和 <code>Entrance2</code> 的请求都调用到了资源 <code>NodeA</code>，Sentinel 允许只根据某个入口的统计信息对资源限流。</p>
<p>配置如下：表示只针对Entrance1进来的请求做限流限制</p>
<h4> 4.5.5. 线程数限流</h4>
<p>**并发线程数限流用于保护业务线程数不被耗尽。**例如，当应用所依赖的下游应用由于某种原因导致服务不稳定、响应延迟增加，对于调用者来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽。为应对太多线程占用的情况，业内有使用隔离的方案，比如通过不同业务逻辑使用不同线程池来隔离业务自身之间的资源争抢（线程池隔离）。这种隔离方案虽然隔离性比较好，但是代价就是线程数目太多，线程上下文切换的 overhead 比较大，特别是对低延时的调用有比较大的影响。Sentinel 并发线程数限流不负责创建和管理线程池，而是简单统计当前请求上下文的线程数目，如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。</p>
<p>配置如下：如果请求的并发数超过一个就限流</p>
<p>改造controller中的hi方法：</p>
<p><strong>测试</strong></p>
<p>postmain配置如下：</p>
<p>同时在浏览器访问：</p>
<h3> 4.6. 熔断降级</h3>
<p>Sentinel除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。</p>
<p>Sentinel <strong>熔断降级</strong>会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 <code>DegradeException</code>）。</p>
<p>Sentinel 和 Hystrix 的原则是一致的: 当调用链路中某个资源出现不稳定，例如，表现为 timeout，异常比例升高的时候，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其它的资源，最终产生雪崩的效果。</p>
<p>限流降级指标有三个，如下图：</p>
<ol>
<li>
<p>平均响应时间（RT）</p>
</li>
<li>
<p>异常比例</p>
</li>
<li>
<p>异常数</p>
</li>
</ol>
<h4> 4.6.1. 平均响应时间（RT）</h4>
<p><strong>平均响应时间</strong> (<code>DEGRADE_GRADE_RT</code>)：<strong>当资源的平均响应时间超过阈值</strong>（<code>DegradeRule</code> 中的 <code>count</code>，以 <strong>ms</strong> 为单位，默认上限是4900ms）之后，资源进入准降级状态。如果<strong>1s之内持续进入 5 个请求</strong>，它们的 RT 都持续超过这个阈值，那么在<strong>接下来的时间窗口</strong>（<code>DegradeRule</code> 中的 <code>timeWindow</code>，以 s 为单位）之内，对这个方法的调用都会自动地返回（抛出 <code>DegradeException</code>）。在下一个时间窗口到来时, 会接着再放入5个请求, 再重复上面的判断。</p>
<p>配置如下：超时时间100ms，熔断时间10s</p>
<p>代码中依然睡了1s</p>
<p>也就是说请求肯定都会超时。</p>
<p>先执行postmain，配置如下：</p>
<p>再次见到了熟悉的界面：</p>
<p>10s之内，都是熔断界面</p>
<h4> 4.6.2. 异常比例</h4>
<p><strong>异常比例</strong> (<code>DEGRADE_GRADE_EXCEPTION_RATIO</code>)：<strong>当资源的每秒请求量 &gt;= 5，且每秒异常总数占通过量的比值超过阈值</strong>（<code>DegradeRule</code> 中的 <code>count</code>）之后，资源进入降级状态，即在接下的时间窗口（<code>DegradeRule</code>中的 <code>timeWindow</code>，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</p>
<h4> 4.6.3. 异常数</h4>
<p><strong>异常数</strong> (<code>DEGRADE_GRADE_EXCEPTION_COUNT</code>)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。</p>
<h3> 4.7. 规则持久化</h3>
<p>无论是通过硬编码的方式来更新规则，还是通过接入 Sentinel Dashboard 后，在页面上操作更新规则，都无法避免一个问题，那就是服务重启后，规则就丢失了，因为默认情况下规则是保存在内存中的。</p>
<p>我们在 Dashboard 上为客户端配置好了规则，并推送给了客户端。这时由于一些因素客户端出现异常，服务不可用了，当客户端恢复正常再次连接上 Dashboard 后，这时所有的规则都丢失了，我们还需要重新配置一遍规则，这肯定不是我们想要的。</p>
<p>持久化配置分以下3步：</p>
<ol>
<li>引入依赖</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>添加配置：</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>nacos中创建流控规则</li>
</ol>
<p>配置内容如下：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>resource：资源名称</p>
<p>limitApp：限流应用，就是用默认就可以</p>
<p>grade：阈值类型，0表示线程数，1表示qps</p>
<p>count：单机阈值</p>
<p>strategy：流控模式，0-直接，1-关联， 2-链路</p>
<p>controlBehavior：流控效果。0-快速失败，1-warm up 2-排队等待</p>
<p>clusterMode：是否集群</p>
<p>重启consumser，并多次访问：<a href="http://localhost:18080/hi" target="_blank" rel="noopener noreferrer">http://localhost:18080/hi</a>。</p>
<p>查看sentinel客户端：就有了限流配置了</p>
<p>现在你可以尝试测试一下限流配置了</p>
<h3> 5、网关流控</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5. Sleuth</h2>
<p>​  Spring Cloud Sleuth为springCloud实现了一个分布式链路追踪解决方案，大量借鉴了Dapper，Zipkin和HTrace等链路追踪技术。对于大多数用户而言，Sleuth应该是不可见的，并且您与外部系统的所有交互都应自动进行检测。您可以简单地在日志中捕获数据，也可以将其发送到远程收集器服务。</p>
<p>​  随着分布式系统越来越复杂，你的一个请求发过发过去，各个微服务之间的跳转，有可能某个请求某一天压力太大了，一个请求过去没响应，一个请求下去依赖了三四个服务，但是你去不知道哪一个服务出来问题，这时候我是不是需要对微服务进行追踪呀？监控一个请求的发起，从服务之间传递之间的过程，我最好记录一下，记录每一个的耗时多久，一旦出了问题，我们就可以针对性的进行优化，是要增加节点，减轻压力，还是服务继续拆分，让逻辑更加简单点呢？这时候<strong>springcloud-sleuth集成zipkin</strong>能帮我们解决这些服务追踪问题。</p>
<h3> 5.1. zipkin分布式监控客户端</h3>
<p>Zipkin是一种分布式跟踪系统。它有助于收集解决微服务架构中的延迟问题所需的时序数据。它管理这些数据的收集和查找。Zipkin的设计基于Google Dapper论文。应用程序用于向Zipkin报告时序数据。Zipkin UI还提供了一个依赖关系图，显示了每个应用程序通过的跟踪请求数。如果要解决延迟问题或错误，可以根据应用程序，跟踪长度，注释或时间戳对所有跟踪进行筛选或排序。选择跟踪后，您可以看到每个跨度所需的总跟踪时间百分比，从而可以识别有问题的应用程序。</p>
<p>通过docker安装：docker run -d -p 9411:9411 openzipkin/zipkin</p>
<p>通过jar包安装：java -jar zipkin-server-*exec.jar</p>
<p>jar包下载地址：<a href="https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec" target="_blank" rel="noopener noreferrer">https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec</a></p>
<p>课前资料有已下载的jar包</p>
<p>在浏览器端访问：<a href="http://localhost:9411" target="_blank" rel="noopener noreferrer">http://localhost:9411</a></p>
<h3> 5.2. 改造consumer/provider工程</h3>
<p>对consumer和provider工程分别做如下操作：</p>
<ol>
<li>引入sleuth的依赖</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>zipkin的启动器包含了sleuth的依赖。</p>
<ol start="2">
<li>配置zipkin的相关信息</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>重启consumer/provider服务后，访问消费者：<a href="http://localhost:18080/hi%E3%80%82%E6%9F%A5%E7%9C%8Bzipkin" target="_blank" rel="noopener noreferrer">http://localhost:18080/hi。查看zipkin</a>客户端如下</li>
</ol>
<p>这时候我们可以在zipkin的ui控制界面看看效果，可以发现，服务之间的调用关系，服务名称已经清晰展现出来了，同时包括服务之间的调用时常等详细信息以及更细的信息都可以通过控制台看到。</p>
<p>还可以查看调用关系图：</p>
<h3> 5.3. 基本概念</h3>
<p>Span：基本工作单元。发送一个远程请求就会产生一个span，span通过一个64位ID唯一标识，trace以另一个64位ID表示，span还有其他数据信息，比如摘要、时间戳事件、关键值注释(tags)、span的ID、以及进度ID(通常是IP地址)。span在不断的启动和停止，同时记录了时间信息，当你创建了一个span，你必须在未来的某个时刻停止它。</p>
<p>Trace：一系列spans组成的一个树状结构。例如：发送一个请求，需要调用多个微服务，每调用一个微服务都会产生一个span，这些span组成一个trace</p>
<p>Annotation：用来及时记录一个事件的存在，一些核心annotations用来定义一个请求的开始和结束</p>
<ul>
<li>cs - Client Sent -客户端发起一个请求，这个annotion描述了这个span的开始</li>
<li>sr - Server Received -服务端获得请求并准备开始处理它，如果将其sr减去cs时间戳便可得到网络延迟</li>
<li>ss - Server Sent -注解表明请求处理的完成(当请求返回客户端)，如果ss减去sr时间戳便可得到服务端需要的处理请求时间</li>
<li>cr - Client Received -表明span的结束，客户端成功接收到服务端的回复，如果cr减去cs时间戳便可得到客户端从服务端获取回复的所有所需时间</li>
</ul>
<p>例如一个请求如下：</p>
<p>使用zipkin跟踪整个请求过程如下：</p>
<p>上图表示一请求链路，一条链路通过<code>Trace Id</code>唯一标识，<code>Span</code>标识发起的请求信息，各<code>span</code>通过<code>parent id</code> 关联起来，如图</p>
<h2> 6、sleuth+zipkin</h2>
<h3> 1、介绍</h3>
<p><strong>Span（跨度）</strong>：基本工作单元，发送一个远程调度任务就会产生一个 Span，Span是一个64位ID唯一标识的,Trace是用另一个64位ID唯一标识的,Span还有其他数据信息，比如摘要、时间戳事件、Span 的 ID、以及进度 ID。</p>
<p><strong>Trace(跟踪)</strong>：一系列 Span组成的一个树状结构。请求一个微服务系统的API接口，这个API接口,需要调用多个微服务，调用每个微服务都会产生一个新的 Span，所有由这个请求产生的 Span组成了这个Trace。</p>
<p><strong>Annotation(标注)</strong>：用来及时记录一个事件的，一些核心注解用来定义一个请求的开始和结束。这些注解包括以下:</p>
<p><code>**cs** - Client Sent-客户端发送一个请求，这个注解描述了这个 Span 的开始 **sr** - Server Received -服务端获得请求并准备开始处理它,如果将其s减去cs时间戳便可得到网络传输的时间。 **sr** - Server Sent（服务端发送响应）-该注解表明请求处理的完成(当请求返回客户端),如果 ss的时间戳减去s时间默，就可以得到服务器请求的时间。 **cr** - Client Received(客户端接收响应）-此时Span的结束，如果c,的时间戳减去cs时间践便可以得到整个请求所消耗的时间。</code></p>
<h3> 2、配置</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、zipkin可视化</h3>
<p>docker pull openzipkin/zipkin:latest</p>
<p>docker run -d --name=zipkin -p 9411:9411 openzipkin/zipkin:latest</p>
<p><a href="http://127.0.0.1:9411/" target="_blank" rel="noopener noreferrer">http://127.0.0.1:9411/</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目，<a href="http://127.0.0.1:9411/" target="_blank" rel="noopener noreferrer">http://127.0.0.1:9411/</a></p>
<h3> 4、zipkin 数据保存ES</h3>
<p>docker pull openzipkin/zipkin-dependencies:latest</p>
<p>docker run --env STORAGE_TYPE=elasticsearch --env ES_HOSTS=127.0.0.1:9200 openzipkin/zipkin-dependencies:latest</p>
<p>docker run --name=zipkin_dependencies --env STORAGE_TYPE=elasticsearch --env ES_HOSTS=127.0.0.1:9200 openzipkin/zipkin-dependencies:latest</p>
<figure><figcaption>image-20211118192950674</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Cloud"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Nacos笔记</title>
    <id>https://topjf.github.io/java/nacos-note.html</id>
    <link href="https://topjf.github.io/java/nacos-note.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">文档： Nacos是什么? Nacos简介 (https://nacos.io/zh-cn/docs/what-is-nacos.html) 什么是 Nacos 服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理： Kubernetes Service (https://kubernete...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Nacos</h1>
<p>文档：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener noreferrer">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p>
<h2> Nacos是什么?</h2>
<h3> <a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener noreferrer">Nacos简介</a></h3>
<p><strong>什么是 Nacos</strong></p>
<p>服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理：</p>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener noreferrer">Kubernetes Service</a>、<a href="https://grpc.io/docs/guides/concepts.html#service-definition" target="_blank" rel="noopener noreferrer">gRPC</a> &amp; <a href="https://dubbo.incubator.apache.org/" target="_blank" rel="noopener noreferrer">Dubbo RPC Service</a>、<a href="https://spring.io/understanding/REST" target="_blank" rel="noopener noreferrer">Spring Cloud RESTful Service</a></p>
<h4> Nacos 的关键特性包括</h4>
<ul>
<li>
<p><strong>服务发现和服务健康监测</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><strong>动态配置服务</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><strong>动态 DNS 服务</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><strong>服务及其元数据管理</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
</ul>
<h4> Nacos 地图</h4>
<p>一图看懂 Nacos，下面架构部分会详细介绍。</p>
<figure><figcaption></figcaption></figure>
<ul>
<li>特性大图：要从功能特性，非功能特性，全面介绍我们要解的问题域的特性诉求</li>
<li>架构大图：通过清晰架构，让您快速进入 Nacos 世界</li>
<li>业务大图：利用当前特性可以支持的业务场景，及其最佳实践</li>
<li>生态大图：系统梳理 Nacos 和主流技术生态的关系</li>
<li>优势大图：展示 Nacos 核心竞争力</li>
<li>战略大图：要从战略到战术层面讲 Nacos 的宏观优势</li>
</ul>
<h4> Nacos 生态图</h4>
<figure><figcaption></figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 概念</h3>
<h4> 地域</h4>
<p>​  物理的数据中心，资源创建成功后不能更换。</p>
<h4> 可用区</h4>
<p>​  同一地域内，电力和网络互相独立的物理区域。同一可用区内，实例的网络延迟较低。</p>
<h4> 接入点</h4>
<p>​  地域的某个服务的入口域名。</p>
<h4> 命名空间</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 配置</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 配置管理</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 配置项</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 配置集</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 配置集 ID</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 配置分组</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 配置快照</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 服务</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 服务名</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 服务注册中心</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 服务发现</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 元信息</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 应用</h4>
<p>​  用于标识服务提供方的服务的属性。</p>
<h4> 服务分组</h4>
<p>​  不同的服务可以归类到同一分组。</p>
<h4> 虚拟集群</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 实例</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 权重</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 健康检查</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 健康保护阈值</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> <a href="https://nacos.io/zh-cn/docs/architecture.html" target="_blank" rel="noopener noreferrer">架构</a></h3>
<h4> 基本架构及概念</h4>
<figure><figcaption></figcaption></figure>
<h4> 服务 (Service)</h4>
<p>服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。Nacos 支持主流的服务生态，如 Kubernetes Service、gRPC|Dubbo RPC Service 或者 Spring Cloud RESTful Service.</p>
<h4> 服务注册中心 (Service Registry)</h4>
<p>服务注册中心，它是服务，其实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。</p>
<h4> 服务元数据 (Service Metadata)</h4>
<p>服务元数据是指包括服务端点(endpoints)、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据</p>
<h4> 服务提供方 (Service Provider)</h4>
<p>是指提供可复用和可调用服务的应用方</p>
<h4> 服务消费方 (Service Consumer)</h4>
<p>是指会发起对某个服务调用的应用方</p>
<h4> 配置 (Configuration)</h4>
<p>在系统开发过程中通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成这个步骤。配置变更是调整系统运行时的行为的有效手段之一。</p>
<h4> 配置管理 (Configuration Management)</h4>
<p>在数据中心中，系统中所有配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动统称为配置管理。</p>
<h4> 名字服务 (Naming Service)</h4>
<p>提供分布式系统中所有对象(Object)、实体(Entity)的“名字”到关联的元数据之间的映射管理服务，例如 ServiceName -&gt; Endpoints Info, Distributed Lock Name -&gt; Lock Owner/Status Info, DNS Domain Name -&gt; IP List, 服务发现和 DNS 就是名字服务的2大场景。</p>
<h4> 配置服务 (Configuration Service)</h4>
<p>在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</p>
<h4> 逻辑架构及其组件介绍</h4>
<figure><figcaption></figcaption></figure>
<ul>
<li>服务管理：实现服务CRUD，域名CRUD，服务健康状态检查，服务权重管理等功能</li>
<li>配置管理：实现配置管CRUD，版本管理，灰度管理，监听管理，推送轨迹，聚合数据等功能</li>
<li>元数据管理：提供元数据CURD 和打标能力</li>
<li>插件机制：实现三个模块可分可合能力，实现扩展点SPI机制</li>
<li>事件机制：实现异步化事件通知，sdk数据变化异步通知等逻辑</li>
<li>日志模块：管理日志分类，日志级别，日志可移植性（尤其避免冲突），日志格式，异常码+帮助文档</li>
<li>回调机制：sdk通知数据，通过统一的模式回调用户处理。接口和数据结构需要具备可扩展性</li>
<li>寻址模式：解决ip，域名，nameserver、广播等多种寻址模式，需要可扩展</li>
<li>推送通道：解决server与存储、server间、server与sdk间推送性能问题</li>
<li>容量管理：管理每个租户，分组下的容量，防止存储被写爆，影响服务可用性</li>
<li>流量管理：按照租户，分组等多个维度对请求频率，长链接个数，报文大小，请求流控进行控制</li>
<li>缓存机制：容灾目录，本地缓存，server缓存机制。容灾目录使用需要工具</li>
<li>启动模式：按照单机模式，配置模式，服务模式，dns模式，或者all模式，启动不同的程序+UI</li>
<li>一致性协议：解决不同数据，不同一致性要求情况下，不同一致性机制</li>
<li>存储模块：解决数据持久化、非持久化存储，解决数据分片问题</li>
<li>Nameserver：解决namespace到clusterid的路由问题，解决用户环境与nacos物理环境映射问题</li>
<li>CMDB：解决元数据存储，与三方cmdb系统对接问题，解决应用，人，资源关系</li>
<li>Metrics：暴露标准metrics数据，方便与三方监控系统打通</li>
<li>Trace：暴露标准trace，方便与SLA系统打通，日志白平化，推送轨迹等能力，并且可以和计量计费系统打通</li>
<li>接入管理：相当于阿里云开通服务，分配身份、容量、权限过程</li>
<li>用户管理：解决用户管理，登录，sso等问题</li>
<li>权限管理：解决身份识别，访问控制，角色管理等问题</li>
<li>审计系统：扩展接口方便与不同公司审计系统打通</li>
<li>通知系统：核心数据变更，或者操作，方便通过SMS系统打通，通知到对应人数据变更</li>
<li>OpenAPI：暴露标准Rest风格HTTP接口，简单易用，方便多语言集成</li>
<li>Console：易用控制台，做服务管理、配置管理等操作</li>
<li>SDK：多语言sdk</li>
<li>Agent：dns-f类似模式，或者与mesh等方案集成</li>
<li>CLI：命令行对产品进行轻量化管理，像git一样好用</li>
</ul>
<h4> 领域模型</h4>
<h5>数据模型</h5>
<p>Nacos 数据模型 Key 由三元组唯一确定, Namespace默认是空串，公共命名空间（public），分组默认是 DEFAULT_GROUP。</p>
<figure><figcaption>nacos_data_model</figcaption></figure>
<h5>服务领域模型</h5>
<figure><figcaption>nacos_naming_data_model</figcaption></figure>
<h5>配置领域模型</h5>
<p>围绕配置，主要有两个关联的实体，一个是配置变更历史，一个是服务标签（用于打标分类，方便索引），由 ID 关联。</p>
<figure><figcaption>nacos_config_er</figcaption></figure>
<h4> 类视图</h4>
<h5>Nacos-SDK 类视图</h5>
<p>服务部分待续</p>
<figure><figcaption>nacos_sdk_class_relation</figcaption></figure>
<h5>构建物、部署及启动模式</h5>
<figure><figcaption>undefined</figcaption></figure>
<h4> 两种交付工件</h4>
<p>Nacos 支持标准 Docker 镜像(TODO: 0.2版本开始支持）及 zip(tar.gz)压缩包的构建物。</p>
<h4> 两种启动模式</h4>
<p>Nacos 支持将注册中心(Service Registry）与配置中心(Config Center) 在一个进程合并部署或者将2者分离部署的两种模式。</p>
<h2> 快速开始</h2>
<h3> <a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener noreferrer">Nacos</a> docker 安装与启动</h3>
<p><a href="https://blog.csdn.net/qq_42476834/article/details/121149424" target="_blank" rel="noopener noreferrer">我的教程</a></p>
<p><strong>版本选择：当前推荐的稳定版本为 2.0.3。</strong></p>
<p><a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">下载地址</a></p>
<blockquote>
<p>docker pull nacos/nacos-server:1.4.2</p>
<p>docker pull nacos/nacos-server:2.0.3</p>
<p>docker pull nacos/nacos-server:2.1.0</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>application.properties</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="https://nacos.io/zh-cn/docs/quick-start-spring.html" target="_blank" rel="noopener noreferrer">Nacos Spring</a></h3>
<h3> <a href="https://nacos.io/zh-cn/docs/quick-start-spring-boot.html" target="_blank" rel="noopener noreferrer">Nacos Spring Boot</a></h3>
<p>本文主要面向 Spring Boot 的使用者，通过两个示例来介绍如何使用 Nacos 来实现分布式环境下的配置管理和服务发现。</p>
<p>关于 Nacos Spring Boot 的详细文档请参看：<a href="https://github.com/nacos-group/nacos-spring-boot-project/wiki/spring-boot-0.2.2-%E4%BB%A5%E5%8F%8A-0.1.2%E7%89%88%E6%9C%AC%E6%96%B0%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C" target="_blank" rel="noopener noreferrer">nacos-spring-boot-project</a>。</p>
<ul>
<li>通过 Nacos Server 和 nacos-config-spring-boot-starter 实现配置的动态变更；</li>
<li>通过 Nacos Server 和 nacos-discovery-spring-boot-starter 实现服务的注册与发现。</li>
</ul>
<h4> 启动配置管理</h4>
<p>启动了 Nacos server 后，您就可以参考以下示例代码，为您的 Spring Boot 应用启动 Nacos 配置管理服务了。完整示例代码请参考：<a href="https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-boot-example/nacos-spring-boot-config-example" target="_blank" rel="noopener noreferrer">nacos-spring-boot-config-example</a></p>
<ol>
<li>添加依赖。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：版本 <a href="https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter" target="_blank" rel="noopener noreferrer">0.2.x.RELEASE</a> 对应的是 Spring Boot 2.x 版本，版本 <a href="https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter" target="_blank" rel="noopener noreferrer">0.1.x.RELEASE</a> 对应的是 Spring Boot 1.x 版本。</p>
<ol>
<li>在 <code>application.properties</code> 中配置 Nacos server 的地址：</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol>
<li>使用 <code>@NacosPropertySource</code> 加载 <code>dataId</code> 为 <code>example</code> 的配置源，并开启自动更新：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>通过 Nacos 的 <code>@NacosValue</code> 注解设置属性值。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>启动 <code>NacosConfigApplication</code>，调用 <a href="http://localhost:51000/qyk8/nacos/getData" target="_blank" rel="noopener noreferrer">http://localhost:51000/qyk8/nacos/getData</a>，返回内容是 <code>false</code>。</li>
<li>通过调用 <a href="https://nacos.io/zh-cn/docs/open-api.html" target="_blank" rel="noopener noreferrer">Nacos Open API</a> 向 Nacos server 发布配置：dataId 为<code>xxx.yml</code>，内容为<code>useLocalCache=true</code></li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol>
<li>再次访问 <code>http://localhost:8080/config/get</code>，此时返回内容为<code>true</code>，说明程序中的<code>useLocalCache</code>值已经被动态更新了。</li>
</ol>
<h4> 启动服务发现</h4>
<p>本节演示如何在您的 Spring Boot 项目中启动 Nacos 的服务发现功能。完整示例代码请参考：<a href="https://github.com/nacos-group/nacos-examples/tree/master/nacos-spring-boot-example/nacos-spring-boot-discovery-example" target="_blank" rel="noopener noreferrer">nacos-spring-boot-discovery-example</a></p>
<ol>
<li>添加依赖。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：版本 <a href="https://mvnrepository.com/artifact/com.alibaba.boot/nacos-discovery-spring-boot-starter" target="_blank" rel="noopener noreferrer">0.2.x.RELEASE</a> 对应的是 Spring Boot 2.x 版本，版本 <a href="https://mvnrepository.com/artifact/com.alibaba.boot/nacos-discovery-spring-boot-starter" target="_blank" rel="noopener noreferrer">0.1.x.RELEASE</a> 对应的是 Spring Boot 1.x 版本。</p>
<ol>
<li>在 <code>application.properties</code> 中配置 Nacos server 的地址：</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol>
<li>使用 <code>@NacosInjected</code> 注入 Nacos 的 <code>NamingService</code> 实例：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>启动 <code>NacosDiscoveryApplication</code>，调用 <code>curl http://localhost:8080/discovery/get?serviceName=example</code>，此时返回为空 JSON 数组<code>[]</code>。</li>
<li>通过调用 <a href="https://nacos.io/zh-cn/docs/open-api.html" target="_blank" rel="noopener noreferrer">Nacos Open API</a> 向  Nacos server 注册一个名称为 <code>example</code> 服务</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol>
<li>再次访问 <code>curl http://localhost:8080/discovery/get?serviceName=example</code>，此时返回内容为：</li>
</ol>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html" target="_blank" rel="noopener noreferrer">Nacos Spring Cloud</a></h3>
<h3> <a href="https://nacos.io/zh-cn/docs/quick-start-docker.html" target="_blank" rel="noopener noreferrer">Nacos Docker</a></h3>
<h3> <a href="https://nacos.io/zh-cn/docs/use-nacos-with-dubbo.html" target="_blank" rel="noopener noreferrer">Nacos Dubbo</a></h3>
<h3> <a href="https://nacos.io/zh-cn/docs/use-nacos-with-kubernetes.html" target="_blank" rel="noopener noreferrer">Nacos k8s</a></h3>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Nacos"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">OSS</title>
    <id>https://topjf.github.io/java/oss.html</id>
    <link href="https://topjf.github.io/java/oss.html"/>
    <updated>2023-03-05T14:57:36.000Z</updated>
    <summary type="text">[阿里文档]( 如果使用的是Java 9及以上的版本，则需要添加jaxb相关依赖 创建\获取账户 ,+ 分配权限 常用方法 方法 说明 :----------------------------------------------------------- :-----------------------------------------------...</summary>
    <content type="html"><![CDATA[<!-- more -->
<p>[阿里文档]( <a href="https://help.aliyun.com/document_detail/32009.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/32009.html</a></p>
<h1>1，OSS 依赖</h1>
<p><a href="https://mvnrepository.com/artifact/com.aliyun.oss/aliyun-sdk-oss" target="_blank" rel="noopener noreferrer">https://mvnrepository.com/artifact/com.aliyun.oss/aliyun-sdk-oss</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用的是Java 9及以上的版本，则需要添加jaxb相关依赖</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 创建\获取账户</h2>
<p><a href="https://ram.console.aliyun.com/users/new" target="_blank" rel="noopener noreferrer">https://ram.console.aliyun.com/users/new</a> ,+ 分配权限</p>
<div class="language-Java line-numbers-mode" data-ext="Java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常用方法</h2>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">new OSSClientBuilder().build(endpoint, accessId, secretKey, conf);</td>
<td style="text-align:left">创建OSSClient实例。</td>
</tr>
<tr>
<td style="text-align:left">new ClientBuilderConfiguration();</td>
<td style="text-align:left">配置OSSClient实例</td>
</tr>
<tr>
<td style="text-align:left">ossClient.createBucket(bucketName);</td>
<td style="text-align:left">创建存储空间。</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">关闭OSSClient。</td>
</tr>
<tr>
<td style="text-align:left">ossClient.putObject()</td>
<td style="text-align:left">上传文件</td>
</tr>
<tr>
<td style="text-align:left">InputStream content =ossClient.getObject(bucketName, objectName).getObjectContent(); <br>content .close();</td>
<td style="text-align:left">下载文件(存储空间,文件名路径)<br>流必须关闭,否则会造成连接泄漏</td>
</tr>
<tr>
<td style="text-align:left">objectListing = ossClient.listObjects(bucketName);<br>objectListing .getObjectSummaries</td>
<td style="text-align:left">获取文件list<br>获取所有文件的描述信息</td>
</tr>
<tr>
<td style="text-align:left">.deleteObject(bucketName, objectName);</td>
<td style="text-align:left">删除文件</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h1>2，oss(跨域+获取签名) 推荐<a name="cloud-oss"></a></h1>
<h2> -- nacos .yml 配置</h2>
<p>bootstrap.yml</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nacos -&gt; oss.yml</p>
<p>access申请：<a href="https://ram.console.aliyun.com/users" target="_blank" rel="noopener noreferrer">https://ram.console.aliyun.com/users</a></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Consider defining a bean of type 'com.aliyun.oss.OSS' in your configuration</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/31926.html" target="_blank" rel="noopener noreferrer">获取签名</a><a name="获取签名"></a></h2>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>时序图</figcaption></figure>
<table>
<thead>
<tr>
<th style="text-align:left">字段</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">accessid</td>
<td style="text-align:left">用户请求的AccessKey ID："LTAI5tBDFVar1hoq****",</td>
</tr>
<tr>
<td style="text-align:left">host</td>
<td style="text-align:left">用户发送上传请求的域名"<a href="http://xxx.oss-cn-hangzhou.aliyuncs.com" target="_blank" rel="noopener noreferrer">http://xxx.oss-cn-hangzhou.aliyuncs.com</a>",</td>
</tr>
<tr>
<td style="text-align:left">policy</td>
<td style="text-align:left">用户表单上传的策略（Policy），Policy为经过Base64编码过的字符串。"eyJleH...."</td>
</tr>
<tr>
<td style="text-align:left">signature</td>
<td style="text-align:left">对Policy签名后的字符串     "VsxOcOudx******z93CLaXPz+4s=",</td>
</tr>
<tr>
<td style="text-align:left">expire</td>
<td style="text-align:left">由服务器端指定的Policy过期时间，格式为Unix时间戳1446727949</td>
</tr>
<tr>
<td style="text-align:left">dir</td>
<td style="text-align:left">上传的文件前缀</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#web%E4%B8%8A%E4%BC%A0%E7%A4%BA%E4%BE%8B">web上传示例</a></p>
<h2> -- 获取签名测试</h2>
<p><a href="http://localhost:50000/api/thirdparty/oss/policy" target="_blank" rel="noopener noreferrer">http://localhost:50000/api/thirdparty/oss/policy</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1><a href="https://help.aliyun.com/document_detail/145203.html" target="_blank" rel="noopener noreferrer">3，存储空间（Bucket）</a></h1>
<h2> -- 创建存储空间 createBucket</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 列举存储空间</h2>
<h3> 列举所有存储空间 listBuckets</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 列举指定前缀的存储空间 setPrefix</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 列举指定marker之后的存储空间 setMarker</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 列举指定个数的存储空间 setMaxKeys</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 判断存储空间是否存在  doesBucketExist("bucketName")</h2>
<h2> -- 获取存储空间的地域 getBucketLocation("bucketName")</h2>
<h2> -- 获取存储空间的信息 getBucketInfo("bucketName")</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 管理存储空间读写权限</h2>
<h3> 设置存储空间的访问权限</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 获取存储空间读写权限</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> -- 删除存储空间</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/119163.html" target="_blank" rel="noopener noreferrer">存储空间标签</a></h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 设置</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 列举指定标签</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/177804.html" target="_blank" rel="noopener noreferrer">存储空间清单</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/155204.html" target="_blank" rel="noopener noreferrer">授权策略</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/181366.html" target="_blank" rel="noopener noreferrer">合规保留策略</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/32017.html" target="_blank" rel="noopener noreferrer">生命周期</a></h2>
<h2> -- <a href="">请求者付费模式</a></h2>
<h2> -- <a href="">防盗链</a></h2>
<h2> -- <a href="">访问日志</a></h2>
<h2> -- <a href="">静态网站托管（镜像回源）</a></h2>
<h2> -- <a href="">跨区域复制</a></h2>
<h2> -- <a href="">跨域资源共享</a></h2>
<h2> -- <a href="">传输加速</a></h2>
<h1><a href="https://help.aliyun.com/document_detail/84778.html" target="_blank" rel="noopener noreferrer">4，上传文件</a></h1>
<h2> -- <a href="https://help.aliyun.com/document_detail/32013.html" target="_blank" rel="noopener noreferrer">概述</a></h2>

<h2> -- <a href="https://help.aliyun.com/document_detail/84781.html" target="_blank" rel="noopener noreferrer">简单上传</a></h2>
<h3> 流式上传</h3>
<p>使用流式上传，您可以将数据流上传到OSS文件。
<strong>说明</strong> <code>如果OSS文件存在，则上传的数据会覆盖该文件的内容；如果OSS文件不存在，则会新建该文件</code></p>
<h4> 上传字符串</h4>
<p>以下代码用于将字符串上传到目标存储空间examplebucket中exampledir目录下的exampleobject.txt文件。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 上传Byte数组</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 上传网络流</h4>
<p>以下代码用于将网络流上传到目标存储空间的exampleobject.txt文件。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 上传文件流</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 文件上传</h3>
<p>使用文件上传，您可以将本地文件上传到OSS文件。
以下代码用于将本地文件examplefile.txt上传到目标存储空间examplebucket中exampledir目录下的exampleobject.txt文件。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- web上传</h2>
<p><code>浏览器或App端上传文件到应用服务器，应用服务器再把文件上传到OSS</code></p>
<figure><figcaption>时序图</figcaption></figure>
<h3> 缺点</h3>
<p>和<code>数据直传</code>到OSS相比，web端：</p>
<ul>
<li>上传慢：用户数据需先上传到应用服务器，之后再上传到OSS，网络传输时间比直传到OSS多一倍。如果用户数据不通过应用服务器中转，而是直传到OSS，速度将大大提升。而且OSS采用BGP带宽，能保证各地各运营商之间的传输速度。</li>
<li>扩展性差：如果后续用户数量逐渐增加，则应用服务器会成为瓶颈。</li>
<li>费用高：需要准备多台应用服务器。由于OSS上行流量是免费的，如果数据直传到OSS，将节省多台应用服务器的费用。</li>
</ul>
<h3> VUE获取签名后直传<a name="web上传示例"></a></h3>
<figure><figcaption>时序图</figcaption></figure>
<p><a href="#%E8%8E%B7%E5%8F%96%E7%AD%BE%E5%90%8D">1、2步：获取签名</a></p>
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Java获取签名直传并设置上传回调</h3>
<p><a href="#%E8%8E%B7%E5%8F%96%E7%AD%BE%E5%90%8D">java获取签名</a></p>
<p><a href="#%E4%B8%8A%E4%BC%A0%E5%9B%9E%E8%B0%83">上传回调</a></p>
<h2> -- <a href="https://help.aliyun.com/document_detail/84788.html" target="_blank" rel="noopener noreferrer">表单上传</a></h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84784.html" target="_blank" rel="noopener noreferrer">追加上传</a></h2>
<h3> 注意事项</h3>
<ul>
<li>当文件不存在时，调用AppendObject接口会创建一个追加类型文件。</li>
<li>当文件已存在时，如果文件为追加类型文件，且设置的追加位置和文件当前长度相等，则直接在该文件末尾追加内容；如果文件为追加类型文件，但是设置的追加位置和文件当前长度不相等，则抛出PositionNotEqualToLength异常；如果文件为非追加类型文件时，则抛出ObjectNotAppendable异常。</li>
<li>追加类型文件暂不支持CopyObject操作。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84785.html" target="_blank" rel="noopener noreferrer">断点续传上传</a></h2>
<h3> 参数</h3>
<p>您可以通过ossClient.uploadFile方法实现断点续传上传。此方法的uploadFileRequest请求包含的参数请参见下表。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>BucketName</td>
<td>存储空间名称。</td>
</tr>
<tr>
<td>Key</td>
<td>上传到OSS的文件名称。</td>
</tr>
<tr>
<td>UploadFile</td>
<td>待上传的本地文件路径。</td>
</tr>
<tr>
<td>TaskNum</td>
<td>上传并发线程数，默认值为1。</td>
</tr>
<tr>
<td>PartSize</td>
<td>上传的分片大小，单位为Byte，取值范围为100 KB~5 GB。默认值为100 KB。</td>
</tr>
<tr>
<td>EnableCheckpoint</td>
<td>是否开启断点续传功能，默认关闭。</td>
</tr>
<tr>
<td>CheckpointFile</td>
<td>记录本地分片上传结果的文件。上传过程中的进度信息会保存在该文件中，如果某一分片上传失败，再次上传时会根据文件中记录的点继续上传。上传完成后，该文件会被删除。如果未设置该值，默认与待上传的本地文件同路径，名称为${uploadFile}.ucp。</td>
</tr>
<tr>
<td>Callback</td>
<td>使用上传回调。关于上传回调的更多信息</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84786.html" target="_blank" rel="noopener noreferrer">分片上传</a></h2>
<h3> 分片上传流程</h3>
<p>分片上传（Multipart Upload）分为以下三个步骤：</p>
<ol>
<li>
<p>初始化一个分片上传事件。</p>
<p>调用ossClient.initiateMultipartUpload方法返回OSS创建的全局唯一的uploadId。</p>
</li>
<li>
<p>上传分片。</p>
<p>调用ossClient.uploadPart方法上传分片数据。</p>
<p><strong>说明</strong></p>
<ul>
<li>对于同一个uploadId，分片号（PartNumber）标识了该分片在整个文件内的相对位置。如果使用同一个分片号上传了新的数据，则OSS上该分片已有的数据将会被覆盖。</li>
<li>OSS将收到的分片数据的MD5值放在ETag头内返回给用户。</li>
<li>OSS计算上传数据的MD5值，并与SDK计算的MD5值比较，如果不一致则返回InvalidDigest错误码。</li>
</ul>
</li>
<li>
<p>完成分片上传。</p>
<p>所有分片上传完成后，调用ossClient.completeMultipartUpload方法将所有分片合并成完整的文件。</p>
</li>
</ol>
<h3> 分片上传完整示例</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 取消分片上传事件</h3>
<p>您可以调用ossClient.abortMultipartUpload方法来取消分片上传事件。当一个分片上传事件被取消后，无法再使用该uploadId进行任何操作，已上传的分片数据会被删除。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 列举已上传的分片</h3>
<h4> 简单列举已上传的分片</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 列举所有已上传的分片</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 分页列举所有已上传的分片</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 列举分片上传事件</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
<th>设置方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>prefix</td>
<td>限定返回的文件名称必须以指定的prefix作为前缀。注意使用prefix查询时，返回的文件名称中仍会包含prefix。</td>
<td>ListMultipartUploadsRequest.setPrefix(String prefix)</td>
</tr>
<tr>
<td>delimiter</td>
<td>用于对文件名称进行分组的一个字符。所有名称包含指定的前缀且第一次出现delimiter字符之间的文件作为一组元素。</td>
<td>ListMultipartUploadsRequest.setDelimiter(String delimiter)</td>
</tr>
<tr>
<td>maxUploads</td>
<td>限定此次返回分片上传事件的最大个数，默认值和最大值均为1000。</td>
<td>ListMultipartUploadsRequest.setMaxUploads(Integer maxUploads)</td>
</tr>
<tr>
<td>keyMarker</td>
<td>所有文件名称的字典序大于keyMarker参数值的分片上传事件。与uploadIdMarker参数一同使用，用于指定返回结果的起始位置。</td>
<td>ListMultipartUploadsRequest.setKeyMarker(String keyMarker)</td>
</tr>
<tr>
<td>uploadIdMarker</td>
<td>与keyMarker参数一同使用，用于指定返回结果的起始位置。 如果未设置keyMarker参数，则此参数无效。如果设置了keyMarker参数，则查询结果中包含：                                                                                             文件名称的字典序大于keyMarker参数值的所有文件。                                 文件名称等于keyMarker参数值且uploadId比uploadIdMarker参数值大的所有分片上传事件。</td>
<td>ListMultipartUploadsRequest.setUploadIdMarker(String uploadIdMarker)</td>
</tr>
</tbody>
</table>
<h4> 简单列举分片上传事件</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 列举全部分片上传事件</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 分页列举全部上传事件</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84796.html" target="_blank" rel="noopener noreferrer">进度条</a></h2>
<p>ossClient.putObject、ossClient.getObject、ossClient.uploadPart、ossClient.uploadFile以及ossClient.downloadFile方法均支持进度条功能，使用方法与ossClient.putObject类似。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84798.html" target="_blank" rel="noopener noreferrer">上传回调</a><a name="上传回调"></a></h2>
<p>OSS会在文件上传完成后，把文件上传信息通过此回调URL发送给应用服务器。</p>
<h3> 例子1</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 例子2</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1><a href="https://help.aliyun.com/document_detail/84822.html" target="_blank" rel="noopener noreferrer">5，下载文件</a></h1>
<h2> -- <a href="https://help.aliyun.com/document_detail/84823.html" target="_blank" rel="noopener noreferrer">流式下载</a></h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84824.html" target="_blank" rel="noopener noreferrer">下载到本地文件</a></h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84825.html" target="_blank" rel="noopener noreferrer">范围下载</a></h2>
<h3> 指定正常的下载范围</h3>
<p>流式读取一次可能无法读取全部数据。如果您需要流式读取64 KB的数据，请使用如下的方式多次读取，直到读取到64 KB或者文件结束</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 指定异常的下载范围</h3>
<p>假设现有大小为1000 Bytes的Object，则指定的正常下载范围应为0~999。如果指定范围不在有效区间，会导致Range不生效，响应返回值为200，并传送整个Object的内容。请求不合法的示例及返回说明如下：</p>
<ul>
<li>若指定了Range: bytes=500~2000，此时范围末端取值不在有效区间，返回整个文件的内容，且HTTP Code为200。</li>
<li>若指定了Range: bytes=1000~2000，此时范围首端取值不在有效区间，返回整个文件的内容，且HTTP Code为200。</li>
</ul>
<h3> 兼容行为范围下载</h3>
<p>假设现有大小为1000 Bytes的Object，则指定的正常下载范围应为0~999。如果指定范围不在有效区间，会导致Range不生效，响应返回值为200，并传送整个Object的内容。请求不合法的示例及返回说明如下：</p>
<ul>
<li>若指定了Range: bytes=500~2000，此时范围末端取值不在有效区间，返回整个文件的内容，且HTTP Code为200。</li>
<li>若指定了Range: bytes=1000~2000，此时范围首端取值不在有效区间，返回整个文件的内容，且HTTP Code为200。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84827.html" target="_blank" rel="noopener noreferrer">断点续传下载</a></h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>是否必选</th>
<th>示例值</th>
<th>描述</th>
<th>如何设置</th>
</tr>
</thead>
<tbody>
<tr>
<td>bucketName</td>
<td>是</td>
<td>examplebucket</td>
<td>存储空间（Bucket）名称。</td>
<td>通过构造方法设置。</td>
</tr>
<tr>
<td>key</td>
<td>是</td>
<td>exampledir/exampleobject.txt</td>
<td>Object完整路径。Object完整路径中不能包含Bucket名称。</td>
<td>通过构造方法设置。</td>
</tr>
<tr>
<td>downloadFile</td>
<td>否</td>
<td>D:\localpath\examplefile.txt</td>
<td>本地文件的完整路径。OSS文件将下载到该本地文件。</td>
<td>通过构造方法或setDownloadFile设置。</td>
</tr>
<tr>
<td>partSize</td>
<td>否</td>
<td>1 <em>1024</em> 1024</td>
<td>分片大小，取值范围为1 B~5 GB。</td>
<td>通过setPartSize设置。</td>
</tr>
<tr>
<td>taskNum</td>
<td>否</td>
<td>10</td>
<td>分片下载的并发数。默认值为1。</td>
<td>通过setTaskNum设置。</td>
</tr>
<tr>
<td>enableCheckpoint</td>
<td>否</td>
<td>true</td>
<td>是否开启断点续传功能。取值范围如下：                                                         false（默认）：关闭                              true：开启</td>
<td>通过setEnableCheckpoint设置。</td>
</tr>
<tr>
<td>checkpointFile</td>
<td>否</td>
<td>D:\localpath\examplefile.txt.dcp</td>
<td>记录本地分片下载结果的文件。开启断点续传功能时需要设置此参数。下载过程中的进度信息会保存在该文件中，如果某一分片下载失败，再次下载时会根据文件中记录的点继续下载。下载完成后，该文件会被删除。                           文件默认名称为downloadFile.dcp，且与downloadFile处于相同路径。</td>
<td>通过setCheckpointFile设置。</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84828.html" target="_blank" rel="noopener noreferrer">限定条件下载</a></h2>
<p>下载文件时，可以指定一个或多个限定条件。满足限定条件则下载，不满足则返回错误，不下载。可以使用的限定条件如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>If-Modified-Since</td>
<td>如果指定的时间早于实际修改时间，则正常传输文件，否则返回错误（304 Not modified）。</td>
</tr>
<tr>
<td>If-Unmodified-Since</td>
<td>如果指定的时间等于或者晚于文件实际修改时间，则正常传输文件，否则返回错误（412 Precondition failed）。</td>
</tr>
<tr>
<td>If-Match</td>
<td>如果指定的ETag和OSS文件的ETag匹配，则正常传输文件，否则返回错误（412 Precondition failed）。</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>如果指定的ETag和OSS文件的ETag不匹配，则正常传输文件，否则返回错误（304 Not modified）。</td>
</tr>
</tbody>
</table>
<p>If-Modified-Since和If-Unmodified-Since可以同时存在。If-Match和If-None-Match可以同时存在。</p>
<p>ETag可以通过ossClient.getObjectMeta方法获取。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84829.html" target="_blank" rel="noopener noreferrer">进度条</a></h2>
<p>ossClient.putObject、ossClient.getObject、ossClient.uploadPart、ossClient.uploadFile以及ossClient.downloadFile方法均支持进度条功能，使用方法与ossClient.getObject类似。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1><a href="https://help.aliyun.com/document_detail/84835.html" target="_blank" rel="noopener noreferrer">6，管理文件</a></h1>
<h2> -- <a href="https://help.aliyun.com/document_detail/84837.html" target="_blank" rel="noopener noreferrer">判断文件是否存在</a></h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84838.html" target="_blank" rel="noopener noreferrer">管理文件访问权限</a></h2>
<table>
<thead>
<tr>
<th>访问权限</th>
<th>描述</th>
<th>访问权限值</th>
</tr>
</thead>
<tbody>
<tr>
<td>继承Bucket</td>
<td>文件遵循存储空间的访问权限。</td>
<td>CannedAccessControlList.Default</td>
</tr>
<tr>
<td>私有</td>
<td>文件的拥有者和授权用户有该文件的读写权限，其他用户没有权限操作该文件。</td>
<td>CannedAccessControlList.Private</td>
</tr>
<tr>
<td>公共读</td>
<td>文件的拥有者和授权用户有该文件的读写权限，其他用户只有文件的读权限。请谨慎使用该权限。</td>
<td>CannedAccessControlList.PublicRead</td>
</tr>
<tr>
<td>公共读写</td>
<td>所有用户都有该文件的读写权限。请谨慎使用该权限。</td>
<td>CannedAccessControlList.PublicReadWrite</td>
</tr>
</tbody>
</table>
<h3> 设置文件访问权限</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取文件访问权限</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84840.html" target="_blank" rel="noopener noreferrer">管理文件元信息</a></h2>
<h3> 设置文件元信息</h3>
<h4> 设置HTTP header</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 设置自定义元信息</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修改文件元信息</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取文件元信息</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>优势</th>
</tr>
</thead>
<tbody>
<tr>
<td>ossClient.getSimplifiedObjectMeta</td>
<td>获取文件的ETag、Size（文件大小）、 LastModified（最后修改时间）。</td>
<td>更轻量、更快</td>
</tr>
<tr>
<td>ossClient.getObjectMetadata</td>
<td>获取文件的全部元信息。</td>
<td>无</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/116556.html" target="_blank" rel="noopener noreferrer">转换文件存储类型</a></h2>
<h3> 用于将Object的存储类型从标准或低频访问转换为归档类型</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 用于将Object的存储类型从归档转换为低频访问类型</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/84841.html" target="_blank" rel="noopener noreferrer">列举文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/123634.html" target="_blank" rel="noopener noreferrer">查询文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/84842.html" target="_blank" rel="noopener noreferrer">删除文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/84843.html" target="_blank" rel="noopener noreferrer">拷贝文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/146172.html" target="_blank" rel="noopener noreferrer">禁止覆盖同名文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/84846.html" target="_blank" rel="noopener noreferrer">解冻文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/84848.html" target="_blank" rel="noopener noreferrer">管理软链接</a></h2>
<h1><a href="https://help.aliyun.com/document_detail/119164.html" target="_blank" rel="noopener noreferrer">7，管理版本控制</a></h1>
<h2> -- <a href="https://help.aliyun.com/document_detail/119165.html" target="_blank" rel="noopener noreferrer">管理版本控制</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119173.html" target="_blank" rel="noopener noreferrer">上传文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119175.html" target="_blank" rel="noopener noreferrer">下载文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119177.html" target="_blank" rel="noopener noreferrer">拷贝文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/190262.html" target="_blank" rel="noopener noreferrer">列举文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119178.html" target="_blank" rel="noopener noreferrer">删除文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119181.html" target="_blank" rel="noopener noreferrer">解冻文件</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119182.html" target="_blank" rel="noopener noreferrer">获取文件元信息</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119183.html" target="_blank" rel="noopener noreferrer">管理文件访问权限</a></h2>
<h2> -- <a href="https://help.aliyun.com/document_detail/119185.html" target="_blank" rel="noopener noreferrer">管理软链接</a></h2>
<h1><a href="https://help.aliyun.com/document_detail/162791.html" target="_blank" rel="noopener noreferrer">8，数据加密</a></h1>
<h2> -- <a href="https://help.aliyun.com/document_detail/119162.html" target="_blank" rel="noopener noreferrer">服务器端加密</a></h2>
<h3> 配置Bucket加密</h3>
<p>您可以通过以下代码设置Bucket默认加密方式，设置成功之后，所有上传至该Bucket但未设置加密方式的Object都会使用Bucket默认加密方式进行加密：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取Bucket加密配置</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除Bucket加密配置</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- <a href="https://help.aliyun.com/document_detail/162792.html" target="_blank" rel="noopener noreferrer">客户端加密</a></h2>
<h2> -- 加密方式</h2>
<p>对于主密钥的使用，目前支持如下两种方式：</p>
<ul>
<li>使用KMS托管用户主密钥
当使用KMS托管用户主密钥用于客户端数据加密时，需要将KMS用户主密钥ID（即CMK ID）传递给SDK。</li>
<li>使用用户自主管理的主密钥（RSA）
主密钥信息由用户提供，需要用户将主密钥的公钥、私钥信息当做参数传递给SDK。
使用以上两种加密方式能够有效地避免数据泄漏，保护客户端数据安全。即使数据泄漏，其他人也无法解密得到原始数据。</li>
</ul>
<h3> 加密元信息</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>是否必须</th>
</tr>
</thead>
<tbody>
<tr>
<td>x-oss-meta-client-side-encryption-key</td>
<td>加密后的密钥。 经过主密钥加密后再经过base64编码的字符串。</td>
<td>是</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-start</td>
<td>随机产生的用于加密数据的初始值 。经过主密钥加密后再经过base64编码的字符串。</td>
<td>是</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-cek-alg</td>
<td>数据的加密算法。</td>
<td>是</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-wrap-alg</td>
<td>数据密钥的加密算法。</td>
<td>是</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-matdesc</td>
<td>主密钥的描述信息。JSON格式。                                                                                                 <strong>警告</strong> 强烈建议为每个主密钥都配置描述信息，并保存好主密钥和描述信息之间的对应关系。否则加密之后不支持更换主密钥进行加密。</td>
<td>否</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-unencrypted-content-length</td>
<td>加密前的数据长度。若未指定content-length，则不生成该参数。</td>
<td>否</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-unencrypted-content-md5</td>
<td>加密前数据的MD5。若未指定MD5，则不生成该参数。</td>
<td>否</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-data-size</td>
<td>若加密Multipart文件，则需要在init_multipart时传入整个大文件的总大小。</td>
<td>是（分片上传）</td>
</tr>
<tr>
<td>x-oss-meta-client-side-encryption-part-size</td>
<td>若加密Multipart文件，则需要在init_multipart时传入分片大小。                                                                                                 <strong>注意</strong> 目前分片大小必须是16的整数倍。</td>
<td>是（分片上传）</td>
</tr>
</tbody>
</table>
<h2> -- 创建加密客户端</h2>
<p><strong>说明</strong> 使用客户端加密时，需确保您使用了OSS Java SDK 3.9.1及以上版本，同时在工程里添加Bouncy Castle Crypto包，例如在pom.xml中加入如下依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果运行时报<code>java.security.InvalidKeyException: Illegal key size or default parameters</code>异常，则需要补充Oracle的JCE文件，将其部署在JRE的环境中。
请根据使用的JDK版本分别下载对应的文件，将其解压后保存在jre/lib/security目录下。</p>
<ul>
<li><a href="https://www.oracle.com/java/technologies/jce-6-download.html" target="_blank" rel="noopener noreferrer">JDK6 JCE补充包</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase-jce7-downloads.html" target="_blank" rel="noopener noreferrer">JDK7 JCE补充包</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase-jce8-downloads.html" target="_blank" rel="noopener noreferrer">JDK8 JCE补充包</a></li>
</ul>
<p>以下提供了创建RSA、KMS加密客户端的完整示例。</p>
<h3> 创建RSA加密客户端</h3>
<p>创建RSA加密客户端之前，需要创建非对称密钥KeyPair对象。OSS Java  SDK提供了从PKCS1编码或PKCS8编码的pem格式私钥字符串到RSAPrivateKey对象的转换，以及从X509编码pem格式公钥字符串到RSAPublicKey对象的转换。</p>
<p><code>RSAPrivateKey SimpleRSAEncryptionMaterials.getPrivateKeyFromPemPKCS1(String privateKeyStr);</code></p>
<p><code>RSAPrivateKey SimpleRSAEncryptionMaterials.getPrivateKeyFromPemPKCS8(String privateKeyStr);</code></p>
<p><code>RSAPublicKey SimpleRSAEncryptionMaterials.getPublicKeyFromPemX509(String publicKeyStr);</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 创建KMS加密客户端</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下提供了如何使用用户自主管理的主密钥（RSA）进行普通上传和下载文件、分片上传、范围下载等场景的完整示例。</p>
<p><strong>说明</strong> 使用主密钥KMS与使用主密钥RSA的方式，区别仅在于OSSEncryptionClient的创建过程。</p>
<h2> -- 普通上传和下载文件</h2>
<p>使用<strong>主密钥RSA</strong>进行普通上传和下载Object示例代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 分片上传</h2>
<p>使用<strong>主密钥RSA</strong>进行分片上传的示例代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 断点续传上传</h2>
<p>使用<strong>主密钥RSA</strong>进行断点续传上传的示例代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 断点续传下载</h2>
<p>使用<strong>主密钥RSA</strong>进行断点续传下载的示例代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 范围下载</h2>
<p>使用<strong>主密钥RSA</strong>对范围下载的文件进行解密的示例代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1><a href="https://help.aliyun.com/document_detail/32016.html" target="_blank" rel="noopener noreferrer">9、授权访问</a></h1>
<h2> 使用STS进行临时授权</h2>
<p>STS的优势如下：</p>
<ul>
<li>您无需透露您的长期密钥（AccessKey）给第三方应用，只需生成一个访问令牌并将令牌交给第三方应用。您可以自定义这个令牌的访问权限及有效期限。</li>
<li>您无需关心权限撤销问题，访问令牌过期后自动失效。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 使用签名URL进行临时授权</h2>
<p><strong>说明</strong>  <code>由于STS临时账号以及签名URL均需设置有效时长，当您使用STS临时账号生成签名URL执行相关操作（例如上传、下载文件）时，以最小的有效时长为准。例如您的STS临时账号的有效时长设置为1200秒、签名URL设置为3600秒时，当有效时长超过1200秒后，您无法使用此STS临时账号生成的签名URL上传文件。</code></p>
<ul>
<li>生成签名URL
您可以将生成的签名URL提供给访客进行临时访问。生成签名URL时，您可以通过指定URL的过期时间来限制访客的访问时长。签名URL的默认过期时间为3600秒，最大值为32400秒。
在URL中加入签名信息，以便将该URL转给第三方实现授权访问。</li>
<li>生成以GET方法访问的签名URL</li>
</ul>
<h3> 生成单个以GET方法访问的签名URL</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 生成多个以GET方法访问的签名URL</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>生成以其他HTTP方法访问的签名URL
如果您要授权其他用户临时执行其他操作（例如上传、删除文件等），需要生成对应的签名URL，例如生成以PUT方法访问的签名URL来上传文件。您可以根据需要一次生成单个或者多个以其他HTTP方法访问的签名URL。</li>
</ul>
<h3> 生成单个以其他HTTP方法访问的签名URL</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 生成多个以其他HTTP方法访问的签名URL</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过传入HttpMethod.PUT参数，访客可以使用生成的签名URL上传文件。</p>
<ul>
<li>
<p>生成带有指定参数的签名URL</p>
<p>您可以根据需要一次生成单个或者多个带有指定参数的签名URL。</p>
</li>
</ul>
<h3> 生成单个带有指定参数的签名URL</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 生成多个带有指定参数的签名URL</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 使用签名URL上传文件</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 使用签名URL获取文件</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1><a href="https://help.aliyun.com/document_detail/85170.html" target="_blank" rel="noopener noreferrer">10、数据安全性</a></h1>
<h1><a href="https://help.aliyun.com/document_detail/47505.html" target="_blank" rel="noopener noreferrer">11、图片处理</a></h1>
<p><a href="https://github.com/aliyun/aliyun-oss-java-sdk/blob/master/src/samples/ImageSample.java?spm=a2c4g.11186623.0.0.79e460b3gmbYI7&amp;file=ImageSample.java" target="_blank" rel="noopener noreferrer">项目</a></p>
<h1>12、OSS常见错误码</h1>
<table>
<thead>
<tr>
<th>错误码</th>
<th>描述</th>
<th>HTTP状态码</th>
</tr>
</thead>
<tbody>
<tr>
<td>AccessDenied</td>
<td>拒绝访问</td>
<td>403</td>
</tr>
<tr>
<td>BucketAlreadyExists</td>
<td>存储空间已经存在</td>
<td>409</td>
</tr>
<tr>
<td>BucketNotEmpty</td>
<td>存储空间非空</td>
<td>409</td>
</tr>
<tr>
<td>EntityTooLarge</td>
<td>实体过大</td>
<td>400</td>
</tr>
<tr>
<td>EntityTooSmall</td>
<td>实体过小</td>
<td>400</td>
</tr>
<tr>
<td>FileGroupTooLarge</td>
<td>文件组过大</td>
<td>400</td>
</tr>
<tr>
<td>FilePartNotExist</td>
<td>文件分片不存在</td>
<td>400</td>
</tr>
<tr>
<td>FilePartStale</td>
<td>文件分片过时</td>
<td>400</td>
</tr>
<tr>
<td>InvalidArgument</td>
<td>参数格式错误</td>
<td>400</td>
</tr>
<tr>
<td>InvalidAccessKeyId</td>
<td>AccessKeyId不存在</td>
<td>403</td>
</tr>
<tr>
<td>InvalidBucketName</td>
<td>无效的存储空间名称</td>
<td>400</td>
</tr>
<tr>
<td>InvalidDigest</td>
<td>无效的摘要</td>
<td>400</td>
</tr>
<tr>
<td>InvalidObjectName</td>
<td>无效的文件名称</td>
<td>400</td>
</tr>
<tr>
<td>InvalidPart</td>
<td>无效的分片</td>
<td>400</td>
</tr>
<tr>
<td>InvalidPartOrder</td>
<td>无效的分片顺序</td>
<td>400</td>
</tr>
<tr>
<td>InvalidTargetBucketForLogging</td>
<td>Logging操作中有无效的目标存储空间</td>
<td>400</td>
</tr>
<tr>
<td>InternalError</td>
<td>OSS内部错误</td>
<td>500</td>
</tr>
<tr>
<td>MalformedXML</td>
<td>XML格式非法</td>
<td>400</td>
</tr>
<tr>
<td>MethodNotAllowed</td>
<td>不支持的方法</td>
<td>405</td>
</tr>
<tr>
<td>MissingArgument</td>
<td>缺少参数</td>
<td>411</td>
</tr>
<tr>
<td>MissingContentLength</td>
<td>缺少内容长度</td>
<td>411</td>
</tr>
<tr>
<td>NoSuchBucket</td>
<td>存储空间不存在</td>
<td>404</td>
</tr>
<tr>
<td>NoSuchKey</td>
<td>文件不存在</td>
<td>404</td>
</tr>
<tr>
<td>NoSuchUpload</td>
<td>分片上传ID不存在</td>
<td>404</td>
</tr>
<tr>
<td>NotImplemented</td>
<td>无法处理的方法</td>
<td>501</td>
</tr>
<tr>
<td>PreconditionFailed</td>
<td>预处理错误</td>
<td>412</td>
</tr>
<tr>
<td>RequestTimeTooSkewed</td>
<td>客户端本地时间和OSS服务器时间相差超过15分钟</td>
<td>403</td>
</tr>
<tr>
<td>RequestTimeout</td>
<td>请求超时</td>
<td>400</td>
</tr>
<tr>
<td>SignatureDoesNotMatch</td>
<td>签名错误</td>
<td>403</td>
</tr>
<tr>
<td>InvalidEncryptionAlgorithmError</td>
<td>指定的熵编码加密算法错误</td>
<td>400</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="文件服务"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">权限管理</title>
    <id>https://topjf.github.io/java/permission-management.html</id>
    <link href="https://topjf.github.io/java/permission-management.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">一 pom依赖 二 Shiro配置 三 自定义Realm 四 自定义过滤器Auth2Filter 五 Auth2Token 六 登录接口 1、动态路由 image-20210828222133378 自己!image-20210828215739123 (./permission-management.assets/true-image-2021082...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>shiro</h1>
<h2> 一 pom依赖</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 二 Shiro配置</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 三 自定义Realm</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 四 自定义过滤器Auth2Filter</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 五 Auth2Token</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 六 登录接口</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>基于JWT</h1>

<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1><a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">Spring Security</a></h1>
<h1><a href="https://sa-token.dev33.cn/" target="_blank" rel="noopener noreferrer">sa-token</a></h1>
<h1>前端</h1>
<h2> 1、动态路由</h2>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20210828222133378</figcaption></figure>
<p>自己</p>
<p>人人</p>
<figure><figcaption>image-20210906144138202</figcaption></figure>
<figure><figcaption>image-20210906144324229</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">单点登录（SSO）</title>
    <id>https://topjf.github.io/java/single-sign-on.html</id>
    <link href="https://topjf.github.io/java/single-sign-on.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">SSO英文全称Single Sign On，单点登录。 SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。 2.1. cookie问题 电商平台通常由多个微服务组成，每个微服务都有独立的域名，而cookie是有作用域的。 查看浏览器控制台： domain：作用域名 domain参数 atguigu.com sso.atgui...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>2. 单点登录（SSO）</h1>
<p>SSO英文全称Single Sign On，单点登录。</p>
<p>SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p>
<h2> 2.1. cookie问题</h2>
<p>电商平台通常由多个微服务组成，每个微服务都有独立的域名，而cookie是有作用域的。</p>
<p>查看浏览器控制台：</p>
<p>domain：作用域名</p>
<table>
<thead>
<tr>
<th>domain参数</th>
<th><a href="http://atguigu.com" target="_blank" rel="noopener noreferrer">atguigu.com</a></th>
<th><a href="http://sso.atguigu.com" target="_blank" rel="noopener noreferrer">sso.atguigu.com</a></th>
<th><a href="http://order.atguigu.com" target="_blank" rel="noopener noreferrer">order.atguigu.com</a></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://atguigu.com" target="_blank" rel="noopener noreferrer">atguigu.com</a></td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><a href="http://sso.atguigu.com" target="_blank" rel="noopener noreferrer">sso.atguigu.com</a></td>
<td>×</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td><a href="http://order.atguigu.com" target="_blank" rel="noopener noreferrer">order.atguigu.com</a></td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody>
</table>
<p>domain有两点要注意：</p>
<p>​ 1. <strong>domain参数可以设置父域名以及自身，但不能设置其它域名，包括子域名，否则cookie不起作用。</strong></p>
<p>​ 2. <strong>cookie的作用域是domain本身以及domain下的所有子域名。</strong></p>
<p>Cookie的路径（Path）：</p>
<p>​ response.addCookie默认放在当前路径下，访问当前路径下的所有请求都会带</p>
<p>​ 设置/标识项目根路径，访问项目任何位置都会携带</p>
<h2> 2.2. 演示案例</h2>
<p>把课前资料中的sso演示工程 《sso-example》导入idea，并且启动。</p>
<p>在hosts文件中配置域名的映射：</p>
<p>追加配置如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.2.1. 测试一：不能访问兄弟域名cookie</h3>
<p>访问：<a href="http://client.atguigu.com:8080/hello" target="_blank" rel="noopener noreferrer">http://client.atguigu.com:8080/hello</a></p>
<p>由于没有登录会重定向到登录页面：</p>
<p>输入用户名密码（任意）点击登录，又回到了上述页面。</p>
<p>查看浏览器cookie，发现：</p>
<p>sso.atguigu.com下已经有token信息。那么为什么又回到了登录页面呢？</p>
<p>这是由于点击登录时，cookie放入了sso.atguigu.com这个作用域，client域下没有cookie导致，再次访问client时，client认为没有登录，又重定向到登录页面</p>
<h3> 2.2.2. 测试二：可以访问父域名的cookie</h3>
<p>修改sso-service工程LoginController类的login方法，把cookie的作用域设置为<code>atguigu.com</code></p>
<p>重启sso-service。</p>
<p>并清理掉浏览器中的cookie：</p>
<p>访问：<a href="http://client.atguigu.com:8080/hello" target="_blank" rel="noopener noreferrer">http://client.atguigu.com:8080/hello</a></p>
<p>依然重定向到登录页面：</p>
<p>输入任意内容，点击登录：</p>
<p>可以登录成功！！</p>
<h3> 2.2.3. 测试三：cookie的作用路径</h3>
<p>修改sso-service工程LoginController类的login方法，把cookie的作用路径设置为<code>/hello</code></p>
<p>重启sso-service服务，并清理掉cookie信息。</p>
<p>在浏览器中访问：<a href="http://client.atguigu.com:8080/hello" target="_blank" rel="noopener noreferrer">http://client.atguigu.com:8080/hello</a></p>
<p>依然重定向到登录页面，输入任意内容，点击登录：</p>
<p>可以登录成功，但是cookie的作用路径是/hello。</p>
<p>此时访问：<a href="http://client.atguigu.com:8080/hello1" target="_blank" rel="noopener noreferrer">http://client.atguigu.com:8080/hello1</a></p>
<p>又会跳转到登录页面。原因：cookie只能在/hello路径及其子路径下可以正常访问。</p>
<h2> 2.3. 有状态登录</h2>
<p>为了保证客户端cookie的安全性，服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p>
<p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p>
<p>缺点是什么？</p>
<ul>
<li>服务端保存大量数据，增加服务端压力</li>
<li>服务端保存用户状态，无法进行水平扩展</li>
<li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li>
</ul>
<p>即使使用redis保存用户的信息，也会损耗服务器资源。</p>
<h2> 2.4. 无状态登录</h2>
<p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p>
<ul>
<li>服务端不保存任何客户端请求者信息</li>
<li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li>
</ul>
<p>带来的好处是什么呢？</p>
<ul>
<li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li>
<li>服务端的集群和状态对客户端透明</li>
<li>服务端可以任意的迁移和伸缩</li>
<li>减小服务端存储压力</li>
</ul>
<h2> 2.5. 无状态登录流程</h2>
<p>无状态登录的流程：</p>
<ul>
<li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li>
<li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li>
<li>以后每次请求，客户端都携带认证的token</li>
<li>服务的对token进行解密，判断是否有效。</li>
</ul>
<p>流程图：</p>
<p>整个登录过程中，最关键的点是什么？</p>
<p><strong>token的安全性</strong></p>
<p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p>
<p>采用何种方式加密才是安全可靠的呢？</p>
<p>我们将采用<code>JWT + RSA非对称加密</code></p>
<h1>3. jwt实现无状态登录</h1>
<p>JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网：<a href="https://jwt.io" target="_blank" rel="noopener noreferrer">https://jwt.io</a></p>
<p>GitHub上jwt的java客户端：<a href="https://github.com/jwtk/jjwt" target="_blank" rel="noopener noreferrer">https://github.com/jwtk/jjwt</a></p>
<h2> 3.1. 数据格式</h2>
<p>JWT包含三部分数据：</p>
<ul>
<li>
<p>Header：头部，通常头部有两部分信息：</p>
<ul>
<li>token类型：JWT</li>
<li>加密方式：base64（HS256）</li>
</ul>
</li>
<li>
<p>Payload：载荷，就是有效数据，一般包含下面信息：</p>
<ul>
<li>用户身份信息（注意，这里因为采用base64编码，可解码，因此不要存放敏感信息）</li>
<li>注册声明：如token的签发时间，过期时间，签发人等</li>
</ul>
<p>这部分也会采用base64编码，得到第二部分数据</p>
</li>
<li>
<p>Signature：签名，是整个数据的认证信息。根据前两步的数据，再加上指定的密钥（secret）（不要泄漏，最好周期性更换），通过base64编码生成。用于验证整个数据完整和可靠性</p>
</li>
</ul>
<h2> 3.2. JWT交互流程</h2>
<p>流程图：</p>
<p>步骤翻译：</p>
<ul>
<li>1、用户登录</li>
<li>2、服务的认证，通过后根据secret生成token</li>
<li>3、将生成的token返回给浏览器</li>
<li>4、用户每次请求携带token</li>
<li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li>
<li>6、处理请求，返回响应结果</li>
</ul>
<p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p>
<h2> 3.3. 非对称加密</h2>
<p>加密技术是对信息进行编码和解码的技术，编码是把原来可读信息（又称明文）译成代码形式（又称密文），其逆过程就是解码（解密），加密技术的要点是加密算法，加密算法可以分为三类：</p>
<ul>
<li>对称加密，如AES
<ul>
<li>基本原理：将明文分成N个组，然后使用密钥对各个组进行加密，形成各自的密文，最后把所有的分组密文进行合并，形成最终的密文。</li>
<li>优势：算法公开、计算量小、加密速度快、加密效率高</li>
<li>缺陷：双方都使用同样密钥，安全性得不到保证</li>
</ul>
</li>
<li>非对称加密，如RSA
<ul>
<li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端
<ul>
<li>私钥加密，持有公钥才可以解密</li>
<li>公钥加密，持有私钥才可解密</li>
</ul>
</li>
<li>优点：安全，难以破解</li>
<li>缺点：算法比较耗时</li>
</ul>
</li>
<li>不可逆加密，如MD5，SHA
<ul>
<li>基本原理：加密过程中不需要使用<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener noreferrer">密钥</a>，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。</li>
</ul>
</li>
</ul>
<p>RSA算法历史：</p>
<p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字缩写：RSA</p>
<h1>4. 搭建授权中心</h1>
<p>用户鉴权：</p>
<ul>
<li>接收用户的登录请求，通过用户中心的接口进行校验，通过后生成JWT</li>
<li>使用私钥生成JWT并返回</li>
</ul>
<p>有一些生成jwt，解析jwt这样行为的工具类，以后在其它微服务中也会用到，因此放在gmall-core中。</p>
<h2> 4.1. 创建工程</h2>
<p>pom.xml中添加gmall-common及gmall-ums-interface的依赖</p>
<p>启动类：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bootstrap.yml：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.yml：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网关工程gmall-gateway添加用户授权的网关路由：</p>
<p>在nginx中添加：<a href="http://sso.gmall.com" target="_blank" rel="noopener noreferrer">sso.gmall.com</a></p>
<p>在hosts文件中添加sso.gmall.com的域名映射。</p>
<p>注意：不要忘记重启网关，重新加载nginx配置。</p>
<h2> 4.2. JWT工具类</h2>
<p>gmall-common工程中已经封装了jwt相关的工具类：</p>
<p>并在gmall-common中的pom.xml中引入了jwt相关的依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4.3. 测试工具类</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试生成公钥和私钥，我们运行testRsa方法：<strong>注意需要把@Before方法注释掉</strong></p>
<p>运行之后，查看目标目录：</p>
<p>测试testGenerateToken生成token：注意把@BeforeEach的注释去掉的</p>
<p>测试解析token：</p>
<p>正常情况：</p>
<p>任意改动一下：</p>
<h2> 4.4. 配置公钥和私钥</h2>
<p>我们需要在授权中心生成真正的公钥和私钥。可以把相关配置内容配置到gmall-auth工程的<code>application.yml</code>中或者配置中心：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写属性类读取jwt配置，并从秘钥配置文件中读取出响应的公钥及私钥，加载这些数据：</p>
<p>内容如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>5. 完成登录功能</h1>
<h2> 5.1. 跳转到登录页</h2>
<p>参照京东，当点击登录跳转到登录页面时，如下：s</p>
<p>会记录跳转到登录页面前的页面地址，登录成功后要回到原来的页面。</p>
<p>把课前资料动态页面中的common目录及login.html拷贝到templates目录下</p>
<p>添加AuthController，并添加页面跳转方法如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在login.html页面会记录returnUrl地址，将来登录成功后重定向到该地址：</p>
<p>在浏览器输入：<a href="http://sso.gmall.com/toLogin.html?returnUrl=http://www.gmall.com" target="_blank" rel="noopener noreferrer">http://sso.gmall.com/toLogin.html?returnUrl=http://www.gmall.com</a></p>
<p>效果如下：</p>
<h2> 5.2. 完成登录功能</h2>
<p>接下来，我们需要在<code>gmall-auth</code>编写登录代码。基本流程如下：</p>
<ul>
<li>客户端携带用户名和密码请求登录 ，并携带登录前页面的路径</li>
<li>授权中心调用用户中心接口，根据用户名和密码查询用户信息</li>
<li>用户名密码不正确，不能获取用户，登录失败</li>
<li>如果校验成功，则生成JWT，jwt要防止别人盗取</li>
<li>把jwt放入cookie</li>
<li>为了方便页面展示登录用户昵称，向cookie中单独写入昵称（例如京东cookie中的的<strong>unick</strong>）</li>
<li>重定向 回到登录前的页面</li>
</ul>
<h3> 5.2.1. AuthController</h3>
<p>编写授权接口，我们接收登录名和密码及登陆前的页面地址，登录成功后重定向到登陆前页面。</p>
<ul>
<li>请求方式：post</li>
<li>请求路径：/login</li>
<li>请求参数：loginName和password</li>
<li>返回结果：无</li>
</ul>
<p>代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.2.2. AuthService</h3>
<p>在gmall-auth：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.2.3. GmallUmsClient</h3>
<p>接下来我们肯定要对用户密码进行校验，所以我们需要通过FeignClient去访问 ums-service微服务：</p>
<p>在gmall-auth中引入gmall-ums-interface依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写GmallUmsClient：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.2.4. 测试</h3>
<p>此时，在登录页面输入正确的用户名和密码信息，可以登录成功并跳转到首页：</p>
<p>但是查看cookie信息发现cookie为空。</p>
<p>再查看Headers中的Set-Cookie信息中的Domain发现是ip地址，不是地址栏的域名。</p>
<p>由于浏览器地址栏地址：<a href="http://www.gmall.xn--comcookiedomainip-qx24ab52p6ixd9dwbk3cr11h4kx1b" target="_blank" rel="noopener noreferrer">http://www.gmall.com，而设置cookie的domain域是ip</a>地址，相当于兄弟域名。</p>
<p>兄弟之间不能操作cookie。导致cookie没有写入成功！</p>
<p>为什么是Set-Cookie的Domain是IP地址？</p>
<h2> 5.3. 解决cookie写入问题</h2>
<p>解决cookie写入问题，要注意两点：</p>
<ol>
<li>cookie中的domain域必须和地址栏（或者是父域名）一致。</li>
<li>cors跨域满足携带cookie的生效条件
<ul>
<li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。（网关中已设置）</li>
<li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名。（网关中已设置具体域名）</li>
<li>浏览器发起ajax需要指定withCredentials 为true。（前端工程：gmall-admin\src\utils\httpRequest.js文件已经设置）</li>
</ul>
</li>
</ol>
<h3> 5.3.1. 跟踪CookieUtils</h3>
<p>在gmall-auth中AuthController的authentication方法打一个断点：</p>
<p>F7进入setCookie方法：</p>
<p>发现它调用了重载的setCookie方法，再次F7：</p>
<p>142行可以发现获取domian域并设置domain域。F7进入getDomainName方法，查看最终获取的domain是什么</p>
<p>160行获取的serverName是ip地址。也就是说这时候只能获取ip地址了，获取不到域名信息。</p>
<h3> 5.3.2. domain地址变化原因</h3>
<p>那么问题来了：为什么我们这里的请求serverName变成了pi地址了呢？</p>
<p>这是因为在地址栏输入域名时，经过了两次转发：</p>
<ul>
<li>我们使用了nginx反向代理，当监听到sso.gmall.com的时候，会自动将请求转发至代理ip地址，即gateway服务器地址。</li>
<li>而后请求到达我们的gateway网关，gateway网关就会根据路径匹配，我们的请求是/api/auth，根据规则被转发到了auth服务地址 ，即我们的授权中心。</li>
</ul>
<p>每次转发都会丢失域名信息。</p>
<h3> 5.3.3. nginx转发时要携带域名</h3>
<p>首先nginx转发请求给网关时，要携带域名信息。需要在nginx配置文件中配置代理头信息：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完成之后，重新加载nginx配置：nginx -s reload</p>
<p>这样就解决了nginx转发时的域名问题。</p>
<h3> 5.3.4. 网关转发时要携带域名</h3>
<p>在网关转发请求给服务时，要携带地址信息：</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改之后再次重启，测试</p>
<p>发现serverName依然时ip地址。</p>
<p>这是因为网关转发后，会把域名通过X-Forwarded-Host头信息转发给服务。所以，需要修改160行的代码，如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 5.3.5. 再次登录测试</h3>
<p>完美！！！！！</p>
<h2> 5.4. 公共页头显示用户名</h2>
<p>js实现：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>6. 网关过滤器验证登录状态</h1>
<p>gateway网关过滤器包含两种：<strong>全局过滤器</strong>和<strong>局部过滤器</strong>。</p>
<h2> 6.1. 自定义全局过滤器</h2>
<p>自定义全局过滤器非常简单：实现GlobalFilter接口即可，无差别拦截所有微服务的请求</p>
<p>内容如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6.2. 自定义局部过滤器</h2>
<p>自定义局部过滤器稍微麻烦一点：</p>
<ol>
<li>需要编写过滤器工厂类继承AbstractGatewayFilterFactory抽象类</li>
<li>在需要过滤的微服务路由中配置该过滤器</li>
</ol>
<p>可以做到定点拦截。</p>
<h3> 6.2.1. 过滤器工厂AuthGatewayFilterFactory</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.2.2. 在配置文件中使用</h3>
<p>现在拿gmall-auth工程尝试使用吧</p>
<p>过滤器名称就是<code>Auth</code>，即自定义过滤器工厂<code>类名称</code> 去掉 <code>GatewayFilterFactory</code></p>
<h3> 6.2.3. 读取过滤器配置内容</h3>
<p>此时，虽然可以使用这个拦截器了，但是我们的拦截器还是光秃秃的，不能指定内容。</p>
<p>如果像下面一样指定<code>拦截路径</code>，并在过滤器中获取<code>拦截路径</code>，再去判断当前路径是否需要拦截</p>
<p>假设如下：</p>
<p>改造AuthGatewayFilterFactory过滤器工厂类如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试效果如下：已经可以拿到配置内容</p>
<h2> 6.3. 通过自定义局部过滤器完成登录验证</h2>
<p>接下来，我们在gmall-gateway编写过滤器，对用户的token进行校验，如果发现未登录，则进行拦截。</p>
<p>思路：</p>
<ol>
<li>判断请求路径在不在拦截名单中，不在直接放行</li>
<li>获取请求中的token。同步请求从cookie中获取，异步请求从header中获取（走cookie太重，一个网站往往有很多cookie，如果通过携带cookie的方式传递token，网络传输压力太大）</li>
<li>判断token是否为空。为空直接拦截</li>
<li>如果不为空，解析jwt获取登录信息</li>
<li>判断是否被盗用。通过登录信息中的ip和当前请求的ip比较</li>
<li>传递登录信息给后续服务。后续各服务就不用再去解析了</li>
<li>放行</li>
</ol>
<h3> 6.3.1. 引入jwt相关配置</h3>
<p>既然是登录拦截，一定需要公钥解析jwt，我们在<code>gmall-gateway</code>中配置。</p>
<p>首先在pom.xml中，引入所需要的依赖：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写application.yml属性文件，添加如下内容：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写属性类，读取公钥：</p>
<p>jwtProperties内容如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.3.2. 编写代码实现登录拦截</h3>
<p>改造AuthGatewayFilterFactory</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.3.3. 配置过滤器并测试</h3>
<p>在网关配置文件中的配置如下：</p>
<p>在浏览器上访问：<a href="http://sso.gmall.com/xxx" target="_blank" rel="noopener noreferrer">http://sso.gmall.com/xxx</a></p>
<p>重定向到了登录页面</p>
<p>输入用户名及密码登录后</p>
<p>出现404，说明登录情况下网关放行了，由于没有该路径对应的接口，所有出现了404</p>
<h2> 6.4. 常见异常解决</h2>
<p>如果网关报如下错误：</p>
<p>原因：springCloud-gateway内部集成的是webflux而不是servlet，所以需要排除servlet相关的依赖。</p>
<p>tomcat是servlet容器</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-02-02T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">SpringCloud-Alibaba项目笔记-基础篇</title>
    <id>https://topjf.github.io/java/spring-cloud-alibaba-note-basis.html</id>
    <link href="https://topjf.github.io/java/spring-cloud-alibaba-note-basis.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">1,环境准备--技术选型 开发环境: Linux UOS --&amp;gt; idea2019.3 --&amp;gt; maven3.6.3 ---&amp;gt; jdk1.8---&amp;gt; redis5.0---&amp;gt; nginx---&amp;gt;docker---&amp;gt;k8s 1、分布式基础概念 ●微服务、注册中心、配置中心、远程调用、Feign、 网关 2、基础开发 SpringBoot2.0、Sprin...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>一、准备</h1>
<h2> 1,环境准备--技术选型</h2>
<p>开发环境:</p>
<p>Linux UOS --&gt; idea2019.3 --&gt; maven3.6.3 ---&gt; jdk1.8---&gt; redis5.0---&gt; nginx---&gt;docker---&gt;k8s</p>
<p>1、分布式基础概念
●微服务、注册中心、配置中心、远程调用、Feign、 网关
2、基础开发
SpringBoot2.0、SpringCloud、 Mybatis- Plus、Vue组件化、阿里云对象存储
3、环境
●Vagrant、 Linux、 Docker、 MySQL、 Redis、 逆向工程&amp;人人开源
4、开发规范
数据校验JSR303、全局异常处理、全局统一返回、全局跨域处理
●枚举状态、业务状态码、VO与TO与PO划分、逻辑删除
●Lombok: @Data、 @Slf4j</p>
<h2> 2,模块划分</h2>
<h2> 3,程序安装</h2>
<h1>二、创建项目</h1>
<h2> 1、码云创建仓库</h2>
<p><a href="https://gitee.com/iskong/yumall.git" target="_blank" rel="noopener noreferrer">https://gitee.com/iskong/yumall.git</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤git上传文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、数据库导入：算了</h2>
<h2> 3、人人开源脚手架（码云）</h2>
<h3> 3-1、下载</h3>
<p>renren-fast  | renren-fast-vue |  renren-generator</p>
<p><a href="https://gitee.com/renrenio" target="_blank" rel="noopener noreferrer">https://gitee.com/renrenio</a></p>
<p>运行renren-fast</p>
<p>配置sql——》yumall_admin</p>
<p>vscode、运行renren-fast-vue</p>
<p>账号密码: admin</p>
<p>第一次下载包资源：npm install</p>
<p>Linux原因：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自己下载：<a href="https://chromedriver.storage.googleapis.com/2.27/chromedriver_linux64.zip" target="_blank" rel="noopener noreferrer">https://chromedriver.storage.googleapis.com/2.27/chromedriver_linux64.zip</a> 解压到项目的 》</p>
<p>​ 》》renren-fast-vue/node_modules/chromedriver</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开始运行：npm run dev</p>
<p><a href="https://www.python.org/download/releases/2.7/" target="_blank" rel="noopener noreferrer">https://www.python.org/download/releases/2.7/</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 解决 node-sass/vendor</h4>
<p>sudo npm rebuild node-sass</p>
<p>npm install -g npm@7.12.1</p>
<p>vsc：ctrl+~  终端输入 npm install</p>
<h1>三、逆向工程 mybatisplus、dao、controller、service、pojo</h1>
<p>1、配置fast、genrator：数据库源</p>
<p>逆向工程controller去掉RequiresPermissions</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>四、整合mybatis-plus</h1>
<h1>五、分布式组件</h1>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 人人vue+fast,路由配置</h2>
<p>所有前段URL均发送到网关</p>
<p>yumall-gateway/src/main/resources/application.yml</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>renren-fast-vue/static/config/index.js</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>renren-fast添加注册中心</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>访问</p>
<figure><figcaption>image-20210601003634910</figcaption></figure>
<h3> 跨域流程</h3>
<figure><figcaption>image-20210601003946323</figcaption></figure>
<figure><figcaption>image-20210601004103218</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把人人里的跨域去掉</p>
<h3> menu</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 网关设置</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20210601011943250</figcaption></figure>
<p>回到vue端</p>
<h1>六、商品系统</h1>
<h2> 1 分类维护</h2>
<h3> 1.1 菜单删除</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1.2 mybatis-plus逻辑删除</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://localhost:50000/api/product/category/delete" target="_blank" rel="noopener noreferrer">http://localhost:50000/api/product/category/delete</a></p>
<p>body -&gt; raw [1433]</p>
<p>SELECT * FROM <code>pms_category</code> WHERE NAME='asds'; 发现show_status为0，而不是真真的物理删除。</p>
<h3> 1.3 三级分类一致性</h3>
<p>/product/category/update</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20210603175912069</figcaption></figure>
<figure><figcaption>image-20210603175928677</figcaption></figure>
<hr>
<h2> 2 品牌管理</h2>
<h3> 2.1 更新显示状态</h3>
<p>brand/update/status</p>
<h3> 2.2 文件上传OSS</h3>
<figure><figcaption>image-20210601202019399</figcaption></figure>
<h3> 2.3 更新【数据一致性】</h3>
<p>BrandController</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3 一次性倒入目录菜单SQL——menu</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption>image-20210602145914477</figcaption></figure>
<p>回到vue前端</p>
<hr>
<h2> 4 平台属性</h2>
<h3> 4.1  属性分组 attrgroup</h3>
<figure><figcaption>image-20210603164126731</figcaption></figure>
<h4> 4.1.1 获取分类属性分组</h4>
<p catelogid="">/product/attrgroup/list/</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.1.2 获取属性分组详情</h4>
<p attrgroupid="">/product/attrgroup/info/</p>
<h4> 4.1.3 新增属性分组</h4>
<p>/product/attrgroup/save</p>
<hr>
<h3> 4.2 规格参数 attr/base</h3>
<h4> 4.2.1 获取规格参数</h4>
<p this.catid="">/product/attr/<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord">/</span></span></span></span></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.2.2 修改规格参数</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.2.3 保存属性</h4>
<p>/product/attr/save</p>
<h4> 4.2.4 属性详情</h4>
<p attrid="">/product/attr/info/</p>
<h4> 4.2.5 修改属性</h4>
<p>/product/attr/update</p>
<h4> 4.2.6 获取分类销售属性</h4>
<p catelogid="">/product/attr/sale/list/</p>
<hr>
<h3> 4.3  销售属性 attr</h3>
<p>添加、修改</p>
<p>删除</p>
<hr>
<h3> 4.4  关联【分组与属性】</h3>
<h4> 4.4.1 获取属性与分组的关联的所有属性</h4>
<p>/product/attrgroup/{attrgroupId}/attr/relation</p>
<h4> 4.4.2 添加属性与分组关联关系</h4>
<p>/product/attrgroup/attr/relation</p>
<h4> 4.4.3 删除属性与分组的关联关系</h4>
<p>/product/attrgroup/attr/relation/delete</p>
<h4> 4.4.4 获取属性分组没有关联的其他属性</h4>
<p>/product/attrgroup/{attrgroupId}/noattr/relation</p>
<h4> 4.4.5 获取分类关联的品牌</h4>
<p>/product/categorybrandrelation/brands/list</p>
<h4> 4.4.6 获取品牌关联的分类</h4>
<p>/product/categorybrandrelation/catelog/list</p>
<h4> 4.4.7 新增品牌与分类关联关系</h4>
<p>/product/categorybrandrelation/save</p>
<h4> 4.4.8 获取分类下所有分组&amp;关联属性</h4>
<p>/product/attrgroup/{catelogId}/withattr</p>
<hr>
<h2> 5 商品维护</h2>
<h3> 5.1 CPU管理</h3>
<h3> 5.2 发布商品</h3>
<h4> 流程</h4>
<p>SpuInfoServiceImpl.java</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.3 商品管理</h3>
<h4> SPU检索</h4>
<h4> SKU检索</h4>
<h1>七、订单系统</h1>
<h1>八、用户系统</h1>
<h2> 1 会员列表</h2>
<h2> 2 会员等级</h2>
<h2> 3 积分变化</h2>
<h2> 4 统计信息</h2>
<h1>十、分布式基础篇总结</h1>
<figure><figcaption>image-20210604124223980</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Cloud"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">SpringCloud-Alibaba项目笔记-高级篇</title>
    <id>https://topjf.github.io/java/spring-cloud-alibaba-note-high-level.html</id>
    <link href="https://topjf.github.io/java/spring-cloud-alibaba-note-high-level.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">ES集群 image-20210604131952296 image-20210604132012980 商品上架 ：把数据保存到es ：spu -- 构造sku检索属性 1、上架 product/spuinfo/list/{spuId}/up -- 发送远程调用，库存系统查询是否有库存 /ware/waresku/hasstock 创建 WareFe...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> ES集群</h2>
<figure><figcaption>image-20210604131952296</figcaption></figure>
<figure><figcaption>image-20210604132012980</figcaption></figure>
<h1>七、商品上架</h1>
<p><strong>商品上架 ：把数据保存到es</strong> ：spu</p>
<h2> -- 构造sku检索属性</h2>
<h3> 1、上架 product/spuinfo/list/{spuId}/up</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 发送远程调用，库存系统查询是否有库存</h2>
<p>/ware/waresku/hasstock</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 WareFeignService</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> -- 将数据发送给es进行保存;yumall-search</h2>
<p>/ElasticSavaController::productStatusUp</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20210912091935588</figcaption></figure>
<p>//BizCodeEnume :: PRODUCT_UP_EXCEPTION(11000, "商品上架异常");</p>
<p>商品服务调用Search</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//SpuInfoServiceImpl</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>成功：修改spu状态</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败：重复操作？</p>
<h2> -- 优化库存</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>八、首页&amp;nginx</h1>
<h2> -- 商品：product</h2>
<h3> --- 导入thymeleaf</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- 导入首页</h3>
<figure><figcaption>image-20210912115033523</figcaption></figure>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption>image-20210912115114599</figcaption></figure>
<p>创建：app、web文件夹</p>
<p>热插件：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- 查出所有的1级分类</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>index引入: &lt;html xmlns:th="<a href="http://www.thymeleaf.org" target="_blank" rel="noopener noreferrer">http://www.thymeleaf.org</a>"&gt;</p>
<figure><figcaption>image-20210912125255950</figcaption></figure>
<figure><figcaption>image-20210912125306914</figcaption></figure>
<h3> --- 显示二级&amp;三级分类</h3>
<p>json数据</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20210912155154018</figcaption></figure>
<figure><figcaption>image-20210912155207647</figcaption></figure>
<h2> -- nginx</h2>
<h3> --- 静态配置</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- 分布式网关配置</h3>
<p><strong>nginx代理到网关50000,网关代理到其他服务</strong></p>
<p>nginx.conf</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yumall.conf</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网关服务配置</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://yumall.com/api/product/category/list/tree" target="_blank" rel="noopener noreferrer">http://yumall.com/api/product/category/list/tree</a></p>
<figure><figcaption>image-20210912164205853</figcaption></figure>
<h1>十一、检索服务</h1>
<h2> - - 模型分析</h2>
<p>1、前端设置 list.html</p>
<p>2、后端es检索接口</p>
<p>3、创建vo，SearchParamVo、SearchResultVo</p>
<h2> - - es检索简单测试</h2>
<p>结构：</p>
<p>must：模糊关键字查询</p>
<p>filter过滤：属性、分类、品牌、价格、库存...</p>
<p>sort：排序</p>
<p>分页，高亮，聚合</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> - - 聚合查询</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- 构建请求</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - must：模糊关键字查询</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - filter：分类</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - filter：品牌id</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - filter：<em>属性</em></h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - filter：库存</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - filter：价格</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - from 分页</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - highlighter 高亮</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - 聚合分析</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- 数据响应封装</h3>
<h4> - - 封装SearchResultVo主要参数</h4>
<p>List&lt;SkuEsModel&gt; products; List&lt;BrandVo&gt; brands; List&lt;CatalogVo&gt; catalogs; List&lt;AttrVo&gt; attrs;</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SearchResultVo result = new SearchResultVo();</p>
<h4> - - 1、返回的所有查询到的商品</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - 2、当前所有商品涉及到的所有属性信息</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - 3、当前所有商品涉及到的所有品牌信息</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - 4、当前所有商品涉及到的所有分类信息</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - 5、分页信息 pageNum total totalPages pageNavs</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> - - 6、构建面包屑导航</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> - - 页面处理</h2>
<h3> --- 点击跳转</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- 综合排序、销量、价格、评分、上架时间、分页、排序内容、仅显示有货</h3>
<h3> --- 面包屑导航</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>十三、商品详情</h1>
<h2> 0、线程池配置</h2>
<h3> --- MyThreadConfig</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- ThreadPoolConfigProperties</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> --- Properties</h3>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ThreadPoolExecutor executor;</p>
<h2> 1、sku基本信息的获取  pms_sku_info</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、sku的图片信息</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、获取spu的销售属性组合</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、获取spu的介绍</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、获取spu的规格参数信息</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> //TODO 6、远程调用查询当前sku是否参与秒杀优惠活动</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CompletableFuture.allOf(saleAttrFuture, descFuture, baseAttrFuture, imageFuture).get();</p>
<p>return skuItemVo;</p>
<h1>十四、认证服务</h1>
<h2> 1、初始化</h2>
<p>创建yumall-auth-server服务，port：20000，pom排除SQL依赖</p>
<p>nacos：other.yml，redis.yml</p>
<p>nginx：login，reg，<a href="http://auth.yumall.com" target="_blank" rel="noopener noreferrer">auth.yumall.com</a>;</p>
<h2> 2、网关</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、首页</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、注册-获取手机验证码，倒计时</h2>
<h3> 4.1 html</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2 后端</h3>
<h4> 4.2.1 a、接口防刷，b、验证码的再次效验，c、存入redis，防止同一个手机号在60秒内再次发送验证码</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4.2.2 进入第三方服务+使用阿里发送验证码</h4>
<p>package com.kong.yumall.authserver.feign;</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阿里云</p>
<p><a href="https://market.console.aliyun.com/imageconsole/index.htm?#/bizlist?_k=fxmn6k" target="_blank" rel="noopener noreferrer">https://market.console.aliyun.com/imageconsole/index.htm?#/bizlist?_k=fxmn6k</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、用户注册</h2>
<h3> 5.1、用户实体类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.2、注册流程</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.3、远程调用会员服务实现注册</h3>
<p>/memberFeignService.register(vos);</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、登录</h2>
<p>/package com.kong.yumall.authserver.feign;</p>
<h3> 6.1、远程-用户登录</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 调用会员服务</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 会员服务实现登录</h4>
<p>/controller</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MemberService</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.2、远程-社交用户的登录（微信）</h3>
<h4> controller</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 远程调用</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 会员服务实现微信登录</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6.3、远程-社交用户的登录（微博）</h3>
<h4> 准备</h4>
<p><a href="https://open.weibo.com/connect" target="_blank" rel="noopener noreferrer">https://open.weibo.com/connect</a></p>
<h4> 流程：跳转微博登录-&gt;成功获取code-&gt;拿code换取Access token(code只能用一次) -&gt;使用获得的Access Token调用API</h4>
<p>web</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> controller</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 远程调用</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 会员服务实现微博登录</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个用户已经注册过,更新用户的访问令牌的时间和access_token。</p>
<p>没有查到当前社交用户对应的记录我们就需要注册一个,查询当前社交用户的社交账号信息（昵称、性别等）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、分布式 session</h2>
<h2> 8、单点登录：多系统</h2>
<h3> 8.1、分析</h3>
<figure><figcaption>image-20210926173348217</figcaption></figure>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>十五、购物车 cart</h1>
<h2> 1、购物车项目 cart 准备config，web、nginx、nacos、redis</h2>
<p>不需要SQL数据源、开启Feign、nacos、redis-session、Thread</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、分析、Vo模型</h2>
<p>CartItemVo
CartVo
SkuInfoVo</p>
<h2> 3、去购物车页面</h2>
<h3> web拦截器,在执行目标方法之前，判断用户的登录状态.并封装传递给controller目标请求，业务执行之后，分配临时用户来浏览器保存</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.1、首页</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.2 获取购物车里面的信息-获取用户登录或者未登录购物车里所有的数据</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.3、获取购物车里面的数据getCartItems、删除</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、添加商品到购物车</h2>
<h3> 获取到我们要操作的购物车，是哪个账号 getCartOps</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.1、添加商品到购物车 addCartItem</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2、远程查询当前要添加商品的信息getInfo(skuId);，远程查询skuAttrValues组合信息getSkuSaleAttrValues(skuId)</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、跳转到添加购物车成功页面</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、商品是否选中</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、修改购物项数量</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、删除商品信息</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、获取当前用户的购物车商品项</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>十七、订单服务</h1>
<h2> 1、配置web、nginx、springSession、配置线程池</h2>
<h2> 2、订单概念、分析</h2>
<h3> 订单中心</h3>

<h3> 订单流程</h3>
<figure><figcaption>image-20211004160657576</figcaption></figure>
<h3> 幂等性处理</h3>
<h3> 订单业务</h3>
<h2> 3、登录拦截</h2>
<p>WebConfig</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Interceptor</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、由购物车 cart 去结算确认页 confirm</h2>
<p>购物车cart：cartList.html：toTrade：window.location.href = "<a href="http://order.yumall.com/toTrade" target="_blank" rel="noopener noreferrer">http://order.yumall.com/toTrade</a>";</p>
<p>order：OrderWebController：toTrade()</p>
<p><strong>注意：</strong> <em>a) 获取当前用户登录的信息，获取当前线程请求头信息(解决Feign异步调用丢失请求头问题)；b) 开启异步任务；c) 每一个线程都来共享之前的请求数据；d) 执行具体业务。</em></p>
<h3> 解决Feign异步调用 丢失请求头|上下文 问题</h3>
<figure><figcaption>image-20211004175207905</figcaption></figure>
<figure><figcaption>image-20211004180806491</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20211004181324416</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.1、Controller、构建OrderConfirmVo</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建OrderConfirmVo</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.2、memberFeignService 远程查询所有的收获地址列表</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.3、cartFeignService 远程查询购物车所有选中的购物项</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.4、wmsFeignService 远程查询商品库存信息</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.5、memberResponseVo 查询用户积分</h3>
<h3> 4.6、为用户设置一个token，三十分钟过期时间（存在redis）防重令牌(防止表单重复提交)</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.7、结算确认页渲染</h3>
<h2> 5、确认页模拟运费信息</h2>
<p><a href="http://yumall.com/api/ware/wareinfo/fare?addrId=120120" target="_blank" rel="noopener noreferrer">http://yumall.com/api/ware/wareinfo/fare?addrId=120120</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、幂等性</h2>
<figure><figcaption>image-20211004192550633</figcaption></figure>
<h3> 6.1、概念</h3>
<p>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因
为多次点击而产生了副作用:比如说支付场景，用户购买了商品支付扣款成功，但是返回结
果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结
果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条. . .，这就没有保证接口
的幂等性。</p>
<h3> 6.2、使用场景</h3>
<p>用户多次点击按钮
用户页面回退再次提交
微服务互相调用，由于网络问题，导致请求失败。feign 触发重试机制
其他业务情况</p>
<h3> 6.3、解决方案</h3>
<h2> 7、订单提交 submitOrder</h2>
<figure><figcaption>image-20211004194440103</figcaption></figure>
<h3> 备注：redis原子验证令牌、构造订单数据、订单验证价格、保存订单数据、库存锁定，只要有异常，回滚订单数据、订单创建成功，发送消息给MQ、删除购物车里的数据</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.1、提交流程 createOrder、saveOrder</h3>
<figure><figcaption>image-20211004212537610</figcaption></figure>
<figure><figcaption>image-20211004212605590</figcaption></figure>
<h3> 7.2、库存锁</h3>
<p><code>wmsFeignService.orderLockStock()</code></p>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.3、使用 MQ 延迟队列</h3>
<p><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E7%89%A9">前去分布式事物</a></p>
<p><a href="#MQ%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97">前去MQ延迟队列</a></p>
<h3> - - 订单释放&amp;库存解锁</h3>
<figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.4、自动解锁库存</h3>
<p>yumall/ware/listener/StockReleaseListener.java</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.5、自动解锁订单</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.6、定时关闭订单</h3>
<p><a href="#%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0">设计流程：前去 延迟队列实现</a></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>十九、订单支付</h1>
<h1></h1>
<h2> 1、支付宝沙箱</h2>
<p><a href="https://open.alipay.com/platform/home.htm" target="_blank" rel="noopener noreferrer">https://open.alipay.com/platform/home.htm</a></p>
<p>沙箱环境使用说明：<a href="https://opendocs.alipay.com/support/01razc" target="_blank" rel="noopener noreferrer">https://opendocs.alipay.com/support/01razc</a></p>
<p>支付宝demo：<a href="https://opendocs.alipay.com/open/270/106291/" target="_blank" rel="noopener noreferrer">https://opendocs.alipay.com/open/270/106291/</a></p>
<h2> 2、加密-对称加密</h2>
<figure><figcaption></figcaption></figure>
<h2> 3、加密-非对称加密</h2>
<figure><figcaption></figcaption></figure>
<h2> 4、签名</h2>
<figure><figcaption></figcaption></figure>
<h2> 5、内网穿透</h2>
<p>1、natapp: <a href="https://natapp.cn/" target="_blank" rel="noopener noreferrer">https://natapp.cn/</a></p>
<p>2、续断:www.zhexi.tech</p>
<p>3、花生壳:<a href="https://www.oray.com/" target="_blank" rel="noopener noreferrer">https://www.oray.com/</a></p>
<h2> 6、整合支付宝-订单支付</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、订单支付成功监听器（通知）</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8、微信支付</h2>
<h1>二十、秒杀服务</h1>
<figure><figcaption>image-20211118125418053</figcaption></figure>
<h2> 1、定时任务 cron</h2>
<p><a href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html" target="_blank" rel="noopener noreferrer">http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html</a></p>
<p>语法: 秒 分 时 日 月 周 年(Spring不支持)</p>
<figure><figcaption>image-20211118130052716</figcaption></figure>
<figure><figcaption>image-20211118130031288</figcaption></figure>

<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、上架秒杀商品</h2>
<h3> 定时任务 SeckillScheduled</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 要参加三天的商品秒杀活动 uploadSeckillSkuLatest3Days</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@FeignClient("yumall-coupon")---------coupon/seckillsession/Lates3DaySession</p>
<h3> 查询最近三天需要参加秒杀商品的信息 getLates3DaySession</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、获取到当前可以参加秒杀商品的信息 getCurrentSeckillSkus</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、根据skuId查询商品是否参加秒杀活动</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、当前商品进行秒杀（秒杀开始）</h2>
<figure><figcaption>image-20211118141952959</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、MQ 秒杀监听</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7、秒杀（高并发）关注问题</h2>
<figure><figcaption>image-20211118141137454</figcaption></figure>
<figure><figcaption>image-20211118141454410</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Cloud"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">spring cloud 的几大组件</title>
    <id>https://topjf.github.io/java/spring-cloud-core-components.html</id>
    <link href="https://topjf.github.io/java/spring-cloud-core-components.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">spring cloud 的几大组件 组件名称 ----- ----- 分布式系统套件版本 Spring Cloud + Alibaba 服务注册与发现 Eureka / Consul / Nacos 配置中心 Config / Nacos 网关路由 Gateway / Zull (动态网关) 服务调用 OpenFeign（推荐） / RestTemp...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> spring cloud 的几大组件</h2>
<table>
<thead>
<tr>
<th>组件</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>分布式系统套件版本</td>
<td>Spring Cloud + Alibaba</td>
</tr>
<tr>
<td>服务注册与发现</td>
<td>Eureka / Consul / Nacos</td>
</tr>
<tr>
<td>配置中心</td>
<td>Config / Nacos</td>
</tr>
<tr>
<td>网关路由</td>
<td>Gateway / Zull (动态网关)</td>
</tr>
<tr>
<td>服务调用</td>
<td>OpenFeign（推荐） / RestTemplate（使用繁琐、冗余，不推荐）</td>
</tr>
<tr>
<td>负载均衡</td>
<td>LoadBalancer / Ribbon / Nginx</td>
</tr>
<tr>
<td>流量控制</td>
<td>Sentinel / Hystrix (限流、熔断降级、负载保护)</td>
</tr>
<tr>
<td>分布式事务</td>
<td>Seata / TX-LCN  (可选组件)</td>
</tr>
<tr>
<td>链路追踪</td>
<td>Sleuth + Zipkin (可选组件)</td>
</tr>
<tr>
<td>工作流引擎框架</td>
<td>Flowable (可选组件)</td>
</tr>
<tr>
<td>分布式定时任务</td>
<td>xxl-job (可选组件)</td>
</tr>
</tbody>
</table>
<h2> Spring cloud 基础流程</h2>
<p>Eureka</p>
<p><strong>作用</strong>：服务注册中心，服务发现与注册</p>
<p><strong>原理</strong>：通过心跳检测、健康检查和客户端缓存等机制</p>
<p><strong>高可用说明</strong>：eureka可以把自己设置为一个应用程序到自己和其他节点相互注册，这样当一个节点挂掉后，另一个eureka节点就会代替该节点。</p>
<p><strong>注意</strong>：注册eureka，要同时写多个地址。因为防止eureka挂掉，然后serviceA挂掉，然后serviceA重启，这时候其他服务就访问不到。</p>
<hr>
<p>Zuul网关（负载均衡功能）</p>
<p>将服务保留的rest进行代理和网关控制，除了平常经常使用的node.js、nginx外，Spring Cloud系列的zuul和rebbion，可以帮我们进行正常的网关管控和负载均衡。</p>
<p>Zuul过滤器</p>
<p>四种过滤器类型</p>
<blockquote>
<p>（1） PRE：过滤器在请求被路由之前调用，可以利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</p>
<p>（2） ROUTING：过滤器请求理由到微服务。可以用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务</p>
<p>（3） POST：过滤器到微服务后执行。可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</p>
<p>（4） ERROR：在其他阶段发生错误时执行该过滤器。</p>
</blockquote>
<hr>
<p>Feign：相当于一个HttpClient的东西，会保持长连接和监控线程池。它可以默认自己包下的Retryer进行重试配置，默认为5次</p>
<hr>
<p>Ribbion：相当于是从eureka中获取所有的微服务列表，然后从例如A服务有两个节点，会根据算法选择一个让Feign进行调用。</p>
<hr>
<p>Nginx实现反向代理和负载均衡</p>
<blockquote>
<p><strong>正向代理</strong>：客户机指定代理服务器，将本要直接发送到Web服务器上的Http请求发送到代理服务器中由代理服务器向internet上的web服务器发送请求，达到客户机上网的目的。</p>
<p><strong>反向代理</strong>：指以代理服务器接受internet上的连接请求，然后将请求转发给内部网上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个代理服务器。如图所示：</p>
</blockquote>
<figure><figcaption>img</figcaption></figure>
<p>Nginx只做请求的转发，后台有多个http服务器提供服务，nginx的功能就是把请求转发给后面的服务器，决定把请求转发给谁。</p>
<hr>
<h2> SpringCloud底层服务之间怎么相互调用</h2>
<p>核心组件：Eureka、Ribbon、Feign、Hystrix、Zuul</p>
<p>从业务场景入手：开发个电商网站，需要实现支付订单的功能。流程如下：</p>
<p>² 创建一个订单后，如果用户立刻支付这个订单，我们需要将订单状态更新为“已支付”</p>
<p>² 扣减相应的商品库存</p>
<p>² 通知仓储中心，进行发货</p>
<p>² 给用户的这次购物增加相应的积分</p>
<p>以上流程，我们需要有订单服务、库存服务、仓储服务、积分服务。</p>
<figure><figcaption>img</figcaption></figure>
<h2> 一、Eureka、nacos</h2>
<p>订单服务想要调用库存服务、仓储服务或者积分服务怎么调用？</p>
<figure><figcaption>img</figcaption></figure>
<p>每个服务中都有一个Eureka Client组件，这个组件专门负责将这个服务的信息注册到Eureka Server中，自己在哪台机器上，监听哪个端口。Eureka
Server是一个注册中心，里面有一个注册表，保存了各服务所在的机器和端口号。</p>
<p>订单服务中有一个Eureka Client组件，这个会找Server问一下：库存服务在哪台机器？监听着哪个端口，然后把相关信息从注册表中拉取到本地缓存起来。</p>
<p>这时，想要进行服务之间的调用，只需要找自己本地的Eureka Client问一下在哪台机器？哪个端口？收到响应后，紧接着就可以发送一个请求过去，调用接口！</p>
<p>总结：</p>
<p>​ Eureka Client：负责将这个服务的信息注册到Eureka Server中。</p>
<p>​ Eureka Server：注册中心，里面有一个注册表，保存了各个服务所在的机器和端口号</p>
<h2> 二、OpenFeign</h2>
<p>知道端口号后，<strong>难道订单服务要自己写一堆代码，跟其他服务建立网络连接，然后构造一个复杂的请求，接着发送请求过去，最后对返回的响应结果再写一大堆代码来处理？</strong></p>
<p>J Feign是一个关键机制使用了动态代理。</p>
<p>J 首先，如果你对某个接口定义了@FeignClient注解，Feign就会针对这个接口创建一个动态代理</p>
<p>J 接着你要调用哪个接口，本质就是会调用Feign创建的动态代理，这个就是核心</p>
<p>J Feign的动态代理会根据你在接口上的@RequestMapping等注解，来动态构造出你要请求的服务地址</p>
<p>J 最后根据这个地址，发起请求、解析响应</p>
<figure><figcaption>img</figcaption></figure>
<h2> 三、Ribbon、Nginx</h2>
<p>如果库存服务上部署在了5台机器上，Feign怎么请求哪台机器？</p>
<p>Ribbon的负载均衡默认使用的最经典的Round Robin轮询算法，简单说就是订单服务对库存服务发起10次请求，那就让你请求第1台机器、然后是第2台机器、第3台机器、第4台机器，第5台机器，接着又继续循环。</p>
<p>J 首先Ribbon会从Eureka Client里获取到对应的服务注册表，也就知道所有的服务都部署在哪些机器上，在监听哪些端口号。</p>
<p>J 然后Ribbon就可以使用默认的Round Robin算法，从中选择一台机器</p>
<p>J Feign就会针对这台机器，构造并发起请求。</p>
<figure><figcaption>img</figcaption></figure>
<h2> 四、Hystrix</h2>
<p>订单服务在一个业务流程里需要调用三个服务。现在假设订单服务自己最多只有100个线程可以处理请求，然后，积分服务挂掉了，每次订单服务调用积分服务时候，都会卡住几秒钟，然后抛出一个超时异常。</p>
<p>如果系统处于高并发的场景下，大量请求涌过来的时候，订单服务的100个线程就会卡在请求积分服务这一块，导致订单服务没有一个线程可以处理请求。</p>
<p>然后就会导致别人请求订单服务的时候，发现订单服务也挂了，不响应任何请求</p>
<p>这就是微服务了中的服务雪崩问题</p>
<figure><figcaption>img</figcaption></figure>
<p>Hystrix是隔离、熔断以及降级的一个框架。即Hystrix会搞很多个小小的线程池，比如订单服务请求库存服务是一个线程池，请求积分服务又是一个线程池。每个线程池仅仅用于请求那个服务。</p>
<p>熔断：比如在5分钟内请求积分服务直接就返回了，不要去走网络卡几秒钟，这个过程就是熔断。</p>
<p>降级：每次调用积分服务，就在数据库中记录一条消息，说给某某用户增加多少积分，因为积分服务挂掉，所以增加不成功，等积分服务恢复了，你可以根据这些记录手工加以下积分。</p>
<figure><figcaption>img</figcaption></figure>
<h2> 五、Zuul、Gateway</h2>
<p>微服务网关，这个是负责网络路由的。</p>
<p>假设你后台部署了几百个服务，现在有个前端的小姐姐，人家请求是直接从浏览器哪儿发过来的。 人家要请求库存服务，你难道还要让人家记着这服务的名字叫做xxxxxx？部署在5台机器上，你后台可是有几百个服务的名称和地址？难道都需要一个一个记着？</p>
<p>所有的请求都可以走网关，网关还有许多好处：统一的降级、限流、认证授权、安全、等等。</p>
<h2> 总结</h2>
<p><strong>Eureka、Nacos</strong>：（注册中心）各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里</p>
<p><strong>Ribbon、nginx</strong>：服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台</p>
<p><strong>Feign</strong>：基于Feign的动态代理机制，根据注解和选择的机器，拼接请求URL地址，发起请求</p>
<p><strong>Hystrix</strong>：发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题</p>
<p><strong>Zuul、Gateway</strong>：如果前端、移动端要调用后端系统，统一从Zuul网关进入，由Zuul网关转发请求给对应的服务</p>
<figure><figcaption>img</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Cloud"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">swagger</title>
    <id>https://topjf.github.io/java/swagger.html</id>
    <link href="https://topjf.github.io/java/swagger.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="html"><![CDATA[<p>spring-boot 版本 &gt;= 2.6.x 的 swagger 配置请看这里： <a href="https://blog.csdn.net/qq_42476834/article/details/125534198" target="_blank" rel="noopener noreferrer">🐱‍🚀</a></p>
]]></summary>
    <content type="html"><![CDATA[<p>spring-boot 版本 &gt;= 2.6.x 的 swagger 配置请看这里： <a href="https://blog.csdn.net/qq_42476834/article/details/125534198" target="_blank" rel="noopener noreferrer">🐱‍🚀</a></p>
<!-- more -->
<h2> 一、注解说明</h2>
<p>Swagger 使用的注解及其说明：</p>
<h2> 作用于-Controller类</h2>
<h3> @Api</h3>
<blockquote>
<p>@Api：用在类上，说明该类的作用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h2> 作用于-方法</h2>
<h3> @ApiOperation：给方法增加说明</h3>
<blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>value：显示在 Controller 里面</p>
<p>tags：显示在 Controller 外部</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<figure><figcaption></figcaption></figure>
</blockquote>
<h3> @RequestBody 接收对象传参</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> @ApiImplicitParam：给方法参数增加说明</h3>
<blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name: String</td>
<td style="text-align:left">参数名</td>
</tr>
<tr>
<td style="text-align:left">value: String</td>
<td style="text-align:left">参数说明&amp;描述</td>
</tr>
<tr>
<td style="text-align:left">defaultValue: String</td>
<td style="text-align:left">参数的默认值</td>
</tr>
<tr>
<td style="text-align:left">required: boolean</td>
<td style="text-align:left">参数是否必须传</td>
</tr>
<tr>
<td style="text-align:left">dataType: String</td>
<td style="text-align:left">参数类型</td>
</tr>
<tr>
<td style="text-align:left">paramType: String</td>
<td style="text-align:left">指定参数放在哪个地方。<br>header：请求参数放置于RequestHeader，使用 @RequestHeader 获取<br>query：请求参数放置于请求地址，使用 @RequestParam 获取<br>path：（用于 restful 接口）使用 @PathVariable 获取<br>body：（不常用）<br>form（不常用）</td>
</tr>
</tbody>
</table>
</blockquote>
<h3> @ApiImplicitParams : 用在方法上包含一组参数说明</h3>
<blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h3> 接收 参数&amp;对象组合</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 接收 参数&amp;header组合</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> @ApiResponses：用于表示一组响应</h3>
<h3> @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息</h3>
<blockquote>
<blockquote>
<p>code：数字，例如400</p>
<p>message：信息，例如"请求参数没填好"</p>
<p>response：抛出异常的类</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h3> 注意</h3>
<p>在@RequestMapper中必须指定RequestMethod的类型，否则Sawgger会默认为全类型皆可访问， API列表中会生成多条项目。</p>
<h2> 作用于-实体类</h2>
<h3> @ApiModel：描述一个Model的信息</h3>
<p>（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）</p>
<blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h3> @ApiModelProperty：描述一个model的属性</h3>
<blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h2> swagger2 配置</h2>
<p>Swagger 文档:  <a href="http://192.168.56.1:51156/dev/swagger-ui.html" target="_blank" rel="noopener noreferrer">http://192.168.56.1:51156/dev/swagger-ui.html</a></p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> swagger3 配置</h2>
<p>Swagger 文档:  <a href="http://192.168.56.1:51156/dev/swagger-ui.html" target="_blank" rel="noopener noreferrer">http://192.168.56.1:51156/dev/swagger-ui.html</a></p>
<figure><figcaption></figcaption></figure>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 兼容 springboot 2.6.x 处理</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 使用 swagger-bootstrap-ui</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swagger 文档:  <a href="http://192.168.56.1:51156/dev/doc.html" target="_blank" rel="noopener noreferrer">http://192.168.56.1:51156/dev/doc.html</a></p>
<figure><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-06-07T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">模板引擎-Thymeleaf</title>
    <id>https://topjf.github.io/java/template-engine-thymeleaf.html</id>
    <link href="https://topjf.github.io/java/template-engine-thymeleaf.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">1. 认识thymeleaf 1.1. 模板技术 把页面中的静态数据替换成从后台数据库中的数据。这种操作用jsp就可以实现。但是Spring boot 的架构不推荐使用Jsp，而且支持也不好，所以如果你是用springboot的话，一般使用Freemarker或者Thymeleaf。 1.2. 简介 官方网站： Thymeleaf是用来开发Web和独立...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 1. 认识thymeleaf</h2>
<h2> 1.1. 模板技术</h2>
<p>把页面中的静态数据替换成从后台数据库中的数据。这种操作用jsp就可以实现。但是Spring boot 的架构不推荐使用Jsp，而且支持也不好，所以如果你是用springboot的话，一般使用Freemarker或者Thymeleaf。</p>
<h2> 1.2. 简介</h2>
<p>官方网站：<a href="https://www.thymeleaf.org/index.html" target="_blank" rel="noopener noreferrer">https://www.thymeleaf.org/index.html</a></p>
<p><strong>Thymeleaf</strong>是用来开发Web和独立环境项目的<strong>现代服务器端Java模板引擎</strong>。</p>
<p>Thymeleaf的主要目标是为您的开发工作流程带来优雅的<em>自然模板</em> - HTML。可以在直接浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。</p>
<p>借助Spring Framework的模块，可以根据自己的喜好进行自由选择，可插拔功能组件，Thymeleaf是现代HTML5 JVM Web开发的理想选择 - 尽管它可以做的更多。</p>
<p>Springboot官方支持的服务端渲染模板中，并不包含jsp。而是Thymeleaf和Freemarker等，而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</p>
<h2> 1.3. 优势</h2>
<p>一般的模板技术（Jsp和Freemarker）都会在页面添加 各种表达式、标签甚至是java代码，而这些都必须要经过后台服务器的渲染才能打开。但如果前端开发人员做页面调整，双击打开某个jsp或者ftl来查看效果，基本上是打不开的。</p>
<p>那么Thymeleaf的优势就出来了，因为Thymeleaf没有使用自定义的标签或语法，所有的模板语言都是扩展了标准H5标签的属性</p>
<p>比如同样给div动态渲染一个文本</p>
<p>thymeleaf：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Jsp：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>渲染后效果一样，但是如果你直接用浏览器打开页面文件，H5会把th:text这种不认识的属性忽略掉。效果就和 &lt;div&gt;哈哈&lt;/div&gt; 没有区别，所以对于前端调页面影响更小。以上只是举了一个例子，如果是循环、分支的判断效果更明显。</p>
<h1>2. 环境准备</h1>
<p>我们来创建一个module，为学习Thymeleaf做准备：</p>
<h2> 2.1. 创建module</h2>
<p>使用spring 脚手架创建一个demo工程：</p>
<p>勾选web和Thymeleaf的依赖：</p>
<p>pom：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Thymeleaf默认会开启页面缓存，提高页面并发能力。但会导致开发时修改页面不会立即被展现，因此关闭缓存：</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，每次修改完毕页面，需要使用快捷键：<code>Ctrl + Shift + F9</code>来刷新工程。</p>
<h2> 2.2. 默认配置</h2>
<p>不需要做任何配置，启动器已经帮我们把Thymeleaf的视图解析器配置完成。</p>
<p>在spring-boot-autoconfigure依赖包中包含了Thymeleaf的默认配置：</p>
<p>thymeleaf解析方式与jsp类似：前缀 + 视图名 + 后缀。</p>
<p>在Thymeleaf的配置类中配置了默认的前缀和后缀：</p>
<ul>
<li>默认前缀：<code>classpath:/templates/</code></li>
<li>默认后缀：<code>.html</code></li>
<li>默认编码：UTF_8</li>
</ul>
<p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p>
<h2> 2.3. 快速开始</h2>
<p>我们准备一个controller，控制视图跳转：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建一个html模板：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>，把html 的名称空间，改成：<code>xmlns:th="http://www.thymeleaf.org</code> 会有语法提示</p>
<p>启动项目，访问页面：</p>
<h2> 2.4. th指令</h2>
<p>在这个案例中：</p>
<ul>
<li>静态页面中，<code>th</code>指令不被识别，但是浏览器也不会报错，把它当做一个普通属性处理。这样<code>div</code>的默认值<code>大家好</code>就会展现在页面上</li>
<li>Thymeleaf环境下，<code>th</code>指令就会被识别和解析，而<code>th:text</code>的含义就是替<strong>换所在标签中的文本内容</strong>，于是<code>msg</code>的值就替代了 <code>div</code>中默认的<code>大家好</code></li>
</ul>
<p>th指令的设计，正是Thymeleaf的高明之处，也是它优于其它模板引擎的原因。动静结合的设计，使得无论是前端开发人员还是后端开发人员可以完美契合。</p>
<p>另外，<code>th:text</code>指令出于安全考虑，会把表达式读取到的值进行处理，防止html的注入。</p>
<p>例如，<code>&lt;p&gt;你好&lt;/p&gt;</code>将会被格式化输出为<code>$lt;p$gt;你好$lt;/p$lt;</code>。</p>
<p><strong>如果想要不进行格式化输出，而是要输出原始内容，则使用<code>th:utext</code>来代替.</strong></p>
<h1>3. 语法</h1>
<p>Thymeleaf的主要作用是把model中的数据渲染到html中，因此其语法主要是如何解析model中的数据。</p>
<h2> 3.1. th:text/utext 基础使用</h2>
<p>我们先新建一个实体类：User</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在模型中添加数据</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>语法说明：</p>
</blockquote>
<p>Thymeleaf通过<code>${}</code>来获取model中的变量，注意这不是el表达式，而是ognl表达式，但是语法非常像。</p>
<blockquote>
<p>示例：</p>
</blockquote>
<p>我们在页面获取user数据：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>
<h2> 3.2. th:object 自定义变量</h2>
<p>看下面的案例：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们获取用户的所有信息，分别展示。</p>
<p>当数据量比较多的时候，频繁的写<code>user.</code>就会非常麻烦。</p>
<p>因此，Thymeleaf提供了自定义变量来解决：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>在 <code>h2</code>上 用 <code>th:object="${user}"</code>获取user的值，并且保存</li>
<li>在<code>h2</code>内部的任意元素上，可以通过 <code>*{属性名}</code>的方式，来获取user中的属性，这样就省去了<code>user.</code>前缀了</li>
</ul>
<h2> 3.3. th:each 循环</h2>
<p>在controller方法中，响应users数据模型：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面渲染方式如下：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>${users} 是要遍历的集合，可以是以下类型：</p>
<ul>
<li>Iterable，实现了Iterable接口的类</li>
<li>Enumeration，枚举</li>
<li>Interator，迭代器</li>
<li>Map，遍历得到的是Map.Entry</li>
<li>Array，数组及其它一切符合数组结果的对象</li>
</ul>
<p>在迭代的同时，我们也可以获取迭代的状态对象：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>stat对象包含以下属性：</p>
<ul>
<li>index，从0开始的角标</li>
<li>count，元素的个数，从1开始</li>
<li>size，总元素个数</li>
<li>current，当前遍历到的元素</li>
<li>even/odd，返回是否为奇偶，boolean值</li>
<li>first/last，返回是否为第一或最后，boolean值</li>
</ul>
<h2> 3.4. th:if 逻辑判断</h2>
<p>有了<code>if和else</code>，我们能实现一切功能<sup>_</sup>。</p>
<p>Thymeleaf中使用<code>th:if</code> 或者 <code>th:unless</code> ，两者的意思恰好相反。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果表达式的值为true，则标签会渲染到页面，否则不进行渲染。</p>
<p>以下情况被认定为true：</p>
<ul>
<li>表达式值为true</li>
<li>表达式值为非0数值或者字符串</li>
<li>表达式值为字符串，但不是<code>"false"</code>,<code>"no"</code>,<code>"off"</code></li>
<li>表达式不是布尔、字符串、数字、字符中的任何一种</li>
</ul>
<p>其它情况包括null都被认定为false</p>
<h2> 3.5. th:switch 分支控制</h2>
<p>这里要使用两个指令：<code>th:switch</code> 和 <code>th:case</code>，类似Java的switch case语句</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，一旦有一个th:case成立，其它的则不再判断。与java中的switch是一样的。</p>
<p>另外<code>th:case="*"</code>表示默认，放最后。</p>
<h2> 3.6. th:href 动态链接</h2>
<p>动态链接可以通过以下两种方式生成：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>th:src</code>和<code>th:href</code>用法一致。</p>
<h2> 3.7. 表单操作</h2>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>th:action 表单提交路径</p>
<p>th:value 给表单元素绑定value值</p>
<h2> 3.8. 方法及内置对象</h2>
<p>ognl表达式本身就支持方法调用，例如：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们调用了name（是一个字符串）的split方法。</p>
<p>Thymeleaf中提供了一些内置对象，并且在这些对象中提供了一些方法，方便我们来调用。获取这些对象，需要使用<code>#对象名</code>来引用。</p>
<p><strong>常用的内置对象：</strong></p>
<ol>
<li>
<p><strong>ctx</strong> ：上下文对象。</p>
</li>
<li>
<p><strong>vars</strong> ：上下文变量。</p>
</li>
<li>
<p><strong>locale</strong>：上下文的语言环境。</p>
</li>
<li>
<p><strong>request</strong>：（仅在web上下文）的 HttpServletRequest 对象。</p>
</li>
<li>
<p><strong>response</strong>：（仅在web上下文）的 HttpServletResponse 对象。</p>
</li>
<li>
<p><strong>session</strong>：（仅在web上下文）的 HttpSession 对象。</p>
</li>
<li>
<p><strong>servletContext</strong>：（仅在web上下文）的 ServletContext 对象</p>
</li>
</ol>
<p>这里以常用的Session举例，用户刊登成功后，会把用户信息放在Session中，Thymeleaf通过内置对象将值从session中获取。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常用的内置方法：</strong></p>
<ol>
<li>
<p><strong>strings</strong>：字符串格式化方法，常用的Java方法它都有。比如：equals，equalsIgnoreCase，length，trim，toUpperCase，toLowerCase，indexOf，substring，replace，startsWith，endsWith，contains，containsIgnoreCase等</p>
</li>
<li>
<p><strong>numbers</strong>：数值格式化方法，常用的方法有：formatDecimal等</p>
</li>
<li>
<p><strong>bools</strong>：布尔方法，常用的方法有：isTrue，isFalse等</p>
</li>
<li>
<p><strong>arrays</strong>：数组方法，常用的方法有：toArray，length，isEmpty，contains，containsAll等</p>
</li>
<li>
<p><strong>lists</strong>，<strong>sets</strong>：集合方法，常用的方法有：toList，size，isEmpty，contains，containsAll，sort等</p>
</li>
<li>
<p><strong>maps</strong>：对象方法，常用的方法有：size，isEmpty，containsKey，containsValue等</p>
</li>
<li>
<p><strong>dates</strong>：日期方法，常用的方法有：format，year，month，hour，createNow等</p>
</li>
</ol>
<p>我们在model中添加日期类型响应数据：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在页面中处理</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p>
<h2> 3.9. th:inline js内联</h2>
<p>模板引擎不仅可以渲染html，也可以对JS中的进行预处理。而且为了在纯静态环境下可以运行，其Thymeleaf代码可以被注释起来：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>在script标签中通过<code>th:inline="javascript"</code>来声明这是要特殊处理的js脚本</p>
<p>因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。</p>
</li>
</ul>
<p>看看页面的源码：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的User对象被直接处理为json格式了，非常方便。</p>
<h2> 3.10. 页面引用</h2>
<p>th:fragment : 定义一个通用的html片段</p>
<p>th:insert   ：保留自己的主标签，保留th:fragment的主标签。</p>
<p>th:replace ：不要自己的主标签，保留th:fragment的主标签。</p>
<p>th:include ：保留自己的主标签，不要th:fragment的主标签。（官方3.0后不推荐）</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析后：</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>4. 静态资源部署</h1>
<div class="language-nginx line-numbers-mode" data-ext="nginx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行：nginx -s reload</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">定时任务</title>
    <id>https://topjf.github.io/java/timed-task.html</id>
    <link href="https://topjf.github.io/java/timed-task.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="html"><![CDATA[<figure><figcaption></figcaption></figure>
]]></summary>
    <content type="html"><![CDATA[<figure><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 基础篇</title>
    <id>https://topjf.github.io/k8s/basis.html</id>
    <link href="https://topjf.github.io/k8s/basis.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">中文社区: 官方文档: 社区文档: 历史版本 Release History (https://kubernetes.io/releases/) 客户端下载 github (https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG) 配置SSH、配置k8s环境、安装docker、安装k...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>一、K8S 基础搭建</h1>
<p>中文社区: <a href="https://www.kubernetes.org.cn/" target="_blank" rel="noopener noreferrer">https://www.kubernetes.org.cn/</a></p>
<p>官方文档: <a href="https://kubernetes.io/zh/docs/home/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh/docs/home/</a></p>
<p>社区文档: <a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener noreferrer">http://docs.kubernetes.org.cn/</a></p>
<p><a href="https://feisky.gitbooks.io/kubernetes/content/" target="_blank" rel="noopener noreferrer">https://feisky.gitbooks.io/kubernetes/content/</a></p>
<p><a href="https://kubernetes.io/releases/" target="_blank" rel="noopener noreferrer">历史版本 Release History</a></p>
<p><a href="https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG" target="_blank" rel="noopener noreferrer">客户端下载 github</a></p>
<p>配置SSH、配置k8s环境、安装docker、安装k8s、初始化k8s集群（加入节点）、网络插件fiannel、安装ingress负载均衡、配置nfs</p>
<figure><figcaption></figcaption></figure>
<h2> 1）、概念</h2>
<figure><figcaption></figcaption></figure>
<p><strong>传统部署时代</strong></p>
<p><strong>虚拟化部署时代</strong></p>
<p><strong>容器部署时代</strong></p>
<p>好处：</p>
<ul>
<li>敏捷应用程序的创建和部署：与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率。</li>
<li>持续开发、集成和部署：通过快速简单的回滚(由于镜像不可变性)，提供可靠且频繁的容器镜像构建和部署。</li>
<li>关注开发与运维的分离：在构建/发布时而不是在部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。</li>
<li>可观察性不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号。</li>
<li>跨开发、测试和生产的环境一致性：在便携式计算机上与在云中相同地运行。</li>
<li>云和操作系统分发的可移植性：可在 Ubuntu、RHEL、CoreOS、本地、Google Kubernetes Engine 和其他任何地方运行。</li>
<li>以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序。</li>
<li>松散耦合、分布式、弹性、解放的微服务：应用程序被分解成较小的独立部分，并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。</li>
<li>资源隔离：可预测的应用程序性能。</li>
<li>资源利用：高效率和高密度</li>
</ul>
<h3> <a href="https://v1-18.docs.kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-kubernetes-%E5%AE%83%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreferrer">为什么需要 Kubernetes，它能做什么?</a></h3>
<h3> 简介：调度、自动修复、水平伸缩</h3>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 组件架构</h3>
<figure><figcaption></figcaption></figure>
<h4> kube-apiserver</h4>
<p>API 服务器是 Kubernetes <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane" target="_blank" rel="noopener noreferrer">控制面</a>的组件， 该组件公开了 Kubernetes API。</p>
<h4> etcd</h4>
<p>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p>
<h4> kube-scheduler</h4>
<p>控制平面组件，负责监视新创建的、未指定运行<a href="https://kubernetes.io/zh/docs/concepts/architecture/nodes/" target="_blank" rel="noopener noreferrer">节点（node）</a>的 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener noreferrer">Pods</a>，选择节点让 Pod 在上面运行。</p>
<h4> kube-controller-manager</h4>
<p>在主节点上运行 <a href="https://kubernetes.io/zh/docs/concepts/architecture/controller/" target="_blank" rel="noopener noreferrer">控制器</a> 的组件</p>
<blockquote>
<p>这些控制器包括:</p>
<ul>
<li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应</li>
<li>任务控制器（Job controller）: 监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li>
<li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)</li>
<li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌</li>
</ul>
</blockquote>
<h4> cloud-controller-manager</h4>
<p>云控制器管理器是指嵌入特定云的控制逻辑的 <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-control-plane" target="_blank" rel="noopener noreferrer">控制平面</a>组件</p>
<blockquote>
<p>下面的控制器都包含对云平台驱动的依赖：</p>
<ul>
<li>节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除</li>
<li>路由控制器（Route Controller）: 用于在底层云基础架构中设置路由</li>
<li>服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</li>
</ul>
</blockquote>
<h3> Node 组件</h3>
<h4> kubelet</h4>
<p>一个在集群中每个节点（node）上运行的代理。 它保证容器containers都 运行在 Pod 中。</p>
<h4> kube-proxy</h4>
<p>是集群中每个节点上运行的网络代理</p>
<figure><figcaption></figcaption></figure>
<h2> 3）、集群安装+环境配置搭建</h2>
<h3> kubectl 快捷键（alias）</h3>
<h4> k8s<a name="k8s-alias"></a></h4>
<p><a href="https://blog.csdn.net/qq_42476834/article/details/117373828" target="_blank" rel="noopener noreferrer">快捷键设置 原文链接</a></p>
<p>vim ~/.bashrc</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 部署步骤</h3>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 环境准备</h3>
<h4> VMware</h4>
<h4> 创建虚拟机</h4>
<figure><figcaption></figcaption></figure>
<p>安装 net-tools 工具</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>本机添加hosts：C:\Windows\System32\drivers\etc</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每个节点上添加   vim /etc/hosts</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>systemctl restart network.service //重启网络服务，</p>
<p>ping -c 3 master-120 &amp;&amp; ping -c 3 node-121 &amp;&amp; ping -c 3 node-122 &amp;&amp; ping -c 3 node-123</p>
</blockquote>
<p>用户：a，密码：123456a， 设置主机名称： hostnamectl set-hostname</p>
<h4> 开启 ssh 远程登录<a name="ssh"></a></h4>
<p><a href="https://blog.csdn.net/qq_42476834/article/details/124766896" target="_blank" rel="noopener noreferrer">具体参考文档</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行sh脚本：<a href="http://k8s-init.sh" target="_blank" rel="noopener noreferrer">k8s-init.sh</a>，<a href="http://k8s-docker.sh" target="_blank" rel="noopener noreferrer">k8s-docker.sh</a>，<a href="http://k8s-install.sh" target="_blank" rel="noopener noreferrer">k8s-install.sh</a></p>
<h4> 开启IPVS支持</h4>
<p>vim /etc/sysconfig/modules/ipvs.modules</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>chmod 755 /etc/sysconfig/modules/ipvs.modules</p>
<p>sh /etc/sysconfig/modules/ipvs.modules</p>
<p>lsmod | grep ip_vs</p>
</blockquote>
<h4> 将桥接的IPv4流量传递到iptables的链</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 时间同步</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> A、在所有节点上安装 Docker和 kubeadm、kubelet、kubectl</h3>
<h4> 准备</h4>
<p><a href="https://kubernetes.io/zh/docs/tasks/tools/" target="_blank" rel="noopener noreferrer">安装工具</a>：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener noreferrer">docker</a>、kubeadm管理、kukelet代理、kubectl命令行</p>
<h4> 1、安装docker</h4>
<p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/install/centos/</a></p>
<p>卸载的旧版本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>华为安装</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阿里安装</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>systemctl docker</code></p>
<p><code>systemctl restart docker</code></p>
<p><code>systemctl stop docker</code></p>
<p><code>systemctl enable docker</code></p>
<p><code>systemctl disable docker</code></p>
<p><code>systemctl status docker</code></p>
<p><code>usermod -aG docker a</code> #非root用户</p>
<p>设置加速</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>docker配置http代理（可选）</strong></p>
<p>首先, 使用<code>systemctl status docker</code>命令查询<code>docker.service</code>文件的路径, 在我的环境中它的文件路径是<code>/lib/systemd/system/docker.service</code>; 然后编辑这个文件, 添加如下内容:</p>
<p>vim /lib/systemd/system/docker.service</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<hr>
<h4> 2、添加 阿里kubernetes 仓库源（推荐）</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、添加 华为kubernetes 仓库源（仓库维护太慢了）</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、更新索引文件并安装 <strong>kubernetes</strong></h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>failure: repodata/repomd.xml from kubernetes: [Errno 256] No more mirrors to try.</code></p>
<p>暂时禁用存储库：<code>yum --disablerepo=kubernetes</code></p>
<p>永久禁用存储库：<code>yum-config-manager --disable kubernetes or subscription-manager repos --disable=kubernetes</code></p>
<p>如果不可用，则跳过：<code>yum-config-manager --save --setopt=kubernetes.skip_if_unavailable=true</code></p>
<h4> 5、master 安装</h4>
<p><strong>升级0，新安装0，降级3，删除0，未升级25</strong></p>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、node 节点安装</h4>
<blockquote>
<p>yum install kubeadm-1.23.8-0 kubelet-1.23.8-0 kubectl-1.23.8-0</p>
</blockquote>
<h4> 6、创建k8s软连接</h4>
<p>执行：<code>ln -s /usr/bin/kube*  /usr/local/bin/</code></p>
<h4> 启动 k8s</h4>
<blockquote>
<p>systemctl enable kubelet   systemctl disable kubelet</p>
<p>systemctl start kubelet    systemctl stop kubelet</p>
<p>systemctl status kubelet</p>
<p>发现：<code>kubelet.service - kubelet: The Kubernetes Node Agent</code>，属于正常，k8s还没有配置</p>
</blockquote>
<p><a href="https://kubernetes.io/releases/" target="_blank" rel="noopener noreferrer">版本 History</a> <a href="https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG" target="_blank" rel="noopener noreferrer">https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG</a></p>
<h3> B、Master 部署 Kubernetes</h3>
<p>编辑 master_images.sh：设置需要的镜像，仓库地址,<a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">官网docker镜像搜索</a></p>
<blockquote>
<p><a href="https://hub.docker.com/u/aiotceo" target="_blank" rel="noopener noreferrer">https://hub.docker.com/u/aiotceo</a> 、<a href="https://hub.docker.com/u/mirrorgooglecontainers" target="_blank" rel="noopener noreferrer">https://hub.docker.com/u/mirrorgooglecontainers</a></p>
<p><a href="http://swr.myhuaweicloud.com/iivey" target="_blank" rel="noopener noreferrer">swr.myhuaweicloud.com/iivey</a></p>
<p><a href="http://registry.cn-chengdu.aliyuncs.com/k8sjf" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/k8sjf</a></p>
<p><a href="http://registry.aliyuncs.com/google_containers" target="_blank" rel="noopener noreferrer">registry.aliyuncs.com/google_containers</a></p>
</blockquote>
<h4> 设置k8s镜像仓库源</h4>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所需镜像版本：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> master -&gt; kubeadm 初始化<a name="kubeadm init"></a></h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 得到 kubeadm join</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> kubectl 命令的自动补全功能（所有的节点）</h4>
<blockquote>
<p>echo "source &lt;(kubectl completion bash)" &gt;&gt; ~/.bashrc</p>
</blockquote>
<h4> 重启后出现：<code>The connection to the server localhost:8080 was refused - did you specify the right host or port?</code></h4>
<blockquote>
<p>解决：<a href="https://blog.csdn.net/qq_42476834/article/details/124730955" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_42476834/article/details/124730955</a></p>
<p><a href="#ssh">ssh免密登录访问</a></p>
</blockquote>
<h4> 将主节点（master）中的“/etc/kubernetes/admin.conf”文件拷贝到从节点（node）相同目录下</h4>
<blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<h4> 解决端口占用：kubeadm reset</h4>
<h3> C、将从节点（node）加入 Kubernetes （Master）集群中</h3>
<p>su root 在每个根节点上运行以下操作：</p>
<p>[查看 kubeadm init](#kubeadm init)</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> kubeadm-config（略过 嘿嘿嘿）</h4>
<p>kubectl -n kube-system get cm kubeadm-config -o yaml &gt; /etc/kubernetes/kubeadm-config.yaml</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> token过期，重新设置</h4>
<blockquote>
<p>kubeadm token list</p>
<p>kubeadm token create --print-join-command</p>
<p>kubeadm token create --ttl 0 --print-join-command</p>
</blockquote>
<h3> D、master 部署容器网络插件 Flannel</h3>
<figure><figcaption></figcaption></figure>
<p>参考：<a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/</a></p>
<p>Flannel 的缺点之一是缺乏高级功能，例如配置网络策略和防火墙的能力。因此 Flannel 是 Kubernetes 集群网络的一个很好的入门级选择，但是，如果你正在寻找高级网络功能，你可能需要考虑其他 CNI 选项，例如 Calico。</p>
<h4> 配置网络策略 Flannel</h4>
<p>root用户：使用<a href="https://github.com/flannel-io/flannel#deploying-flannel-manually" target="_blank" rel="noopener noreferrer">Flannel</a> 配置，执行：</p>
<blockquote>
<p><a href="https://gitee.com/k8s_s/flannel/blob/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/flannel/blob/master/Documentation/kube-flannel.yml</a></p>
<p><a href="https://gitee.com/k8s_s/flannel/blob/v0.17.0/Documentation/kube-flannel.yml" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/flannel/blob/v0.17.0/Documentation/kube-flannel.yml</a></p>
<p><a href="https://gitee.com/k8s_s/flannel/blob/v0.19.1/Documentation/kube-flannel.yml" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/flannel/blob/v0.19.1/Documentation/kube-flannel.yml</a></p>
<p>kubectl apply -f kube-flannel-0.19.1.yml</p>
<p>删除：kubectl delete -f kube-flannel-0.19.1.yml</p>
</blockquote>
<h5>kube-flannel.yml 镜像版本</h5>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> <a href="https://blog.csdn.net/qq_42476834/article/details/121781274" target="_blank" rel="noopener noreferrer">kubectl 命令基础</a></h4>
<h4> 查看</h4>
<p>列出所有运行的Pod信息</p>
<p>列出Pod以及运行Pod节点信息。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看所以节点 kg nodes</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看命名空间 kubectl get ns</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 pod 命名空间   kubectl get pods --all-namespaces -owide</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kubectl get pods -n kube-system</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kubectl get pods -n kube-system -o wide</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>kube-flannel-ds-xxxx 必须运行OK</strong></p>
<h3> E、可视化查看 Kubernetes资源</h3>
<p>文档：<a href="https://kuboard.cn/install/install-k8s-dashboard.html" target="_blank" rel="noopener noreferrer">https://kuboard.cn/install/install-k8s-dashboard.html</a></p>
<h4> 1、dashboard（不推荐）</h4>
<blockquote>
<p><a href="https://github.com/kubernetes/dashboard/releases/tag/v2.4.0" target="_blank" rel="noopener noreferrer">https://github.com/kubernetes/dashboard/releases/tag/v2.4.0</a></p>
<p>kubectl apply -f <a href="https://gitee.com/k8s_s/dashboard1/blob/v2.4.0/aio/deploy/recommended.yaml" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/dashboard1/blob/v2.4.0/aio/deploy/recommended.yaml</a> -o yaml &gt; dashboard.yaml</p>
</blockquote>
<h4> 2、KubeSphere（推荐）</h4>
<p><a href="./kube-sphere">跳转到 KubeSphere 安装</a></p>
<p><a href="https://github.com/kubesphere/kubesphere" target="_blank" rel="noopener noreferrer">github kubesphere</a>，star: 9.8+K</p>
<h4> 3、Kuboard</h4>
<p><a href="https://kuboard.cn/overview/" target="_blank" rel="noopener noreferrer">https://kuboard.cn/overview/</a></p>
<p><a href="https://github.com/eip-work/kuboard-press" target="_blank" rel="noopener noreferrer">Github kuboard</a> stars 14.5+K</p>
<h4> 4、KubeOperator</h4>
<hr>
<hr>
<h2> 4）、k8s 入门</h2>
<p>后期直接到这里开始吧：<a href="#apps+expose-port"> 使用 [apps +暴露Service port] 的 yaml 格式 </a></p>
<p><strong>资源包括(不区分大小写)：pod（po），service（svc），replication controller（rc），deployment（deploy），replica set（rs）</strong></p>
<p>具体命令请看：<a href="#k8s-alias">k8s-alias</a></p>
<h3> kubectl get po</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> kubectl get svc</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> kubectl get rc</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> kubectl get deploy</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> kubectl get rs</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> A、基本命令</h3>
<h4> 1、创建apps：create deployment</h4>
<p>master安装tomcat</p>
<h5>kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8</h5>
<h4> 2、查看 kg all</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、查看详细 kg all -o wide</h4>
<p>tomcat6在节点node2---docker下载镜像ok</p>
<figure><figcaption></figcaption></figure>
<p>在node2查看</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h4> 4、查看 kg pod -o wide</h4>
<figure><figcaption></figcaption></figure>
<h5>node02模拟宕机，看看k8s怎么处理（dkstop与node02关机）</h5>
<figure><figcaption></figcaption></figure>
<p>发现node2节点已经不行了，全部压力到了node3</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h5>重启 node02</h5>
<figure><figcaption></figcaption></figure>
<h4> 5、暴露 port ：expose</h4>
<blockquote>
<p>expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p><a href="http://192.168.100.131:31002/" target="_blank" rel="noopener noreferrer">http://192.168.100.131:31002/</a></p>
<h4> 6、修改 port：edit</h4>
<blockquote>
<p>kubectl edit svc tomcat6 ###修改app应用服务的port</p>
<p>kubectl edit deploy tomcat6 ### 修改app应用</p>
</blockquote>
<h4> 7、扩容或缩容：scale</h4>
<blockquote>
<p>scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)</p>
</blockquote>
<p>将名为tomcat6中的pod副本数设置为3。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>如果当前副本数为2，则将其扩展至3。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 8、删除以 create deployment 部署的(apps、service) delete</h4>
<blockquote>
<p>kubectl  get all</p>
<p>kubectl delete deployment.apps/tomcat6</p>
<p>kubectl delete service/tomcat6</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<h4> 9、部署&amp;删除以 yaml 部署的实例</h4>
<p><a href="#xxx.yaml">查看 xxx.yaml</a></p>
<h5>kubectl apply -f xxx.yaml</h5>
<h5>kubectl delete -f xxx.yaml</h5>
<hr>
<hr>
<h3> B、yaml &amp; 基本使用</h3>
<p><a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh/docs/reference/kubectl/overview/</a></p>
<p>后期使用：<a href="#apps+expose-port"># apps+expose-port</a>，而不是使用 <a href="#%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8yaml%E5%88%9B%E5%BB%BAapps"># 初级使用yaml创建apps</a></p>
<h4> Pod 模版</h4>
<p>一般不会自己创建</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Deployment 模版</h4>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Service 模版</h4>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1、初级使用yaml创建apps<a name="初级使用yaml创建apps"></a>（后期不使用这种方式）</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看并保存 Deployment 的 yaml 文件（--dry-run）</p>
<blockquote>
<p>--dry-run：仅查看不运行</p>
<p>kubectl create deployment 服务名称--image=镜像名称 --dry-run -o yaml &gt; 保存目标</p>
<p>kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8 --dry-run -o yaml &gt; tomcat6.yaml</p>
</blockquote>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 Deployment apps：kubectl apply -f tomcat6.yaml</p>
<p>kubectl get deployments</p>
<p>更新 Deployment</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回滚 Deployment</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>暴露 service 端口：kubectl expose deploy tomcat6 --port=80 --target-port=8080 --type=NodePort</p>
<p>查看 Pod（kg all ，kg pods -o wide，kg pod xx -o yaml）</p>
<figure><figcaption></figcaption></figure>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自己创建 pod（.yaml）文件</p>
<p>Pod 通常不是直接创建的，而是使用工作负载资源创建的。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kubectl apply -f myPod.yaml</p>
<p>查看 Service（kg svc tomcat6 -o  yaml）</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 Deployment-apps（kg deploy tomcat6 -o  yaml）</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 Deployment 上线状态<code>kubectl rollout status deployment/nginx-deployment</code></p>
<p>校验：<a href="http://192.168.100.130:80/" target="_blank" rel="noopener noreferrer">http://192.168.100.130:80/</a></p>
<figure><figcaption></figcaption></figure>
<h4> 2、使用 [apps +暴露Service port] 的 yaml 格式（使用这个，不使用<a href="#%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8yaml%E5%88%9B%E5%BB%BAapps"># 初级使用yaml创建apps</a>）=<mark><mark><mark><mark>推荐</mark></mark></mark></mark>==<a name="apps+expose-port"></a></h4>
<p>=<mark><mark><mark><mark>推荐</mark></mark></mark></mark>==</p>
<h5>安装 Deployment（apps ）与暴露Service（expose-port ）在同一个yaml文件里设置，通过<code>---</code>分隔</h5>
<p>=<mark><mark><mark><mark>推荐</mark></mark></mark></mark>==</p>
<p>xxx.yaml<a name="xxx.yaml"></a></p>
<details class="hint-container details"><summary>点击查看代码</summary>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<figure><figcaption></figcaption></figure>
<h3> C、Deployment &amp; service 概念</h3>
<figure><figcaption></figcaption></figure>
<h4> pod &amp; service</h4>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>将一组pod公开为网络服务，通过service代理，可以实现负载均衡</p>
<figure><figcaption></figcaption></figure>
<h4> ClusterIP</h4>
<p>此方式只能在集群内访问</p>
<h4> label &amp; selector</h4>
<figure><figcaption></figcaption></figure>
<p>通讯1</p>
<figure><figcaption></figcaption></figure>
<p>通讯2</p>
<figure><figcaption></figcaption></figure>
<h4> 说明</h4>
<blockquote>
<p>一个集群后多台mster、node，一个节点node，里面有多个Pod，一个Pod里可能有多个服务，各个Pod通过service暴露port给其他Pod、node之间是互通，通过controller来管理使用Pod资源。</p>
</blockquote>
<p>node -&gt; pod -&gt;  service -&gt; controller</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-04-20T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 流水线部署</title>
    <id>https://topjf.github.io/k8s/deploys.html</id>
    <link href="https://topjf.github.io/k8s/deploys.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">1）、gitee拉取代码 2）、自动打包 3）、自动部署 4）、</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-流水线部署</h1>
<h2> 1）、gitee拉取代码</h2>
<h2> 2）、自动打包</h2>
<h2> 3）、自动部署</h2>
<h2> 4）、</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 软件管理工具-Helm</title>
    <id>https://topjf.github.io/k8s/helm.html</id>
    <link href="https://topjf.github.io/k8s/helm.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">Helm 是 Kubernetes 的包管理器 Helm 版本选择 Helm 版本 支持的 Kubernetes 版本 :-------::-----------------: 3.9.x 1.24.x - 1.21.x 3.8.x 1.23.x - 1.20.x 3.7.x 1.22.x - 1.19.x 3.6.x 1.21.x - 1.18.x ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-软件管理工具-Helm</h1>
<p><strong>Helm 是 Kubernetes 的包管理器</strong></p>
<h2> Helm 版本选择</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Helm 版本</th>
<th style="text-align:center">支持的 Kubernetes 版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3.9.x</td>
<td style="text-align:center">1.24.x - 1.21.x</td>
</tr>
<tr>
<td style="text-align:center">3.8.x</td>
<td style="text-align:center">1.23.x - 1.20.x</td>
</tr>
<tr>
<td style="text-align:center">3.7.x</td>
<td style="text-align:center">1.22.x - 1.19.x</td>
</tr>
<tr>
<td style="text-align:center">3.6.x</td>
<td style="text-align:center">1.21.x - 1.18.x</td>
</tr>
<tr>
<td style="text-align:center">3.5.x</td>
<td style="text-align:center">1.20.x - 1.17.x</td>
</tr>
<tr>
<td style="text-align:center">3.4.x</td>
<td style="text-align:center">1.19.x - 1.16.x</td>
</tr>
</tbody>
</table>
<h2> 安装 Helm3.9</h2>
<p><a href="https://devopscube.com/install-configure-helm-kubernetes/" target="_blank" rel="noopener noreferrer">安装 Helm3.9</a></p>
<p>说明文档：</p>
<p><a href="https://docs.helm.sh/zh/" target="_blank" rel="noopener noreferrer">https://docs.helm.sh/zh/</a></p>
<p><a href="https://v3.helm.sh/zh/docs/" target="_blank" rel="noopener noreferrer">https://v3.helm.sh/zh/docs/</a></p>
<p>下载：</p>
<p><a href="https://github.com/helm/helm" target="_blank" rel="noopener noreferrer">https://github.com/helm/helm</a></p>
<p><a href="https://gitee.com/k8s_s/helm" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/helm</a></p>
<p><a href="https://github.com/helm/helm/releases/v3.9.4" target="_blank" rel="noopener noreferrer">https://github.com/helm/helm/releases/v3.9.4</a></p>
<p><a href="https://pan.baidu.com/s/1mBoQNysvt2Jps49YV4y5yg" target="_blank" rel="noopener noreferrer">Helm 下载提取码：1234</a></p>
<h3> a、从sh文件安装 helm 3</h3>
<p><strong>第一步：</strong> 下载最新的 helm 安装脚本。 get_helm.sh可以修改：downloadFile()方法的 <mark>DOWNLOAD_URL</mark> ：指定可以下载的helm文件地址</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> b、从二进制安装 Helm3</h3>
<p><strong>第 1 步：</strong> 前往：<a href="https://github.com/helm/helm/releases/v3.9.4" target="_blank" rel="noopener noreferrer">https://github.com/helm/helm/releases/v3.9.4</a> 或者上面的地址</p>
<p><strong>第 2 步：</strong> 使用 wget 下载二进制文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>第 3 步：</strong> 解压下载的文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第 6 步：</strong> 添加repo</p>
<p><a href="#Repo">添加稳定的 repo</a></p>
<p><strong>第 7 步：</strong> 查看存储类型</p>
<p>kg sc --all-namespaces</p>
<p>helm3 变化:</p>
<ol>
<li>
<p>去除Tiller 和 helm serve</p>
</li>
<li>
<p>预定义仓库被移除，添加helm hub</p>
</li>
</ol>
<p>helm search 现在区分 repo 和hub</p>
<p>repo 是自己手动添加的源</p>
<p>比如官方的有稳定版和在建设的</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以把 hub 和 google repo 配合起来食用，效果更佳</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>
<p>Values 支持 JSON Schema 校验器</p>
</li>
<li>
<p>代码复用 - Library Chart 支持</p>
</li>
</ol>
<p>当一个 Chart 想要使用该 Library Chart内的一些模板时，可以在 Chart.yaml 的 dependencies 依赖项中指定</p>
<ol start="5">
<li>requirements.yaml 被整合到了 Chart.yaml 中，但格式保持不变</li>
</ol>
<p>helm2/3 命令差异</p>
<h4> 常用命令一览</h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>Helm2</th>
<th>Helm3</th>
<th>对应h3增强、区别</th>
<th>命令说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>create</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>创建具有给定名称的新图表</td>
</tr>
<tr>
<td><em>delete</em></td>
<td>有</td>
<td>无</td>
<td>-</td>
<td>给定发布名称，从Kubernetes中删除该发布</td>
</tr>
<tr>
<td>dependency</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>管理图表的依赖项</td>
</tr>
<tr>
<td><em>fetch</em></td>
<td>有</td>
<td>无</td>
<td>- <strong>pull</strong></td>
<td>从存储库下载图表，并（可选）将其解压缩到本地目录中</td>
</tr>
<tr>
<td>get</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>下载命名版本</td>
</tr>
<tr>
<td>history</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>获取发布历史记录</td>
</tr>
<tr>
<td><em>home</em></td>
<td>有</td>
<td>无</td>
<td>- <strong>env</strong></td>
<td>显示HELM_HOME的位置</td>
</tr>
<tr>
<td><em>init</em></td>
<td>有</td>
<td>无</td>
<td>-</td>
<td>在客户端和服务器上初始化Helm</td>
</tr>
<tr>
<td><em>inspect</em></td>
<td>有</td>
<td>无</td>
<td>- <strong>show</strong></td>
<td>查阅图表</td>
</tr>
<tr>
<td>install</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>安装图表存档</td>
</tr>
<tr>
<td>lint</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>检查图表中可能出现的问题</td>
</tr>
<tr>
<td>list</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>列表发布</td>
</tr>
<tr>
<td>package</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>将图表目录打包到图表存档中</td>
</tr>
<tr>
<td>plugin</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>添加、列出或删除头盔插件</td>
</tr>
<tr>
<td>repo</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>添加、列出、删除、更新和索引图表存储库</td>
</tr>
<tr>
<td><em>reset</em></td>
<td>有</td>
<td>无</td>
<td>-</td>
<td>从集群卸载Tiller</td>
</tr>
<tr>
<td>rollback</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>将发布回滚到以前的版本</td>
</tr>
<tr>
<td>search</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>在图表中搜索关键字</td>
</tr>
<tr>
<td><em>serve</em></td>
<td>有</td>
<td>无</td>
<td>-</td>
<td>启动本地http web服务器</td>
</tr>
<tr>
<td>status</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>显示命名版本的状态</td>
</tr>
<tr>
<td>template</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>本地渲染模板</td>
</tr>
<tr>
<td>test</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>测试发布</td>
</tr>
<tr>
<td>upgrade</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>升级发行版</td>
</tr>
<tr>
<td>verify</td>
<td>有</td>
<td>有</td>
<td>无</td>
<td>验证给定路径上的图表是否已签名且有效</td>
</tr>
<tr>
<td>version</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>打印客户端/服务器版本信息</td>
</tr>
<tr>
<td><strong>env</strong></td>
<td>无</td>
<td>有</td>
<td>-</td>
<td>Helm客户端环境信息</td>
</tr>
<tr>
<td><strong>help</strong></td>
<td>无</td>
<td>有</td>
<td>-</td>
<td>关于任何命令的帮助</td>
</tr>
<tr>
<td><strong>pull</strong></td>
<td>无</td>
<td>有</td>
<td>-</td>
<td>从存储库下载图表，并（可选）将其解压缩到本地目录中</td>
</tr>
<tr>
<td><strong>show</strong></td>
<td>无</td>
<td>有</td>
<td>-</td>
<td>显示图表的信息</td>
</tr>
<tr>
<td><strong>uninstall</strong></td>
<td>无</td>
<td>有</td>
<td>-</td>
<td>卸载发行版</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>env是对被删除的命令home的强化</li>
<li>pull是对被删除的命令fetch的替换</li>
<li>show是对被删除的命令inspect的替换</li>
<li>help命令本身在Helm 2时代就可以使用，只是helm --help里面没有显示，算是文档自包含的强化</li>
<li>uninstall是功能特性的增强</li>
</ul>
<p>Helm 3: 命令发生的变化</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>Helm 2</th>
<th>Helm 3</th>
<th>命令说明区别</th>
<th>Helm 2 命令说明</th>
<th>Helm 3命令说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>下载命名版本</td>
<td>下载命名版本的扩展信息</td>
</tr>
<tr>
<td>install</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>安装图表存档</td>
<td>安装图表</td>
</tr>
<tr>
<td>plugin</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>添加、列出或删除头盔插件</td>
<td>安装、列出或卸载Helm插件</td>
</tr>
<tr>
<td>test</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>测试发布</td>
<td>为发布运行测试</td>
</tr>
<tr>
<td>version</td>
<td>有</td>
<td>有</td>
<td>有</td>
<td>打印客户端/服务器版本信息</td>
<td>打印客户端版本信息</td>
</tr>
</tbody>
</table>
<h5>安装 helm2</h5>
<p>a、安装方法与 [helm3](#从二进制安装 Helm3) 相同</p>
<p>b、helm2 初始化安装(tiller服务) helm_rbac.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kubectl apply -f helm_rbac.yaml</p>
<figure><figcaption></figcaption></figure>
<h3> c、初始化 Helm2：部署 Tiller</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 添加稳定的 Helm Repo <a name="Repo"></a></h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s Ingress</title>
    <id>https://topjf.github.io/k8s/ingress.html</id>
    <link href="https://topjf.github.io/k8s/ingress.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">Ingress 基于域名访问，不需要通过ip：port访问服务 ingress：通过域名、负载均衡 ingress 底层是nginx 通过Service 发现Pod进行关联。基于域名访问。 通过Ingress Controller 实现Pod负载均衡。 支持TCP/UDP 4层负载均衡和HTTP 7层负载均衡。 执行流程 ingress-nginx-c...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Ingress</h1>
<h2> Ingress 基于域名访问，不需要通过ip：port访问服务</h2>
<p>ingress：通过域名、负载均衡</p>
<p>ingress 底层是nginx</p>
<blockquote>
<p>通过Service 发现Pod进行关联。基于域名访问。</p>
<p>通过Ingress Controller 实现Pod负载均衡。</p>
<p>支持TCP/UDP 4层负载均衡和HTTP 7层负载均衡。</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<hr>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<hr>
<h2> 执行流程</h2>
<blockquote>
<p>ingress-nginx-controller 对外提供80（NodePort）端口，外部访问80转到内部service的pod【k8s内部端口（ClusterIP）】</p>
<p>web -》 ingress -》node：service -》 pod -》 具体程序app</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<h2> Ingress 是什么？</h2>
<p><a href="https://kubernetes.io/zh/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener noreferrer">Ingress文档</a></p>
<figure><figcaption></figcaption></figure>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你使用 <code>kubectl apply -f</code> 创建 Ingress 时：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 版本关系</h2>
<p><a href="https://kubernetes.github.io/ingress-nginx/" target="_blank" rel="noopener noreferrer">kubernetes.github.io/ingress-nginx</a></p>
<p><a href="https://github.com/kubernetes/ingress-nginx/" target="_blank" rel="noopener noreferrer">github.com/kubernetes/ingress-nginx</a></p>
<p><a href="https://gitee.com/k8s_s/ingress-nginx/" target="_blank" rel="noopener noreferrer">gitee.com/k8s_s/ingress-nginx</a></p>
<table>
<thead>
<tr>
<th>Ingress-NGINX version</th>
<th>k8s supported version</th>
<th>Alpine Version</th>
<th>Nginx Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>v1.3.0</td>
<td>1.24, 1.23, 1.22, 1.21, 1.20</td>
<td>3.14.6</td>
<td>1.19.10†</td>
</tr>
<tr>
<td>v1.2.1</td>
<td>1.23, 1.22, 1.21, 1.20, 1.19</td>
<td>3.14.6</td>
<td>1.19.10†</td>
</tr>
<tr>
<td>v1.2.0</td>
<td>1.23, 1.22, 1.21, 1.20, 1.19</td>
<td>3.14.6</td>
<td>1.19.10†</td>
</tr>
<tr>
<td>v1.1.3</td>
<td>1.23, 1.22, 1.21, 1.20, 1.19</td>
<td>3.14.4</td>
<td>1.19.10†</td>
</tr>
<tr>
<td>v1.1.2</td>
<td>1.23, 1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.1.1</td>
<td>1.23, 1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.1.0</td>
<td>1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.0.5</td>
<td>1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.0.4</td>
<td>1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.0.3</td>
<td>1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.0.2</td>
<td>1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.0.1</td>
<td>1.22, 1.21, 1.20, 1.19</td>
<td>3.14.2</td>
<td>1.19.9†</td>
</tr>
<tr>
<td>v1.0.0</td>
<td>1.22, 1.21, 1.20, 1.19</td>
<td>3.13.5</td>
<td>1.20.1</td>
</tr>
</tbody>
</table>
<p><strong>Ingress-nginx 版本选择</strong></p>
<blockquote>
<p><a href="https://gitee.com/k8s_s/ingress-nginx/blob/controller-v1.1.3/deploy/static/provider/baremetal/1.22/deploy.yaml" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/ingress-nginx/blob/controller-v1.1.3/deploy/static/provider/baremetal/1.22/deploy.yaml</a></p>
<p><a href="https://gitee.com/k8s_s/ingress-nginx/blob/controller-v1.2.0/deploy/static/provider/baremetal/1.22/deploy.yaml" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/ingress-nginx/blob/controller-v1.2.0/deploy/static/provider/baremetal/1.22/deploy.yaml</a></p>
<p><a href="https://gitee.com/k8s_s/ingress-nginx/blob/controller-v1.3.0/deploy/static/provider/baremetal/1.22/deploy.yaml" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/ingress-nginx/blob/controller-v1.3.0/deploy/static/provider/baremetal/1.22/deploy.yaml</a></p>
</blockquote>
<p><strong>V1.2.0-yaml 文件需要的版本镜像2个</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://hub.docker.com/r/bitnami/nginx-ingress-controller/tags" target="_blank" rel="noopener noreferrer">nginx-ingress-controller</a>、<a href="https://hub.docker.com/search?q=kube-webhook-certgen" target="_blank" rel="noopener noreferrer">kube-webhook-certgen:1.5.2</a></p>
<h2> Ingress注意事项</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 文档教程</h2>
<p><a href="https://kubesphere.io/zh/learn/level_2/lesson_9/content/" target="_blank" rel="noopener noreferrer">kubesphere.io/zh/learn/level_2/lesson_9/content</a></p>
<p><a href="https://www.yuque.com/leifengyang/oncloud/ctiwgo#JEtqN" target="_blank" rel="noopener noreferrer">www.yuque.com/leifengyang/oncloud/ctiwgo#JEtqN</a></p>
<h2> 1、部署&amp;删除 ingress 服务</h2>
<p>kubectl apply -f ingress-controller-1.2.0.yaml</p>
<p>kubectl delete -f ingress-controller-1.2.0.yaml</p>
<h2> 2、创建 svc、deploy（nginx、tomcat）</h2>
<h3> tomcat</h3>
<p>kapp tomcat6-deploy.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> nginx</h3>
<p>kapp nginx-deploy.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 3、创建 ingress 规则</h2>
<p><a href="https://v1-22.docs.kubernetes.io/zh/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener noreferrer">v1-22.docs.kubernetes.io/zh/docs/concepts/services-networking/ingress/</a></p>
<h3> tomcat</h3>
<p>kapp ingress-tomcat.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> nginx + 限流+跨域</h3>
<p>kapp ingress-nginx.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://test.nginx.com" target="_blank" rel="noopener noreferrer">http://test.nginx.com</a>:</p>
<h2> 报错<code>validate.nginx.ingress.kubernetes.io</code></h2>
<p>error when creating "ingress-nginx.yaml": Internal error occurred: failed calling
webhook "<a href="http://validate.nginx.ingress.kubernetes.io" target="_blank" rel="noopener noreferrer">validate.nginx.ingress.kubernetes.io</a>": Post "<a href="https://ingress-nginx-controller" target="_blank" rel="noopener noreferrer">https://ingress-nginx-controller</a>
-admission.ingress-nginx.svc:443/networking/v1/ingresses?timeout=10s": x509:
certificate signed by unknown authority</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 补充</h2>
<p>补充：另外需要在 ingress-controller-1.2.0.yaml 部署配置中</p>
<ul>
<li>将 <code>rbac.authorization.k8s.io/v1beta1</code> 改为 <code>rbac.authorization.k8s.io/v1</code></li>
<li>将 <code>image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.29.0</code>
改为 <code>image: docker.io/bitnami/nginx-ingress-controller:latest</code></li>
</ul>
<p>4、更新 Ingress</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> n、查看状态</h2>
<p>更多命令：<a href="#k8s-alias">k8s-alias</a></p>
<p>空间名称：kg pods --all-namespaces -o wide</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kg pod -n ingress-nginx -o wide</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> （用）查看ingress-nginx所有服务：kg all -n ingress-nginx -o wide</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> （用）kg ingress -owide、kg pod --show-labels</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> （用）查看svc服务：kg svc -n ingress-nginx</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查看 pod 描述：k describe pod  -n ingress-nginx</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> （用）查看 ingress 描述：kubectl describe ingress</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> k logs  ingress-nginx</h3>
<h2> 5、访问</h2>
<p><a href="http://tomcat.k8s.com:31839" target="_blank" rel="noopener noreferrer">http://tomcat.k8s.com:31839</a></p>
<p><a href="http://nginx.k8s.com:31839" target="_blank" rel="noopener noreferrer">http://nginx.k8s.com:31839</a></p>
<h2> 处理tomcat 404</h2>
<p>查看日志： kubectl logs tomcat-xx</p>
<p>进入容器中查看:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<hr>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 安装常用软件</title>
    <id>https://topjf.github.io/k8s/install-application.html</id>
    <link href="https://topjf.github.io/k8s/install-application.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">如何部署 可以使用kubesphere，快速搭建MySQL.环境。 有状态服务抽取配置为ConfigMap; 有状态服务必须使用pvc 持久化数据; 服务集群内访问使用DNS 提供的稳定域名; MySQL Redis ES MQ Nacos ZipKin Sentinel Java应用</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-安装常用软件</h1>
<p>如何部署</p>
<p>可以使用kubesphere，快速搭建MySQL.环境。</p>
<ul>
<li>有状态服务抽取配置为ConfigMap</li>
<li>有状态服务必须使用pvc 持久化数据</li>
<li>服务集群内访问使用DNS 提供的稳定域名</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> MySQL</h2>
<h2> Redis</h2>
<h2> ES</h2>
<h2> MQ</h2>
<h2> Nacos</h2>
<h2> ZipKin</h2>
<h2> Sentinel</h2>
<h2> Java应用</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 可视化管理工具-KubeSphere</title>
    <id>https://topjf.github.io/k8s/kube-sphere.html</id>
    <link href="https://topjf.github.io/k8s/kube-sphere.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">在master主机安装KubeSphere 官网 (https://kubesphere.com.cn/zh/) ks-installer 教程 (https://github.com/kubesphere/ks-installer/blob/master/README_zh.md) https://github.com/kubesphere/kube...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-可视化管理工具-KubeSphere</h1>
<p>在<code>master</code>主机安装KubeSphere</p>
<p><a href="https://kubesphere.com.cn/zh/" target="_blank" rel="noopener noreferrer">官网</a></p>
<p><a href="https://github.com/kubesphere/ks-installer/blob/master/README_zh.md" target="_blank" rel="noopener noreferrer">ks-installer 教程</a></p>
<p><a href="https://github.com/kubesphere/kubesphere" target="_blank" rel="noopener noreferrer">https://github.com/kubesphere/kubesphere</a> <strong>star:10.8K</strong></p>
<p><a href="https://gitee.com/k8s_s/kubesphere" target="_blank" rel="noopener noreferrer">gitee.com/k8s_s/kubesphere</a></p>
<h2> KubeSphere 版本选择</h2>
<p><a href="https://v3-2.docs.kubesphere.io/zh/docs/release/release-v321/" target="_blank" rel="noopener noreferrer">版本说明</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">KubeSphere</th>
<th style="text-align:center">支持的 Kubernetes 版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3.3.x</td>
<td style="text-align:center">1.19.x, 1.20.x, 1.21.x, 1.22.x (experimental)</td>
</tr>
<tr>
<td style="text-align:center">3.2.x</td>
<td style="text-align:center">1.19.x, 1.20.x, 1.21.x, 1.22.x (experimental)</td>
</tr>
<tr>
<td style="text-align:center">3.1.x</td>
<td style="text-align:center">1.17.x, 1.18.x, 1.19.x, 1.20.x</td>
</tr>
<tr>
<td style="text-align:center">3.0.x</td>
<td style="text-align:center">1.15.x, 1.16.x, 1.17.x, 1.18.x</td>
</tr>
</tbody>
</table>
<h2> 环境准备</h2>
<p>在安装之前，需要配置 Kubernetes 集群中的<strong>默认</strong>存储类型。</p>
<ul>
<li>
<p>1、NFS</p>
</li>
<li>
<p>2、PV&amp;PVC</p>
</li>
<li>
<p>3、ConfigMap <a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/" target="_blank" rel="noopener noreferrer">ConfigMap</a></p>
</li>
<li>
<p>4、secret  <a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/" target="_blank" rel="noopener noreferrer">secret</a></p>
</li>
</ul>
<p><a href="/k8s/nfs-pv-pvc-config-secret.html" target="blank">具体设置请看</a></p>
<h2> 需要的镜像</h2>
<blockquote>
<p>kubesphere/pause:3.4.1</p>
<p>kubesphere/kube-apiserver:v1.22.9</p>
<p>kubesphere/kube-proxy:v1.22.9</p>
<p>kubesphere/kube-controller-manager:v1.22.9</p>
<p>kubesphere/kube-proxy:v1.22.9</p>
<p>kubesphere/kube-scheduler:v1.22.9</p>
<p>kubesphere/k8s-dns-node-cache:1.15.12</p>
<p>kubesphere/k8s-dns-node-cache:1.15.12</p>
<p>coredns/coredns:v1.8.4</p>
<p>calico/kube-controllers:v3.20.0</p>
<p>calico/cni:v3.20.0</p>
<p>calico/kube-controllers:v3.20.0</p>
<p>calico/node:v3.20.0</p>
<p>calico/cni:v3.20.0</p>
<p>calico/pod2daemon-flexvol:v3.20.0</p>
</blockquote>
<p>dkpush <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/ks-apiserver:v3.2.1" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/ks-apiserver:v3.2.1</a></p>
<p>dkpush <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/ks-console:v3.2.1" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/ks-console:v3.2.1</a></p>
<p>dkpush <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/fluent-bit:v1.8.3" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/fluent-bit:v1.8.3</a></p>
<p>dkpush <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/kube-rbac-proxy:v0.8.0" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/kube-rbac-proxy:v0.8.0</a></p>
<p>dkpush <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/openldap:1.3.0" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/openldap:1.3.0</a></p>
<p>dkpush <a href="http://registry.cn-chengdu.aliyuncs.com/jinfang/node-exporter:v0.18.1" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/jinfang/node-exporter:v0.18.1</a></p>
<h2> 1、环境安装</h2>
<p><code>A B C</code>选其一即可</p>
<h3> A、参考helm笔记</h3>
<h3> B、安装存储类 OpenEBS （仅适用于开发测试环境）<a name="OpenEBS"></a></h3>
<p><a href="https://v2-1.docs.kubesphere.io/docs/zh-CN/appendix/install-openebs/" target="_blank" rel="noopener noreferrer">https://v2-1.docs.kubesphere.io/docs/zh-CN/appendix/install-openebs/</a></p>
<p>默认情况下，KubeKey 将安装 <a href="https://openebs.io/" target="_blank" rel="noopener noreferrer">OpenEBS</a> 来为开发和测试环境配置 LocalPV</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> C、KubeKey-2.2.2（推荐）<a name="KubeKey"></a></h3>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th>Kubernetes 版本 ≥ 1.18</th>
<th>Kubernetes 版本 &lt; 1.18</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">socat</td>
<td>必须安装</td>
<td>可选，但推荐安装</td>
</tr>
<tr>
<td style="text-align:center">conntrack</td>
<td>必须安装</td>
<td>可选，但推荐安装</td>
</tr>
<tr>
<td style="text-align:center">ebtables</td>
<td>可选，但推荐安装</td>
<td>可选，但推荐安装</td>
</tr>
<tr>
<td style="text-align:center">ipset</td>
<td>可选，但推荐安装</td>
<td>可选，但推荐安装</td>
</tr>
<tr>
<td style="text-align:center">ipvsadm</td>
<td>可选，但推荐安装</td>
<td>可选，但推荐安装</td>
</tr>
</tbody>
</table>
<blockquote>
<p>yum install -y socat conntrack ebtables ipset ipvsadm</p>
</blockquote>
<p>默认情况下，KubeKey 将安装 <a href="#OpenEBS">OpenEBS</a> 来为开发和测试环境配置 LocalPV</p>
<p><a href="https://kubesphere.io/zh/" target="_blank" rel="noopener noreferrer">https://kubesphere.io/zh/</a></p>
<p>下载：<a href="https://github.com/kubesphere/kubekey/releases%E3%80%81https://gitee.com/k8s_s/kubekey/tags" target="_blank" rel="noopener noreferrer">https://github.com/kubesphere/kubekey/releases、https://gitee.com/k8s_s/kubekey/tags</a></p>
<p><a href="https://github.com/kubesphere/kubekey/releases/download/v2.2.2/kubekey-v2.2.2-linux-amd64.tar.gz" target="_blank" rel="noopener noreferrer">https://github.com/kubesphere/kubekey/releases/download/v2.2.2/kubekey-v2.2.2-linux-amd64.tar.gz</a></p>
<p>或使用以下命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 kk</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、使用 KubeKey 手动安装（推荐1）<a name="使用 KubeKey 安装"></a></h2>
<p><strong>查看支持的k8s版本</strong>：<code>kk version --show-supported-k8s</code></p>
<p>2.0.0：<a href="https://gitee.com/k8s_s/kubekey/blob/v2.0.0/docs/kubernetes-versions.md" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/kubekey/blob/v2.0.0/docs/kubernetes-versions.md</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.1.0：<a href="https://gitee.com/k8s_s/kubekey/blob/v2.1.0/docs/kubernetes-versions.md" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/kubekey/blob/v2.1.0/docs/kubernetes-versions.md</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2.2：<a href="https://gitee.com/k8s_s/kubekey/blob/v2.2.2/docs/kubernetes-versions.md" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/kubekey/blob/v2.2.2/docs/kubernetes-versions.md</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内置下载版本：【kubeadm v1.22.9、kubelet v1.22.9、kubectl v1.22.9、helm v3.9.4、kubecni v0.9.1、crictl v1.22.0、etcd v3.4.13、docker 20.10.8】</p>
<p><strong>开始 init config 文件</strong></p>
<blockquote>
<p>./kk create config --with-kubernetes v1.22.9 --with-kubesphere v3.2.1</p>
</blockquote>
<p>kk create config 会自动创建 <code>config-sample.yaml</code></p>
<p>或者复制这个文件并根据情况修改：<a href="https://gitee.com/k8s_s/kubekey/blob/v2.2.2/docs/config-example.md" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/kubekey/blob/v2.2.2/docs/config-example.md</a></p>
<p><strong>主要修改内容：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>初始化yaml</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="/k8s/basis.html#master-kubeadm-%E5%88%9D%E5%A7%8B%E5%8C%96" target="blank">master-kubeadm-初始化</a>  查看 master-kubeadm-初始化</p>
<p><strong>开始安装：使用配置文件创建集群</strong></p>
<p><a href="https://kubesphere.com.cn/docs/multicluster-management/enable-multicluster/direct-connection/" target="_blank" rel="noopener noreferrer">https://kubesphere.com.cn/docs/multicluster-management/enable-multicluster/direct-connection/</a></p>
<p>每个主机都创建软连接<code>/usr/bin/kubelet</code> 到 <code>/usr/local/bin/</code></p>
<p>ln -s /usr/bin/kube* /usr/local/bin/</p>
<p><strong>解决没有这个文件：/etc/kubernetes/kubeadm-config.yaml</strong></p>
<p>master主机执行：kubectl -n kube-system get cm kubeadm-config -o yaml &gt;&gt; /etc/kubernetes/kubeadm-config.yaml</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会自动创建：/root/kubekey/</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登录：<a href="http://nginx.k8s.com:30880/" target="_blank" rel="noopener noreferrer">http://nginx.k8s.com:30880/</a></p>
<p><a href="http://ks.k8s.com:30880/" target="_blank" rel="noopener noreferrer">http://ks.k8s.com:30880/</a></p>
<h2> 3、 以 ks-installer-3.2.1 安装 kubesphere3.2.1（推荐2）</h2>
<p><a href="https://github.com/kubesphere/ks-installer/" target="_blank" rel="noopener noreferrer">github.com/kubesphere/ks-installer/</a></p>
<p><a href="https://gitee.com/k8s_s/ks-installer" target="_blank" rel="noopener noreferrer">gitee.com/k8s_s/ks-installer</a></p>
<h3> 下载文件</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 安装</h3>
<p>kubectl apply -f ks-installer.yaml</p>
<p>kubectl apply -f ks-cluster.yaml</p>
<p><em>等待10秒左右，再查看安装进度:</em></p>
<blockquote>
<p>kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath='{.items[0].metadata.name}') -f</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kubectl get svc/ks-console -n kubesphere-system</p>
<p>解决etcd监控证书找不到问题:</p>
<blockquote>
<p>kubectl -n kubesphere-monitoring-system create secret generic kube-etcd-client-certs  --from-file=etcd-client-ca.crt=/etc/kubernetes/pki/etcd/ca.crt  --from-file=etcd-client.crt=/etc/kubernetes/pki/apiserver-etcd-client.crt  --from-file=etcd-client.key=/etc/kubernetes/pki/apiserver-etcd-client.key</p>
</blockquote>
<h3> ks-installer.yaml</h3>
<details class="hint-container details"><summary>点击查看代码</summary>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<h3> ks-cluster.yaml</h3>
<details class="hint-container details"><summary>点击查看代码</summary>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<h2> 4、离线安装+kk</h2>
<p><a href="https://kubesphere.com.cn/docs/installing-on-linux/introduction/air-gapped-installation/" target="_blank" rel="noopener noreferrer">https://kubesphere.com.cn/docs/installing-on-linux/introduction/air-gapped-installation/</a></p>
<p><a href="https://kubesphere.com.cn/docs/v3.3/installing-on-linux/introduction/air-gapped-installation/" target="_blank" rel="noopener noreferrer">https://kubesphere.com.cn/docs/v3.3/installing-on-linux/introduction/air-gapped-installation/</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/432040404" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/432040404</a></p>
<p>（推荐）在已创建的集群中执行 KubeKey 命令生成该文件。</p>
<blockquote>
<p>./kk create manifest</p>
<p>vim manifest.yaml</p>
</blockquote>
<details class="hint-container details"><summary>点击查看代码</summary>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<p>export KKZONE=cn</p>
<p>./kk artifact export -m manifest-sample.yaml -o kubesphere.tar.gz</p>
<h2> 5、访问、卸载 kubesphere</h2>
<p>访问：<a href="http://192.168.101.120:30880" target="_blank" rel="noopener noreferrer">http://192.168.101.120:30880</a> admin</p>
<p><a href="https://kubesphere.com.cn/docs/installing-on-linux/uninstall-kubesphere-and-kubernetes/" target="_blank" rel="noopener noreferrer">https://kubesphere.com.cn/docs/installing-on-linux/uninstall-kubesphere-and-kubernetes/</a></p>
<ul>
<li>
<p>如果是按照快速入门 (<a href="https://kubesphere.com.cn/docs/quick-start/all-in-one-on-linux/" target="_blank" rel="noopener noreferrer">All-in-One</a>) 安装的 KubeSphere：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
<li>
<p>如果是使用高级模式安装的 KubeSphere（<a href="https://kubesphere.com.cn/docs/installing-on-linux/introduction/multioverview/" target="_blank" rel="noopener noreferrer">使用配置文件创建</a>）：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>
</ul>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> 6、进阶</h2>
<h3> A、多租户系统</h3>
<figure><figcaption></figcaption></figure>
<hr>
<h4> 架构</h4>
<p>KubeSphere 的多租户系统分<strong>三个</strong>层级，即集群、企业空间和项目。KubeSphere 中的项目等同于 Kubernetes 的命名空间。</p>
<p>可以在一个 KubeSphere 集群中创建多个企业空间，每个企业空间下可以创建多个项目。</p>
<p>在本步骤中，您将创建一个用户 <code>user-manager</code>，并赋予users-manager角色，然后使用 <code>user-manager</code> 创建新用户。</p>
<hr>
<figure><figcaption></figcaption></figure>
<p><a href="https://kubesphere.com.cn/docs/quick-start/create-workspace-and-project/" target="_blank" rel="noopener noreferrer">https://kubesphere.com.cn/docs/quick-start/create-workspace-and-project/</a></p>
<table>
<thead>
<tr>
<th>内置角色</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>workspaces-manager</code></td>
<td>企业空间管理员，管理平台所有企业空间。</td>
</tr>
<tr>
<td><code>users-manager</code></td>
<td>用户管理员，管理平台所有用户。</td>
</tr>
<tr>
<td><code>platform-regular</code></td>
<td>平台普通用户，在被邀请加入企业空间或集群之前没有任何资源操作权限。</td>
</tr>
<tr>
<td><code>platform-admin</code></td>
<td>平台管理员，可以管理平台内的所有资源。</td>
</tr>
</tbody>
</table>
<h4> 1、使用 admin 创建平台管理用户 <code>user-manager</code></h4>
<p>使用 admin 创建一个用户 <code>user-manager</code>，并赋予users-manager角色，</p>
<h4> 2、登录 <code>user-manager</code> 创建新用户</h4>
<table>
<thead>
<tr>
<th>帐户</th>
<th>角色</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ws-manager</td>
<td>workspaces-manager</td>
<td>创建和管理所有企业空间。</td>
</tr>
<tr>
<td>ws-admin</td>
<td>platform-regular</td>
<td>管理指定企业空间中的所有资源（用于邀请新成员加入该企业空间）</td>
</tr>
<tr>
<td>project-admin</td>
<td>platform-regular</td>
<td>创建和管理项目以及 DevOps 项目，并邀请新成员加入项目</td>
</tr>
<tr>
<td>project-regular</td>
<td>platform-regular</td>
<td>project-regular 将由 project-admin 邀请至项目或 DevOps 项目。该帐户将用于在指定项目中创建工作负载、流水线和其他资源</td>
</tr>
</tbody>
</table>
<figure><figcaption></figcaption></figure>
<h4> 3、使用 ws-manager 创建企业空间 <code>cps007</code></h4>
<p>使用 ws-manager 创建一个企业空间(cps007)，指定ws-admin为管理员；</p>
<p>以 ws-admin 身份重新登录。在<strong>企业空间设置</strong>中，选择<strong>企业空间成员</strong>，然后点击<strong>邀请</strong>。邀请 <code>project-admin</code> 和 <code>project-regular</code> 进入企业空间，分别授予 <code>workspace-self-provisioner</code> 和 <code>workspace-viewer</code> 角色</p>
<figure><figcaption></figcaption></figure>
<table>
<thead>
<tr>
<th>帐户</th>
<th>角色</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ws-admin</code></td>
<td><code>workspace-admin</code></td>
<td>管理指定企业空间中的所有资源（在此示例中，此帐户用于邀请新成员加入企业空间）。</td>
</tr>
<tr>
<td><code>project-admin</code></td>
<td><code>workspace-self-provisioner</code></td>
<td>创建和管理项目以及 DevOps 项目，并邀请新成员加入项目。</td>
</tr>
<tr>
<td><code>project-regular</code></td>
<td><code>workspace-viewer</code></td>
<td><code>project-regular</code> 将由 <code>project-admin</code> 邀请至项目或 DevOps 项目。该帐户将用于在指定项目中创建工作负载、流水线和其他资源。</td>
</tr>
</tbody>
</table>
<h4> 4、使用 project-admin 创建项目&amp;网关</h4>
<p>使用 project-admin 创建项目（demo-project）；在<strong>项目设置</strong> &gt; <strong>项目成员</strong>中，邀请 <code>project-regular</code> 至该项目，并授予该用户 <code>operator</code> 角色。</p>
<figure><figcaption></figcaption></figure>
<p>使用 project-admin 创建网关</p>
<figure><figcaption></figcaption></figure>
<h4> 5、使用 project-admin 创建 DevOps 工程</h4>
<p>使用 project-admin 创建 DevOps 工程（demo-devops）</p>
<figure><figcaption></figcaption></figure>
<p>点击<strong>邀请</strong>授予 <code>project-regular</code> 用户 <code>operator</code> 的角色，允许其创建流水线和凭证。</p>
<figure><figcaption></figcaption></figure>
<p><code>project-regular</code> 帐户还将用于演示如何在项目或 DevOps 项目中创建应用程序和资源。</p>
<h3> B、使用 project-regular 帐户登录 workspaces 创建密钥、创建容器、外网访问</h3>
<p><a href="https://kubesphere.com.cn/docs/quick-start/wordpress-deployment/" target="_blank" rel="noopener noreferrer">https://kubesphere.com.cn/docs/quick-start/wordpress-deployment/</a></p>
<figure><figcaption></figcaption></figure>
<hr>
<p>您需要准备一个 <code>project regular</code> 帐户，并在一个项目中赋予该帐户 <code>operator</code> 角色（该用户已被邀请参加该项目）。</p>
<h4> 步骤 1：创建密钥</h4>
<h5>创建 MySQL 密钥</h5>
<p>环境变量 <code>WORDPRESS_DB_PASSWORD</code> 是连接到 WordPress 数据库的密码。在此步骤中，您需要创建一个密钥来保存将在 MySQL Pod 模板中使用的环境变量。</p>
<p>1、访问 <code>demo-project</code> 的详情页并导航到<strong>配置</strong>。在<strong>保密字典</strong>中，点击右侧的<strong>创建</strong>。</p>
<p>2、输入基本信息（mysql-secret）选择<strong>类型</strong>为 <strong>Opaque（默认）</strong>，然后点击<strong>添加数据</strong>来添加键值对。</p>
<blockquote>
<p>Key：MYSQL_ROOT_PASSWORD 和 Value：123456，点击右下角 √ 进行确认。</p>
</blockquote>
<h5>创建 WordPress 密钥</h5>
<p>按照以上相同的步骤创建一个名为 wordpress-secret 的 WordPress 密钥，Key：WORDPRESS_DB_PASSWORD 和 Value：123456</p>
<figure><figcaption></figcaption></figure>
<h4> 步骤 2：创建存储卷</h4>
<p>1、访问<strong>存储</strong>下的<strong>存储卷</strong>，点击<strong>创建</strong>。</p>
<p>2、输入卷的基本信息 wordpress-pvc</p>
<figure><figcaption></figcaption></figure>
<p>3、在<strong>存储卷设置</strong>中，需要选择一个可用的<strong>存储类型</strong>，并设置<strong>访问模式</strong>和<strong>存储卷容量</strong>。您可以直接使用默认值，点击<strong>下一步</strong>继续。</p>
<h5>访问模式</h5>
<p>RWO (ReadWriteOnce)：单个节点读写</p>
<p>ROX (ReadOnlyMany)：多节点只读</p>
<p>RWX (ReadWriteMany)：多节点读写</p>
<figure><figcaption></figcaption></figure>
<p>4、在<strong>高级设置</strong>中，您无需添加额外的配置，点击<strong>创建</strong>完成即可。</p>
<figure><figcaption></figcaption></figure>
<h4> 步骤3：创建docker私有仓库</h4>
<p>1、进入保密字典页面，设置保密字典的名称（例如 <code>ali-registry-secret</code>），然后点击<strong>下一步</strong>。</p>
<p>2、配置镜像仓库信息</p>
<p>将<strong>类型</strong>设置为 <strong>镜像仓库信息</strong>。要在创建应用负载时使用私有仓库中的镜像，您需要配置以下字段：</p>
<ul>
<li><strong>仓库地址</strong>：镜像仓库的地址，其中包含创建应用负载时需要使用的镜像。</li>
<li><strong>用户名</strong>：登录镜像仓库所需的用户名。</li>
<li><strong>密码</strong>：登录镜像仓库所需的密码。</li>
<li><strong>邮箱</strong>（可选）：您的邮箱地址。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h4> 步骤4：创建应用程序</h4>
<h5>添加 MySQL 后端组件</h5>
<p>1、导航到<strong>应用负载</strong>下的<strong>应用</strong>，选择<strong>自制应用</strong> &gt; <strong>创建</strong>。</p>
<p>2、输入基本信息（例如，在应用名称一栏输入 <code>wordpress</code>），然后点击<strong>下一步</strong>。</p>
<figure><figcaption></figcaption></figure>
<p>3、在<strong>服务设置</strong>中，点击<strong>创建服务</strong>以在应用中设置组件。</p>
<p>4、设置组件的服务类型为<strong>有状态服务</strong>。</p>
<p>5、输入有状态服务的名称（例如 <strong>mysql</strong>）并点击<strong>下一步</strong>。</p>
<figure><figcaption></figcaption></figure>
<p>6、在<strong>容器组设置</strong>中，点击<strong>添加容器</strong>。</p>
<p>7、在搜索框中输入 mysql:5.7，按下 <strong>回车键</strong>，然后点击 <strong>使用默认端口</strong>。</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>8、向下滚动到<strong>环境变量</strong>，点击<strong>引用配置文件或密钥</strong>。输入名称 MYSQL_ROOT_PASSWORD，然后选择资源 mysql-secret 和前面步骤中创建的密钥 MYSQL_ROOT_PASSWORD，完成后点击 <strong>√</strong> 保存配置，最后点击<strong>下一步</strong>继续。</p>
<figure><figcaption></figcaption></figure>
<p>9、选择<strong>存储卷设置</strong>中的<strong>添加存储卷模板</strong>，输入<strong>存储卷名称</strong> (<code>mysql</code>) 和<strong>挂载路径</strong>（模式：<code>读写</code>，路径：<code>/var/lib/mysql</code>）的值。</p>
<p>完成后，点击 <strong>√</strong> 保存设置并点击<strong>下一步</strong>继续。</p>
<figure><figcaption></figcaption></figure>
<p>10、在<strong>高级设置</strong>中，可以直接点击<strong>添加</strong>，也可以按需选择其他选项。</p>
<figure><figcaption></figcaption></figure>
<p>11、现在，MySQL 组件已经添加完成。</p>
<figure><figcaption></figcaption></figure>
<h5>添加 WordPress 前端组件</h5>
<p>1、再次点击<strong>创建服务</strong>，选择<strong>无状态服务</strong>。输入名称 <code>wordpress</code> 并点击<strong>下一步</strong>。</p>
<p>2、与上述步骤类似，点击<strong>添加容器</strong>，在搜索栏中输入 <code>wordpress:4.8-apache</code> 并按下<strong>回车键</strong>，然后点击<strong>使用默认端口</strong>。</p>
<p>3、向下滚动到<strong>环境变量</strong>，点击<strong>引用配置文件或密钥</strong>。这里需要添加两个环境变量，请根据以下截图输入值：</p>
<ul>
<li>对于 <code>WORDPRESS_DB_PASSWORD</code>，请选择在步骤 1 中创建的 <code>wordpress-secret</code> 和 <code>WORDPRESS_DB_PASSWORD</code>。</li>
<li>点击<strong>添加环境变量</strong>，分别输入 Key：<code>WORDPRESS_DB_HOST</code> 和 Value:<code>mysql</code>。</li>
</ul>
<blockquote>
<p>警告：对于此处添加的第二个环境变量，该值必须与上面的第5步中创建 MySQL 有状态服务设置的名称完全相同。否则，WordPress 将无法连接到 MySQL 对应的数据库。</p>
</blockquote>
<p>点击 <strong>√</strong> 保存配置，再点击<strong>下一步</strong>继续。</p>
<figure><figcaption></figcaption></figure>
<p>3、在<strong>存储卷设置</strong>中，点击<strong>挂载存储卷</strong>，并 <strong>选择存储卷</strong>。</p>
<p>4、选择上一步创建的 <code>wordpress-pvc</code>，将模式设置为<code>读写</code>，并输入挂载路径 <code>/var/www/html</code>。点击 <strong>√</strong> 保存，再点击<strong>下一步</strong>继续。</p>
<figure><figcaption></figcaption></figure>
<p>5、在<strong>高级设置</strong>中，可以直接点击<strong>添加</strong>创建服务，也可以按需选择其他选项。</p>
<p>6、现在，前端组件也已设置完成。点击<strong>下一步</strong>继续。</p>
<p>7、您可以<strong>路由设置</strong>中设置路由规则（应用路由 Ingress），也可以直接点击<strong>创建</strong>。</p>
<figure><figcaption></figcaption></figure>
<p>8、创建后，应用将显示在应用列表中。</p>
<h4> 步骤 4：验证资源</h4>
<blockquote>
<p>在<strong>工作负载</strong>中，分别检查<strong>部署</strong>和<strong>有状态副本集</strong>中 <code>wordpress-v1</code> 和 <code>mysql-v1</code> 的状态。如果它们的运行状态为<strong>运行中</strong>，就意味着 WordPress 已经成功创建。</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h4> 步骤 5：通过 NodePort 访问 WordPress</h4>
<p>1、若要在集群外访问服务，请首先导航到<strong>服务</strong>。点击 <code>wordpress</code> 右侧的三个点后，选择<strong>编辑外部访问</strong>。</p>
<figure><figcaption></figcaption></figure>
<p>2、在<strong>访问方式</strong>中选择 <code>NodePort</code>，然后点击<strong>确定</strong>。</p>
<figure><figcaption></figcaption></figure>
<p>3、点击服务进入详情页，可以在<strong>端口</strong>处查看暴露的端口。</p>
<figure><figcaption></figcaption></figure>
<p>4、通过 <code>{Node IP}:{NodePort}</code> 访问此应用程序，可以看到下图：</p>
<p><a href="http://192.168.101.120:32109" target="_blank" rel="noopener noreferrer">http://192.168.101.120:32109</a></p>
<p><a href="http://ks.k8s.com:32109/" target="_blank" rel="noopener noreferrer">http://ks.k8s.com:32109/</a></p>
<h3> C、DevOps</h3>
<h3> D、流水线</h3>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 可视化管理工具-KubeOperator</title>
    <id>https://topjf.github.io/k8s/kubeoperator.html</id>
    <link href="https://topjf.github.io/k8s/kubeoperator.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">https://kubeoperator.io/ (https://kubeoperator.io/) https://github.com/kubeoperator/kubeoperator/ (https://github.com/kubeoperator/kubeoperator/) star:4.4K https://gitee.com/k8s...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-可视化管理工具-KubeOperator</h1>
<p><a href="https://kubeoperator.io/" target="_blank" rel="noopener noreferrer">https://kubeoperator.io/</a></p>
<p><a href="https://github.com/kubeoperator/kubeoperator/" target="_blank" rel="noopener noreferrer">https://github.com/kubeoperator/kubeoperator/</a> <strong>star:4.4K</strong></p>
<p><a href="https://gitee.com/k8s_s/KubeOperator" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/KubeOperator</a></p>
<figure><figcaption></figcaption></figure>
<h2> 安装</h2>
<p>第一步：准备一台主机</p>
<hr>
<p>准备一台不小于 8 G内存且可以访问互联网的 64位 Linux 主机。</p>
<p>第二步：执行一键安装命令</p>
<hr>
<p>以 root 用户执行如下命令一键安装 KubeOperator</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>quick_start.sh</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Ingress 规则设置</h2>
<p>vim ingress-operator.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动：<code>kaf ingress-operator.yaml</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 访问</h2>
<p><a href="http://192.168.100.130:80" target="_blank" rel="noopener noreferrer">http://192.168.100.130:80</a>、<a href="http://ko.k8s.com/" target="_blank" rel="noopener noreferrer">通过 ingress 访问 ko.k8s.com</a></p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<hr>
<h2> 卸载</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 可视化管理工具-Kuboard</title>
    <id>https://topjf.github.io/k8s/kuboard.html</id>
    <link href="https://topjf.github.io/k8s/kuboard.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">https://kuboard.cn/ (https://kuboard.cn/) https://github.com/eip-work/kuboard-press (https://github.com/eip-work/kuboard-press) star:15.9K https://gitee.com/k8ss/kuboard-press (...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-可视化管理工具-Kuboard</h1>
<p><a href="https://kuboard.cn/" target="_blank" rel="noopener noreferrer">https://kuboard.cn/</a></p>
<p><a href="https://github.com/eip-work/kuboard-press" target="_blank" rel="noopener noreferrer">https://github.com/eip-work/kuboard-press</a>  <strong>star:15.9K</strong></p>
<p><a href="https://gitee.com/k8s_s/kuboard-press" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/kuboard-press</a></p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s nfs-pv-pvc-ConfigMap-secret</title>
    <id>https://topjf.github.io/k8s/nfs-pv-pvc-config-secret.html</id>
    <link href="https://topjf.github.io/k8s/nfs-pv-pvc-config-secret.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">NFS 文件系统 安装nfs (https://zhuanlan.zhihu.com/p/411489781) storageclass存储方法 (https://blog.csdn.net/weixin_43384009/article/details/105958068) nfs文件系统 (https://www.yuque.com/leifeng...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-nfs-pv-pvc-ConfigMap-secret</h1>
<h2> NFS 文件系统</h2>
<p><a href="https://zhuanlan.zhihu.com/p/411489781" target="_blank" rel="noopener noreferrer">安装nfs</a></p>
<p><a href="https://blog.csdn.net/weixin_43384009/article/details/105958068" target="_blank" rel="noopener noreferrer">storageclass存储方法</a></p>
<p><a href="https://www.yuque.com/leifengyang/oncloud/gz1sls" target="_blank" rel="noopener noreferrer">nfs文件系统</a></p>
<p><a href="https://developer.aliyun.com/article/719754" target="_blank" rel="noopener noreferrer">参考文档</a></p>
<ul>
<li>可变配置就用 ConfigMap；</li>
<li>敏感信息是用 Secret；</li>
<li>身份认证是用 ServiceAccount 这几个独立的资源来实现的；</li>
<li>资源配置是用 Resources；</li>
<li>安全管控是用 SecurityContext；</li>
<li>前置校验是用 InitContainers 这几个在 spec 里面加的字段，来实现的这些配置管理。</li>
</ul>
<h3> a、安装nfs文件系统</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> b、配置nfs-client（选做）</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> c、配置默认存储</h3>
<p>创建一个文件 vim ./nfs.yaml</p>
<details class="hint-container details"><summary>点击查看代码</summary>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<p>kubectl apply -f nfs.yaml</p>
<h3> d、确认配置是否生效</h3>
<p>kubectl get sc</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> e、metrics-server</h3>
<p>vim metrics-server.yaml</p>
<p>kubectl apply -f metrics-server.yaml</p>
<details class="hint-container details"><summary>点击查看代码</summary>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>
<h2> PV&amp;PVC</h2>
<p><strong>PV</strong>：持久卷（Persistent Volume），将应用需要持久化的数据保存到指定位置</p>
<p><strong>PVC</strong>：持久卷申明（<strong>Persistent Volume Claim</strong>），申明需要使用的持久卷规格</p>
<h3> 1、创建pv池 pv.yaml</h3>
<p>静态供应</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建PV</p>
<p>pv.yaml</p>
<p>kaf pv.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、PVC创建与绑定</h3>
<p>创建 nginx的PVC</p>
<p>nginx-pvc.yaml</p>
<p>kaf nginx-pvc.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、创建Pod绑定PVC pvc-deploy.yaml</h3>
<p>pvc-deploy.yaml</p>
<p>kaf pvc-deploy.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ConfigMap</h2>
<p>抽取应用配置，并且可以自动更新</p>
<p><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh-cn/docs/concepts/configuration/configmap/</a></p>
<h3> 1、以 redis 示例</h3>
<h4> 1、把之前的配置文件创建为配置集</h4>
<p>创建配置，redis保存到k8s的etcd；</p>
<p>语法：kubectl create configmap [NAME] [DATA]</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>vim redis.yaml</p>
<p>kaf redis.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、创建Pod</h4>
<p>redis-pod.yaml</p>
<p>kaf redis-pod.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、检查默认配置</h4>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、修改ConfigMap</h4>
<p>redis.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、检查配置是否更新</h4>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>检查指定文件内容是否已经更新</p>
<p>修改了CM。Pod里面的配置文件会跟着变</p>
<p>配置值未更改，因为需要重新启动 Pod 才能从关联的 ConfigMap 中获取更新的值。</p>
<p>原因：我们的Pod部署的中间件自己本身没有热更新能力</p>
</blockquote>
<h2> secret</h2>
<p><a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/secret/" target="_blank" rel="noopener noreferrer">kubernetes.io/zh-cn/docs/concepts/configuration/secret</a></p>
<blockquote>
<p>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 SSH 密钥。 将这些信息放在 secret 中比放在 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener noreferrer">Pod</a> 的定义或者 <a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-image" target="_blank" rel="noopener noreferrer">容器镜像</a> 中来说更加安全和灵活。</p>
</blockquote>
<p>命令格式</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>secret-pod.yaml</p>
<p>kaf secret-pod.yaml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s Pod-yaml篇</title>
    <id>https://topjf.github.io/k8s/pod-yaml.html</id>
    <link href="https://topjf.github.io/k8s/pod-yaml.html"/>
    <updated>2023-03-05T16:15:05.000Z</updated>
    <summary type="text">1、Pod 整体结构 Pod YAML的整体结构，可以初步分为 Resource(资源)、Object(元数据)、Spec(规范)、Status(状态)。 Resource：定义资源类型与版本， 作为从Rest API中获取资源必带的属性。; Object：资源的元数据属性，明确资源的基本标识。; Spec / Status：; - Spec：定义资源...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-Pod-yaml篇</h1>
<h2> 1、Pod 整体结构</h2>
<p>Pod YAML的整体结构，可以初步分为 <strong>Resource(资源)、Object(元数据)、Spec(规范)、Status(状态)</strong>。</p>
<figure><figcaption></figcaption></figure>
<ul>
<li><strong>Resource</strong>：定义资源类型与版本， 作为从Rest API中获取资源必带的属性。</li>
<li><strong>Object</strong>：资源的元数据属性，明确资源的基本标识。</li>
<li><strong>Spec / Status</strong>：
<ul>
<li>
<ul>
<li><em>Spec</em>：定义资源的期望状态，包括用户提供的配置、系统扩展的默认值，以及周边系统初始化或者更改值（scheduler、hpa等）。</li>
</ul>
</li>
<li>
<ul>
<li><em>Status</em>：定义资源的当前状态，从而基于Spec定义的申明式配置，使pod不断朝期望状态靠近。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2> 2、Resource（资源）- Rest API</h2>
<figure><figcaption></figcaption></figure>
<p>K8s 资源按照 Scope 可以分为 Namespace 资源、Cluster 资源，Namespace 在 K8s 可以认为是软租户的效果，实现资源层面的隔离，
Pod 资源就是属于 Namespace 资源，而 Namespace 不光体现在 YAML 参数中，也表现在 K8s Rest API 中。</p>
<p>Rest API的整体结构，以Pod举例</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述YAML，可以明确出 namespace 为default， name 为 test-pod 的 Pod 资源对象，也就是明确出Pod为Namespace资源，
该Pod资源对象对应的apiVersion为v1，后续 K8s 自内联相关的 Group为/api，自然而然，我们就将该对象的数据分离出来了：</p>
<ul>
<li><strong>group：api</strong></li>
<li><strong>apiVersion：v1</strong></li>
<li><strong>kind：Pod</strong></li>
<li><strong>name：test-pod</strong></li>
<li><strong>namespace：default</strong></li>
</ul>
<p>基于上述的数据展示，apiserver 自然而然会相应的注册出下列 rest api，</p>
<ul>
<li><code>/api/{apiVersion}/{kind}</code> ：该kind下的所有资源列表</li>
<li><code>/api/{apiVersion}/namespace/{namespace}/{kind}/</code> ：该kind下当前namespace的所有资源列表</li>
<li><code>/api/{apiVersion}/namespace/{namespace}/{kind}/{name}</code> ：该kind下当前namespace且名为name的资源</li>
<li><code>/api/{apiVersion}/namespace/{namespace}/{kind}/{name}/{subresource}</code> ：该kind下当前namespace且名为name的资源下子资源操作</li>
</ul>
<p>后续基于扩展，我们就需要明确出method，这样一个真正完整的Rest API就诞生了。</p>
<h2> 3、Object（元数据）</h2>
<p>在rest api中明确了Resource的kind、apiVersion， 也确定了Object的namespace、name，作为凡是k8s资源对象都会引用的公共结构，
自然也存在很多公共机制供使用。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述YAML，我们将其整理一下，有这样一些字段:</p>
<ul>
<li><strong>namespace</strong>：常规来说，Namespace资源才会使用该资源对象</li>
<li><strong>name</strong>：代表资源实例名称</li>
<li><strong>uid</strong>：是资源的唯一标识，可以区别已删除与重新创建的同名资源实例</li>
<li><strong>resourceVersion</strong>：是k8s的内部版本，具备时间属性，基于此就能明确该资源对是什么时候发生改变的，也是保证k8s list-watch核心机制</li>
<li><strong>creationTimestamp</strong>: 资源实例创建时间</li>
<li><strong>deleteTimestamp</strong>: 资源实例删除时间，后续会在pod的生命周期内讲到对该字段应用</li>
<li><strong>ownerReferences</strong>: 资源从属对象，从上面yaml可知，该Pod资源从属于名为testdemo-5bb759f78，ownerReferences内部是没有namespace参数，也就是ownerReferences不允许跨namespace， 将资源由下到上能够建立起来</li>
<li><strong>labels</strong>：标签， k8s内的服务发现以及相应的软关联，都是围绕label运作的，比如testdemo-5bb759f78 replicaset 的labelselector（标签筛选器） 能够筛选到当前Pod的label，保证两者关联由上到下的建立</li>
<li><strong>annotations</strong>: 注释，通常来说会是作为额外字段供应给周边系统使用，<a href="http://xn--k8s-jn2em34ajxifyw.aliyun.com/pod-eni=%E2%80%9Dtrue%E2%80%9D%E6%98%AF%E6%8F%90%E4%BE%9B%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">比如当前k8s.aliyun.com/pod-eni=”true”是提供网络系统使用</a></li>
</ul>
<h3> label &amp; Selector</h3>
<figure><figcaption></figcaption></figure>
<p>Deployment 会根据自己的 <code>seletor：app=taihao-app-cluster</code> 以及计算出 podtemplate 的 hash lable：<code>pod-template-hash: 5b8b879786</code>， 筛选出符合的 replicaset，replicaset 再根据自己的selector 去筛选出符合的 pods， 相应的服务发现 service，
也是通过 selector 去筛选出符合的 Pod。</p>
<h3> Owner &amp; GC(垃圾回收)</h3>
<figure><figcaption></figcaption></figure>
<p>基于 Pod 的 metadata.ownerReferences 找寻到对应的 replicaset，replicaset 基于自身的 metadata.ownerReferences 找寻到 deploy；
当 deployment 被删除后，基于原有 owner 构建的树状，回收原有的rs与pod。</p>
<h3> Deploy &amp; Replicaset</h3>
<p>基于label&amp;labelselector，明确了从上到下的筛选归纳；基于owner&amp;GC，明确了关联资源的回收流程。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>replicaset.spec.replicas</code>: 实例数，rs控制下的Pod个数</li>
<li><code>replicaset.spec.selector</code>：基于label 筛选出对应的Pod</li>
<li><code>replicaset.spec.template</code>：replicaset创建的Pod会基于podtemplate</li>
<li><code>replicaset.status</code>：replicaset 当前管理Pod的状态</li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>deploy.spec.replicas</code>: deploy期望的pod实例格式</li>
<li><code>deploy.spec.revisionHistoryLimit</code>：deploy 管理replicaset的保留三个月</li>
<li><code>deploy.spec.selector</code>：deploy 筛选符合标签</li>
<li><code>deploy.spec.strategy</code>：deploy的升级策略</li>
<li><code>deploy.template</code>：deploy基于此模版要创建的pod格式</li>
</ul>
<h2> 4、Spec（规范）</h2>
<p>Spec作为Pod的期望状态，一定程度上也覆盖了Pod完整生命周期的逻辑，Pod的生命周期分为以下阶段。</p>
<figure><figcaption></figcaption></figure>
<ul>
<li><strong>Pending</strong>：代表Pod处于未调度阶段</li>
<li><strong>Creating</strong>：节点上的kubelet已经发现了Pod，处于创建阶段</li>
<li><strong>Running</strong>：至少一个容器运行完毕，kubelet这会发起健康监测</li>
<li><strong>Terminating</strong>：Pod处于删除状态，kubelet开始回收容器</li>
<li><strong>Terminated</strong>: Pod 销毁完成</li>
</ul>
<h3> Pod生命周期: Pending</h3>
<p>Pod资源创建完毕后，处于还未调度阶段，这个时候scheduler（调度器）基于pod yaml本身的配置与节点资源状态情况，来进行调度。</p>
<figure><figcaption></figcaption></figure>
<p>scheduler 会去分析 podyaml，将其中的策略提取出来，与节点组中的节点配置进行匹配，若匹配成功后，会选出最佳节点，重新修改pod yaml，
将 spec.nodeName 更新掉，完成整个调度环节。</p>
<h3> 资源策略</h3>
<p>资源策略表明Pod运行需要的资源情况，以demo为例，Pod需要2核4G的资源，那么调度过去的节点也需要有2核4G的资源剩余，Pod才能运行在该节点上。</p>
<h3> 节点标签筛选策略</h3>
<p>节点标签筛选策略，筛选节点是否存在 <code>topology.kubernetes.io/region: cn-hangzhou</code></p>
<h3> 亲和策略</h3>
<p>亲和策略，有节点亲和与Pod亲和（Pod所在节点优先调度），常规来说可以优先满足亲和的节点上，当前例子就是节点亲和，满足标签<code>disk-type=aaa</code>
或者<code>disk-type=bbb</code></p>
<h3> Pod生命周期: Creating</h3>
<p>当Pod调度完毕后，开始创建阶段，kubelet会基于pod.spec 期望状态来创建出Pod</p>
<p>kubelet 在创建Pod阶段，总共大致经历以下过程</p>
<figure><figcaption></figcaption></figure>
<ul>
<li><strong>Group 配置</strong>：主要是为了容器配置cgroup，里面涉及了对容器资源限制，比如不允许超过cpu、memory配置，这里涉及到Pod的qos级别判定；</li>
<li><strong>初始化环境配置</strong>：主要是对相关 Pod 数据存储目录进行配置，涉及到 volume，则会去引用 CSI 协议，也会去获取镜像 secret，为了后续拉取镜像进行准备工作；</li>
<li><strong>创建 pause 容器</strong>：创建pause容器，该容器主要是为了后续配置容器网络，配置容器网络会去调用CNI；</li>
<li><strong>创建 Pod 容器</strong>：基于 imagesecret 拉取业务镜像，在创建Pod容器阶段，也会将相应的 Pod YAML 配置传输进去，在启动Pod容器完毕后，会基于poststart进行相关的回调。</li>
</ul>
<p>上述阶段，会选择部分关键概念进行详细说明</p>
<h3> image</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>imagePullSecrets</strong>:  拉取镜像的密钥，保证能够拉取 <code>image：testdemo:v1</code>，尤其在镜像库是私有库的阶段</li>
<li><strong>imagePullPolicy</strong>：镜像拉取策略
<ul>
<li>
<ul>
<li><em>Always</em>：总是拉取镜像</li>
</ul>
</li>
<li>
<ul>
<li><em>IfNotPresent</em>：本地若有则使用本地镜像，不进行拉取</li>
</ul>
</li>
<li>
<ul>
<li><em>Never</em>：只使用本地镜像，不拉取</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3> containers</h3>
<p>注意这个 containers 用的是复数，可以填多个容器镜像: 比如可以放 nginx 和 业务容器。这样做的好处是可以尽量减少业务容器中与业务无关的代码或进程。</p>
<p>container 涉及很多配置，其中有涉及到 <code>volume</code>、<code>env</code>、<code>dnsconfig</code>、<code>host</code> 等基础配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>env</strong>：配置Pod的环境变量</li>
<li><strong>dnsConfig</strong>：配置Pod的域名解析</li>
<li><strong>hostALiases</strong>：配置/etc/hosts文件内容</li>
<li><strong>volume/volumeMount</strong>：配置文件挂载到容器内，也可以配置文件存储系统挂载到容器内</li>
</ul>
<h3> postStart</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前 poststart demo 是发起 command 命令，也可以发起 http 请求，主要作用可以作为资源部署以及环境准备。</p>
<h3> Pod生命周期: Running</h3>
<p>在 Pod running 阶段的时候，Pod 就迎来对其健康的检查，当前 kubelet 提供三种方式判定</p>
<ul>
<li><strong>readiness</strong>：检查Pod是否为健康</li>
<li><strong>liveness</strong>：件看 Pod 是否正常，若检查失败，则重启容器</li>
<li><strong>readinessGate</strong>：提供给第三方组件健康验证，第三方组件验证不过，则Pod不为健康</li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readiness 与 liveness 检查参数都是一致的</p>
<ul>
<li><strong>httpGet/tcpSocket</strong>：都是检查方式，一种是http请求验证，一种是tcpSocket，其中也有exec执行命令，以及grpc形式验证</li>
<li><strong>initialDelaySeconds</strong>：延迟多久开始检查，原因在于容器启动的时候，通常需要过段时间进行验证</li>
<li><strong>periodSeconds</strong>：检验时间周期</li>
<li><strong>failureThreshold</strong>：连续几次失败，则代表这轮检验失败</li>
<li><strong>successThreshold</strong>：连续几次成功，则代表这轮检验成功</li>
<li><strong>timeoutSeconds</strong> ：代表检验超时时间，若检验在该配置时间内没有返回，则认为检验失败</li>
</ul>
<p>readiness、liveness虽然参数不一样，但对检验的结果行为不一致。</p>
<ul>
<li>
<p><strong>readiness</strong> 默认状态下为false，也就是Pod为不健康，直到检查通过，才将Pod变为健康</p>
</li>
<li>
<p><strong>liveness</strong> 默认状态下为true，不会在刚开始就将Pod重启，只有等检查不通过后，才会进行容器重启操作</p>
</li>
<li>
<p><strong>readinessGate</strong> 是 Pod 健康的扩展，kubelet 会基于此，默认在 <code>pod.status.conditions</code> 上配置对应的 condition，
比如当前例子 readinessGate 为<code>conditionType: TestPodReady</code>，则相应就会有 conditions</p>
</li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当该 condition.status 为 false 时，则 Pod 就会一直是不健康，哪怕 readiness 检查通过，直到第三方系统去操作更新 Pod 该 condition.status 为 true，才可以将 Pod 变为健康，这样就可以接入更多的 Pod 健康指标。</p>
<p>Pod生命周期: Terminating
client 在发起请求删除Pod的时候，实际上是配置 pod.metadata.deletionTimestamp，kubelet 感知到后，开始进行 Pod 回收流程</p>
<p>整个 Pod 的回收周期，常规来说 preStop—&gt;SIGTERM—&gt;SIGKILL</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 kubelet 进行 preStop 后，开始发起 SIGTERM 给容器内进程，若超过总默认耗时30S（metadata.DeletionGracePeriodSeconds），则强制发起 SIGKILL 给容器，也就是 prestop+SIGTERM 总耗时不允许超过30s。</p>
<h2> 5、Status（状态）</h2>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述YAML样例，将Pod status状态拆建出来分析一下:</p>
<ul>
<li><strong>conditions</strong>: conditions是作为一种更详尽的状态报告，其本身也是一种扩展机制，其他的扩展字段也可以放入其中，比如可以表明网络状况，其中readinessGate就是这种扩展机制的表现，但决定Pod是否ready，永远只看type: Ready是否为true</li>
<li><strong>containerStatuses</strong>: Pod内各容器的状态</li>
<li><strong>hostIP</strong>: Pod所在节点ip地址</li>
<li><strong>phase</strong>: Pod的生命周期状态
<ul>
<li>
<ul>
<li><em>Pending</em>：代表Pod有一个容器或者多个容器还未运行，其中包括Pod调度到节点之前以及拉取镜像</li>
</ul>
</li>
<li>
<ul>
<li><em>Running</em>：代表Pod已绑定到节点上，至少有一个容器运行或在重启</li>
</ul>
</li>
<li>
<ul>
<li><em>Successed</em>：代表Pod所有容器已终止</li>
</ul>
</li>
<li>
<ul>
<li><em>Failed</em>：代表Pod内至少有一个容器终止失败</li>
</ul>
</li>
<li>
<ul>
<li><em>Unknown</em>：代表无法获取Pod状态</li>
</ul>
</li>
</ul>
</li>
<li><strong>podIP/podIPs</strong>：Pod的IP地址，假如有ipv4、ipv6，则可以在podIPs上配置</li>
<li><strong>qosClass</strong>：代表kubernetes服务等级
<ul>
<li>
<ul>
<li><em>Guaranteed</em>：resource.requests与resource.limits一致</li>
</ul>
</li>
<li>
<ul>
<li><em>Burstable</em>：resource.requests与resource.limits 不一致</li>
</ul>
</li>
<li>
<ul>
<li><em>BestEffort</em>：没有配置resource.requests与resource.limits</li>
</ul>
</li>
</ul>
</li>
<li><strong>startTime</strong>：启动时间</li>
</ul>
<p>通过以上Pod四个部分拆解，我们基本搞清了一个Pod在k8s下“从哪里来”的这个问题。本系列的后续的文章会对“到哪里去”这个问题继续展开：
Kubernetes的魅力在于不仅仅是拉起一个工作负载，而是能够召之即来挥之即去地编排海量工作负载。</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">k8s 可视化管理工具-Rancher</title>
    <id>https://topjf.github.io/k8s/rancher.html</id>
    <link href="https://topjf.github.io/k8s/rancher.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">https://rancher.com/ (https://rancher.com/) https://www.rancher.cn/ (https://www.rancher.cn/) https://github.com/rancher/rancher (https://github.com/rancher/rancher) star:19.8K ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>k8s-可视化管理工具-Rancher</h1>
<p><a href="https://rancher.com/" target="_blank" rel="noopener noreferrer">https://rancher.com/</a></p>
<p><a href="https://www.rancher.cn/" target="_blank" rel="noopener noreferrer">https://www.rancher.cn/</a></p>
<p><a href="https://github.com/rancher/rancher" target="_blank" rel="noopener noreferrer">https://github.com/rancher/rancher</a> <strong>star:19.8K</strong></p>
<p><a href="https://gitee.com/k8s_s/rancher" target="_blank" rel="noopener noreferrer">https://gitee.com/k8s_s/rancher</a></p>
<p><a href="https://hub.docker.com/r/rancher/rancher/tags" target="_blank" rel="noopener noreferrer">https://hub.docker.com/r/rancher/rancher/tags</a></p>
<figure><figcaption></figcaption></figure>
<h2> 安装 2.6.7</h2>
<p>查看支持的 k8s 版本</p>
<p><a href="https://github.com/rancher/rancher/releases/tag/v2.6.7" target="_blank" rel="noopener noreferrer">https://github.com/rancher/rancher/releases/tag/v2.6.7</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> docker安装</h2>
<p>v2.5.15、v2.5.16、v2.6.5、v2.6.6、v2.6.7</p>
<p>docker pull rancher/rancher:v2.6.7</p>
<p>docker tag rancher/rancher:v2.6.7 <a href="http://registry.cn-chengdu.aliyuncs.com/k8sjf/rancher:v2.6.7" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/k8sjf/rancher:v2.6.7</a></p>
<p>docker push <a href="http://registry.cn-chengdu.aliyuncs.com/k8sjf/rancher:v2.6.7" target="_blank" rel="noopener noreferrer">registry.cn-chengdu.aliyuncs.com/k8sjf/rancher:v2.6.7</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker ps</p>
<p>docker logs cb08ec773b93 2&gt;&amp;1 | grep "Bootstrap Password: "</p>
<p><code>bd6trjjkplcx6d2lf4fxx78fpltprw5tb9n58vppjp2kkgkndk9qmt</code></p>
<p><a href="http://192.168.100.130:8988/" target="_blank" rel="noopener noreferrer">http://192.168.100.130:8988/</a></p>
<p><a href="http://rancher.k8s.com:8988/" target="_blank" rel="noopener noreferrer">http://rancher.k8s.com:8988/</a></p>
<h2> 推荐安装</h2>
<p><a href="https://docs.rancher.cn/docs/rancher2.5/installation/other-installation-methods/air-gap/install-rancher/_index#%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%89%E8%A3%85%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89" target="_blank" rel="noopener noreferrer">高可用安装（推荐）</a></p>
<h3> 先决条件</h3>
<ul>
<li>Kubernetes 集群</li>
<li>CLI</li>
<li>Ingress Controller</li>
</ul>
<h3> Helm Chart 安装 Rancher</h3>
<p>1、添加 Helm Chart 仓库</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、为 Rancher 创建 Namespace</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、选择你的 SSL 选项</p>
<table>
<thead>
<tr>
<th>设置</th>
<th>Chart 选项</th>
<th>描述</th>
<th>是否需要 cert-manager</th>
</tr>
</thead>
<tbody>
<tr>
<td>Rancher 生成的证书（默认）</td>
<td><code>ingress.tls.source=rancher</code></td>
<td>使用 Rancher 生成的 CA 签发的自签名证书此项为<strong>默认选项</strong></td>
<td>[是]</td>
</tr>
<tr>
<td>Let’s Encrypt</td>
<td><code>ingress.tls.source=letsEncrypt</code></td>
<td>使用<a href="https://letsencrypt.org/" target="_blank" rel="noopener noreferrer">Let's Encrypt</a>颁发的证书</td>
<td>[是]</td>
</tr>
<tr>
<td>你已有的证书</td>
<td><code>ingress.tls.source=secret</code></td>
<td>使用你的自己的证书（Kubernetes 密文）</td>
<td>否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Rancher 中国技术支持团队建议你使用“你已有的证书” <code>ingress.tls.source=secret</code> 这种方式，从而减少对 cert-manager 的运维成本。</p>
</blockquote>
<p>4、安装 cert-manager</p>
<p><a href="https://github.com/jetstack/cert-manager/releases" target="_blank" rel="noopener noreferrer">https://github.com/jetstack/cert-manager/releases</a></p>
<p>仅在使用 Rancher 生成的证书 <code>ingress.tls.source=rancher</code> 或 Let's Encrypt 颁发的证书 <code>ingress.tls.source=letsEncrypt</code>时才需要 cert-manager。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完 cert-manager 后，你可以通过检查 cert-manager 命名空间中正在运行的 Pod 来验证它是否已正确部署：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、根据你选择的 SSL 选项，通过 Helm 安装 Rancher</p>
<p>因为 <code>rancher</code> 是 <code>ingress.tls.source</code> 的默认选项，所以在运行 <code>helm install</code> 命令时我们没有指定 <code>ingress.tls.source</code>。</p>
<ul>
<li>将 <code>hostname</code> 设置为解析到你的负载均衡器的 DNS 记录。Rancher HA 安装成功后，你需要通过这个域名来访问 Rancher Server。</li>
<li>将 <code>replicas</code> 设置为 Rancher 部署所使用的副本数量。默认为 3；如果集群中的节点少于 3 个，你应该相应地减少副本数量。</li>
<li>要安装一个特定的 Rancher 版本，使用 <code>--version</code> 标志，例如：<code>--version 2.3.6</code>。</li>
<li>如果你安装的是 alpha 版本，Helm 要求在命令中加入 <code>--devel</code> 选项。</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、验证 Rancher Server 是否已成功部署</p>
<p>7、保存你的选项</p>
<p>安装完成</p>
<h2> 离线安装</h2>
<h3> 配置 Helm Chart 仓库</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 下载tgz安装包</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> SSL 配置</h3>
<h3> 离线环境可用的 Helm Chart 选项</h3>
<h3> 渲染您的 Rancher Helm 模板</h3>
<p>helm repo add jetstack <a href="https://charts.jetstack.io" target="_blank" rel="noopener noreferrer">https://charts.jetstack.io</a></p>
<p>helm repo update</p>
<h3> 安装 Rancher</h3>
<h2> 使用 kubectl 安装 Rancher</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="kubernetes"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-24T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Linux常用命令实例</title>
    <id>https://topjf.github.io/linux/command-examples.html</id>
    <link href="https://topjf.github.io/linux/command-examples.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">1、查看有多少个IP访问 2、查看某一个页面被访问的次数 3、查看每一个IP访问了多少个页面 4、将每个IP访问的页面数进行从小到大排序 5、查看某一个IP访问了哪些页面 6、去掉搜索引擎统计的页面 7、查看2015年8月16日14时这一个小时内有多少IP访问 8、查看访问前十个ip地址 uniq -c 相当于分组统计并把统计数放在最前面 9、访问次数...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>常用Linux命令实例</h1>
<h2> 1、查看有多少个IP访问</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 2、查看某一个页面被访问的次数</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3、查看每一个IP访问了多少个页面</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 4、将每个IP访问的页面数进行从小到大排序</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 5、查看某一个IP访问了哪些页面</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 6、去掉搜索引擎统计的页面</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 7、查看2015年8月16日14时这一个小时内有多少IP访问</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 8、查看访问前十个ip地址</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>uniq -c 相当于分组统计并把统计数放在最前面</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 9、访问次数最多的10个文件或页面</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>访问量最大的前20个ip</p>
</blockquote>
<h2> 10、通过子域名访问次数，依据referer来计算，稍有不准</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 11、列出传输大小最大的几个文件</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 12、列出输出大于200000byte(约200kb)的页面以及对应页面发生次数</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 13、如果日志最后一列记录的是页面文件传输时间，则有列出到客户端最耗时的页面</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 14、列出最最耗时的页面(超过60秒的)的以及对应页面发生次数</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 15、列出传输时间超过 30 秒的文件</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 16、列出当前服务器每一进程运行的数量，倒序排列</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 17、查看apache当前并发访问数</h2>
<p>对比httpd.conf中MaxClients的数字差距多少</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 18、可以使用如下参数查看数据</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计httpd进程数，连个请求会启动一个进程，使用于Apache服务器。</p>
<p>表示Apache能够处理1388个并发请求，这个值Apache可根据负载情况自动调整</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>netstat -an会打印系统当前网络链接状态，而grep -i “80”是用来提取与80端口有关的连接的，wc -l进行连接数统计。
最终返回的数字就是当前所有80端口的请求总数</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>netstat -an会打印系统当前网络链接状态，而grep ESTABLISHED 提取出已建立连接的信息。然后wc -l统计
最终返回的数字就是当前所有80端口的已建立连接的总数。</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可查看所有建立连接的详细记录</p>
<h2> 19、输出每个ip的连接数，以及总的各个状态的连接数</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 20、其他</h2>
<p>分析日志文件下 2012-05-04 访问页面最高 的前20个 URL 并排序</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询受访问页面的URL地址中 含有 <code>www.abc.com</code> 网址的 IP 地址</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取访问最高的10个IP地址 同时也可以按时间来查询</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>时间段查询日志时间段的情况</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分析 2015/8/15 到 2015/8/16 访问”/index.php?g=Member&amp;m=Public&amp;a=sendValidCode”的IP倒序排列</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>($7~/.php/) $7里面包含.php的就输出,本句的意思是最耗时的一百个PHP页面</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出最最耗时的页面(超过60秒的)的以及对应页面发生次数</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计网站流量（G)</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计404的连接</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计http status</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每秒并发</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>带宽统计</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找出某天访问次数最多的10个IP</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当天ip连接数最高的ip都在干些什么</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>小时单位里ip连接数最多的10个时段</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找出访问次数最多的几个分钟</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取5分钟日志</p>
<p><code>if [ $DATE_MINUTE != $DATE_END_MINUTE ] ;then #</code>
则判断开始时间戳与结束时间戳是否相等</p>
<p><code>START_LINE=sed -n "/$DATE_MINUTE/=" $APACHE_LOG|head -n1</code> #如果不相等，则取出开始时间戳的行号，与结束时间戳的行号</p>
<p>查看tcp的链接状态</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找请求数前20个IP（常用于查找攻来源）：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用tcpdump嗅探80端口的访问看看谁最高</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查找较多time_wait连接</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找查较多的SYN连接</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据端口列进程</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看了连接数和当前的连接数</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看IP访问次数</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Linux命令分析当前的链接状况</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>watch "netstat -n | awk '/^tcp/ {++S[\$NF]} END {for(a in S) print a, S[a]}'"</code> # 通过watch可以一直监控</p>
<ul>
<li><code>LAST_ACK 5</code> #关闭一个TCP连接需要从两个方向上分别进行关闭，双方都是通过发送FIN来表示单方向数据的关闭，当通信双方发送了最后一个FIN的时候，
发送方此时处于LAST_ACK状态，当发送方收到对方的确认（Fin的Ack确认）后才真正关闭整个TCP连接；</li>
<li><code>SYN_RECV 30</code> # 表示正在等待处理的请求数；</li>
<li><code>ESTABLISHED 1597</code> # 表示正常数据传输状态；</li>
<li><code>FIN_WAIT1 51</code> # 表示server端主动要求关闭tcp连接；</li>
<li><code>FIN_WAIT2 504</code> # 表示客户端中断连接；</li>
<li><code>TIME_WAIT 1057</code> # 表示处理完毕，等待超时结束的请求数；</li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-10-11T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">磁盘相关知识</title>
    <id>https://topjf.github.io/linux/disk.html</id>
    <link href="https://topjf.github.io/linux/disk.html"/>
    <updated>2023-03-05T09:31:01.000Z</updated>
    <summary type="text">RAID磁盘阵列 在单机时代，采用单块磁盘进行数据存储和读写的方式，由于寻址和读写的时间消耗，导致I/O性能非常低，且存储容量还会受到限制。 另外，单块磁盘极其容易出现物理故障，经常导致数据的丢失。因此大家就在想，有没有一种办法将多块独立的磁盘结合在一起组成一个技术方案， 来提高数据的可靠性和I/O性能呢。 在这种情况下，RAID技术就应运而生了。 R...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> RAID磁盘阵列</h2>
<p>在单机时代，采用单块磁盘进行数据存储和读写的方式，由于寻址和读写的时间消耗，导致I/O性能非常低，且存储容量还会受到限制。
另外，单块磁盘极其容易出现物理故障，经常导致数据的丢失。因此大家就在想，有没有一种办法将多块独立的磁盘结合在一起组成一个技术方案，
来提高数据的可靠性和I/O性能呢。</p>
<p>在这种情况下，RAID技术就应运而生了。</p>
<h3> RAID 是什么？</h3>
<p>RAID （<code>Redundant Array of Independent Disks</code>）即独立磁盘冗余阵列，简称为「磁盘阵列」，其实就是用多个独立的磁盘组成在一起
形成一个大的磁盘系统，从而实现比单块磁盘更好的存储性能和更高的可靠性。</p>
<h3> RAID 有哪些？</h3>
<p>RAID方案常见的可以分为：</p>
<ul>
<li>RAID0</li>
<li>RAID1</li>
<li>RAID5</li>
<li>RAID6</li>
<li>RAID10</li>
</ul>
<h3> RAID0</h3>
<p>RAID0 是一种非常简单的的方式，它将多块磁盘组合在一起形成一个大容量的存储。当我们要写数据的时候，
会将数据分为N份，以独立的方式实现N块磁盘的读写，那么这N份数据会同时并发的写到磁盘中，因此执行性能非常的高。</p>
<figure><figcaption></figcaption></figure>
<p>RAID0 的读写性能理论上是单块磁盘的N倍（仅限理论，因为实际中磁盘的寻址时间也是性能占用的大头）</p>
<p>但RAID0的问题是，它并不提供数据校验或冗余备份，因此一旦某块磁盘损坏了，数据就直接丢失，无法恢复了。
因此RAID0就不可能用于高要求的业务中，但可以用在对可靠性要求不高，对读写性能要求高的场景中。</p>
<p>那有没有可以让存储可靠性变高的方案呢？
有的，下面的RAID1就是。</p>
<h3> RAID1</h3>
<figure><figcaption></figcaption></figure>
<p>RAID1 是磁盘阵列中单位成本最高的一种方式。因为它的原理是在往磁盘写数据的时候，
将同一份数据无差别的写两份到磁盘，分别写到工作磁盘和镜像磁盘，那么它的实际空间使用率只有50%了，
两块磁盘当做一块用，这是一种比较昂贵的方案。</p>
<p>RAID1其实与RAID0效果刚好相反。RAID1 这种写双份的做法，就给数据做了一个冗余备份。
这样的话，任何一块磁盘损坏了，都可以再基于另外一块磁盘去恢复数据，数据的可靠性非常强，但性能就没那么好了。</p>
<p>了解了RAID0和RAID1之后，我们发现这两个方案都不完美啊。
这时候就该 性能又好、可靠性也高 的方案 RAID5 登场了。</p>
<h3> RAID5</h3>
<p>这是目前用的最多的一种方式。</p>
<p>因为 RAID5 是一种将 存储性能、数据安全、存储成本 兼顾的一种方案。</p>
<p>在了解RAID5之前，我们可以先简单看一下<code>RAID3</code>，虽然RAID3用的很少，但弄清楚了RAID3就很容易明白RAID5的思路。</p>
<p>RAID3的方式是：将数据按照RAID0的形式，分成多份同时写入多块磁盘，但是还会另外再留出一块磁盘用于写「奇偶校验码」。</p>
<blockquote>
<p>例如总共有N块磁盘，那么就会让其中额度N-1块用来并发的写数据，第N块磁盘用记录校验码数据。一旦某一块磁盘坏掉了，就可以利用其它的N-1块磁盘去恢复数据。
但是由于第N块磁盘是校验码磁盘，因此有任何数据的写入都会要去更新这块磁盘，导致这块磁盘的读写是最频繁的，也就非常的容易损坏。</p>
</blockquote>
<p>RAID5的方式可以说是对RAID3进行了改进。</p>
<p>RAID5模式中，不再需要用单独的磁盘写校验码了。它把校验码信息分布到各个磁盘上。</p>
<blockquote>
<p>例如，总共有N块磁盘，那么会将要写入的数据分成N份，并发的写入到N块磁盘中，
同时还将数据的校验码信息也写入到这N块磁盘中（数据与对应的校验码信息必须得分开存储在不同的磁盘上）。
一旦某一块磁盘损坏了，就可以用剩下的数据和对应的奇偶校验码信息去恢复损坏的数据。</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>RAID5校验位算法原理：<code>P = D1 xor D2 xor D3 … xor Dn</code> （D1,D2,D3 … Dn为数据块，P为校验，xor为异或运算）</p>
<p>RAID5的方式，最少需要三块磁盘来组建磁盘阵列，允许最多同时坏一块磁盘。如果有两块磁盘同时损坏了，那数据就无法恢复了。</p>
<h3> RAID6</h3>
<p>为了进一步提高存储的高可用，聪明的人们又提出了RAID6方案，可以在有两块磁盘同时损坏的情况下，也能保障数据可恢复。</p>
<p>为什么RAID6这么牛呢，因为RAID6在RAID5的基础上再次改进，引入了双重校验的概念。</p>
<p>RAID6除了每块磁盘上都有同级数据XOR校验区以外，还有针对每个数据块的XOR校验区，这样的话，相当于每个数据块有两个校验保护措施，因此数据的冗余性更高了。</p>
<p>但是RAID6的这种设计也带来了很高的复杂度，虽然数据冗余性好，读取的效率也比较高，但是写数据的性能就很差。因此RAID6在实际环境中应用的比较少。</p>
<h3> RAID10</h3>
<p>RAID10其实就是RAID1与RAID0的一个合体。</p>
<p>我们看图就明白了：</p>
<figure><figcaption></figcaption></figure>
<p>RAID10兼备了RAID1和RAID0的有优点。首先基于RAID1模式将磁盘分为2份，当要写入数据的时候，
将所有的数据在两份磁盘上同时写入，相当于写了双份数据，起到了数据保障的作用。且在每一份磁盘上
又会基于RAID0技术讲数据分为N份并发的读写，这样也保障了数据的效率。</p>
<p>但也可以看出RAID10模式是有一半的磁盘空间用于存储冗余数据的，浪费的很严重，因此用的也不是很多。</p>
<h3> 对比</h3>
<p>整体对比一下 <code>RAID0、RAID1、RAID5、RAID6、RAID10</code> 的几个特征：</p>
<figure><figcaption></figcaption></figure>
<p>以上内容来自: <a href="https://m.imooc.com/article/264962" target="_blank" rel="noopener noreferrer">不止思考_奎哥</a></p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-11-16T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Linux常见异常分析</title>
    <id>https://topjf.github.io/linux/exception-analysis.html</id>
    <link href="https://topjf.github.io/linux/exception-analysis.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">1 常用的 Load 分析方法 CPU高、Load高 通过 top 命令查找占用CPU最高的进程PID；; 通过 top -Hp PID 查找占用CPU最高的线程TID;; 对于java程序，使用 jstack 打印线程堆栈信息；; 通过 printf %x tid 打印出最消耗CPU线程的十六进制；; CPU低、Load高 产生的原因一句话总结就是：...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Linux常见异常分析</h1>
<h2> 1 常用的 Load 分析方法</h2>
<h3> CPU高、Load高</h3>
<ul>
<li>
<p>通过 <code>top</code> 命令查找占用CPU最高的进程PID；</p>
</li>
<li>
<p>通过 <code>top -Hp PID</code> 查找占用CPU最高的线程TID;</p>
</li>
<li>
<p>对于java程序，使用 <code>jstack</code> 打印线程堆栈信息；</p>
</li>
<li>
<p>通过 <code>printf %x tid</code> 打印出最消耗CPU线程的十六进制；</p>
</li>
</ul>
<h3> CPU低、Load高</h3>
<p>产生的原因一句话总结就是：</p>
<p>等待磁盘I/O完成的进程过多，导致进程队列长度过大，但是CPU运行的进程却很少，这样就体现到负载过大了，cpu使用率低。</p>
<ul>
<li>
<p>通过 <code>top</code> 命令查看CPU等待IO时间，即 <code>%wa</code>；</p>
</li>
<li>
<p>通过 <code>iostat -d -x -m 1 10</code> 查看磁盘IO情况；(安装命令 <code>yum install -y sysstat</code>)</p>
</li>
<li>
<p>通过 <code>sar -n DEV 1 10</code> 查看网络IO情况；</p>
</li>
<li>
<p>通过如下命令查找占用IO的程序：</p>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 2 CPU高、Load高情况分析</h2>
<ul>
<li>
<p>使用vmstat 查看系统纬度的 CPU 负载；</p>
</li>
<li>
<p>使用 top 查看进程纬度的 CPU 负载；</p>
</li>
</ul>
<h3> 2.1 使用 vmstat 查看系统纬度的 CPU 负载</h3>
<p>可以通过 vmstat 从系统维度查看 CPU 资源的使用情况</p>
<p><strong>格式</strong> ：<code>vmstat -n 1 -n 1</code> 表示结果一秒刷新一次</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果中的主要数据列说明：</p>
<ul>
<li><strong>r</strong>：表示系统中 CPU 等待处理的线程。由于 CPU 每次只能处理一个线程，所以，该数值越大，通常表示系统运行越慢。</li>
<li><strong>b</strong>：表示阻塞的进程,这个不多说，进程阻塞，大家懂的。</li>
<li><strong>us</strong>：用户 CPU 时间，我曾经在一个做加密解密很频繁的服务器上，可以看到 us 接近100，r运行队列达到80(机器在做压力测试，性能表现不佳)。</li>
<li><strong>sy</strong>：系统 CPU 时间，如果太高，表示系统调用时间长，例如是 IO 操作频繁。</li>
<li><strong>wa</strong>：IO 等待消耗的 CPU 时间百分比。该值较高时，说明 IO 等待比较严重，这可能磁盘大量作随机访问造成的，也可能是磁盘性能出现了瓶颈。</li>
<li><strong>id</strong>：处于空闲状态的 CPU 时间百分比。如果该值持续为 0，同时 sy 是 us 的两倍，则通常说明系统则面临着 CPU 资源的短缺。</li>
</ul>
<p>常见问题及解决方法：</p>
<ul>
<li>如果 r 经常大于 4，且 id 经常少于 40，表示cpu的负荷很重。</li>
<li>如果 pi，po 长期不等于 0，表示内存不足。</li>
<li>如果 disk 经常不等于 0，且在b中的队列大于 3，表示io性能不好。</li>
</ul>
<h3> 2.2 使用 top 查看进程纬度的 CPU 负载</h3>
<p>可以通过 top 从进程纬度来查看其 CPU、内存等资源的使用情况。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认界面上第三行会显示当前 CPU 资源的总体使用情况，下方会显示各个进程的资源占用情况。</p>
<p>可以直接在界面输入大小字母 P，来使监控结果按 CPU 使用率倒序排列，进而定位系统中占用 CPU 较高的进程。
最后，根据系统日志和程序自身相关日志，对相应进程做进一步排查分析，以判断其占用过高 CPU 的原因。</p>
<h2> 3 CPU低、Load高</h2>
<h3> 问题描述</h3>
<p>Linux 系统没有业务程序运行，通过 top 观察，类似如下图所示，CPU 很空闲，但是 <code>load average</code> 却非常高：</p>
<h3> 问题分析</h3>
<p>CPU低而负载高也就是说等待磁盘I/O完成的进程过多，就会导致队列长度过大，这样就体现到负载过大了，但实际是此时CPU被分配去执行别的任务或空闲，具体场景有如下几种：</p>
<blockquote>
<p><em>场景一</em>：磁盘读写请求过多就会导致大量I/O等待</p>
</blockquote>
<p>上面说过，cpu的工作效率要高于磁盘，而进程在cpu上面运行需要访问磁盘文件，这个时候cpu会向内核发起调用文件的请求，让内核去磁盘取文件，这个时候会切换到其他进程或者空闲，
这个任务就会转换为不可中断睡眠状态。当这种读写请求过多就会导致不可中断睡眠状态的进程过多，从而导致负载高，cpu低的情况。</p>
<blockquote>
<p><em>场景二</em>：MySQL中存在没有索引的语句或存在死锁等情况</p>
</blockquote>
<p>我们都知道MySQL的数据是存储在硬盘中，如果需要进行sql查询，需要先把数据从磁盘加载到内存中。当在数据特别大的时候，如果执行的sql语句没有索引，就会造成扫描表的行数过大导致I/O阻塞，
或者是语句中存在死锁，也会造成I/O阻塞，从而导致不可中断睡眠进程过多，导致负载过大。具体解决方法可以在MySQL中运行 <code>show full processlist</code> 命令查看线程等待情况，把其中的语句拿出来进行优化。</p>
<blockquote>
<p><em>场景三</em>：外接硬盘故障，常见有挂了NFS，但是NFS server故障</p>
</blockquote>
<p>比如我们的系统挂载了外接硬盘如NFS共享存储，经常会有大量的读写请求去访问NFS存储的文件，如果这个时候 NFS Server 故障，那么就会导致进程读写请求一直获取不到资源，从而进程一直是不可中断状态，造成负载很高。</p>
<h3> 处理办法</h3>
<ul>
<li>load average 是对 CPU 负载的评估，其值越高，说明其任务队列越长，处于等待执行的任务越多。</li>
<li>出现此种情况时，可能是由于僵死进程导致的。可以通过指令 <code>ps -axjf</code> 查看是否存在 D 状态进程。</li>
<li>D 状态是指不可中断的睡眠状态。该状态的进程无法被 kill，也无法自行退出。只能通过恢复其依赖的资源或者重启系统来解决。</li>
</ul>
<blockquote>
<p>等待 I/O 的进程通过处于 <code>uninterruptible sleep</code> 或 D 状态；通过给出这些信息我们就可以简单的查找出处在 wait 状态的进程。</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上内容来源于：</p>
<ul>
<li><a href="https://juejin.cn/post/7016127914454286367" target="_blank" rel="noopener noreferrer">Honest1y</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-11-09T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Jenkins自动化部署</title>
    <id>https://topjf.github.io/linux/jenkins.html</id>
    <link href="https://topjf.github.io/linux/jenkins.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">开发push代码到git，触发jenkins自动pull代码，通过maven编译、打包，然后通过执行shell脚本使docker构建镜像并push到私服（或者阿里云）仓库，此操作完成后jenkins服务器上再执行SSH命令登录到部署服务器，docker从仓库（私服）拉取镜像，启动容器。整个操作流程完成。 通过 war 安装 2.372（推荐使用） 下载...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Jenkins自动化部署</h1>
<figure><figcaption></figcaption></figure>
<blockquote>
<p>开发push代码到git，触发jenkins自动pull代码，通过maven编译、打包，然后通过执行shell脚本使docker构建镜像并push到私服（或者阿里云）仓库，此操作完成后jenkins服务器上再执行SSH命令登录到部署服务器，docker从仓库（私服）拉取镜像，启动容器。整个操作流程完成。</p>
</blockquote>
<hr>
<h2> 通过 war 安装 2.372（推荐使用）</h2>
<p>下载地址：<a href="https://mirrors.huaweicloud.com/jenkins/war/2.346/jenkins.war" target="_blank" rel="noopener noreferrer">huawei源2.346</a>、<a href="https://get.jenkins.io/war-stable/" target="_blank" rel="noopener noreferrer">稳定版列表</a>、<a href="https://get.jenkins.io/war/" target="_blank" rel="noopener noreferrer">尝鲜版列表</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装（提取码：1234）： <a href="https://pan.baidu.com/s/17pkHcX7YrssnEVctveHbHQ" target="_blank" rel="noopener noreferrer">java各个版本下载</a>、<a href="https://pan.baidu.com/s/1ch1_sjFDvvgY52-niYEBFw" target="_blank" rel="noopener noreferrer">maven3.8</a>、<a href="https://pan.baidu.com/s/1TQgpdHz6p38k6QxPsBDhrQ" target="_blank" rel="noopener noreferrer">tomcat</a>、yum install -y git</p>
<h3> 安装 JDK</h3>
<ul>
<li>卸载默认jdk</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>解压安装</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>rm -rf /usr/bin/ja* &amp;&amp;  ln -s /usr/java/jdk-17.0.4/bin/ja* /usr/bin/ &amp;&amp; ls -al /usr/bin/ja*</code></p>
<ul>
<li>设置环境变量</li>
</ul>
<p><code>vim /etc/profile</code></p>
<p>jdk17没有jre目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 安装 tomcat</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置端口 <code>vim /data/tomcat-9.0.65/conf/server.xml</code></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 安装 maven</h3>
<ul>
<li>解压</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>设置环境变量</li>
</ul>
<p><code>vim /etc/profile</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使环境变量生效：<code>source /etc/profile</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> tomcat 启动 jenkins</h3>
<p>使用Java测试运行1 <code>java -jar jenkins.war httpPort=8889</code></p>
<p>把war放到 tomcat 里运行 <code>cp -R ../software/jenkins.war ./webapps/</code></p>
<p>执行：<code>./bin/startup.sh</code></p>
<p>访问：<code>http://192.168.100.130:51000/jenkins372/</code></p>
<figure><figcaption></figcaption></figure>
<p>查看密码</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>62db2150540d400a8b86944ea4c9a2af</p>
<p><strong>后续参考下面docker的：【安装插件】</strong></p>
<h2> 通过 yum 安装</h2>
<p>稳定版</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最新版</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改jenkins的端口号，默认为8080。这里修改为8099。</p>
<p>vim /etc/sysconfig/jenkins ：jenkins配置文件</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看密码</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://192.168.100.130:8099" target="_blank" rel="noopener noreferrer">http://192.168.100.130:8099</a></p>
<hr>
<h2> 通过 docker 安装 2.363</h2>
<p><a href="https://blog.csdn.net/xiaoxiangzi520/article/details/88842200" target="_blank" rel="noopener noreferrer">自动化部署 参考</a></p>
<p><a href="https://blog.csdn.net/qq_42476834/article/details/117373828" target="_blank" rel="noopener noreferrer">设置docker快捷键</a></p>
<p><a href="https://hub.docker.com/r/jenkins/jenkins" target="_blank" rel="noopener noreferrer">docker.hub</a></p>
<h3> 安装</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问：<a href="http://192.168.0.8:8889" target="_blank" rel="noopener noreferrer">http://192.168.0.8:8889</a></p>
<hr>
<figure><figcaption></figcaption></figure>
<hr>
<figure><figcaption></figcaption></figure>
<hr>
<h3> 查看管理员密码</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>62fc38a29bf840ee8c5fcf746ad9f574</p>
</blockquote>
<h3> 配置国内站点加速</h3>
<p><code>vim /data/jenkins_home/hudson.model.UpdateCenter.xml</code></p>
<p>把 <code>https://updates.jenkins.io/update-center.json</code></p>
<p>换为其中之一</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实国内的配置内容使用的下载更新地址也是 <em>Jenkins</em> 官方默认下载的地址，所以还得编辑 <code>updates/default.json</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>国内常用的镜像地址：</p>
<table>
<thead>
<tr>
<th>来源</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>tencent</td>
<td><a href="https://mirrors.cloud.tencent.com/jenkins/" target="_blank" rel="noopener noreferrer">https://mirrors.cloud.tencent.com/jenkins/</a></td>
</tr>
<tr>
<td>huawei</td>
<td><a href="https://mirrors.huaweicloud.com/jenkins/" target="_blank" rel="noopener noreferrer">https://mirrors.huaweicloud.com/jenkins/</a></td>
</tr>
<tr>
<td>tsinghua</td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/" target="_blank" rel="noopener noreferrer">https://mirrors.tuna.tsinghua.edu.cn/jenkins/</a></td>
</tr>
<tr>
<td>ustc</td>
<td><a href="https://mirrors.ustc.edu.cn/jenkins/" target="_blank" rel="noopener noreferrer">https://mirrors.ustc.edu.cn/jenkins/</a></td>
</tr>
<tr>
<td>bit</td>
<td><a href="http://mirror.bit.edu.cn/jenkins/" target="_blank" rel="noopener noreferrer">http://mirror.bit.edu.cn/jenkins/</a></td>
</tr>
</tbody>
</table>
<p>也可以在管理界面进行设置</p>
<figure><figcaption></figcaption></figure>
<p>重启服务：<code>docker restart jenkins</code></p>
<p>查看配置： <code>[root@n1 jenkins_home]# cat updates/default.json</code></p>
<h3> 安装插件</h3>
<p>二选一即可</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 安装自动化构建和部署所需的插件</h3>
<p>所需插件：git plugin、Maven Integration、Pipeline Maven Integration、Gitlab、SSH、Publish Over SSH、gitee、github、Deploy to container、Docker、Docker Commons、docker-build-step</p>
<p>​</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 创建用户</h3>
<p>admin admin123456</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<hr>
<h2> 自动部署项目（springBoot+maven+gitee）</h2>
<h3> 添加凭证</h3>
<p><code>http://192.168.100.130:51000/gitee-project/drj</code></p>
<h2> 基础介绍</h2>
<p><em>小目录</em></p>
<ul>
<li>什么是流水线</li>
<li>声明式流水线</li>
<li>Jenkinsfile 的使用</li>
</ul>
<h3> 什么是流水线</h3>
<p>jenkins 有 2 种流水线分为 <strong>声明式流水线</strong>与<strong>脚本化流水线</strong>，
脚本化流水线是 jenkins 旧版本使用的流水线脚本，新版本 Jenkins 推荐使用声明式流水线。
文档只介绍声明流水线。</p>
<h4> 1声明式流水线</h4>
<p>在声明式流水线语法中，流水线过程定义在 <code>Pipeline{}</code> 中，Pipeline 块定义了整个流水线中完成的所有工作，比如</p>
<p><strong>参数说明：</strong></p>
<ul>
<li><strong>agent any</strong> ：在任何可用的代理上执行流水线或它的任何阶段，也就是执行流水线过程的位置，也可以指定到具体的节点</li>
<li><strong>stage</strong> ：定义流水线的执行过程（相当于一个阶段），比如下文所示的 <code>Build、Test、Deploy</code>， 但是这个名字是根据实际情况进行定义的，并非固定的名字</li>
<li><strong>steps</strong> ：执行某阶段具体的步骤。</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2脚本化流水线</h4>
<p>在脚本化流水线语法中，会有一个或多个 Node（节点）块在整个流水线中执行核心工作</p>
<p><strong>参数说明:</strong></p>
<ul>
<li><strong>node</strong> ：在任何可用的代理上执行流水线或它的任何阶段，也可以指定到具体的节点</li>
<li><strong>stage</strong> ：和声明式的含义一致，定义流水线的阶段。Stage 块在脚本化流水线语法中是可选的，
然而在脚本化流水线中实现 stage 块，可以清楚地在 Jenkins UI 界面中显示每个 stage 的任务子集。</li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 声明式流水线</h3>
<p>声明式流水线必须包含在一个 <code>Pipeline</code> 块中，比如是一个 <code>Pipeline</code> 块的格式</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在声明式流水线中有效的基本语句和表达式遵循与 <code>Groovy</code> 的语法同样的规则，但有以下例外</p>
<ul>
<li>流水线顶层必须是一个 block，即 pipeline{}</li>
<li>分隔符可以不需要分号，但是每条语句都必须在自己的行上</li>
<li>块只能由 Sections、Directives、Steps 或 assignment statements 组成</li>
<li>属性引用语句被当做是无参数的方法调用，比如 input 会被当做 input()。</li>
</ul>
<h4> Sections</h4>
<p>声明式流水线中的 Sections 不是一个关键字或指令，
而是包含一个或多个 <code>Agent</code>、<code>Stages</code>、 <code>post</code>、<code>Directives</code> 和 <code>Steps</code> 的代码区域块。</p>
<p>1.Agent</p>
<p>Agent 表示整个流水线或特定阶段中的步骤和命令执行的位置，该部分必须在 pipeline 块的顶层被定义，也可以在 stage 中再次定义，但是 stage 级别是可选的。</p>
<p><strong>any</strong></p>
<p>在任何可用的代理上执行流水线，配置语法</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>none</strong></p>
<p>表示该 Pipeline 脚本没有全局的 agent 配置。当顶层的 agent 配置为 none 时， 每个 stage 部分都需要包含它自己的 agent。配置语法</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>label</strong></p>
<p>以节点标签形式选择某个具体的节点执行 Pipeline 命令，例如：agent { label 'my-defined-label' }。节点需要提前配置标签。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>node</strong></p>
<p>和 label 配置类似，只不过是可以添加一些额外的配置，比如 customWorkspace(设置默认工作目录)</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>dockerfile</strong></p>
<p>使用从源码中包含的 Dockerfile 所构建的容器执行流水线或 stage。此时对应的 agent 写法如下</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>docker</strong></p>
<p>相当于 dockerfile，可以直接使用 docker 字段指定外部镜像即可，可以省去构建的时间。比如使用 maven 镜像进行打包，同时可以指定 args</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>kubernetes</strong></p>
<p>需要部署 kubernetes 相关的插件，<a href="https://github.com/jenkinsci/kubernetes-plugin/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<p>Jenkins 也支持使用 Kubernetes 创建 Slave，也就是常说的动态 Slave。配置示例如下</p>
<ul>
<li>
<p>cloud: Configure Clouds 的名称，指定到其中一个 k8s</p>
</li>
<li>
<p>slaveConnectTimeout: 连接超时时间</p>
</li>
<li>
<p>yaml: pod 定义文件，jnlp 容器的配置必须有配置无需改变，其余 containerd 根据自己情况指定</p>
</li>
<li>
<p>workspaceVolume：持久化 jenkins 的工作目录。</p>
</li>
<li>
<p>persistentVolumeClaimWorkspaceVolume：挂载已有 pvc。</p>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>nfsWorkspaceVolume：挂载 nfs 服务器目录</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>dynamicPVC：动态申请 pvc，任务执行结束后删除</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>emptyDirWorkspaceVolume：临时目录，任务执行结束后会随着 pod 删除被删除，主要功能多个任务 container 共享 jenkins 工作目录。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>hostPathWorkspaceVolume：挂载 node 节点本机目录，注意挂载本机目录注意权限问题，可以先创建设置 777 权限，否则默认 kubelet 创建的目录权限为 755 默认其他用户没有写权限，执行流水线会报错。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.agent 的配置示例</p>
<p><strong>kubernetes 示例</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>docker 的示例</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.Post</p>
<p>Post 一般用于流水线结束后的进一步处理，比如错误通知等。
Post 可以针对流水线不同的结果做出不同的处理，就像开发程序的错误处理，
比如 Python 语言的 <code>try catch</code>。</p>
<p>Post 可以定义在 Pipeline 或 stage 中，目前支持以下条件</p>
<ul>
<li><strong>always</strong>：无论 Pipeline 或 stage 的完成状态如何，都允许运行该 post 中定义的指令；</li>
<li><strong>changed</strong>：只有当前 Pipeline 或 stage 的完成状态与它之前的运行不同时，才允许在该 post 部分运行该步骤；</li>
<li><strong>fixed</strong>：当本次 Pipeline 或 stage 成功，且上一次构建是失败或不稳定时，允许运行该 post 中定义的指令；</li>
<li><strong>regression</strong>：当本次 Pipeline 或 stage 的状态为失败、不稳定或终止，且上一次构建的 状态为成功时，允许运行该 post 中定义的指令；</li>
<li><strong>failure</strong>：只有当前 Pipeline 或 stage 的完成状态为失败（failure），才允许在 post 部分运行该步骤，通常这时在 Web 界面中显示为红色</li>
<li><strong>success</strong>：当前状态为成功（success），执行 post 步骤，通常在 Web 界面中显示为蓝色 或绿色</li>
<li><strong>unstable</strong>：当前状态为不稳定（unstable），执行 post 步骤，通常由于测试失败或代码 违规等造成，在 Web 界面中显示为黄色</li>
<li><strong>aborted</strong>：当前状态为终止（aborted），执行该 post 步骤，通常由于流水线被手动终止触发，这时在 Web 界面中显示为灰色；</li>
<li><strong>unsuccessful</strong>：当前状态不是 success 时，执行该 post 步骤；</li>
<li><strong>cleanup</strong>：无论 pipeline 或 stage 的完成状态如何，都允许运行该 post 中定义的指令。和 always 的区别在于，cleanup 会在其它执行之后执行。</li>
</ul>
<p>示例</p>
<p>一般情况下 post 部分放在流水线的底部，比如本实例，无论 stage 的完成状态如何，
都会输出一条 <code>I will always say Hello again!</code> 信息</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以将 post 写在 stage，下面示例表示 Example1 执行失败执行 post。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.sepes</p>
<p>Steps 部分在给定的 stage 指令中执行的一个或多个步骤，比如在 steps 定义执行一条 shell 命令</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者是使用 sh 字段执行多条指令</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Directives 条件判断或预处理数据</h4>
<p>Directives 可用于一些执行 stage 时的条件判断或预处理一些数据，和 Sections 一致，Directives 不是一个关键字或指令，
而是包含了 <code>environment、options、parameters、triggers、stage、tools、 input、when</code> 等配置。</p>
<p>1.Environment</p>
<p>Environment 主要用于在流水线中配置的一些环境变量，根据配置的位置决定环境变量的作用域。</p>
<p>可以定义在 pipeline 中作为全局变量，也可以配置在 stage 中作为该 stage 的环境变量。该指令支持一个特殊的方法 <code>credentials()</code>，
该方法可用于在 Jenkins 环境中通过标识符访问预定义的凭证。</p>
<p>对于类型为 Secret Text 的凭证，<code>credentials()</code>可以将该 Secret 中的文本内容赋值给环境变量。</p>
<p>对于类型为标准的账号密码型的凭证，指定的环境变量为 username 和 password，并且也会定义两个额外的环境变量，分别为<code>MYVARNAME_USR</code>和<code>MYVARNAME_PSW</code>。</p>
<ul>
<li>基本变量使用</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>使用变量引用 secret 的凭证</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用变量引用类型为标准的账号密码型的凭证</strong></p>
<p>这里使用 HARBOR 变量进行演示，默认情况下账号密码型的凭证会自动创建 3 个变量</p>
<ul>
<li><strong>HARBOR_USR</strong>: 会把凭证中 username 值赋值给这个变量</li>
<li><strong>HARBOR_PSW</strong>: 会把凭证中 password 值赋值给这个变量</li>
<li><strong>HARBOR</strong>: 默认情况下赋值的值为 <code>usernamme:password</code></li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.Options</p>
<p>Jenkins 流水线支持很多内置指令，比如 retry 可以对失败的步骤进行重复执行 n 次，可以根据不同的指令实现不同的效果。</p>
<p>比较常用的指令如下:</p>
<ul>
<li><strong>buildDiscarder</strong>：保留多少个流水线的构建记录</li>
<li><strong>disableConcurrentBuilds</strong>：禁止流水线并行执行，防止并行流水线同时访问共享资源导致流水线失败。</li>
<li><strong>disableResume</strong>：如果控制器重启，禁止流水线自动恢复。</li>
<li><strong>newContainerPerStage</strong>：agent 为 docker 或 dockerfile 时，每个阶段将在同一个节点的新容器中运行，而不是所有的阶段都在同一个容器中运行。</li>
<li><strong>quietPeriod</strong>：流水线静默期，也就是触发流水线后等待一会在执行。</li>
<li><strong>retry</strong>：流水线失败后重试次数。</li>
<li><strong>timeout</strong>：设置流水线的超时时间，超过流水线时间，job 会自动终止。如果不加 unit 参数默认为 1 分。</li>
<li><strong>timestamps</strong>：为控制台输出时间戳。</li>
</ul>
<p><strong>定义在 pipeline 中</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定义在 stage 中</strong></p>
<p>Option 除了写在 Pipeline 顶层，还可以写在 stage 中，但是写在 stage 中的 option 仅支持 <code>retry、 timeout、timestamps</code>，
或者是和 stage 相关的声明式选项，比如 <code>skipDefaultCheckout</code>。</p>
<p>处于 stage 级别的 options 写法如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.Parameters</p>
<p>Parameters 提供了一个用户在触发流水线时应该提供的参数列表，这些用户指定参数的值可以通过 params 对象提供给流水线的 step（步骤）。
只能定义在 pipeline 顶层。</p>
<p><strong>目前支持的参数类型如下</strong></p>
<ul>
<li><strong>string</strong>：字符串类型的参数。</li>
<li><strong>text</strong>：文本型参数，一般用于定义多行文本内容的变量。</li>
<li><strong>booleanParam</strong>：布尔型参数。</li>
<li><strong>choice</strong>：选择型参数，一般用于给定几个可选的值，然后选择其中一个进行赋值。</li>
<li><strong>password</strong>：密码型变量，一般用于定义敏感型变量，在 Jenkins 控制台会输出为 <code>*</code> 。</li>
</ul>
<p><strong>插件 Parameters</strong></p>
<ul>
<li><strong>imageTag</strong>：镜像 tag，需要安装 <code>Image Tag Parameter</code> 插件后使用</li>
<li><strong>gitParameter</strong>：获取 git 仓库分支，需要 <code>Git Parameter</code> 插件后使用</li>
</ul>
<p>示例</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.Triggers</p>
<p>在 Pipeline 中可以用 triggers 实现自动触发流水线执行任务，可以通过 <code>Webhook、Cron、 pollSCM</code> 和 <code>upstream</code> 等方式触发流水线。</p>
<p><strong>Cron</strong></p>
<p>定时构建假如某个流水线构建的时间比较长，或者某个流水线需要定期在某个时间段执行构建，可以 使用 cron 配置触发器，比如周一到周五每隔四个小时执行一次</p>
<p>注意：H 的意思不是 HOURS 的意思，而是 Hash 的缩写。主要为了解决多个流水线在同一时间同时运行带来的系统负载压力。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Upstream</strong></p>
<p>Upstream 可以根据上游 job 的执行结果决定是否触发该流水线。比如当 job1 或 job2 执行成功时触发该流水线</p>
<p>目前支持的状态有 <code>SUCCESS</code>、<code>UNSTABLE</code>、<code>FAILURE</code>、<code>NOT_BUILT</code>、<code>ABORTED</code>等。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.Input</p>
<p>Input 字段可以实现在流水线中进行交互式操作，比如选择要部署的环境、是否继续执行某个阶段等。</p>
<p>配置 Input 支持以下选项</p>
<ul>
<li><strong>message</strong>：必选，需要用户进行 input 的提示信息，比如：“是否发布到生产环境？”；</li>
<li><strong>id</strong>：可选，input 的标识符，默认为 stage 的名称；</li>
<li><strong>ok</strong>：可选，确认按钮的显示信息，比如：“确定”、“允许”；</li>
<li><strong>submitter</strong>：可选，允许提交 input 操作的用户或组的名称，如果为空，任何登录用户均可提交 input；</li>
<li><strong>parameters</strong>：提供一个参数列表供 input 使用。</li>
</ul>
<p>假如需要配置一个提示消息为“还继续么”、确认按钮为“继续”、提供一个 PERSON 的变量的参数，并且只能由登录用户为 alice 和 bob 提交的 input 流水线</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6.when</p>
<p>When 指令允许流水线根据给定的条件决定是否应该执行该 stage，when 指令必须包含至少 一个条件。
如果 when 包含多个条件，所有的子条件必须都返回 True，stage 才能执行。</p>
<p>When 也可以结合 <code>not、allOf、anyOf</code> 语法达到更灵活的条件匹配。</p>
<p><strong>目前比较常用的内置条件如下</strong></p>
<ul>
<li><strong>branch</strong>：当正在构建的分支与给定的分支匹配时，执行这个 stage。注意，branch 只适用于多分支流水线</li>
<li><strong>changelog</strong>：匹配提交的 changeLog 决定是否构建，例如: <code>when { changelog '.*^\\[DEPENDENCY\\] .+$' }</code></li>
<li><strong>environment</strong>：当指定的环境变量和给定的变量匹配时，执行这个 stage，例如：<code>when { environment name: 'DEPLOY_TO', value: 'production' }</code></li>
<li><strong>equals</strong>：当期望值和实际值相同时，执行这个 stage，例如：<code>when { equals expected: 2, actual: currentBuild.number }；</code></li>
<li><strong>expression</strong>：当指定的 Groovy 表达式评估为 True，执行这个 stage，例如：<code>when { expression { return params.DEBUG_BUILD } }；</code></li>
<li><strong>tag</strong>：如果 TAG_NAME 的值和给定的条件匹配，执行这个 stage，例如：<code>when { tag "release-" }；</code></li>
<li><strong>not</strong>：当嵌套条件出现错误时，执行这个 stage，必须包含一个条件，例如：<code>when { not { branch 'master' } }；</code></li>
<li><strong>allOf</strong>：当所有的嵌套条件都正确时，执行这个 stage，必须包含至少一个条件，例如：<code>when { allOf { branch 'master'; environment name: 'DEPLOY_TO', value: 'production' } }；</code></li>
<li><strong>anyOf</strong>：当至少有一个嵌套条件为 True 时，执行这个 stage，例如：<code>when { anyOf { branch 'master'; branch 'staging' } })</code>。</li>
</ul>
<p>示例：当分支为 main 时执行 Example Deploy 步骤</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以同时配置多个条件，比如分支是 production，而且 <code>DEPLOY_TO</code> 变量的值为 main 时，才执行 <code>Example Deploy</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>anyOf</code> 进行匹配其中一个条件即可，比如分支为 main 或 <code>DEPLOY_TO</code> 为 main 或 master 时执行 Deploy</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>expression</code> 进行正则匹配，比如当 <code>BRANCH_NAME</code> 为 main 或 master，并且 <code>DEPLOY_TO</code> 为 master 或 main 时才会执行 <code>Example Deploy</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，如果定义了某个 stage 的 agent，在进入该 stage 的 agent 后，
该 stage 的 when 条件才会被评估，但是可以通过一些选项更改此选项。</p>
<p>比如在进入 stage 的 agent 前评估 when， 可以使用 beforeAgent，
当 when 为 true 时才进行该 stage</p>
<p><strong>目前支持的前置条件如下</strong></p>
<ul>
<li><strong>beforeAgent</strong>：如果 beforeAgent 为 true，则会先评估 when 条件。在 when 条件为 true 时，才会进入该 stage</li>
<li><strong>beforeInput</strong>：如果 beforeInput 为 true，则会先评估 when 条件。在 when 条件为 true 时，才会进入到 input 阶段；</li>
<li><strong>beforeOptions</strong>：如果 beforeInput 为 true，则会先评估 when 条件。在 when 条件为 true 时，才会进入到 options 阶段；</li>
</ul>
<p><code>beforeOptions</code> 优先级大于 <code>beforeInput</code> 大于 <code>beforeAgent</code></p>
<p>示例</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Parallel 并发构建</h4>
<p>在声明式流水线中可以使用 Parallel 字段，即可很方便的实现并发构建，比如对分支 <code>A、B、C</code> 进行并行处理</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Jenkinsfile 的使用</h3>
<p>上面讲过流水线支持两种语法，即声明式和脚本式，这两种语法都支持构建持续交付流水线。
并且都可以用来在 <code>Web UI</code> 或 <code>Jenkinsfile</code> 中定义流水线，不过通常将 <code>Jenkinsfile</code> 放置于代码仓库中（当然也可以放在单独的代码仓库中进行管理）。</p>
<p>创建一个 Jenkinsfile 并将其放置于代码仓库中，有以下好处</p>
<ul>
<li>方便对流水线上的代码进行复查/迭代</li>
<li>对管道进行审计跟踪</li>
<li>流水线真正的源代码能够被项目的多个成员查看和编辑</li>
</ul>
<h4> 环境变量</h4>
<p>1.静态变量</p>
<p>Jenkins 有许多内置变量可以直接在 Jenkinsfile 中使用，可以通过 <code>JENKINS_URL/pipeline/syntax/globals#env</code> 获取完整列表。</p>
<p><strong>目前比较常用的环境变量如下</strong></p>
<ul>
<li><strong>BUILD_ID</strong>：当前构建的 ID，与 Jenkins 版本 1.597+ 中的 BUILD_NUMBER 完全相同</li>
<li><strong>BUILD_NUMBER</strong>：当前构建的 ID，和 BUILD_ID 一致</li>
<li><strong>BUILD_TAG</strong>：用来标识构建的版本号，格式为：jenkins-{BUILD_NUMBER}， 可以对产物进行命名，比如生产的 jar 包名字、镜像的 TAG 等；</li>
<li><strong>BUILD_URL</strong>：本次构建的完整 URL，比如：<code>http://buildserver/jenkins/job/MyJobName/17/%EF%BC%9B</code></li>
<li><strong>JOB_NAME</strong>：本次构建的项目名称</li>
<li><strong>NODE_NAME</strong>：当前构建节点的名称；</li>
<li><strong>JENKINS_URL</strong>：Jenkins 完整的 URL，需要在 <code>SystemConfiguration</code> 设置；</li>
<li><strong>WORKSPACE</strong>：执行构建的工作目录。</li>
</ul>
<p>示例如果一个流水线名称为 <code>print_env</code>，第 2 次构建，各个变量的值。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述变量会保存在一个 Map 中，可以使用 <code>env.BUILD_ID</code> 或 <code>env.JENKINS_URL</code> 引用某个内置变量</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.动态变量</p>
<p>动态变量是根据某个指令的结果进行动态赋值，变量的值根据指令的执行结果而不同。如下所示</p>
<ul>
<li><strong>returnStdout</strong>：将命令的执行结果赋值给变量，比如下述的命令返回的是 clang，此时 CC 的值为“clang”。</li>
<li><strong>returnStatus</strong>：将命令的执行状态赋值给变量，比如下述命令的执行状态为 1，此时 <code>EXIT_STATUS</code> 的值为 1。</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 凭证管理</h4>
<p>Jenkins 的声明式流水线语法有一个 <code>credentials()</code>函数，它支持 <code>secret text（加密文本）</code>、<code>username</code> 和 <code>password（用户名和密码）</code>以及 <code>secret file（加密文件）</code>等。</p>
<p>接下来看一下一些常用的凭证处理方法。</p>
<p>1.加密文本</p>
<p>本实例演示将两个 Secret 文本凭证分配给单独的环境变量来访问 <code>Amazon Web</code> 服务，需要提前创建这两个文件的 <code>credentials（实践的章节会有演示）</code>，
<code>Jenkinsfile</code> 文件的内容如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.用户名密码</p>
<p>本示例用来演示 credentials 账号密码的使用，比如使用一个公用账户访问 <code>Bitbucket</code>、<code>GitLab</code>、 <code>Harbor</code> 等。</p>
<p>假设已经配置完成了用户名密码形式的 credentials，凭证 ID 为 <code>harbor-account</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上述的配置会自动生成 3 个环境变量</strong></p>
<ul>
<li><strong>BITBUCKET_COMMON_CREDS</strong>：包含一个以冒号分隔的用户名和密码，格式为 <code>username:password</code></li>
<li><strong>BITBUCKET_COMMON_CREDS_USR</strong>：仅包含用户名的附加变量</li>
<li><strong>BITBUCKET_COMMON_CREDS_PSW</strong>：仅包含密码的附加变量。</li>
</ul>
<p>3.加密文件</p>
<p>需要加密保存的文件，也可以使用 credential，比如链接到 Kubernetes 集群的 <code>kubeconfig</code> 文件等。</p>
<p>假如已经配置好了一个 kubeconfig 文件，此时可以在 Pipeline 中引用该文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>介绍内容来源：<a href="http://u.kubeinfo.cn/ozoxB" target="_blank" rel="noopener noreferrer">u.kubeinfo.cn/ozoxB</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-08-09T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">centos网络网卡配置</title>
    <id>https://topjf.github.io/linux/network-setting.html</id>
    <link href="https://topjf.github.io/linux/network-setting.html"/>
    <updated>2023-03-05T09:31:01.000Z</updated>
    <summary type="text">一、设置本机静态IP 1、查看本机ip：ifconfig 2、设置静态ip -&amp;gt; 配置文件 生产 UUID： uuidgen ens33 ls -l /dev/disk/by-uuid 查看 UUID： nmcli con | sed -n &amp;apos;1,2p&amp;apos; BOOTPROTO： dhcp 表示使用动态IP，dhcp 动态IP地址是自行生成。 none 无...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>centos网络网卡配置</h1>
<h2> 一、设置本机静态IP</h2>
<h3> 1、查看本机ip：ifconfig</h3>
<h3> 2、设置静态ip -&gt; 配置文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产 UUID： uuidgen ens33</p>
<p>ls -l /dev/disk/by-uuid</p>
<p>查看 UUID： nmcli con | sed -n '1,2p'</p>
<p>BOOTPROTO：</p>
<blockquote>
<p>dhcp 表示使用动态IP，dhcp 动态IP地址是自行生成。</p>
<p>none 无（不指定）通常是DHCP</p>
<p>static 要自己自行指定IP地址</p>
<p>bootp</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、配置 vim /etc/hosts 映射关系</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、重新启动网络服务</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>system与systemctl的区别：</strong>
system：centos6之前使用
systemctl：centos7之后出现的，centos7也可以使用system，兼容低版本</p>
<h3> 5、ip配置成功</h3>
<h3> 6、ping：ctrl+z 退出</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 二、wind映射Linux主机</h2>
<p><code>C:\Windows\System32\drivers\etc</code></p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2021-09-10T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Shell脚本编程</title>
    <id>https://topjf.github.io/linux/shell.html</id>
    <link href="https://topjf.github.io/linux/shell.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">基础认识 终端仿真器 GNOME Terminal（一般系统默认） Konsole Terminal Eterm Final Term Guake LillyTerm LXTerminal mrxvt ROXTerm Terminator Terminology UXterm Wterm xterm shell 类型 shell 的父子关系-bash ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Shell 脚本编程</h1>
<h2> 基础认识</h2>
<h3> 终端仿真器</h3>
<p>GNOME Terminal（一般系统默认）  <a href="https://help.gnome.org/users/gnome-terminal/stable" target="_blank" rel="noopener noreferrer">https://help.gnome.org/users/gnome-terminal/stable</a></p>
<p>Konsole Terminal  <a href="http://konsole.kde.org" target="_blank" rel="noopener noreferrer">http://konsole.kde.org</a></p>
<p>Eterm  <a href="http://www.eterm.org" target="_blank" rel="noopener noreferrer">http://www.eterm.org</a></p>
<p>Final Term  <a href="http://finalterm.org" target="_blank" rel="noopener noreferrer">http://finalterm.org</a></p>
<p>Guake  <a href="https://github.com/Guake/guake" target="_blank" rel="noopener noreferrer">https://github.com/Guake/guake</a></p>
<p>LillyTerm  <a href="http://lilyterm.luna.com.tw/index.html" target="_blank" rel="noopener noreferrer">http://lilyterm.luna.com.tw/index.html</a></p>
<p>LXTerminal  <a href="http://wiki.lxde.org/en/LXTerminal" target="_blank" rel="noopener noreferrer">http://wiki.lxde.org/en/LXTerminal</a></p>
<p>mrxvt  <a href="https://code.google.com/p/mrxvt" target="_blank" rel="noopener noreferrer">https://code.google.com/p/mrxvt</a></p>
<p>ROXTerm  <a href="http://roxterm.sourceforge.net" target="_blank" rel="noopener noreferrer">http://roxterm.sourceforge.net</a></p>
<p>Terminator  <a href="https://launchpad.net/terminator" target="_blank" rel="noopener noreferrer">https://launchpad.net/terminator</a></p>
<p>Terminology  <a href="http://www.enlightenment.org/p.php?p=about/terminology" target="_blank" rel="noopener noreferrer">http://www.enlightenment.org/p.php?p=about/terminology</a></p>
<p>UXterm  <a href="http://manpages.ubuntu.com/manpages/gutsy/man1/uxterm.1.html" target="_blank" rel="noopener noreferrer">http://manpages.ubuntu.com/manpages/gutsy/man1/uxterm.1.html</a></p>
<p>Wterm  <a href="http://sourceforge.net/projects/wterm" target="_blank" rel="noopener noreferrer">http://sourceforge.net/projects/wterm</a></p>
<p>xterm  <a href="http://invisible-island.net/xterm" target="_blank" rel="noopener noreferrer">http://invisible-island.net/xterm</a></p>
<h3> shell 类型</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> shell 的父子关系-bash</h3>
<h4> 1、bash进程</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入命令 bash 之后，一个子shell就出现了。第二个 ps -f 是在子shell中执行的。可以从显示结果中看到有两个bash shell程序在运行。第一个bash shell程序，也就是父shell进程，其原始进程ID是 <em>1490</em> 。第二个bash shell程序，即子shell进程，其PID是 <em>12590</em>。注意，子shell的父进程ID（<code>PPID</code>）是 <em>1490</em> ，指明了这个父shell进程就是该子shell的父进程</p>
<figure><figcaption></figcaption></figure>
<p>在生成子shell进程时，只有部分父进程的环境被复制到子shell环境中。这会对包括变量在内的一些东西造成影响。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash 命令被输入了三次。这实际上创建了三个子shell。 <code>ps -forest</code> 命令展示了这些子shell间的嵌套结构。</p>
<figure><figcaption></figcaption></figure>
<p><strong>参数</strong></p>
<figure><figcaption></figcaption></figure>
<h4> 退出子进程</h4>
<p>exit</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、进程列表</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的第一个例子中，所有的命令依次执行，不存在任何问题。不过这并不是进程列表。</p>
<p>命令列表要想成为进程列表，这些命令必须包含在括号里。括号的加入使命令列表变成了进程列表，生成了一个子shell来执行对应的命令。</p>
<p>要想知道是否生成了子shell，得借助一个使用了环境变量的命令。这个命令就是 echo $BASH_SUBSHELL；<strong>如果该命令返回 0 ，就表明没有子shell。如果返回 1 或者其他更大的数字，就表明存在子shell</strong>。如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你甚至可以在命令列表中嵌套括号来创建子shell的子shell。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 3、后台模式</h4>
<p><code>sleep</code> 命令会在后台（ <code>&amp;</code> ）睡眠30秒。当它被置入后台。</p>
<p>使用 <code>jobs</code> 命令来显示后台作业信息。 jobs 命令可以显示出当前运行在后台模式中的所有用户的进程（作业）。使用<code>-l</code> 来显示进程的 PID。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>需要提醒的是：后台作业的结束状态可未必会一直等待到合适的时候才现身。当作业结束状态突然出现在屏幕上的时候，你可别吃惊啊。</p>
</blockquote>
<h4> 4、将进程列表置入后台</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把进程列表置入后台会产生一个作业号和进程ID，然后返回到提示符。不过奇怪的是表明单一级子shell的数字 1 显示在了提示符的旁边！不要不知所措，只需要按一下回车键，就会得到另一个提示符。</p>
<p>在CLI中运用子shell的创造性方法之一就是将进程列表置入后台模式。你既可以在子shell中进行繁重的处理工作，同时也不会让子shell的I/O受制于终端。</p>
<p>当然了， sleep 和 echo 命令的进程列表只是作为一个示例而已。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、协程 coproc</h4>
<p>协程可以同时做两件事。它在后台生成一个子shell，并在这个子shell中执行命令。</p>
<p>除了会创建子shell之外，<strong>协程基本上就是将命令置入后台模式</strong>。当输入 coproc 命令及其参数之后，你会发现启用了一个后台作业。屏幕上会显示出后台作业号（ 1 ）以及进程ID（ 43011）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命令的扩展语法自己设置这个名字。</p>
<hr>
<p><strong>说明：</strong> 协程能够让你尽情发挥想象力，发送或接收来自子shell中进程的信息。只有在拥有多个协程的时候才需要对协程进行命名，因为你得和它们进行通信。否则的话，让 coproc 命令将其设置成默认的名字 COPROC 就行了。</p>
<hr>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将协程与进程列表结合起来产生嵌套的子shell。只需要输入进程列表，然后把命令 coproc 放在前面就行了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>记住</strong>：生成子shell的成本不低，而且速度还慢。创建嵌套子shell更是火上浇油！
在命令行中使用子shell能够获得灵活性和便利。要想获得这些优势，重要的是理解子shell的行为方式。对于命令也是如此。</p>
<h3> 理解 shell 的内建命令</h3>
<p>内建命令和非内建命令的操作方式大不相同。</p>
<h4> 1、外部命令</h4>
<p>外部命令，有时候也被称为文件系统命令，是存在于bash shell之外的程序。它们并不是shell程序的一部分。外部命令程序通常位于<code>/bin</code>、<code>/usr/bin</code>、<code>/sbin</code>或<code>/usr/sbin</code>中。</p>
<p>ps 就是一个外部命令。你可以使用 which 和 type 命令找到它:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当外部命令执行时，会创建出一个子进程。这种操作被称为衍生（forking）。外部命令 ps 很方便显示出它的父进程以及自己所对应的衍生子进程。</p>
<p>作为外部命令， ps 命令执行时会创建出一个子进程。</p>
<figure><figcaption></figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当进程必须执行衍生操作时，它需要花费时间和精力来设置新子进程的环境。所以说，外部命令多少还是有代价的。</p>
<hr>
<p><strong>说明</strong> 就算衍生出子进程或是创建了子shell，你仍然可以通过发送信号与其沟通，这一点无论是在命令行还是在脚本编写中都是极其有用的。发送信号（signaling）使得进程间可以通过信号进行通信。</p>
<hr>
<h4> 2、内部命令</h4>
<p>内建命令不需要使用子进程来执行。它们已经和shell编译成了一体，作为shell工具的组成部分存在。不需要借助外部程序文件来运行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既不需要通过衍生出子进程来执行，也不需要打开程序文件，内建命令的<strong>执行速度要更快，效率也更高</strong>。</p>
<h3> linux 环境变量</h3>
<h4> 1、全局环境变量</h4>
<p>要查看全局变量，可以使用 env 或 printenv 命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要显示个别环境变量的值，可以使用 printenv 命令，但是不要用 env 命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2、局部环境变量</h4>
<p>局部环境变量只能在定义它们的进程中可见。</p>
<p>查看局部环境变量的列表有点复杂。遗憾的是，在Linux系统并没有一个只显示局部环境变量的命令。 set 命令会显示为某个特定进程设置的所有环境变量，包括局部变量、全局变量以及用户定义变量。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>说明</strong> 命令 <code>env</code> 、 <code>printenv</code> 和 <code>set</code> 之间的差异很细微。 <strong>set</strong> 命令会显示出全局变量、局部变量以及用户定义变量。它还会按照字母顺序对结果进行排序。 <strong>env</strong> 和 <strong>printenv</strong> 命令同 set 命令的区别在于前两个命令不会对变量排序，也不会输出局部变量和用户定义变量。在这种情况下， env 和 printenv 的输出是重复的。不过 env 命令有一个 printenv 没有的功能，这使得它要更有用一些。</p>
<hr>
<h4> 3、设置用户定义变量</h4>
<p>可以通过等号给环境变量赋值，值可以是数值或字符串。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非常简单！现在每次引用 my_variable  环境变量的值，只要通过 $my_variable 引用即可。
如果要给变量赋一个含有空格的字符串值，必须用单引号来界定字符串的首和尾。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有单引号的话，bash shell会以为下一个词是另一个要执行的命令。注意，你定义的局部环境变量用的是小写字母，而到目前为止你所看到的系统环境变量都是大写字母。</p>
<hr>
<p><strong>注意：</strong> 所有的环境变量名均使用大写字母，这是bash shell的标准惯例。如果是你自己创建的局部变量或是shell脚本，请使用小写字母。变量名区分大小写。在涉及用户定义的局部变量时坚持使用小写字母，这能够避免重新定义系统环境变量可能带来的灾难。</p>
<hr>
<p>设置了局部环境变量后，就能在shell进程的任何地方使用它了。但是，如果生成了另外一个shell，它在子shell中就不可用。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，如果你在子进程中设置了一个局部变量，那么一旦你退出了子进程，那个局部环境变量就不可用。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 4、设置全局环境变量 export</h4>
<p>创建全局环境变量的方法是先创建一个局部环境变量，然后再把它导出到全局环境中（<code>export</code>）。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义并导出局部环境变量 my_variable 后， bash 命令启动了一个子shell。在这个子shell中能够正确的显示出变量 my_variable 的值。该变量能够保留住它的值是因为 export 命令使其变成了全局环境变量。</p>
<p>修改子shell中全局环境变量并不会影响到父shell中该变量的值。这种改变只是在子进程中有效，并不会被反映到父shell中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 5、删除环境变量 unset</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你是在子进程中删除了一个全局环境变量，这只对子进程有效。该全局环境变量在父进程中依然可用。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>窍门</strong>   如果要用到变量，使用 $ ；如果要操作变量，不使用 $ 。这条规则的一
个例外就是使用 printenv 显示某个变量的值。</p>
<hr>
<h4> 6、默认的 shell 环境变量</h4>
<p>默认情况下，bash shell会用一些特定的环境变量来定义系统环境。这些变量在你的Linux系统上都已经设置好了，只管放心使用。bash shell源自当初的Unix Bourne shell，因此也保留了Unix Bourne shell里定义的那些环境变量。</p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了默认的Bourne的环境变量，bash shell还提供一些自有的变量</p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 7、设置 PATH 环境变量</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>窍门</strong> 如果希望子shell也能找到你的程序的位置，一定要记得把修改后的 PATH 环境变量导出。</p>
<hr>
<h4> 8、定位系统环境变量</h4>
<p><strong>登录 shell</strong></p>
<p>当你登录Linux系统时，bash shell会作为登录shell启动。登录shell会从5个不同的启动文件里
读取命令：</p>
<ul>
<li>/etc/profile</li>
<li>$HOME/.bash_profile</li>
<li>$HOME/.bashrc</li>
<li>$HOME/.bash_login</li>
<li>$HOME/.profile</li>
</ul>
<p>etc/profile文件是系统上默认的bash shell的主启动文件。系统上的每个用户登录时都会执行
这个启动文件。</p>
<p>HOME：提供一个用户专属的启动文件来定义该用户所用到的环境变量。</p>
<p>shell会按照按照下列顺序，运行第一个被找到的文件，余下的则被忽略：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这个列表中并没有$HOME/.bashrc文件。这是因为该文件通常通过其他文件运行的。</p>
<h4> 9、交互式 shell 进程</h4>
<p>如果bash是作为交互式shell启动的，它就不会访问/etc/profile文件，只会检查用户HOME目录中的.bashrc文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10、非交互式shell</h4>
<p>最后一种shell是非交互式shell。系统执行shell脚本时用的就是这种shell。不同的地方在于它没有命令行提示符。但是当你在系统上运行脚本时，也许希望能够运行一些特定启动的命令。</p>
<hr>
<p>窍门 脚本能以不同的方式执行。只有其中的某一些方式能够启动子shell</p>
<hr>
<p>为了处理这种情况，bash shell提供了 BASH_ENV 环境变量。当shell启动一个非交互式shell进程时，它会检查这个环境变量来查看要执行的启动文件。如果有指定的文件，shell会执行该文件里的命令，这通常包括shell脚本变量设置。</p>
<p>在CentOS Linux发行版中，这个环境变量在默认情况下并未设置。如果变量未设置， printenv 命令只会返回CLI提示符：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在Ubuntu发行版中，变量 BASH_ENV 也没有被设置。记住，如果变量未设置， echo 命令会显示一个空行，然后返回CLI提示符：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那如果 BASH_ENV 变量没有设置，shell脚本到哪里去获得它们的环境变量呢？别忘了有些shell脚本是通过启动一个子shell来执行的（参见第5章）。子shell可以继承父shell导出过的变量。</p>
<p>举例来说，如果父shell是登录shell，在/etc/profile、/etc/profile.d/ * .sh和$HOME/.bashrc文件中设置并导出了变量，用于执行脚本的子shell就能够继承这些变量。</p>
<p>要记住，由父shell设置但并未导出的变量都是局部变量。子shell无法继承局部变量。</p>
<p>对于那些不启动子shell的脚本，变量已经存在于当前shell中了。所以就算没有设置 BASH_ENV ，也可以使用当前shell的局部变量和全局变量</p>
<h4> 11、环境变量持久化</h4>
<p>对全局环境变量来说（Linux系统中所有用户都需要使用的变量），可能更倾向于将新的或修改过的变量设置放在<code>/etc/profile</code>文件中，但这可不是什么好主意。如果你升级了所用的发行版，这个文件也会跟着更新，那你所有定制过的变量设置可就都没有了。</p>
<p>最好是在/etc/profile.d目录中创建一个以.sh结尾的文件。把所有新的或修改过的全局环境变量设置放在这个文件中。</p>
<p>在大多数发行版中，存储个人用户永久性bash shell变量的地方是 HOME/.bashrc文件。这一点适用于所有类型的shell进程。但如果设置了 BASH_ENV 变量，那么记住，除非它指向的是 HOME/.bashrc，否则你应该将非交互式shell的用户变量放在别的地方。</p>
<h4> 12、数组变量</h4>
<p>要给某个环境变量设置多个值，可以把值放在括号里，值与值之间用空格分隔。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 用户及组权限</h3>
<h4> /etc/passwd</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>登录用户名</li>
<li>用户密</li>
<li>用户账户的UID（数字形式）</li>
<li>用户账户的组ID（GID）（数字形式）</li>
<li>用户账户的文本描述（称为备注字段）</li>
<li>用户HOME目录的位置</li>
<li>用户的默认shell</li>
</ul>
<h4> /etc/shadow</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>与/etc/passwd文件中的登录名字段对应的登录名</li>
<li>加密后的密码</li>
<li>自上次修改密码后过去的天数密码（自1970年1月1日开始计算）</li>
<li>多少天后才能更改密码</li>
<li>多少天后必须更改密码</li>
<li>密码过期前提前多少天提醒用户更改密码</li>
<li>密码过期后多少天禁用用户账户</li>
<li>用户账户被禁用的日期（用自1970年1月1日到当天的天数表示）</li>
<li>预留字段给将来使用</li>
</ul>
<h4> /etc/group</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>组名</li>
<li>组密码</li>
<li>GID</li>
<li>属于该组的用户列表</li>
</ul>
<p><strong>千万不能通过直接修改/etc/group文件来添加用户到一个组，要用 usermod 命令</strong></p>
<p>需要参考基础知识：</p>
<ul>
<li><a href="/linux/basis/basis.html#%E7%94%A8%E6%88%B7%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86" target="blank">参考：用户及权限管理</a></li>
<li><a href="/linux/basis/basis.html#%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86" target="blank">参考：目录文件管理</a></li>
<li><a href="/linux/basis/basis.html#%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86" target="blank">参考：磁盘管理</a></li>
<li>等等</li>
</ul>
<h2> shell 脚本编程基础</h2>
<h3> 构建基本脚本</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> expr 命令操作符</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 使用方括号</h4>
<p>可以用美元符和方括号（ $[ operation ] ）将数学表达式围起来；</p>
<p>用方括号执行shell数学运算比用 expr 命令方便很多。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 浮点解决方案</h4>
<p>格式：variable=$(echo "options; expression" | bc)</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 退出脚本</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Linux退出状态码</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以改变这种默认行为，返回自己的退出状态码。 exit 命令允许你在脚本结束时指定一个退出状态码。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用结构化命令</h3>
<h4> 使用 if-then 语句和 else</h4>
<p>格式</p>
<blockquote>
<p>if  command
then
commands
fi</p>
<p>if  command; then
commands
else
commands
fi</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 嵌套 if 语句</h4>
<blockquote>
<p>if  command1; then</p>
<p>​ commands</p>
<p>elif  command2; then</p>
<p>​ more  commands</p>
<p>elif  command3; then</p>
<p>​ more  commands</p>
<p>[....]</p>
<p>fi</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> test 命令</h4>
<blockquote>
<p>if test condition; then</p>
<p>​ commands</p>
<p>fi</p>
</blockquote>
<p>如果不写 test 命令的 condition 部分，它会以非零的退出状态码退出，并执行 else 语句块。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash shell提供了另一种条件测试方法，无需在 if-then 语句中声明 test 命令:</p>
<blockquote>
<p>if [  condition ] ; then</p>
<p>​ commands</p>
<p>fi</p>
</blockquote>
<p>test 命令可以判断三类条件：</p>
<ul>
<li>
<ul>
<li>数值比较</li>
</ul>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<ul>
<li>字符串比较</li>
</ul>
</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<ul>
<li>文件比较</li>
</ul>
</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<ul>
<li>复合条件测试</li>
</ul>
<p>if-then 语句允许你使用布尔逻辑来组合测试。有两种布尔运算符可用：</p>
<ul>
<li>[ condition1 ] &amp;&amp; [ condition2 ]</li>
<li>[ condition1 ] || [ condition2 ]</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<ul>
<li>使用双方括号和双括号</li>
</ul>
<p><strong>双括号</strong>命令允许你在比较过程中使用高级数学表达式。 test 命令只能在比较中使用简单的算术操作。双括号命令提供了更多的数学符号，这些符号对于用过其他编程语言的程序员而言并不陌生。</p>
<p><code>(( expression ))</code></p>
<p>expression 可以是任意的数学赋值或比较表达式。除了 test 命令使用的标准数学运算符</p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双方括号</strong>命令提供了针对字符串比较的高级特性。双方括号命令的格式如下：</p>
<p>[[ expression ]]</p>
<hr>
<p><strong>说明</strong> 双方括号在bash shell中工作良好。不过要小心，不是所有的shell都支持双方括号</p>
<hr>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<ul>
<li>case 命令</li>
</ul>
<p>在模式匹配中，可以定义一个正则表达式来匹配字符串值</p>
<blockquote>
<p>case  variable in</p>
<p>pattern1 |  pattern2 )</p>
<p>​ commands1 ;;</p>
<p>pattern3 )</p>
<p>​ commands2 ;;</p>
<p>*)  default commands ;;</p>
<p>esac</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 更多的结构化命令</h3>
<h4> for</h4>
<blockquote>
<p>for var in list
do
commands
done</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> while</h4>
<blockquote>
<p>while test command
do
other commands
done</p>
</blockquote>
<p>while 命令中定义的 test command 和 if-then 语句中的格式一模一样。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>while 循环会在 var1 变量等于 0 时执行 echo 语句，然后将 var1 变量的值减一。接下来再次执行测试命令，用于下一次迭代。 echo 测试命令被执行并显示了 var 变量的值（现在小于 0 了）。直到shell执行 test 测试命令， whle 循环才会停止。</p>
<p>这说明在含有多个命令的 while 语句中，在每次迭代中所有的测试命令都会被执行，包括测试命令失败的最后一次迭代。要留心这种用法。另一处要留意的是该如何指定多个测试命令。</p>
<p><strong>注意</strong>：每个测试命令都出现在单独的一行上。</p>
<h4> until</h4>
<p>until 命令和 while 命令工作的方式完全相反。 until 命令要求你指定一个通常返回非零退出状态码的测试命令。只有测试命令的退出状态码不为 0 ，bash shell才会执行循环中列出的命令。一旦测试命令返回了退出状态码 0 ，循环就结束了。</p>
<blockquote>
<p>until test commands
do</p>
<p>​ other commands
done</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 嵌套循环</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 循环处理文件数据</h4>
<p>通常必须遍历存储在文件中的数据。这要求结合已经讲过的两种技术：</p>
<ul>
<li>使用嵌套循环</li>
<li>修改 IFS 环境变量</li>
</ul>
<p>通过修改 IFS 环境变量，就能强制 for 命令将文件中的每行都当成单独的一个条目来处理，即便数据中有空格也是如此。一旦从文件中提取出了单独的行，可能需要再次利用循环来提取行中的数据。</p>
<p>典型的例子是处理/etc/passwd文件中的数据。这要求你逐行遍历/etc/passwd文件，并将 IFS变量的值改成冒号，这样就能分隔开每行中的各个数据段了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本使用了两个不同的 IFS 值来解析数据。第一个 IFS 值解析出/etc/passwd文件中的单独的行。内部 for 循环接着将 IFS 的值修改为冒号，允许你从/etc/passwd的行中解析出单独的值。</p>
<p>在运行这个脚本时，你会得到如下输出。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部循环会解析出/etc/passwd每行中的各个值。这种方法在处理外部导入电子表格所采用的逗号分隔的数据时也很方便。</p>
<h4> 控制循环</h4>
<ul>
<li>break  退出任意类型的循环，包括 <code>while</code> 和 <code>until</code> 循环</li>
<li>
<ul>
<li>跳出单个循环</li>
</ul>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>跳出内部循环</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>跳出外部循环 break n</p>
<p>其中 n 指定了要跳出的循环层级。默认情况下， n 为 1 ，表明跳出的是当前的循环。如果你将n 设为 2 ， break 命令就会停止下一级的外部循环。</p>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>continue</li>
</ul>
<p>可以提前中止某次循环中的命令，但并不会完全终止整个循环。可以在循环内部设置shell不执行命令的条件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 if-then 语句的条件被满足时（值大于5且小于10），shell会执行 continue 命令，跳过此次循环中剩余的命令，但整个循环还会继续。当 if-then 的条件不再被满足时，一切又回到正轨。</p>
<p>也可以在 while 和 until 循环中使用 continue 命令，但要特别小心。当shell执行 continue 命令时，它会跳过剩余的命令。如果你在其中某个条件里对测试条件变量进行增值，问题就会出。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 if-then 的条件成立之前，所有一切看起来都很正常，然后shell执行了 continue 命令。当shell执行 continue 命令时，它跳过了 while 循环中余下的命令。不幸的是，被跳过的部分正是 $var1 计数变量增值的地方，而这个变量又被用于 while 测试命令中。这意味着这个变量的值不会再变化了，从前面连续的输出显示中你也可以看出来。</p>
<p>和 break 命令一样， continue 命令也允许通过命令行参数指定要继续执行哪一级循环：</p>
<p>continue n</p>
<p>其中 n 定义了要继续的循环层级。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处用 continue 命令来停止处理循环内的命令，但会继续处理外部循环。注意，值为 3 的那次迭代并没有处理任何内部循环语句，因为尽管 continue 命令停止了处理过程，但外部循环依然会继续。</p>
<h4> 重定向循环的输出</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将循环的结果管接给另一个命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 综合实例</h4>
<ul>
<li>查找可执行文件</li>
</ul>
<p>首先是创建一个 for 循环，对环境变量 PATH 中的目录进行迭代。处理的时候别忘了设置 IFS 分隔符。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你已经将各个目录存放在了变量 $folder 中，可以使用另一个 for 循环来迭代特定目录中的所有文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一步是检查各个文件是否具有可执行权限，你可以使用 if-then 测试功能来实现。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，搞定了！将这些代码片段组合成脚本就行了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这段代码时，你会得到一个可以在命令行中使用的可执行文件的列表。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>创建多个用户账户</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 处理用户输入</h3>
<h4> 传递与读取参数 $n</h4>
<p>sh <a href="http://demo.sh" target="_blank" rel="noopener noreferrer">demo.sh</a> xiaoyu 20</p>
<p>在脚本内通过 `$n` 来获取参数（ $0 是程序名，$1 是第一个参数， $2 是第二个参数，依次类推，直到第九个参数 $9 ）。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p 10="">如果脚本需要的命令行参数不止9个，你仍然可以处理，但是需要稍微修改一下变量名。在第9个变量之后，你必须在变量数字周围加上花括号，比如 $</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种写法是不可取的</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 跟踪参数 $# $* $@</h4>
<h5>参数统计</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>抓取所有的数据</h5>
<p>$* 和 $@ 变量可以用来轻松访问所有的参数。</p>
<p>$* 所有参数当作一个单词保存</p>
<p>$@ 所有参数当作同一字符串中的多个独立的单词，通常通过 for 命令得到每个参数</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用 for 命令遍历这两个特殊变量，你能看到它们是如何不同地处理命令行参数的。 $* 变量会将所有参数当成单个参数，而 $@ 变量会单独处理每个参数。这是遍历命令行参数的一个绝妙方法。</p>
<h4> 移动变量</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本通过测试第一个参数值的长度执行了一个 while 循环。当第一个参数的长度为零时，循环结束。测试完第一个参数后， shift 命令会将所有参数的位置移动一个位置。</p>
<hr>
<p><strong>窍门</strong> 使用 shift 命令的时候要小心。如果某个参数被移出，它的值就被丢弃了，无法再恢复。</p>
<hr>
<h4> 处理选项</h4>
<h5>处理简单选项</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>分离参数和选项</h5>
<p>对Linux来说，这个特殊字符是双破折线（ -- ）。shell会用双破折线来表明选项列表结束。在双破折线之后，脚本就可以放心地将剩下的命令行参数当作参数，而不是选项来处理了。</p>
<p>要检查双破折线，只要在 case 语句中加一项就行了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在遇到双破折线时，脚本用 break 命令来跳出 while 循环。由于过早地跳出了循环，我们需要再加一条 shift 命令来将双破折线移出参数变量。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当脚本遇到双破折线时，它会停止处理选项，并将剩下的参数都当作命令行参数。</p>
<h5>处理带值的选项</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中， case 语句定义了三个它要处理的选项。 -b 选项还需要一个额外的参数值。由于要处理的参数是 $1 ，额外的参数值就应该位于 $2 （因为所有的参数在处理完之后都会被移出）。只要将参数值从 $2 变量中提取出来就可以了。当然，因为这个选项占用了两个参数位，所以你还需要使用 shift 命令多移动一个位置。</p>
<p>只用这些基本的特性，整个过程就能正常工作，不管按什么顺序放置选项（但要记住包含每个选项相应的选项参数）。</p>
<p>现在shell脚本中已经有了处理命令行选项的基本能力，但还有一些限制。比如，如果你想将
多个选项放进一个参数中时，它就不能工作了。</p>
<blockquote>
<p>sh <a href="http://test.sh" target="_blank" rel="noopener noreferrer">test.sh</a> -ac</p>
</blockquote>
<h5>getopt</h5>
<p>它能够识别命令行参数，从而在脚本中解析它们时更方便。</p>
<blockquote>
<p>getopt optstring parameters</p>
<p>optstring 是这个过程的关键所在。它定义了命令行有效的选项字母，还定义了哪些选项字母需要参数值。
首先，在 optstring 中列出你要在脚本中用到的每个命令行选项字母。然后，在每个需要参数值的选项字母后加一个冒号。 getopt 命令会基于你定义的 optstring 解析提供的参数。</p>
</blockquote>
<p>简单例子:</p>
<blockquote>
<p>如果指定了一个不在 optstring 中的选项，默认情况下， getopt 命令会产生一条错误消息。</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意 ： getopt 命令选项必须出现在 optstring 之前。</p>
</blockquote>
<p><strong>在脚本中使用</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getopt 命令并不擅长处理带空格和引号的参数值。它会将空格当作参数分隔符，而不是根据双引号将二者当作一个参数。幸而还有另外一个办法能解决这个问题 <strong>（使用更高级的 getopts）</strong> 。</p>
<h5>getopts</h5>
<p>getopt会将命令行上选项和参数处理后只生成一个输出，而 getopts 命令能够和已有的shell参数变量配合默契。</p>
<p>每次调用它时，它一次只处理命令行上检测到的一个参数。处理完所有的参数后，它会退出并返回一个大于0的退出状态码。这让它非常适合用解析命令行所有参数的循环中。</p>
<p>getopts 命令的格式如下：</p>
<p><code>getopts optstring variable</code></p>
<p>optstring 值类似于 getopt 命令中的那个。有效的选项字母都会列在 optstring 中，如果选项字母要求有个参数值，就加一个冒号。要去掉错误消息的话，可以在 optstring 之前加一个冒号。 getopts 命令将当前参数保存在命令行中定义的 variable 中。</p>
<p>getopts 命令会用到两个环境变量。如果选项需要跟一个参数值， OPTARG 环境变量就会保存这个值。 OPTIND 环境变量保存了参数列表中 getopts 正在处理的参数位置。这样你就能在处理完选项之后继续处理其他命令行参数了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特性：</strong></p>
<ul>
<li>可以在参数值中包含空格</li>
<li>将选项字母和参数值放在一起使用，而不用加空格</li>
<li>将命令行上找到的所有未定义的选项统一输出成问号</li>
<li>知道何时停止处理选项，并将参数留给你处理</li>
</ul>
<p>在 getopts 处理每个选项时，它会将 OPTIND 环境变量值增一。在 getopts 完成处理时，你可以使用 shift 命令和 OPTIND 值来移动参数。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 将选项标准化</h4>
<p>在创建shell脚本时，显然可以控制具体怎么做。你完全可以决定用哪些字母选项以及它们的
用法。</p>
<p>但有些字母选项在Linux世界里已经拥有了某种程度的标准含义。如果你能在shell脚本中支
持这些选项，脚本看起来能更友好一些：</p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 获得用户输入 read</h4>
<p>尽管命令行选项和参数是从脚本用户处获得输入的一种重要方式，但有时脚本的交互性还需要更强一些。比如你想要在脚本运行时问个问题，并等待运行脚本的人来回答</p>
<h5>基本的读取 read -p</h5>
<p>read 命令从标准输入（键盘）或另一个文件描述符中接受输入。在收到输入后， read 命令
会将数据放进一个变量。下面是 read 命令的最简单用法。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>read 命令包含了 -p 选项，允许你直接在 read 命令行指定提示符</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在 read 命令行中不指定变量。如果是这样， read 命令会将它收到的任何数据都放进特殊环境变量 REPLY 中</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>REPLY 环境变量会保存输入的所有数据，可以在shell脚本中像其他变量一样使用</p>
<h5>超时 read -t</h5>
<p>使用 read 命令时要当心。脚本很可能会一直苦等着脚本用户的输入。如果不管是否有数据输入，脚本都必须继续执行，你可以用 -t 选项来指定一个计时器。 -t 选项指定了 read 命令等待输入的秒数。当计时器过期后， read 命令会返回一个非零退出状态码。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果计时器过期， read 命令会以非零退出状态码退出。</p>
<p>当输入的字符达到预设的字符数时，就自动退出，将输入的数据赋给变量：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-n 选项和值 1 一起使用，告诉 read 命令在接受单个字符后退出。</p>
<h5>隐藏方式读取 read -s</h5>
<p>有时你需要从脚本用户处得到输入，但又在屏幕上显示输入信息。其中典型的例子就是输入的密码，但除此之外还有很多其他需要隐藏的数据类型。</p>
<p>-s 选项可以避免在 read 命令中输入的数据出现在显示器上（实际上，数据会被显示，只是 read 命令会将文本颜色设成跟背景色一样）。这里有个在脚本中使用 -s 选项的例子。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>从文件中读取</h5>
<p>也可以用 read 命令来读取Linux系统上文件里保存的数据。每次调用 read 命令，它都会从文件中读取一行文本。当文件中再没有内容时， read 命令会退出并返回非零退出状态码。</p>
<p>其中最难的部分是将文件中的数据传给 read 命令。最常见的方法是对文件使用 cat 命令，将结果通过管道直接传给含有 read 命令的 while 命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 呈现数据</h3>
<h4> 输入和输出</h4>
<p><strong>标准文件描述符</strong></p>
<p>Linux系统将每个对象当作文件处理。这包括输入和输出进程。Linux用文件描述符（ filedescriptor ）来标识每个文件对象。文件描述符是一个非负整数，可以唯一标识会话中打开的文件。每个进程一次最多可以有九个文件描述符。出于特殊目的，bash shell保留了前三个文件描述符（ 0 、 1 和 2 ）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>STDIN</li>
</ul>
<p>对终端界面来说，标准输入是键盘。shell从 STDIN 文件描述符对应的键盘获得输入，在用户输入时处理每个字符。
在使用输入重定向符号（ &lt; ）时，Linux会用重定向指定的文件来替换标准输入文件描述符。它会读取文件并提取数据，就如同它是键盘上键入的。许多bash命令能接受 STDIN 的输入，尤其是没有在命令行上指定文件的话。下面是个用 cat 命令处理 STDIN 输入的数据的例子。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在命令行上只输入 cat 命令时，它会从 STDIN 接受输入。输入一行， cat 命令就会显示出一行。</p>
<p>但你也可以通过 STDIN 重定向符号强制 cat 命令接受来自另一个非 STDIN 文件的输入。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 cat 命令会用testfile文件中的行作为输入。你可以使用这种技术将数据输入到任何能从STDIN 接受数据的shell命令中。</p>
<ul>
<li>STDOUT</li>
</ul>
<p>STDOUT 文件描述符代表shell的标准输出。在终端界面上，标准输出就是终端显示器。shell的所有输出（包括shell中运行的程序和脚本）会被定向到标准输出中，也就是显示器。</p>
<p>默认情况下，大多数bash命令会将输出导向 STDOUT 文件描述符。如第11章中所述，你可以用输出重定向来改变。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>who 命令生成的输出会被追加到test2文件中已有数据的后面。</p>
<p>但是，如果你对脚本使用了标准输出重定向，你会遇到一个问题。下面的例子说明了可能会出现什么情况。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当命令生成错误消息时，shell并未将错误消息重定向到输出重定向文件。shell创建了输出重定向文件，但错误消息却显示在了显示器屏幕上。注意，在显示test3文件的内容时并没有任何错误。test3文件创建成功了，只是里面是空的。</p>
<p>shell对于错误消息的处理是跟普通输出分开的。如果你创建了在后台模式下运行的shell脚本，通常你必须依赖发送到日志文件的输出消息。用这种方法的话，如果出现了错误信息，这些信息是不会出现在日志文件中的。你需要换种方法来处理。</p>
<ul>
<li>STDERR</li>
</ul>
<p>shell通过特殊的 STDERR 文件描述符来处理错误消息。 STDERR 文件描述符代表shell的标准错误输出。shell或shell中运行的程序和脚本出错时生成的错误消息都会发送到这个位置。</p>
<p>默认情况下， STDERR 文件描述符会和 STDOUT 文件描述符指向同样的地方（尽管分配给它们的文件描述符值不同）。也就是说，默认情况下，错误消息也会输出到显示器输出中。</p>
<p>但从上面的例子可以看出， STDERR 并不会随着 STDOUT 的重定向而发生改变。使用脚本时，你常常会想改变这种行为，尤其是当你希望将错误消息保存到日志文件中的时候。</p>
<p><strong>重定向错误</strong></p>
<p>你已经知道如何用重定向符号来重定向 STDOUT 数据。重定向 STDERR 数据也没太大差别，只要在使用重定向符号时定义 STDERR 文件描述符就可以了。有几种办法实现方法。</p>
<ul>
<li>只重定向错误</li>
</ul>
<p>STDERR 文件描述符被设成 2 。可以选择只重定向错误消息，将该文件描述符值放在重定向符号前。该值必须紧紧地放在重定向符号前，否则不会工作。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行该命令，错误消息不会出现在屏幕上了。该命令生成的任何错误消息都会保存在输出文件中。用这种方法，shell会只重定向错误消息，而非普通数据。这里是另一个将 STDOUT 和 STDERR 消息混杂在同一输出中的例子</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>重定向错误和数据</li>
</ul>
<p>如果想重定向错误和正常输出，必须用两个重定向符号。需要在符号前面放上待重定向数据所对应的文件描述符，然后指向用于保存数据的输出文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>可以用这种方法将脚本的正常输出和脚本生成的错误消息分离开来。这样就可以轻松地识别出错误信息，再不用在成千上万行正常输出数据中翻腾了。</p>
</blockquote>
<p>如果愿意，也可以将 STDERR 和 STDOUT 的输出重定向到同一个输出文件。为此bash shell提供了特殊的重定向符号 &amp;&gt; 。当使用 &amp;&gt; 符时，命令生成的所有输出都会发送到同一位置，包括数据和错误。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 在脚本中重定向输出输入</h4>
<p><strong>重定向输出</strong></p>
<h5>临时重定向行输出</h5>
<p>在重定向到文件描述符时，你必须在文件描述符数字之前加一个 &amp; ：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，Linux会将 STDERR 导向 STDOUT 。但是，如果你在运行脚本时重定向了STDERR ，脚本中所有导向 STDERR 的文本都会被重定向。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法非常适合在脚本中生成错误消息。如果有人用了你的脚本，他们可以像上面的例子中那样轻松地通过 STDERR 文件描述符重定向错误消息</p>
<h5>永久重定向脚本中的所有命令 exec</h5>
<p>如果脚本中有大量数据需要重定向，那重定向每个 echo 语句就会很烦琐。取而代之，你可以用 exec 命令告诉shell在脚本执行期间重定向某个特定文件描述符。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在脚本执行过程中重定向 STDOUT 。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重定向输入</strong></p>
<blockquote>
<p>exec 0&lt; testfile</p>
</blockquote>
<p>这个命令会告诉shell它应该从文件 testfile 中获得输入，而不是 STDIN 。这个重定向只要在脚本需要输入时就会作用。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 创建自己的重定向</h4>
<p><strong>创建输出文件描述符</strong></p>
<p>可以用 exec 命令来给输出分配文件描述符。和标准的文件描述符一样，一旦将另一个文件描述符分配给一个文件，这个重定向就会一直有效，直到你重新分配。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本用 exec 命令将文件描述符 3 重定向到另一个文件。当脚本执行 echo 语句时，输出内容会像预想中那样显示在 STDOUT 上。但你重定向到文件描述符 3 的那行 echo 语句的输出却进入了另一个文件。这样你就可以在显示器上保持正常的输出，而将特定信息重定向到文件中（比如日志文件）。</p>
<p><strong>重定向文件描述符</strong></p>
<p>现在介绍怎么恢复已重定向的文件描述符。你可以分配另外一个文件描述符给标准文件描述
符，反之亦然。这意味着你可以将 STDOUT 的原来位置重定向到另一个文件描述符，然后再利用
该文件描述符重定向回 STDOUT 。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，脚本将文件描述符 3 重定向到文件描述符1的当前位置，也就是 STDOUT 。这意味着任何发送给文件描述符 3 的输出都将出现在显示器上。</p>
<p>第二个 exec 命令将 STDOUT 重定向到文件，shell现在会将发送给 STDOUT 的输出直接重定向到输出文件中。但是，文件描述符 3 仍然指向 STDOUT 原来的位置，也就是显示器。如果此时将输出数据发送给文件描述符 3 ，它仍然会出现在显示器上，尽管 STDOUT 已经被重定向了。</p>
<p>在向 STDOUT （现在指向一个文件）发送一些输出之后，脚本将 STDOUT 重定向到文件描述符 3 的当前位置（现在仍然是显示器）。这意味着现在 STDOUT 又指向了它原来的位置：显示器。</p>
<p>这个方法可能有点叫人困惑，但这是一种在脚本中临时重定向输出，然后恢复默认输出设置的常用方法。</p>
<p><strong>创建输入文件描述符</strong></p>
<p>可以用和重定向输出文件描述符同样的办法重定向输入文件描述符。在重定向到文件之前，先将 STDIN 文件描述符保存到另外一个文件描述符，然后在读取完文件之后再将 STDIN 恢复到它原来的位置。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，文件描述符 6 用来保存 STDIN 的位置。然后脚本将 STDIN 重定向到一个文件。read 命令的所有输入都来自重定向后的 STDIN （也就是输入文件）。</p>
<p>在读取了所有行之后，脚本会将 STDIN 重定向到文件描述符 6 ，从而将 STDIN 恢复到原先的位置。该脚本用了另外一个 read 命令来测试 STDIN 是否恢复正常了。这次它会等待键盘的输入。</p>
<p><strong>创建读写文件描述符</strong></p>
<p>尽管看起来可能会很奇怪，但是你也可以打开单个文件描述符来作为输入和输出。可以用同一个文件描述符对同一个文件进行读写。</p>
<p>不过用这种方法时，你要特别小心。由于你是对同一个文件进行数据读写，shell会维护一个内部指针，指明在文件中的当前位置。任何读或写都会从文件指针上次的位置开始。如果不够小心，它会产生一些令人瞠目的结果。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>这个例子用了 exec 命令将文件描述符 3 分配给文件 testfile 以进行文件读写。接下来，它通过分配好的文件描述符，使用 read 命令读取文件中的第一行，然后将这一行显示在 STDOUT 上。最后，它用 echo 语句将一行数据写入由同一个文件描述符打开的文件中。</p>
</blockquote>
<p>在运行脚本时，一开始还算正常。输出内容表明脚本读取了testfile文件中的第一行。但如果你在脚本运行完毕后，查看testfile文件内容的话，你会发现写入文件中的数据覆盖了已有的数据。</p>
<p>当脚本向文件中写入数据时，它会从文件指针所处的位置开始。 read 命令读取了第一行数据，所以它使得文件指针指向了第二行数据的第一个字符。在 echo 语句将数据输出到文件时，它会将数据放在文件指针的当前位置，覆盖了该位置的已有数据。</p>
<p><strong>关闭文件描述符</strong></p>
<p>如果你创建了新的输入或输出文件描述符，shell会在脚本退出时自动关闭它们。然而在有些情况下，你需要在脚本结束前手动关闭文件描述符。</p>
<p>要关闭文件描述符，将它重定向到特殊符号 &amp;- 。</p>
<p>exec 3&gt;&amp;-
该语句会关闭文件描述符 3 ，不再在脚本中使用它。这里有个例子来说明当你尝试使用已关闭的文件描述符时会怎样。一旦关闭了文件描述符，就不能在脚本中向它写入任何数据，否则shell会生成错误消息。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在关闭文件描述符时还要注意另一件事。如果随后你在脚本中打开了同一个输出文件，shell 会用一个新文件来替换已有文件。这意味着如果你输出数据，它就会覆盖已有文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在向test17file文件发送一个数据字符串并关闭该文件描述符之后，脚本用了 cat 命令来显示文件的内容。到目前为止，一切都还好。下一步，脚本重新打开了该输出文件并向它发送了另一个数据字符串。当显示该输出文件的内容时，你所能看到的只有第二个数据字符串。shell覆盖了原来的输出文件。</p>
</blockquote>
<h4> 列出打开的文件描述符 lsof</h4>
<p>该命令会产生大量的输出。它会显示当前Linux系统上打开的每个文件的有关信息。这包括后台运行的所有进程以及登录到系统的任何用户。有大量的命令行选项和参数可以用来帮助过滤 lsof 的输出。最常用的有 -p 和 -d ，前者允许指定进程ID（PID），后者允许指定要显示的文件描述符编号。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>COMMAND  正在运行的命令名的前9个字符</li>
<li>PID  进程的PID</li>
<li>USER  进程属主的登录名</li>
<li>FD  文件描述符号以及访问类型（ r 代表读， w 代表写， u 代表读写）</li>
<li>TYPE  文件的类型（ CHR 代表字符型， BLK 代表块型， DIR 代表目录， REG 代表常规文件）</li>
<li>DEVICE  设备的设备号（主设备号和从设备号）</li>
<li>SIZE  如果有的话，表示文件的大小</li>
<li>NODE  本地文件的节点号</li>
<li>NAME  文件名</li>
</ul>
<p>与 STDIN 、 STDOUT 和 STDERR 关联的文件类型是字符型。因为 STDIN 、 STDOUT 和 STDERR 文件描述符都指向终端，所以输出文件的名称就是终端的设备名。所有3种标准文件都支持读和写（尽管向 STDIN 写数据以及从 STDOUT 读数据看起来有点奇怪）。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 阻止命令输出</h4>
<p>有时候，你可能不想显示脚本的输出。这在将脚本作为后台进程运行时很常见。如果在运行在后台的脚本出现错误消息，shell会通过电子邮件将它们发给进程的属主。这会很麻烦，尤其是当运行会生成很多烦琐的小错误的脚本时。</p>
<p>要解决这个问题，可以将 STDERR 重定向到一个叫作null文件的特殊文件。null文件跟它的名字很像，文件里什么都没有。shell输出到null文件的任何数据都不会保存，全部都被丢掉了。</p>
<p>在Linux系统上null文件的标准位置是/dev/null。你重定向到该位置的任何数据都会被丢掉，不会显示。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 创建临时文件</h4>
<p><strong>创建本地临时文件</strong></p>
<p>模板可以包含任意文本文件名，在文件名末尾加上6个 X 就行了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>mktemp 命令来创建临时文件并将文件名赋给 $tempfile 变量。接着将这个临时文件作为文件描述符 3 的输出重定向文件。在将临时文件名显示在 STDOUT 之后，向临时文件中写入了几行文本，然后关闭了文件描述符。最后，显示出临时文件的内容，并用 rm 命令将其删除。</p>
</blockquote>
<p><strong>在/tmp 目录创建临时文件</strong></p>
<p>-t 选项会强制 mktemp 命令来在系统的临时目录来创建该文件。在用这个特性时， mktemp 命令会返回用来创建临时文件的全路径，而不是只有文件名。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 mktemp 命令返回了全路径名，你可以在Linux系统上的任何目录下引用该临时文件，不管临时目录在哪里。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建临时目录</strong></p>
<p>-d 选项告诉 mktemp 命令来创建一个临时目录而不是临时文件。这样你就能用该目录进行任何需要的操作了，比如创建其他的临时文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 记录消息</h4>
<p>将输出同时发送到显示器和日志文件，这种做法有时候能够派上用场。你不用将输出重定向两次，只要用特殊的 tee 命令就行。</p>
<p>tee 命令相当于管道的一个T型接头。它将从 STDIN 过来的数据同时发往两处。一处是STDOUT ，另一处是 tee 命令行所指定的文件名：</p>
<p>tee filename</p>
<p>由于 tee 会重定向来自 STDIN 的数据，你可以用它配合管道命令来重定向命令输出</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，默认情况下， tee 命令会在每次使用时覆盖输出文件内容，如果你想将数据追加到文件中，必须用 -a 选项</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用这个方法，既能将数据保存在文件中，也能将数据显示在屏幕上</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 综合实例</h4>
<p>这个样例脚本两件事都做了。它读取.csv 格式的数据文件，输出SQL  INSERT 语句来将数据插入数据库。</p>
<p>使用命令行参数指定待读取的.csv文件。.csv格式用于从电子表格中导出数据，所以你可以把数据库数据放入电子表格中，把电子表格保存成.csv格式，读取文件，然后创建 INSERT 语句将数据插入MySQL数据库。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 控制脚本</h3>
<h4> 处理信号</h4>
<h5>信号</h5>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>sleep((生成信号:中断、暂停进程)、</h5>
<p>sleep 100;</p>
<h5>kill(结束进程)</h5>
<p>kill -9 2152</p>
<h5>trap(捕获信号)</h5>
<blockquote>
<p>trap commands signals</p>
</blockquote>
<p>展示了如何使用 trap 命令来忽略 SIGINT 信号</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>捕获脚本退出</h5>
<p>除了在shell脚本中捕获信号，你也可以在shell脚本退出时进行捕获。这是在shell完成任务时执行命令的一种简便方法。</p>
<p>要捕获shell脚本的退出，只要在 trap 命令后加上 EXIT 信号就行。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>修改或移除捕获</h5>
<p>要想在脚本中的不同位置进行不同的捕获处理，只需重新使用带有新选项的 trap 命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改了信号捕获之后，脚本处理信号的方式就会发生变化。但如果一个信号是在捕获被修改前接收到的，那么脚本仍然会根据最初的 trap 命令进行处理。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以删除已设置好的捕获。只需要在 trap 命令与希望恢复默认行为的信号列表之间加上两个破折号就行了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>移除信号捕获后，脚本按照默认行为来处理 SIGINT 信号，也就是终止脚本运行。但如果信号是在捕获被移除前接收到的，那么脚本会按照原先 trap 命令中的设置进行处理。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 后台模式 &amp;</h4>
<p>当 &amp; 符放到命令后时，它会将命令和bash shell分离开来，将命令作为系统中的一个独立的后台进程运行。</p>
<p>后台运行脚本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在非控制台下运行脚本（在退出终端会话时阻止进程退出）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 作业控制 jobs</h4>
<p><strong>查看作业</strong></p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带加号<code>+</code>的作业会被当做默认作业。带减号<code>-</code>的作业成为下一个默认作业。</p>
<p>下面例子说明了队列中的下一个作业在默认作业移除时是如何成为默认作业的。有3个独立的进程在后台被启动。 jobs 命令显示出了这些进程、进程的PID及其状态。注意，默认进程（带有加号的那个）是最后启动的那个进程，也就是3号作业。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重启停止的作业</strong></p>
<p>要以后台模式重启一个作业，可用 bg n 命令加上作业号。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令 bg 2 用于将第二个作业置于后台模式。注意，当使用 jobs 命令时，它列出了作业及其状态，即便是默认作业当前并未处于后台模式。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要以前台模式重启作业，可用带有作业号的 fg 命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 调整谦让度 nice</h4>
<p>调度优先级是个整数值，从 -20（最高优先级）到+19（最低优先级）。默认情况下，bash shell
以优先级0来启动所有进程</p>
<p>nice 命令允许你设置命令启动时的调度优先级。要让命令以更低的优先级运行，只要用 nice 的 -n 命令行来指定新的优先级级别。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nice 命令会阻止普通系统用户来提高命令的优先级</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nice 命令的 -n 选项并不是必须的，只需要在破折号后面跟上优先级就行了.</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>renice</strong></p>
<p>有时你想改变系统上已运行命令的优先级。这正是 renice 命令可以做到的。它允许你指定运行进程的PID来改变它的优先级。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>renice 命令会自动更新当前运行进程的调度优先级。和 nice 命令一样， renice 命令也有一些限制：</p>
<ul>
<li>只能对属于你的进程执行 renice ；</li>
<li>只能通过 renice 降低进程的优先级；</li>
<li>root用户可以通过 renice 来任意调整进程的优先级。</li>
</ul>
<p>如果想完全控制运行进程，必须以root账户身份登录或使用 sudo 命令。</p>
<h4> 定时运行作业</h4>
<h5>at</h5>
<p><code>at</code> 命令会将作业提交到队列中，指定shell何时运行该作业。 at 的守护进程 atd 会以后台模式运行，检查作业队列来运行作业。大多数Linux发行版会在启动时运行此守护进程。</p>
<p><code>atd</code> 守护进程会检查系统上的一个特殊目录（通常位于/var/spool/at）来获取用 at 命令提交的作业。默认情况下， atd 守护进程会每60秒检查一下这个目录。有作业时， atd 守护进程会检查作业设置运行的时间。如果时间跟当前时间匹配， atd 守护进程就会运行此作业。</p>
<p><em>命令的格式:</em></p>
<blockquote>
<p>at [-f filename] time</p>
<p>默认情况下， at 命令会将 STDIN 的输入放到队列中。</p>
<p><code>-f</code> 参数来指定用于读取命令（脚本文件）的文件名</p>
<p><code>time</code> 如果指定的时间已经错过， at 命令会在第二天的那个时间运行指定的作业。</p>
</blockquote>
<p><em>时间格式:</em></p>
<ul>
<li>标准的小时和分钟格式，比如10:15。</li>
<li>AM/PM指示符，比如10:15 PM。</li>
<li>特定可命名时间，比如now、noon、midnight或者teatime（4 PM）。除了指定运行作业的时间，也可以通过不同的日期格式指定特定的日期。</li>
<li>标准日期格式，比如MMDDYY、MM/DD/YY或DD.MM.YY。</li>
<li>文本日期，比如Jul 4或Dec 25，加不加年份均可。</li>
<li>你也可以指定时间增量
<ul>
<li>当前时间+25 min</li>
<li>明天10:15 PM</li>
<li>10:15+7 天</li>
</ul>
</li>
</ul>
<p>使用 at 命令时，该作业会被提交到作业队列（job queue）。作业队列会保存通过 at 命令提交的待处理的作业。针对不同优先级，存在26种不同的作业队列。作业队列通常用小写字母 <code>a~z</code> 和大写字母 <code>A~Z</code> 来指代。</p>
<p>作业队列的字母排序越高，作业运行的优先级就越低。默认情况下， at 的作业会被提交到 a 作业队列。如果想以更高优先级运行作业，可以用 -q 参数指定不同的队列字母。</p>
<p><strong>获取作业的输出</strong></p>
<p>重定向输出</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>如果不想在 at 命令中使用邮件或重定向，最好加上 -M 选项来屏蔽作业产生的输出信息。</p>
</blockquote>
<p>使用 e-mail 作为 at 命令的输出极其不便。使用 <code>sendmail</code> 应用程序来发送邮件。</p>
<p>yum -y install sendmail</p>
<p><strong>列出等待的作业 atq</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除作业 atrm</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>cron</h5>
<p><a href="http://cron.ciding.cc/" target="_blank" rel="noopener noreferrer">在线表达式生成器</a></p>
<p>用 at 命令在预设时间安排脚本执行非常好用，但如果你需要脚本在每天的同一时间运行或是每周一次、每月一次呢？用不着再使用 at 不断提交作业了。</p>
<p><strong>cron时间表</strong></p>
<p><em>格式如下：</em></p>
<blockquote>
<p>分钟 小时 日期值（N号） 月 周 【需要执行的命令】</p>
<p>min hour dayofmonth month dayofweek command</p>
<ul>
<li>dayofmonth 表项指定月份中的日期值（*，1-31）</li>
<li>dayofweek（*，mon、tue、wed、thu、fri、sat、sun）或数值（*，0为周日，6为周六）来指定。</li>
</ul>
</blockquote>
<p>cron时间表允许你用特定值、取值范围（比如1~5）或者是通配符（星号*）来指定条目。</p>
<p>例如：在每天的10:15运行一个命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在每周一4:15 PM运行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在每个月的第一天中午12点执行命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p><strong>说明</strong>  如何设置一个在每个月的最后一天执行的命令，因为你无法设置dayofmonth的值来涵盖所有的月份。这个问题困扰着Linux和Unix程序员，也激发了不少解决办法。常用的方法是加一条使用 date 命令的 if-then 语句来检查明天的日期是不是01：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它会在每天中午12点来检查是不是当月的最后一天，如果是，cron将会运行该命令。</p>
</blockquote>
<p>命令列表必须指定要运行的命令或脚本的全路径名:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5>crontab</h5>
<p><strong>浏览cron目录</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有4个基本目录：<code>hourly</code>、<code>daily</code>、<code>monthly</code> 和 <code>weekly</code></p>
<p>因此，如果脚本需要每天运行一次，只要将脚本复制到daily目录，cron就会每天执行它，以此类推。</p>
<p><strong>常见示例</strong></p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>anacron</h5>
<p>如果某个作业在cron时间表中安排运行的时间已到，但这时候Linux系统处于关机状态，那么这个作业就不会被运行。当系统开机时，cron程序不会再去运行那些错过的作业。要解决这个问题，许多Linux发行版还包含了anacron 程序。</p>
<p>这个功能常用于进行常规日志维护的脚本。</p>
<p>只会处理位于cron目录的程序，比如/etc/cron.monthly。它用时间戳来决定作业是否在正确的计划间隔内运行了。每个cron目录都有个时间戳文件，该文件位于/var/spool/anacron。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>anacron程序使用自己的时间表（通常位于/etc/anacrontab）来检查作业目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>anacron时间表的基本格式和cron时间表略有不同：</p>
<blockquote>
<p>period delay identifier command</p>
</blockquote>
<ul>
<li>period 条目定义了作业多久运行一次，以天为单位。anacron程序用此条目来检查作业的时间戳文件。</li>
<li>delay 条目会指定系统启动后anacron程序需要等待多少分钟再开始运行错过的脚本。</li>
<li>command 条目包含了run-parts程序和一个cron脚本目录名。run-parts程序负责运行目录中传给它的
任何脚本。<strong>注意</strong> anacron不会运行位于/etc/cron.hourly的脚本。这是因为anacron程序不会处理执行时间
需求小于一天的脚本。</li>
<li>identifier 条目是一种特别的非空字符串，如 cron-weekly 。它用于唯一标识日志消息和错误邮件中的作业</li>
</ul>
<h5>使用新 shell 启动脚本</h5>
<p>回想一下当用户登入bash shell时需要运行的启动文件 <a href="#linux-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">参见环境变量</a>。另外别忘了，不是所有的发行版中都包含这些启动文件。基本上，依照下列顺序所找到的第一个文件会被运行，其余的文件会被忽略：</p>
<ul>
<li>$HOME/.bash_profil</li>
<li>$HOME/.bash_login</li>
<li>$HOME/.profile</li>
</ul>
<p>因此，应该将需要在登录时运行的脚本放在上面第一个文件中。每次启动一个新shell时，bash shell都会运行.bashrc文件。可以这样来验证：在主目录下的.bashrc文件中加入一条简单的 echo 语句，然后启动一个新shell。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 高级 shell 脚本编程</h2>
<h3> 创建函数</h3>
<h4> 基本的脚本函数</h4>
<p><strong>创建函数</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用函数</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> 如果在函数被定义前使用函数，你会收到一条错误消息</p>
<h5>返回值</h5>
<p><strong>使用 $?</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 return</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但当用这种方法从函数中返回值时，要小心了。记住下面两条技巧来避免问题：</p>
<ul>
<li>记住，函数一结束就取返回值；</li>
<li>记住，退出状态码必须是0~255。</li>
</ul>
<p>如果在用 $? 变量提取函数返回值之前执行了其他命令，函数的返回值就会丢失。记住，$? 变量会返回执行的最后一条命令的退出状态码。</p>
<p>第二个问题界定了返回值的取值范围。由于退出状态码必须小于256，函数的结果必须生成一个小于256的整数值。任何大于256的值都会产生一个错误值。</p>
<p><strong>使用函数输出</strong></p>
<p><code>result=$(dbl)</code> 这个命令会将 dbl 函数的输出<code>echo</code>赋给 $result 变量</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>说明</strong> 通过这种技术，你还可以返回浮点值和字符串值。这使它成为一种获取函数返回值的强大方法。</p>
<hr>
<h5>在函数中使用变量</h5>
<p><strong>向函数传递参数</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于函数使用特殊参数环境变量作为自己的参数值，因此它无法直接获取脚本在命令行中的参数值。下面的例子将会运行失败。尽管函数也使用了 $1 和 $2 变量，但它们和脚本主体中的 $1 和 $2 变量并不相同。要在函数中使用这些值，必须在调用函数时手动将它们传过去.。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在函数中处理变量</strong></p>
<ul>
<li>全局变量</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>$value 变量在函数外定义并被赋值。当 dbl 函数被调用时，该变量及其值在函数中都依然有效。如果变量在函数内被赋予了新值，那么在脚本中引用该变量时，新值也依然有效。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于函数中用到了 $temp 变量，它的值在脚本中使用时受到了影响，产生了意想不到的后果。有个简单的办法可以在函数中解决这个问题，下面将会介绍</p>
<ul>
<li>局部变量 local</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>local 关键字保证了变量只局限在该函数中。如果脚本中在该函数之外有同样名字的变量，那么shell将会保持这两个变量的值是分离的。</p>
<h5>数组变量和函数</h5>
<p><strong>向函数传数组参数</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数内部，数组仍然可以像其他数组一样使用</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>addarray 函数会遍历所有的数组元素，将它们累加在一起。你可以在 myarray 数组变量中放置任意多的值， addarry 函数会将它们都加起来。</p>
<p><strong>从函数返回数组</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5>函数递归</h5>
<p>函数可以调用自己来得到结果。通常递归函数都有一个最终可以迭代到的基准值。许多高级数学算法用递归对复杂的方程进行逐级规约，直到基准值定义的那级。</p>
<p>递归算法的经典例子是计算阶乘。一个数的阶乘是该数之前的所有数乘以该数的值。因此，要计算5的阶乘，可以执行如下方程：</p>
<blockquote>
<p>5! = 1 <em>2</em> 3 <em>4</em> 5 = 120</p>
</blockquote>
<p>使用递归，方程可以简化成以下形式：</p>
<blockquote>
<p>x! = x * (x-1)!</p>
</blockquote>
<p>也就是说，x的阶乘等于x乘以x1的阶乘。这可以用简单的递归脚本表达为：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5>创建库 source</h5>
<p>source 命令会在当前shell上下文中执行命令，而不是创建一个新shell。可以用 source 命令来在shell脚本中运行库文件脚本。</p>
<p>第一步是创建一个包含脚本中所需函数的公用库文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>在命令行上使用函数</h5>
<ul>
<li>一种方法是采用单行方式定义函数</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>另一种方法是采用多行方式来定义函数</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在.bashrc 文件中定义函数</strong></p>
<p>最佳地点就是.bashrc文件。bash shell在每次启动时都会在主目录下查找这个文件，不管是交互式shell还是从现有shell中启动的新shell。</p>
<ul>
<li>直接定义函数</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>读取函数文件</li>
</ul>
<p>只要是在shell脚本中，都可以用 source 命令（或者它的别名点操作符）将库文件中的函数添加到你的.bashrc脚本中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要确保库文件的路径名正确，以便bash shell能够找到该文件。下次启动shell时，库中的所有函数都可在命令行界面下使用了。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> shtool函数库使用示例</h4>
<h5>下载与安装</h5>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5>构建库</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>configure 命令会检查构建shtool库文件所必需的软件。一旦发现了所需的工具，它会使用工具路径修改配置文件。</p>
<p>make 命令负责构建shtool库文件。最终的结果（ shtool ）是一个完整的库软件包。</p>
<p>要完成安装，需要使用 make 命令的 install 选项。</p>
<h5>shtool 库函数</h5>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个shtool函数都包含大量的选项和参数，你可以利用它们改变函数的工作方式。下面是 shtool函数的使用格式：</p>
<blockquote>
<p>shtool [options] [function [options] [args]]</p>
</blockquote>
<h5>使用库</h5>
<p>可以在命令行或自己的shell脚本中直接使用shtool函数。下面是一个在shell脚本中使用 platform 函数的例子。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 图形化桌面环境中的脚本编程</h3>
<h4> 创建文本菜单</h4>
<h4> 创建文本窗口部件</h4>
<h4> 添加X Window图形</h4>
<h3> 正则表达式</h3>
<h4> 正则表达式的类型</h4>
<p>正则表达式是通过正则表达式引擎（regular expression engine）实现的。正则表达式引擎是一套底层软件，负责解释正则表达式模式并使用这些模式进行文本匹配。
在Linux中，有两种流行的正则表达式引擎：</p>
<ul>
<li>POSIX基础正则表达式（basic regular expression，BRE）引擎</li>
<li>POSIX扩展正则表达式（extended regular expression，ERE）引擎</li>
</ul>
<p>大多数Linux工具都至少符合POSIX BRE引擎规范，能够识别该规范定义的所有模式符号。遗憾的是，有些工具（比如sed编辑器）只符合了BRE引擎规范的子集。这是出于速度方面的考虑导致的，因为sed编辑器希望能尽可能快地处理数据流中的文本。</p>
<p>POSIX BRE引擎通常出现在依赖正则表达式进行文本过滤的编程语言中。它为常见模式提供了高级模式符号和特殊符号，比如匹配数字、单词以及按字母排序的字符。gawk程序用ERE引擎来处理它的正则表达式模式。</p>
<hr>
<p><strong>警告</strong> 记住，sed编辑器和gawk程序的正则表达式引擎之间是有区别的。gawk程序可以使用大多数扩展正则表达式模式符号，并且能提供一些额外过滤功能，而这些功能都是sed编辑器所不具备的。但正因为如此，gawk程序在处理数据流时通常才比较慢。</p>
<hr>
<h4> 基础正则表达式 BRE</h4>
<h5>纯文本</h5>
<p>在sed编辑器和gawk程序中用标准文本字符串来过滤数据：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>第一个模式定义了一个单词test。sed编辑器和gawk程序脚本用它们各自的 print 命令打印出匹配该正则表达式模式的所有行。由于 echo 语句在文本字符串中包含了单词test，数据流文本能够匹配所定义的正则表达式模式，因此sed编辑器显示了该行。</p>
<p>第二个模式也定义了一个单词，这次是trial。因为 echo 语句文本字符串没包含该单词，所以正则表达式模式没有匹配，因此sed编辑器和gawk程序都没打印该行。</p>
</blockquote>
<p>第一条原则就是：正则表达式模式都区分大小写。这意味着它们只会匹配大小写也相符的模式。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在正则表达式中使用空格和数字。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>特殊字符</h5>
<blockquote>
<ul>
<li><code>.</code> <code>*</code> <code>[]</code> <code>^</code> <code>$</code> <code>{}</code> <code>\</code> <code>/</code> <code>+</code> <code>?</code> <code>|</code> <code>()</code></li>
</ul>
</blockquote>
<p>用某个特殊字符作为文本字符，就必须转义。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>锚字符 ^$</h5>
<ul>
<li>锁定在行首 <code>^</code></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>锁定在行尾 <code>$</code></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>组合使用</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤出数据流中的空白行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>点号字符</h5>
<p><code>.</code> 用来匹配除换行符之外的 <strong>任意单个字符</strong>。它必须匹配一个字符，如果在点号字符的位置没有字符，那么模式就不成立。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在正则表达式中，空格也是字符，因此 at 前面的空格刚好匹配了该模式。第五行证明了这点，将 at 放在行首就不
会匹配该模式了。</p>
<h5>字符组 []</h5>
<p>可以定义用来匹配文本模式中某个位置的一组字符。如果字符组中的某个字符出现在了数据流中，那它就匹配了该模式。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以是数字</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>邮编验证</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本例中的两个 sed 打印命令利用正则表达式字符组来帮助找到文本中拼错的单词 <code>maintenance</code> 和 <code>separate</code>。同样的正则表达式模式也能匹配正确拼写的 <code>maintenance</code>。</p>
<h5>排除型字符组</h5>
<p>只要在字符组的开头加个脱字符</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5>区间</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>特殊的字符组</h5>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>星号</h5>
<p>在字符后面放置星号表明该字符必须在匹配模式的文本中出现0次或多次。</p>
<p>这个模式符号广泛用于处理有常见拼写错误或在不同语言中有拼写变化的单词。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写个可能用在美式或英式英语中的脚本，模式中的 u* 表明字母u可能出现或不出现在匹配模式的文本中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将点号特殊字符和星号特殊字符组合起来。这个组合能够匹配任意数量的任意字符。它通常用在数据流中两个可能相邻或不相邻的文本字符串之间。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>星号还能用在字符组上。它允许指定可能在文本中出现多次的字符组或字符区间。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 扩展正则表达式 ERE</h4>
<p><code>gawk</code>程序能够识别 <code>ERE</code> 模式，但 <code>sed</code> 编辑器不能。</p>
<h5>问号</h5>
<p>问号表明前面的字符可以出现 <strong>0次或1次</strong>，它不会匹配多次出现的字符。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果字符组中的字符出现了0次或1次，模式匹配就成立。但如果两个字符都出现了，或者其中一个字符出现了2次，模式匹配就不成立。</p>
<h5>加号</h5>
<p>加号表明前面的字符可以出现 <strong>1次或多次</strong>，但 <strong>必须至少出现1次</strong>。如果该字符没有出现，那么模式就不会匹配。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次如果字符组中定义的任一字符出现了，文本就会匹配指定的模式。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p>
<h5>花括号</h5>
<p>ERE中的花括号允许你为可重复的正则表达式指定一个上限。这通常称为间隔（interval）。</p>
<p>可以用两种格式来指定区间。</p>
<ul>
<li>m ：正则表达式准确出现 m 次。</li>
<li>m, n ：正则表达式至少出现 m 次，至多 n 次。</li>
</ul>
<p>这个特性可以精确调整字符或字符集在模式中具体出现的次数。</p>
<hr>
<p><strong>警告</strong> 默认情况下，gawk程序不会识别正则表达式间隔。必须指定gawk程序的 <code>--re- interval</code> 命令行选项才能识别正则表达式间隔</p>
<hr>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字母a或e在文本模式中只出现了1~2次，则正则表达式模式匹配；否则，模式匹配失败</p>
<h5>管道符号</h5>
<p>管道符号允许你在检查数据流时，用逻辑 OR 方式指定正则表达式引擎要用的两个或多个模式。如果任何一个模式匹配了数据流文本，</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>表达式分组-圆括号</h5>
<p>当你将正则表达式模式分组时，该组会被视为一个标准字符。可以像对普通字符一样给该组使用特殊字符。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结尾的 urday 分组以及问号，使得模式能够匹配完整的 Saturday 或缩写 Sat</p>
<p>将分组和管道符号一起使用</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 正则表达式实例</h4>
<h5>$PATH目录文件计数</h5>
<p>首先你得将 PATH 变量解析成单独的目录名</p>
<blockquote>
<p>echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</p>
</blockquote>
<p>用空格来替换冒号</p>
<blockquote>
<p>echo $PATH | sed 's/😕 /g'</p>
<p>/usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /root/bin</p>
</blockquote>
<p>使用标准 for 语句中来遍历每个目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>验证电话号码</h5>
<p>电话号码有几种常见的形式：</p>
<ul>
<li>(123)456-7890</li>
<li>(123) 456-789</li>
<li>123-456-7890</li>
<li>123.456.7890</li>
</ul>
<p>电话号码中可能有也可能没有左圆括号。这可以用如下模式来匹配：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>脱字符用来表明数据的开始。由于左圆括号是个特殊字符，因此必须将它转义成普通字符。问号表明左圆括号可能出现，也可能不出现。紧接着就是3位区号。在美国，区号以数字2开始（没有以数字0或1开始的区号），最大可到9。要匹配区号，可以用如下模式。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这要求第一个字符是2~9的数字，后跟任意两位数字。在区号后面，收尾的右圆括号可能存在，也可能不存在。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在区号后，存在如下可能：有一个空格，没有空格，有一条单破折线或一个点。你可以对它们使用管道符号，并用圆括号进行分组</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个管道符号紧跟在左圆括号后，用来匹配没有空格的情形。你必须将点字符转义，否则它会被解释成可匹配任意字符。紧接着是3位电话交换机号码。这里没什么需要特别注意的。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在电话交换机号码之后，你必须匹配一个空格、一条单破折线或一个点（这次不用考虑匹配没有空格的情况，因为在电话交换机号码和其余号码间必须有至少一个空格）。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，必须在字符串尾部匹配4位本地电话分机号。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完整的模式如下。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>解析邮件地址</h5>
<p>邮件地址的基本格式为：</p>
<blockquote>
<p>username@hostname</p>
</blockquote>
<p>username 值可用字母数字字符以及以下特殊字符：</p>
<ul>
<li>点号</li>
<li>单破折线</li>
<li>加号</li>
<li>下划线</li>
</ul>
<p>在有效的邮件用户名中，这些字符可能以任意组合形式出现。邮件地址的 hostname 部分由一个或多个域名和一个服务器名组成。服务器名和域名也必须遵照严格的命名规则，只允许字母数字字符以及以下特殊字符：</p>
<ul>
<li>点号</li>
<li>下划线</li>
</ul>
<p>服务器名和域名都用点分隔，先指定服务器名，紧接着指定子域名，最后是后面不带点号的顶级域名。
顶级域名的数量在过去十分有限，正则表达式模式编写者会尝试将它们都加到验证模式中。然而遗憾的是，随着互联网的发展，可用的顶级域名也增多了。这种方法已经不再可行。从左侧开始构建这个正则表达式模式。我们知道，用户名中可以有多个有效字符。这个相当容易。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个分组指定了用户名中允许的字符，加号表明必须有至少一个字符。下一个字符很明显是@ ，没什么意外的。
hostname 模式使用同样的方法来匹配服务器名和子域名。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个模式可以匹配文本。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于顶级域名，有一些特殊的规则。顶级域名只能是字母字符，必须不少于二个字符（国家
或地区代码中使用），并且长度上不得超过五个字符。下面就是顶级域名用的正则表达式模式。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将整个模式放在一起会生成如下模式。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> sed</h3>
<h4> 基础</h4>
<p>sed编辑器被称作流编辑器（stream editor），和普通的交互式文本编辑器恰好相反。在交互式文本编辑器中（比如vim），你可以用键盘命令来交互式地插入、删除或替换数据中的文本。</p>
<p>sed编辑器会执行下列操作:</p>
<ul>
<li>(1) 一次从输入中读取一行数据。</li>
<li>(2) 根据所提供的编辑器命令匹配数据。</li>
<li>(3) 按照命令修改流中的数据。</li>
<li>(4) 将新的数据输出到 STDOUT 。</li>
</ul>
<p>语法格式：</p>
<blockquote>
<p>sed options script file</p>
</blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从文件中读取 sed 编辑器命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>替换标记</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下它只替换每行中出现的第一处；替换标记 <code>flags</code> 会在替换命令字符串之后设置。</p>
<blockquote>
<p>s/pattern/replacement/flags</p>
</blockquote>
<p>有4种可用的替换标记：</p>
<ul>
<li>数字，表明新文本将替换第几处模式匹配的地方；</li>
<li>g ，表明新文本将会替换所有匹配的文本；</li>
<li>p ，表明原先行的内容要打印出来；打印与替换命令中指定的模式匹配的行。这通常会和 sed 的 <code>-n</code> 选项一起使用；将二者配合使用的效果就是只输出被替换命令修改过的行。</li>
<li>w file ，将替换的结果写到文件中。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>替换字符</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>感叹号被用作字符串分隔符，这样路径名就更容易阅读和理解了。</p>
<h5>使用地址</h5>
<p>默认情况下，在sed编辑器中使用的命令会作用于文本数据的所有行。如果只想将命令作用于特定行或某些行，则必须用行寻址（line addressing）。</p>
<p>在sed编辑器中有两种形式的行寻址：</p>
<ul>
<li>以数字形式表示行区间</li>
<li>用文本模式来过滤出行</li>
</ul>
<p>两种形式都使用相同的格式来指定地址：</p>
<blockquote>
<p>[address]command</p>
</blockquote>
<p>也可以将特定地址的多个命令分组：</p>
<blockquote>
<p>address {
command1
command2
command3
}</p>
</blockquote>
<ul>
<li>数字方式的行寻址 <code>M 单行匹配</code> 、 <code>M,N 区间M到N行</code> 、 <code>M,$ 从某行开始的所有行</code></li>
</ul>
<p>sed编辑器会将文本流中的第一行编号为1，以此类。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>使用文本模式过滤器</li>
</ul>
<p>格式：/pattern/command</p>
<p>例如：只修改用户Samantha的默认shell，可以使用 sed 命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>命令组合</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>删除行 d</h5>
<p><code>M 单行匹配</code> 、 <code>M,N 区间M到N行</code> 、 <code>M,$ 从某行开始的所有行</code> 、<code>结尾字符</code></p>
<p>它会删除匹配指定寻址模式的所有行。使用该命令时要特别小心，如果你忘记加入寻址模式的话，流中的所有文本行都会被删除。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊情况</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个出现数字“1”的行再次触发了删除命令，因为没有找到停止模式，所以就将数据流中的剩余行全部删除了。当然，如果你指定了一个从未在文本中出现的停止模式，显然会出现另外一个问题。</p>
<blockquote>
<p>$ sed '/1/,/5/d' data7.txt</p>
</blockquote>
<h5>插入和附加文本 i a</h5>
<ul>
<li>插入（ insert ）命令（ i ）会在指定行前增加一个新行；</li>
<li>附加（ append ）命令（ a ）会在指定行后增加一个新行。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将一个新行插入到数据流第三行前，起始位置增加一个新行 <code>1i</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将一个新行附加到数据流中第三行后</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将新行附加到数据流的末尾</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>修改行 c</h5>
<p>修改（ change ）命令允许修改数据流中整行文本的内容。它跟插入和附加命令的工作机制一样，你必须在 sed 命令中单独指定新行。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>转换命令 y</h5>
<p>转换（ transform ）命令（ y ）是唯一可以处理单个字符的sed编辑器命令。转换命令格式如下。</p>
<blockquote>
<p>[address]y/inchars/outchars/</p>
</blockquote>
<p>转换命令会对 inchars 和 outchars 值进行一对一的映射。 inchars 中的第一个字符会被转换为 outchars 中的第一个字符，以此类推。这个映射过程会一直持续到处理完指定字符；如果 inchars 和 outchars 的长度不同，则sed编辑器会产生一条错误消息。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>打印 p = l</h5>
<p>打印数据流中的信息：</p>
<ul>
<li>p 命令用来打印文本行；</li>
<li>=  命令用来打印行号；</li>
<li>l （小写的L）命令用来列出行。</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>使用 sed 处理文件 w</h5>
<ul>
<li>写入文件</li>
</ul>
<p>w 命令用来向文件写入行。该命令的格式如下：</p>
<p>[address]w filename</p>
<p><code>filename</code> 可以使用相对路径或绝对路径；用户都必须有文件的写权限。</p>
<p>将数据流中的前两行打印到一个文本文件中：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要根据一些公用的文本值从主文件中创建一份数据文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>从文件读取数据 r</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取命令的另一个很酷的用法是和删除命令配合使用：利用另一个文件中的数据来替换文件中的占位文本。举例来说，假定你有一份套用信件保存在文本文件中：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>套用信件将通用占位文本 LIST 放在人物名单的位置。要在占位文本后插入名单，只需读取命令就行了。但这样的话，占位文本仍然会留在输出中。要删除占位文本的话，你可以用删除命令。结果如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在占位文本已经被替换成了数据文件中的名单。</p>
<h4> 多行命令</h4>
<p>处理多行文本的特殊命令：</p>
<ul>
<li>N ：将数据流中的下一行加进来创建一个多行组（multiline group）来处理。</li>
<li>D ：删除多行组中的一行</li>
<li>P ：打印多行组中的一行。</li>
</ul>
<h5>next 命令</h5>
<p>首先需要看一下单行版本的 next 命令是如何工作的，然后就比
较容易理解多行版本的 next 命令是如何操作的了。</p>
<ul>
<li>1、单行的 next 命令 <code>n</code></li>
</ul>
<p>小写的 n 命令会告诉sed编辑器移动到数据流中的下一文本行，而不用重新回到命令的最开始再执行一遍。记住，通常sed编辑器在移动到数据流中的下一文本行之前，会在当前行上执行完所有定义好的命令。单行 next 命令改变了这个流程。</p>
<p>这听起来可能有些复杂，没错，有时确实是。在这个例子中，你有个数据文件，共有5行内容，其中的两行是空的。目标是删除首行之后的空白行，而留下最后一行之前的空白行。如果写一个删掉空白行的sed脚本，你会删掉两个空白行。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决办法是用 n 命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>合并文本行 <code>N</code></li>
</ul>
<p>了解了单行版的 next 命令，现在来看看多行版的。单行 next 命令会将数据流中的下一文本行移动到sed编辑器的工作空间（称为模式空间）。多行版本的 next 命令（用大写N）会将下一文本行添加到模式空间中已有的文本后。</p>
<p>这样的作用是将数据流中的两个文本行合并到同一个模式空间中。文本行仍然用换行符分隔，但sed编辑器现在会将两行文本当成一行来处理。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>sed编辑器脚本查找含有单词first的那行文本。找到该行后，它会用 N 命令将下一行合并到那行，然后用替换命令 s 将换行符替换成空格。结果是，文本文件中的两行在sed编辑器的输出中成了一行。</p>
</blockquote>
<p>如果要在数据文件中查找一个可能会分散在两行中的文本短语的话，这是个很实用的应用程序。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替换命令会在文本文件中查找特定的双词短语 System Administrator 。如果短语在一行中的话，事情很好处理，替换命令可以直接替换文本。但如果短语分散在两行中的话，替换命令就没法识别匹配的模式了。
这时 N 命令就可以派上用场了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>用 N 命令将发现第一个单词的那行和下一行合并后，即使短语内出现了换行，你仍然可以找到它。
<strong>注意</strong>，替换命令在 System 和 Administrator 之间用了通配符模式（.）来匹配空格和换行符这两种情况。但当它匹配了换行符时，它就从字符串中删掉了换行符，导致两行合并成一行。这可能不是你想要的。</p>
</blockquote>
<p>要解决这个问题，可以在sed编辑器脚本中用两个替换命令：一个用来匹配短语出现在多行中的情况，一个用来匹配短语出现在单行中的情况。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>但这个脚本中仍有个小问题。这个脚本总是在执行sed编辑器命令前将下一行文本读入到模式空间。当它到了最后一行文本时，就没有下一行可读了，所以 N 命令会叫sed编辑器停止。如果要匹配的文本正好在数据流的最后一行上，命令就不会发现要匹配的数据。</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 System Administrator 文本出现在了数据流中的最后一行， N 命令会错过它，因为没有其他行可读入到模式空间跟这行合并。你可以轻松地解决这个问题——将单行命令放到 N 命令前面，并将多行命令放到 N 命令后面，像这样：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>多行删除命令 D</h5>
<p>单行删除命令（ d ）。sed编辑器用它来删除模式空间中的当前行。但和 N 命令一起使用时，使用单行删除命令就要小心了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除命令会在不同的行中查找单词System和Administrator，然后在模式空间中将两行都删掉。这未必是你想要的结果。</p>
<p>sed编辑器提供了多行删除命令 D ，它只删除模式空间中的第一行。该命令会删除到换行符（含换行符）为止的所有字符。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文本的第二行被 N 命令加到了模式空间，但仍然完好。如果需要删掉目标数据字符串所在行的前一文本行，它能派得上用场。</p>
<p>这里有个例子，它会删除数据流中出现在第一行前的空白行。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>sed编辑器脚本会查找空白行，然后用 N 命令来将下一文本行添加到模式空间。如果新的模式空间内容含有单词header，则 D 命令会删除模式空间中的第一行。如果不结合使用 N 命令和 D 命令，就不可能在不删除其他空白行的情况下只删除第一个空白行。</p>
</blockquote>
<h5>多行打印命令 P</h5>
<p>它只打印多行模式空间中的第一行。这包括模式空间中直到换行符为止的所有字符。</p>
<p>用 -n 选项来阻止脚本输出时，它和显示文本的单行 p 命令的用法大同小异。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当多行匹配出现时， P 命令只会打印模式空间中的第一行。多行 P 命令的强大之处在和 N 命令及 D 命令组合使用时才能显现出来。</p>
<p>D 命令的独特之处在于强制sed编辑器返回到脚本的起始处，对同一模式空间中的内容重新执行这些命令（它不会从数据流中读取新的文本行）。在命令脚本中加入 N 命令，你就能单步扫过整个模式空间，将多行一起匹配。</p>
<p>接下来，使用 P 命令打印出第一行，然后用 D 命令删除第一行并绕回到脚本的起始处。一旦返回， N 命令会读取下一行文本并重新开始这个过程。这个循环会一直继续下去，直到数据流结束。</p>
<h4> 保持空间</h4>
<p>模式空间（pattern space）是一块活跃的缓冲区，在sed编辑器执行命令时它会保存待检查的文本。但它并不是sed编辑器保存文本的唯一空间。</p>
<p>sed编辑器有另一块称作保持空间（hold space）的缓冲区域。在处理模式空间中的某些行时，可以用保持空间来临时保存一些行。有5条命令可用来操作保持空间</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些命令用来将文本从模式空间复制到保持空间。这可以清空模式空间来加载其他要处理的字符串。</p>
<p>通常，在使用 h 或 H 命令将字符串移动到保持空间后，最终还要用 g 、 G 或 x 命令将保存的字符串移回模式空间（否则，你就不用在一开始考虑保存它们了）。</p>
<p>由于有两个缓冲区域，弄明白哪行文本在哪个缓冲区域有时会比较麻烦。这里有个简短的例子演示了如何用 h 和 g 命令来将数据在sed编辑器缓冲空间之间移动。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>我们来一步一步看上面这个代码例子：</p>
<ul>
<li>
<p>(1) sed脚本在地址中用正则表达式来过滤出含有单词first的行；</p>
</li>
<li>
<p>(2) 当含有单词first的行出现时， h 命令将该行放到保持空间；</p>
</li>
<li>
<p>(3)  p 命令打印模式空间也就是第一个数据行的内容；</p>
</li>
<li>
<p>(4)  n 命令提取数据流中的下一行（ This is the second data line ），并将它放到模式空间；</p>
</li>
<li>
<p>(5)  p 命令打印模式空间的内容，现在是第二个数据行；</p>
</li>
<li>
<p>(6)  g 命令将保持空间的内容（ This is the first data line ）放回模式空间，替换当前文本；</p>
</li>
<li>
<p>(7)  p 命令打印模式空间的当前内容，现在变回第一个数据行了。</p>
</li>
</ul>
</blockquote>
<p>通过使用保持空间来回移动文本行，你可以强制输出中第一个数据行出现在第二个数据行后面。如果丢掉了第一个 p 命令，你可以以相反的顺序输出这两行。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是个有用的开端。你可以用这种方法来创建一个sed脚本将整个文件的文本行反转！但要那么做的话，你需要了解sed编辑器的排除特性</p>
<h5>排除命令</h5>
<p>感叹号命令（ ! ）用来排除（ negate ）命令，也就是让原本会起作用的命令不起作用。下面的例子演示了这一特性</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>除了包含单词header那一行外，文件中其他所有的行都被打印出来了。</p>
</blockquote>
<p>sed编辑器无法处理数据流中最后一行文本，因为之后再没有其他行了。可以用感叹号来解决这个问题</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子演示了如何配合使用感叹号与 N 命令以及与美元符特殊地址。美元符表示数据流中的最后一行文本，所以当sed编辑器到了最后一行时，它没有执行 N 命令，但它对所有其他行都执行了这个命令。</p>
<p>使用这种方法，你可以反转数据流中文本行的顺序。要实现这个效果（先显示最后一行，最后显示第一行），你得利用保持空间做一些特别的铺垫工作。
你得像这样使用模式空间：</p>
<ul>
<li>(1) 在模式空间中放置一行；</li>
<li>(2) 将模式空间中的行放到保持空间中；</li>
<li>(3) 在模式空间中放入下一行；</li>
<li>(4) 将保持空间附加到模式空间后；</li>
<li>(5) 将模式空间中的所有内容都放到保持空间中；</li>
<li>(6)重复执行第(3)~(5)步，直到所有行都反序放到了保持空间中；</li>
<li>(7) 提取并打印行。</li>
</ul>
<p>在使用这种方法时，你不想在处理时打印行。这意味着要使用 sed 的 -n 命令行选项。下一步是决定如何将保持空间文本附加到模式空间文本后面。这可以用 G 命令完成。唯一的问题是你不想将保持空间附加到要处理的第一行文本后面。这可以用感叹号命令轻松解决：</p>
<p>1!G</p>
<p>下一步就是将新的模式空间（含有已反转的行）放到保持空间。这也非常简单，只要用 h 命令就行。</p>
<p>将模式空间中的整个数据流都反转了之后，你要做的就是打印结果。当到达数据流中的最后一行时，你就知道已经得到了模式空间的整个数据流。打印结果要用下面的命令：</p>
<p>$p</p>
<figure><figcaption></figcaption></figure>
<p>这些都是你创建可以反转行的sed编辑器脚本所需的操作步骤。现在可以运行一下试试：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>说明</strong> 可能你想说，有个Linux命令已经有反转文本文件的功能了。 tac 命令会倒序显示一个文本文件。你也许已经注意到了，这个命令的名字很巧妙，它执行的正好是与 cat 命令相反的功能。</p>
<hr>
<h4> 改变流</h4>
<p>通常，sed编辑器会从脚本的顶部开始，一直执行到脚本的结尾（ D 命令是个例外，它会强制sed编辑器返回到脚本的顶部，而不读取新的行）。sed编辑器提供了一个方法来改变命令脚本的执行流程，其结果与结构化编程类似。</p>
<h5>分支 b</h5>
<p>在前面一节中，你了解了如何用感叹号命令来排除作用在某行上的命令。sed编辑器提供了一种方法，可以基于地址、地址模式或地址区间排除一整块命令。这允许你只对数据流中的特定行执行一组命令。
分支（ branch ）命令 b 的格式如下：</p>
<p>[ address ]b [ label ]</p>
<p>address 参数决定了哪些行的数据会触发分支命令。 label 参数定义了要跳转到的位置。如果没有加 label 参数，跳转命令会跳转到脚本的结尾。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分支命令在数据流中的第2行和第3行处跳过了两个替换命令。</p>
<p>要是不想直接跳到脚本的结尾，可以为分支命令定义一个要跳转到的标签。标签以冒号开始，最多可以是7个字符长度。</p>
<p>要指定标签，将它加到 b 命令后即可。使用标签允许你跳过地址匹配处的命令，但仍然执行脚本中的其他命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跳转命令指定如果文本行中出现了 first ，程序应该跳到标签为 jump1 的脚本行。如果分支命令的模式没有匹配，sed编辑器会继续执行脚本中的命令，包括分支标签后的命令（因此，所有的替换命令都会在不匹配分支模式的行上执行）。</p>
<p>如果某行匹配了分支模式， sed编辑器就会跳转到带有分支标签的那行。因此，只有最后一个替换命令会执行。</p>
<p>这个例子演示了跳转到sed脚本后面的标签上。</p>
<p>也可以跳转到脚本中靠前面的标签上，这样就达到了循环的效果。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>脚本的每次迭代都会删除文本中的第一个逗号，并打印字符串。这个脚本有个问题：它永远不会结束。这就形成了一个无穷循环，不停地查找逗号，直到使用Ctrl+C组合键发送一个信号，手动停止这个脚本。</p>
<p>要防止这个问题，可以为分支命令指定一个地址模式来查找。如果没有模式，跳转就应该结束：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>现在分支命令只会在行中有逗号的情况下跳转。在最后一个逗号被删除后，分支命令不会再执行，脚本也就能正常停止了。</p>
</blockquote>
<h5>测试 t</h5>
<p>类似于分支命令，测试（ test ）命令（ t ）也可以用来改变sed编辑器脚本的执行流程。测试命令会根据替换命令的结果跳转到某个标签，而不是根据地址进行跳转。</p>
<p>如果替换命令成功匹配并替换了一个模式，测试命令就会跳转到指定的标签。如果替换命令未能匹配指定的模式，测试命令就不会跳转。测试命令使用与分支命令相同的格式。</p>
<p>[ address ]t [ label ]</p>
<p>跟分支命令一样，在没有指定标签的情况下，如果测试成功，sed会跳转到脚本的结尾。</p>
<p>测试命令提供了对数据流中的文本执行基本的 if-then 语句的一个低成本办法。举个例子，如果已经做了一个替换，不需要再做另一个替换，那么测试命令能帮上忙。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>第一个替换命令会查找模式文本 first 。如果匹配了行中的模式，它就会替换文本，而且测试命令会跳过后面的替换命令。如果第一个替换命令未能匹配模式，第二个替换命令就会被执行。</p>
</blockquote>
<p>有了测试命令，你就能结束之前用分支命令形成的无限循环:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 模式替代</h4>
<p>你已经知道了如何在 sed 命令中使用模式来替代数据流中的文本。然而在使用通配符时，很难知道到底哪些文本会匹配模式。</p>
<p>举个例子，假如你想在行中匹配的单词两边上放上引号。如果你只是要匹配模式中的一个单词，那就非常简单。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果你在模式中用通配符（.）来匹配多个单词呢？</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>模式字符串用点号通配符来匹配at前面的一个字母。遗憾的是，用于替代的字符串无法匹配已匹配单词中的通配符字符。</p>
<h5>&amp;符号</h5>
<p>sed编辑器提供了一个解决办法。 &amp; 符号可以用来代表替换命令中的匹配的模式。不管模式匹配的是什么样的文本，你都可以在替代模式中使用 &amp; 符号来使用这段文本。这样就可以操作模式所匹配到的任何单词了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当模式匹配了单词cat，"cat"就会出现在了替换后的单词里。当它匹配了单词hat，"hat" 就出现在了替换后的单词中。</p>
<h5>替代单独的单词</h5>
<p>&amp; 符号会提取匹配替换命令中指定模式的整个字符串。有时你只想提取这个字符串的一部分。</p>
<p>当然可以这么做，只是要稍微花点心思而已。</p>
<p>sed编辑器用圆括号来定义替换模式中的子模式。你可以在替代模式中使用特殊字符来引用每个子模式。替代字符由反斜线和数字组成。数字表明子模式的位置。sed编辑器会给第一个子模式分配字符 \1 ，给第二个子模式分配字符 \2 ，依此类推。</p>
<hr>
<p><strong>警告</strong> 当在替换命令中使用圆括号时，必须用转义字符将它们标示为分组字符而不是普通的圆括号。这跟转义其他特殊字符正好相反。</p>
<hr>
<p>来看一个在sed编辑器脚本中使用这个特性的例子。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个替换命令用一对圆括号将单词System括起来，将其标示为一个子模式。然后它在替代模式中使用 \1 来提取第一个匹配的子模式。这没什么特别的，但在处理通配符模式时却特别有用。</p>
<p>如果需要用一个单词来替换一个短语，而这个单词刚好是该短语的子字符串，但那个子字符串碰巧使用了通配符，这时使用子模式会方便很多。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，你不能用 &amp; 符号，因为它会替换整个匹配的模式。子模式提供了答案，允许你选择将模式中的某部分作为替代模式。
当需要在两个或多个子模式间插入文本时，这个特性尤其有用。这里有个脚本，它使用子模式在大数字中插入逗号。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本将匹配模式分成了两部分。</p>
<blockquote 3="">
<p>.*[0-9]</p>
<p>[0-9]</p>
</blockquote>
<p>这个模式会查找两个子模式。第一个子模式是以数字结尾的任意长度的字符。第二个子模式是若干组三位数字。如果这个模式在文本中找到了，替代文本会在两个子模式之间加一个逗号，每个子模式都会通过其位置来标示。</p>
<p>这个脚本使用测试命令来遍历这个数字，直到放置好所有的逗号。</p>
<h4> 在脚本中使用sed</h4>
<h5>使用包装脚本</h5>
<p>这里有个将命令行参数变量作为sed脚本输入的例子</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>名为reverse的shell脚本用sed编辑器脚本来反转数据流中的文本行。它使用shell参数 $1 从命令行中提取第一个参数，这正是需要进行反转的文件名。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你能在任何文件上轻松使用这个sed编辑器脚本，再不用每次都在命令行上重新输入了。</p>
<h5>重定向 sed 的输出</h5>
<p>默认情况下，sed编辑器会将脚本的结果输出到 STDOUT 上。你可以在shell脚本中使用各种标准方法对sed编辑器的输出进行重定向。</p>
<p>可以在脚本中用 $() 将sed编辑器命令的输出重定向到一个变量中，以备后用。下面的例子使用sed脚本来向数值计算结果添加逗号</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用普通的阶乘计算脚本后，脚本的结果会被作为sed编辑器脚本的输入，它会给结果加上逗号。然后 echo 语句使用这个值产生最终结果</p>
<h4> 创建sed实用工具</h4>
<h5>加倍行间距</h5>
<p>首先，让我们看一个向文本文件的行间插入空白行的简单sed脚本。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来相当简单！这个技巧的关键在于保持空间的默认值。记住， G 命令会简单地将保持空间内容附加到模式空间内容后。当启动sed编辑器时，保持空间只有一个空行。将它附加到已有行后面，你就在已有行后面创建了一个空白行。</p>
<p>你可能已经注意到了，这个脚本在数据流的最后一行后面也加了一个空白行，使得文件的末尾也产生了一个空白行。如果你不想要这个空白行，可以用排除符号（ ! ）和尾行符号（ $ ）来确保脚本不会将空白行加到数据流的最后一行后面。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在看起来好一些了。只要该行不是最后一行， G 命令就会附加保持空间内容。当sed编辑器到了最后一行时，它会跳过 G 命令。</p>
<h5>对可能含有空白行的文件加倍行间距</h5>
<p>如果文本文件已经有一些空白行，但你想给所有行加倍行间距要怎么办呢？如果用前面的脚本，有些区域会有太多的空白行，因为每个已有的空白行也会被加倍</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，在原来空白行的位置有了三个空白行。这个问题的解决办法是，首先删除数据流中的所有空白行，然后用 G 命令在所有行后插入新的空白行。要删除已有的空白行，需要将 d 命令和一个匹配空白行的模式一起使用。</p>
<blockquote>
<p>/^$/d</p>
</blockquote>
<p>这个模式使用了行首符号（ ^ ）和行尾符号（ $ ）。将这个模式加到脚本中会生成想要的结果</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>给文件中的行编号</h5>
<p>在查看错误消息的行号时，这是一个很好用的小工具。</p>
<p>用等号来显示数据流中行的行号。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>打印末尾行</h5>
<p>到目前为止，你已经知道如何用 p 命令来打印数据流中所有的或者是匹配某个特定模式的行。
如果只需处理一个长输出（比如日志文件）中的末尾几行，要怎么办呢？
美元符代表数据流中最后一行，所以只显示最后一行很容易。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，如何用美元符来显示数据流末尾的若干行呢？答案是创建滚动窗口。
滚动窗口是检验模式空间中文本行块的常用方法，它使用 N 命令将这些块合并起来。 N 命令将下一行文本附加到模式空间中已有文本行后面。一旦你在模式空间有了一个10行的文本块，你可以用美元符来检查你是否已经处于数据流的尾部。如果不在，就继续向模式空间增加行，同时删除原来的行（记住， D 命令会删除模式空间的第一行）。</p>
<p>通过循环 N 命令和 D 命令，你在向模式空间的文本行块增加新行的同时也删除了旧行。分支命令非常适合这个循环。要结束循环，只要识别出最后一行并用 q 命令退出就可以了。
最终的sed编辑器脚本看起来如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本会首先检查这行是不是数据流中最后一行。如果是，退出（ quit ）命令会停止循环。 N 命令会将下一行附加到模式空间中当前行之后。如果当前行在第10行后面， 11,$D 命令会删除模式空间中的第一行。这就会在模式空间中创建出滑动窗口效果。因此，这个sed程序脚本只会显示出data7.txt文件最后10行</p>
<h5>删除行</h5>
<ul>
<li>删除连续的空白行</li>
</ul>
<p>数据文件中出现多余的空白行会非常让人讨厌。通常，数据文件中都会有空白行，但有时由于数据行的缺失，会产生过多的空白行（就像之前加倍行间距例子中所见到的那样）。</p>
<p>删除连续空白行的最简单办法是用地址区间来检查数据流。删除连续空白行的关键在于创建包含一个非空白行和一个空白行的地址区间。如果sed编辑器遇到了这个区间，它不会删除行。但对于不匹配这个区间的行（两个或更多的空白行），它会删除这些行。</p>
<p>下面是完成这个操作的脚本</p>
<blockquote>
<p>/./,/^$/!d</p>
</blockquote>
<p>区间是 /./ 到 /^$/ 。区间的开始地址会匹配任何含有至少一个字符的行。区间的结束地址会匹配一个空行。在这个区间内的行不会被删除</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论文件的数据行之间出现了多少空白行，在输出中只会在行间保留一个空白行</p>
<ul>
<li>删除开头的空白行</li>
</ul>
<p>数据文件开头有多个空白行时也很烦人。通常，在将数据从文本文件导入到数据库时，空白行会产生一些空项，涉及这些数据的计算都得作废。</p>
<p>删除数据流顶部的空白行不难。下面是完成这个功能的脚本。</p>
<blockquote>
<p>/./,$!d</p>
</blockquote>
<p>这个脚本用地址区间来决定哪些行要删掉。这个区间从含有字符的行开始，一直到数据流结束。在这个区间内的任何行都不会从输出中删除。这意味着含有字符的第一行之前的任何行都会删除。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试文件在数据行之前有两个空白行。这个脚本成功地删除了开头的两个空白行，保留了数据中的空白行。</p>
<ul>
<li>删除结尾的空白行</li>
</ul>
<p>很遗憾，删除结尾的空白行并不像删除开头的空白行那么容易。就跟打印数据流的结尾一样，删除数据流结尾的空白行也需要花点心思，利用循环来实现。
在开始讨论前，先看看脚本是什么样的</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>删除 HTML 标签</h5>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以加一条删除命令来删除多余的空白行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> gawk</h3>
<p>虽然sed编辑器是非常方便自动修改文本文件的工具，但其也有自身的限制。通常你需要一个用来处理文件中的数据的更高级工具，它能提供一个类编程环境来修改和重新组织文件中的数据。这正是gawk能够做到的。</p>
<hr>
<p><strong>说明</strong>  在所有的发行版中都没有默认安装gawk程序。如果你所用的Linux发行版中没有包含gawk.</p>
<hr>
<p>gawk程序是Unix中的原始awk程序的GNU版本。gawk程序让流编辑迈上了一个新的台阶，它提供了一种编程语言而不只是编辑器命令。在gawk编程语言中，你可以做下面的事情：</p>
<ul>
<li>定义变量来保存数据；</li>
<li>使用算术和字符串操作符来处理数据；</li>
<li>使用结构化编程概念（比如 if-then 语句和循环）来为数据处理增加处理逻辑；</li>
<li>通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告。</li>
</ul>
<p>gawk程序的报告生成能力通常用来从大文本文件中提取数据元素，并将它们格式化成可读的
报告。其中最完美的例子是格式化日志文件。在日志文件中找出错误行会很难，gawk程序可以让
你从日志文件中过滤出需要的数据元素，然后你可以将其格式化，使得重要的数据更易于阅读。</p>
<h4> 基础</h4>
<p>gawk命令格式</p>
<blockquote>
<p>gawk options program file</p>
</blockquote>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>从命令行读取程序脚本</h5>
<p>gawk程序脚本用一对花括号来定义。你必须将脚本命令放到两个花括号（ {} ）中。如果你
错误地使用了圆括号来包含gawk脚本，就会得到一条类似于下面的错误提示。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 gawk 命令行假定脚本是单个文本字符串，你还必须将脚本放到单引号中。下面的例子在命令行上指定了一个简单的gawk程序脚本：</p>
<blockquote>
<p>gawk '{print "Hello World!"}'</p>
</blockquote>
<p>这个程序脚本定义了一个命令： print 命令。这个命令名副其实：它会将文本打印到 STDOUT 。如果尝试运行这个命令，你可能会有些失望，因为什么都不会发生。原因在于没有在命令行上指定文件名，所以gawk程序会从 STDIN 接收数据。在运行这个程序时，它会一直等待从 STDIN 输入的文本。</p>
<p>如果你输入一行文本并按下回车键，gawk会对这行文本运行一遍程序脚本。跟sed编辑器一样，gawk程序会针对数据流中的每行文本执行程序脚本。由于程序脚本被设为显示一行固定的文本字符串，因此不管你在数据流中输入什么文本，都会得到同样的文本输出。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要终止这个gawk程序，你必须表明数据流已经结束了。bash shell提供了一个组合键来生成EOF（End-of-File）字符。Ctrl+D组合键会在bash中产生一个EOF字符。这个组合键能够终止该gawk程序并返回到命令行界面提示符下</p>
<h5>使用数据字段变量</h5>
<p>gawk的主要特性之一是其处理文本文件中数据的能力。它会自动给一行中的每个数据元素分配一个变量。默认情况下，gawk会将如下变量分配给它在文本行中发现的数据字段：</p>
<ul>
<li>$0 代表整个文本行；</li>
<li>$1 代表文本行中的第1个数据字段；</li>
<li>$2 代表文本行中的第2个数据字段；</li>
<li>$n 代表文本行中的第n个数据字段。</li>
</ul>
<p>gawk程序读取文本文件，只显示第1个数据字段的值</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你要读取采用了其他字段分隔符的文件，可以用 -F 选项指定</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>在程序脚本中使用多个命令</h5>
<p>如果一种编程语言只能执行一条命令，那么它不会有太大用处。gawk编程语言允许你将多条命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分号即可</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>第一条命令会给字段变量 $4 赋值。第二条命令会打印整个数据字段。注意， gawk程序在输出中已经将原文本中的第四个数据字段替换成了新值</p>
</blockquote>
<p>也可以用次提示符一次一行地输入程序脚本命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你用了表示起始的单引号后，bash shell会使用次提示符来提示你输入更多数据。你可以每次在每行加一条命令，直到输入了结尾的单引号。因为没有在命令行中指定文件名，gawk程序会从 STDIN 中获得数据。当运行这个程序的时候，它会等着读取来自 STDIN 的文本。要退出程序，只需按下Ctrl+D组合键来表明数据结束。</p>
<h5>从文件中读取程序</h5>
<p>跟sed编辑器一样，gawk编辑器允许将程序存储到文件中，然后再在命令行中引用</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在程序文件中指定多条命令。要这么做的话，只要一条命令放一行即可，不需要用分号</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>在处理数据前运行脚本</h5>
<p>gawk还允许指定程序脚本何时运行。默认情况下，gawk会从输入中读取一行文本，然后针对该行的数据执行程序脚本。有时可能需要在处理数据前运行脚本，比如为报告创建标题。 BEGIN关键字就是用来做这个的。它会强制gawk在读取数据前执行 BEGIN 关键字后指定的程序脚本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这次 print 命令会在读取数据前显示文本。但在它显示了文本后，它会快速退出，不等待任何数据。如果想使用正常的程序脚本中处理数据，必须用另一个脚本区域来定义程序</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在gawk执行了BEGIN脚本后，它会用第二段脚本来处理文件数据。这么做时要小心，两段脚本仍然被认为是 gawk 命令行中的一个文本字符串。你需要相应地加上单引号</p>
<h5>在处理数据后运行脚本</h5>
<p>与 BEGIN 关键字类似， END 关键字允许你指定一个程序脚本，gawk会在读完数据后执行它</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当gawk程序打印完文件内容后，它会执行END脚本中的命令。这是在处理完所有正常数据后给报告添加页脚的最佳方法。
可以将所有这些内容放到一起组成一个漂亮的小程序脚本文件，用它从一个简单的数据文件中创建一份完整的报告:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本用BEGIN脚本来为报告创建标题。它还定义了一个叫作 FS 的特殊变量。这是定义字段分隔符的另一种方法。这样你就不用依靠脚本用户在命令行选项中定义字段分隔符了。
下面是这个gawk程序脚本的输出（有部分删节）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与预想的一样，BEGIN脚本创建了标题，程序脚本处理特定数据文件（/etc/passwd）中的信息，END脚本生成页脚。这个简单的脚本让你小试了一把gawk的强大威力。</p>
<h4> 使用变量</h4>
<h5>内建变量</h5>
<ul>
<li>字段和记录分隔符变量</li>
</ul>
<p>数据字段是由字段分隔符来划定的。默认情况下，字段分隔符是一个空白字符，也就是空格符或者制表符。</p>
<p>内建变量 FS 是一组内建变量中的一个，这组变量用于控制gawk如何处理输入输出数据中的字段和记录；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 FS 来定义记录中的字段分隔符。变量 OFS 具备相同的功能，只不过是用在 print 命令的输出上。默认情况下，gawk将 OFS 设成一个空格，所以如果你用命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>print 命令会自动将 OFS 变量的值放置在输出中的每个字段间。通过设置 OFS 变量，可以在输出中使用任意字符串来分隔字段</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FIELDWIDTHS 变量允许你不依靠字段分隔符来读取记录。在一些应用程序中，数据并没有使用字段分隔符，而是被放置在了记录中的特定列。这种情况下，必须设定 FIELDWIDTHS 变量来匹配数据在记录中的位置。</p>
<p>一旦设置了 FIELDWIDTH 变量，gawk就会忽略 FS 变量，并根据提供的字段宽度来计算字段。</p>
<p>下面是个采用字段宽度而非字段分隔符的例子，每个记录中的数字串会根
据已定义好的字段长度来分割。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>警告</strong> 一定要记住，一旦设定了 FIELDWIDTHS 变量的值，就不能再改变了。这种方法并不适用于变长的字段。</p>
<hr>
<p>变量 RS 和 ORS 定义了gawk程序如何处理数据流中的字段。默认情况下，gawk将 RS 和 ORS 设为换行符。默认的 RS 值表明，输入数据流中的每行新文本就是一条新纪录。</p>
<p>有时，你会在数据流中碰到占据多行的字段。</p>
<p>典型的例子是包含地址和电话号码的数据，其中地址和电话号码各占一行。</p>
<p>把 RS 变量设置成空字符串，然后在数据记录间留一个空白行。gawk会把每个空白行当作一个记录分隔符。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>数据变量</li>
</ul>
<p>除了字段和记录分隔符变量外，gawk还提供了其他一些内建变量来帮助你了解数据发生了什么变化，并提取shell环境的信息。</p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ARGC 变量表明命令行上有两个参数。这包括 gawk 命令和 data1 参数（记住，程序脚本并不算参数）。</p>
<p>ARGV 数组从索引 0 开始，代表的是命令。第一个数组值是 gawk 命令后的第一个命令行参数。</p>
<hr>
<p>ENVIRON 获取 shell 环境变量</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p>跟踪数据字段和记录时，变量 <code>FNR</code> 、 <code>NF</code> 和 <code>NR</code> 用起来就非常方便。有时你并不知道记录中到底有多少个数据字段。</p>
<p><code>NF</code> 变量可以让你在不知道具体位置的情况下指定记录中的最后一个数据字段。<code>FNR</code> 变量的值在 gawk 处理第二个数据文件时被重置了，而 <code>NR</code> 变量则在处理第二个数据文件时继续计数。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<p><strong>说明</strong> 在使用gawk时你可能会注意到，gawk脚本通常会比shell脚本中的其他部分还要大一些。为了简单起见，在本章的例子中，我们利用shell的多行特性直接在命令行上运行了gawk脚本。在shell脚本中使用gawk时，应该将不同的 gawk 命令放到不同的行，这样会比较容易阅读和理解，不要在shell脚本中将所有的命令都塞到同一行。还有，如果你发现在不同的shell脚本中用到了同样的gawk脚本，记着将这段gawk脚本放到一个单独的文件中，并用 <code>-f</code> 参数来在shell脚本中引用它.</p>
<hr>
<h5>自定义变量</h5>
<p>自定义变量名可以是任意数目的字母、数字和下划线，但不能以数字开头。重要的是，要记住 gawk 变量名区分大小写。</p>
<ul>
<li>在脚本中给变量赋值</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gawk 变量可以保存数值或文本值。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值语句还可以包含数学算式来处理数字值。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>在命令行上给变量赋值</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用命令行参数来定义变量值会有一个问题。在你设置了变量后，这个值在代码的 BEGIN 部分不可用。可以用 -v 命令行参数来解决这个问题。它允许你在 BEGIN 代码之前设定变量。在命令行上，-v 命令行参数必须放在脚本代码之前。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 处理数组</h4>
<h5>定义数组变量</h5>
<p>数组变量赋值的格式如下：</p>
<blockquote>
<p>var[index] = element</p>
</blockquote>
<p>其中 var 是变量名， index 是关联数组的索引值， element 是数据元素值。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在引用数组变量时，必须包含索引值来提取相应的数据元素值。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在引用数组变量时，会得到数据元素的值。数据元素值是数字值时也一样。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>遍历数组变量</h5>
<p>可以用 for 语句的一种特殊形式。</p>
<blockquote>
<p>for (var in array)</p>
<p>{</p>
<p>​ statements</p>
<p>}</p>
<p>for 语句会在每次循环时将关联数组 array 的下一个索引值赋给变量 var ，然后执行一遍 statements .</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>删除数组变量</h5>
<p>从关联数组中删除数组索引要用一个特殊的命令。</p>
<blockquote>
<p>delete array[index]</p>
</blockquote>
<p>删除命令会从数组中删除关联索引值和相关的数据元素值。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 使用模式</h4>
<h5>正则表达式</h5>
<p>在使用正则表达式时，正则表达式必须出现在它要控制的程序脚本的左花括号前。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>1 正则表达式 /11/ 匹配了数据字段中含有字符串 11 的记录</p>
</li>
<li>
<p>2 匹配了用作字段分隔符的逗号。这也并不总是件好事。它可能会造
成如下问题：当试图匹配某个数据字段中的特定数据时，这些数据又出现在其他数据字段中。如果需要用正则表达式匹配某个特定的数据实例，应该使用匹配操作符。</p>
</li>
</ul>
<h5>匹配操作符</h5>
<p>匹配操作符（matching operator）允许将正则表达式限定在记录中的特定数据字段。匹配操作符是波浪线（ ~ ）。可以指定匹配操作符、数据字段变量以及要匹配的正则表达式。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>$1 变量代表记录中的第一个数据字段。这个表达式会过滤出第一个字段以文本 data 开头的所有记录。</p>
<p>下面是在gawk程序脚本中使用匹配操作符的例子。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配操作符会用正则表达式 /^data2/ 来比较第二个数据字段，该正则表达式指明字符串要以文本 data2 开头。</p>
<p>这可是件强大的工具，gawk程序脚本中经常用它在数据文件中搜索特定的数据元素。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子会在第一个数据字段中查找文本 rich 。如果在记录中找到了这个模式，它会打印该记录的第一个和最后一个数据字段值。</p>
<p>你也可以用 ! 符号来排除正则表达式的匹配。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果记录中没有找到匹配正则表达式的文本，程序脚本就会作用到记录数据。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，gawk程序脚本会打印/etc/passwd文件中与用户ID  rich 不匹配的用户ID和登录shell。</p>
<h5>数学表达式</h5>
<p>除了正则表达式，你也可以在匹配模式中用数学表达式。这个功能在匹配数据字段中的数字值时非常方便。举个例子，如果你想显示所有属于root用户组（组ID为 0 ）的系统用户，可以用这个脚本。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段脚本会查看第四个数据字段含有值 0 的记录。在这个Linux系统中，有五个用户账户属于root用户组。</p>
<p>可以使用任何常见的数学比较表达式。</p>
<ul>
<li>x == y ：值x等于y。</li>
<li>x &lt;= y ：值x小于等于y。</li>
<li>x &lt; y ：值x小于y。</li>
<li>x &gt;= y ：值x大于等于y。</li>
<li>x &gt; y ：值x大于y。</li>
</ul>
<p>也可以对文本数据使用表达式，但必须小心。跟正则表达式不同，表达式必须完全匹配。数据必须跟模式严格匹配。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个测试没有匹配任何记录，因为第一个数据字段的值不在任何记录中。第二个测试用值 data11 匹配了一条记录。</p>
<h4> 使用结构化命令</h4>
<h5>if</h5>
<p>格式</p>
<blockquote>
<p>if (condition)</p>
<p>​ statement1</p>
<p>或者</p>
<p>if (condition) statement1</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，不能弄混 if 语句的花括号和用来表示程序脚本开始和结束的花括号。如果弄混了，gawk程序能够发现丢失了花括号，并产生一条错误消息</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if (condition) statement1; else statement2</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>while</h5>
<blockquote>
<p>while (condition)</p>
<p>{</p>
<p>​ statements</p>
<p>}</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>while 语句会遍历记录中的数据字段，将每个值都加到 total 变量上，并将计数器变量 i 增值。</p>
<p>当计数器值等于 4 时， while 的条件变成了 FALSE ，循环结束，然后执行脚本中的下一条语句</p>
</blockquote>
<p>gawk编程语言支持在 while 循环中使用 break 语句和 continue 语句，允许你从循环中跳出。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>do-while</h5>
<p>会在检查条件语句之前执行命令。</p>
<blockquote>
<p>do
{
statements
} while (condition)</p>
</blockquote>
<p>这种格式保证了语句会在条件被求值之前至少执行一次。当需要在求值条件前执行语句时，这个特性非常方便。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>这个脚本会读取每条记录的数据字段并将它们加在一起，直到累加结果达到150。如果第一个数据字段大于150（就像在第二条记录中看到的那样），则脚本会保证在条件被求值前至少读取第一个数据字段的内容。</p>
</blockquote>
<h5>for</h5>
<p>for( variable assignment; condition; iteration process)</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 格式化打印 printf</h4>
<p>命令的格式：</p>
<blockquote>
<p>printf "format string", var1, var2 . . .</p>
<p>format string 是格式化输出的关键。它会用文本元素和格式化指定符来具体指定如何呈现格式化输出。第一个格式化指定符对应列出的
第一个变量，第二个对应第二个变量，依此类推。</p>
</blockquote>
<p>格式化指定符采用如下格式：</p>
<blockquote>
<p>%[modifier]control-letter</p>
</blockquote>
<p>其中 control-letter 是一个单字符代码，用于指明显示什么类型的数据，而 modifier 则定义了可选的格式化特性。</p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，如果你需要显示一个字符串变量，可以用格式化指定符 %s 。如果你需要显示一个整数值，可以用 %d 或 %i （ %d 是十进制数的C风格显示方式）。如果你要用科学计数法显示很大的值，就用 %e 格式化指定符</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了控制字母外，还有3种修饰符可以用来进一步控制输出。</p>
<ul>
<li>width ：指定了输出字段最小宽度的数字值。如果输出短于这个值，printf 会将文本右对齐，并用空格进行填充。如果输出比指定的宽度还要长，则按照实际的长度输出。</li>
<li>prec ：这是一个数字值，指定了浮点数中小数点后面位数，或者文本字符串中显示的最大字符数。</li>
<li>-（减号）：指明在向格式化空间中放入数据时采用左对齐而不是右对齐。</li>
</ul>
<p>在使用 printf 语句时，你可以完全控制输出样式。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>，你需要在 printf 命令的末尾手动添加换行符来生成新行。没添加的话， printf 命令会继续在同一行打印后续输出。</p>
<p>如果需要用几个单独的 printf 命令在同一行上打印多个输出，这就会非常有用。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用修饰符来格式化第一个字符串值:</p>
<blockquote>
<p>通过添加一个值为 16 的修饰符，我们强制第一个字符串的输出宽度为16个字符。默认情况下，printf 命令使用右对齐来将数据放到格式化空间中。要改成左对齐，只需给修饰符加一个减号即可。</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理浮点值</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>使用 %5.1f 格式指定符来强制 printf 命令将浮点值近似到小数点后一位。</p>
</blockquote>
<h4> 使用函数</h4>
<h5>数学函数</h5>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>第一个例子会计算e的100次幂，虽然数值很大，但尚在系统的区间内。第二个例子尝试计算e的1000次幂，已经超出了系统的数值区间，所以就生成了一条错误消息。</p>
</blockquote>
<p>gawk还支持一些按位操作数据的函数。</p>
<ul>
<li>and(v1, v2) ：执行值 v1 和 v2 的按位与运算。</li>
<li>compl(val) ：执行 val 的补运算。</li>
<li>lshift(val, count) ：将值 val 左移 count 位。</li>
<li>or(v1, v2) ：执行值 v1 和 v2 的按位或运算。</li>
<li>rshift(val, count) ：将值 val 右移 count 位。</li>
<li>xor(v1, v2) ：执行值 v1 和 v2 的按位异或运算。</li>
</ul>
<p>位操作函数在处理数据中的二进制值时非常有用。</p>
<h5>字符串函数</h5>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>时间函数</h5>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>定义函数</h5>
<p>要定义自己的函数，必须用 function 关键字。</p>
<blockquote>
<p>function name([variables])
{
statements
}</p>
</blockquote>
<p>函数名必须能够唯一标识函数。可以在调用的gawk程序中传给这个函数一个或多个变量。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>使用自定义函数</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>创建函数库</h5>
<p>首先，你需要创建一个存储所有gawk函数的文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>funclib文件含有三个函数定义。需要使用 -f 命令行参数来使用它们。很遗憾，不能将 -f 命令行参数和内联gawk脚本放到一起使用，不过可以在同一个命令行中使用多个 -f 参数。</p>
<p>因此，要使用库，只要创建一个含有你的gawk程序的文件，然后在命令行上同时指定库文件和程序文件就行了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例来说，我们手边有一个数据文件，其中包含了两支队伍（每队两名选手）的保龄球比赛得分情况。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每位选手都有三场比赛的成绩，这些成绩都保存在数据文件中，每位选手由位于第二列的队名来标识。下面的脚本对每队的成绩进行了排序，并计算了总分和平均分。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用其他 shell</h3>
<h4> 理解dash shell</h4>
<h4> dash shell脚本编程</h4>
<h4> zsh shell介绍</h4>
<h4> zsh脚本编程</h4>
<h2> 创建实用的脚本</h2>
<h3> 编写简单的脚本实用工具</h3>
<h4> 归档</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>创建按日归档的脚本</h5>
<p>Daily_Archive.sh 脚本内容如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>创建按小时归档的脚本</h5>
<p>Hourly_Archive.sh 脚本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 管理用户账户</h4>
<h5>需要的功能</h5>
<p>删除账户在管理账户工作中比较复杂。在删除账户时，至少需要4个步骤：</p>
<ul>
<li>(1) 获得正确的待删除用户账户名；</li>
<li>(2) 杀死正在系统上运行的属于该账户的进程；</li>
<li>(3) 确认系统中属于该账户的所有文件；</li>
<li>(4) 删除该用户账户。</li>
</ul>
<h5>创建脚本</h5>
<p>完整的 <a href="http://delete-user.sh" target="_blank" rel="noopener noreferrer">delete-user.sh</a> 脚本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>运行脚本</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 监测磁盘空间</h4>
<h5>需要的功能</h5>
<p>你要用到的第一个工具是 du 命令。该命令能够显示出单个文件和目录的磁盘使用情况。 -s 选项用来总结目录一级的整体使用状况。这在计算单个用户使用的总体磁盘空间时很方便。下面的例子是使用 du 命令总结/home目录下每个用户的$HOME目录的磁盘占用情况。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-S （大写的S）选项能更适合我们的目的，它为每个目录和子目录分别提供了总计信息。这样你就能快速地定位问题的根源。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 创建与数据库、Web及电子邮件相关的脚本</h3>
<h4> MySQL 数据库</h4>
<h5>向mysql服务器发送命令</h5>
<p>有两种实现方法：</p>
<ul>
<li>发送单个命令并退出；</li>
<li>发送多个命令。</li>
</ul>
<p>要发送单个命令，你必须将命令作为 mysql 命令行的一部分。对于 mysql 命令，可以用 -e 选项。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>格式化数据</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-B</code> 选项指定mysql程序工作在批处理模式运行， <code>-s</code> （ silent ）选项用于禁止输出列标题和格式化符号</p>
<p>可以用 -X 命令行选项来输出</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-09-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">centos(kernel)内核升级</title>
    <id>https://topjf.github.io/linux/update-kernel.html</id>
    <link href="https://topjf.github.io/linux/update-kernel.html"/>
    <updated>2023-03-05T09:31:01.000Z</updated>
    <summary type="text">升级内核、并删除当前无用的系统内核版本 https://kernel.org/ (https://kernel.org/) mainline: 5.18-rc6 2022-05-08 [tarball (https://git.kernel.org/torvalds/t/linux-5.18-rc6.tar.gz)] [patch (https://g...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>centos(kernel)内核升级</h1>
<h2> 升级内核、并删除当前无用的系统内核版本</h2>
<p><a href="https://kernel.org/" target="_blank" rel="noopener noreferrer">https://kernel.org/</a></p>
<table>
<thead>
<tr>
<th>mainline:</th>
<th><strong>5.18-rc6</strong></th>
<th>2022-05-08</th>
<th>[<a href="https://git.kernel.org/torvalds/t/linux-5.18-rc6.tar.gz" target="_blank" rel="noopener noreferrer">tarball</a>]</th>
<th></th>
<th>[<a href="https://git.kernel.org/torvalds/p/v5.18-rc6/v5.17" target="_blank" rel="noopener noreferrer">patch</a>]</th>
<th>[<a href="https://git.kernel.org/torvalds/p/v5.18-rc6/v5.18-rc5" target="_blank" rel="noopener noreferrer">inc. patch</a>]</th>
<th>[<a href="https://git.kernel.org/torvalds/ds/v5.18-rc6/v5.18-rc5" target="_blank" rel="noopener noreferrer">view diff</a>]</th>
<th>[<a href="https://git.kernel.org/torvalds/h/v5.18-rc6" target="_blank" rel="noopener noreferrer">browse</a>]</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>stable:</td>
<td><strong>5.17.6</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.17.6.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.17.6.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.17.6.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.17.5-6.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.17.6/v5.17.5" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.17.6" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.17.6" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>stable:</td>
<td><strong>5.16.20 [EOL]</strong></td>
<td>2022-04-13</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.16.20.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.16.20.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.16.20.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.16.19-20.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.16.20/v5.16.19" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.16.20" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.16.20" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>longterm:</td>
<td><strong>5.15.38</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.38.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.38.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.15.38.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.15.37-38.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.15.38/v5.15.37" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.15.38" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.15.38" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>longterm:</td>
<td><strong>5.10.114</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.114.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.114.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.10.114.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.10.113-114.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.10.114/v5.10.113" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.10.114" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.10.114" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>longterm:</td>
<td><strong>5.4.192</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.192.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.192.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.4.192.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.4.191-192.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.4.192/v5.4.191" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.4.192" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.4.192" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
</tbody>
</table>
<h3> centos 内核升级</h3>
<p><a href="http://www.elrepo.org/" target="_blank" rel="noopener noreferrer">http://www.elrepo.org/</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看可升级的内核版本</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>可安装的软件包</strong></p>
<p>kernel-lt.x86_64  5.4.211-1.el7.elrepo  elrepo-kernel</p>
<p>kernel-ml.x86_64  5.19.4-1.el7.elrepo  elrepo-kernel</p>
<p><strong>安装内核</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看当前系统内可用内核</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置开机从新内核版本启动（其中 0 是上面查询出来的可用内核编号）</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 并删除当前无用的系统内核版本</h3>
<p><strong>所有已安装的内核版本</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当前使用的内核版本</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2021-08-14T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">YUM 源配置</title>
    <id>https://topjf.github.io/linux/yum-repo.html</id>
    <link href="https://topjf.github.io/linux/yum-repo.html"/>
    <updated>2023-03-05T16:15:05.000Z</updated>
    <summary type="text">https://blog.csdn.net/qq42476834/article/details/121433712 (https://blog.csdn.net/qq42476834/article/details/121433712) 查看系统的版本：cat /etc/redhat-release 一、用Centos镜像搭建本地yum源 1.安装C...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>yum 源配置</h1>
<p><a href="https://blog.csdn.net/qq_42476834/article/details/121433712" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_42476834/article/details/121433712</a></p>
<p><strong>查看系统的版本：</strong><code>cat /etc/redhat-release</code></p>
<h2> 一、用Centos镜像搭建本地yum源</h2>
<h3> 1.安装Centos后默认的yum源 如下</h3>
<blockquote>
<p>ll /etc/yum.repos.d/</p>
</blockquote>
<h3> 2.把默认yum源备份(可选)</h3>
<blockquote>
<p>cp CentOS-Base.repo  CentOS-Base-cp.repo</p>
</blockquote>
<h3> 3.在虚拟机上挂载CentOS镜像文件</h3>
<figure><figcaption></figcaption></figure>
<blockquote>
<p>(1) mount -t iso9660 /dev/sr0 /opt/centos</p>
<p>(2) mount /dev/cdrom /mnt/cdrom</p>
</blockquote>
<p><strong>自定义配置文件名：</strong><code>vim /etc/yum.repos.d/local.repo</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.清除缓存</h3>
<blockquote>
<p>yum clean all             //全部消除缓存</p>
<p>yum makecache        //把yum源缓存到本地，加快软件的搜索好安装速度</p>
<p>yum -y update //更新yum库存</p>
<p>yum repolist        //列出个包</p>
</blockquote>
<h2> 二、把默认的CentOS yum源修改成国内的aliyun-yum源</h2>
<h3> 1.进入yum目录</h3>
<blockquote>
<p>cd /etc/yum.repos.d/</p>
</blockquote>
<h3> 2.把默认yum源备份(可选项)</h3>
<blockquote>
<p>cp CentOS-Base.repo  CentOS-Base.repo-cp</p>
</blockquote>
<h3> 3.下载ailiyun的yum源配置文件到/etc/yum.repos.d/</h3>
<p><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.613b1b11Q4GiOU" target="_blank" rel="noopener noreferrer">centos-yum-阿里官网配置</a></p>
<p><strong>CentOS 6：</strong></p>
<blockquote>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/Centos-6.repo" target="_blank" rel="noopener noreferrer">https://mirrors.aliyun.com/repo/Centos-6.repo</a></p>
<p>或者</p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/Centos-6.repo" target="_blank" rel="noopener noreferrer">https://mirrors.aliyun.com/repo/Centos-6.repo</a></p>
</blockquote>
<p><strong>CentOS 7：</strong></p>
<blockquote>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener noreferrer">https://mirrors.aliyun.com/repo/Centos-7.repo</a></p>
<p>或者</p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener noreferrer">https://mirrors.aliyun.com/repo/Centos-7.repo</a></p>
</blockquote>
<p><strong>CentOS 8：</strong></p>
<blockquote>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/Centos-8.repo" target="_blank" rel="noopener noreferrer">https://mirrors.aliyun.com/repo/Centos-8.repo</a></p>
<p>或者</p>
<p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/Centos-8.repo" target="_blank" rel="noopener noreferrer">https://mirrors.aliyun.com/repo/Centos-8.repo</a></p>
</blockquote>
<h3> 4.清除缓存</h3>
<blockquote>
<p>yum clean all             //全部消除缓存</p>
<p>yum makecache        //把yum源缓存到本地，加快软件的搜索好安装速度</p>
<p>yum -y update //更新yum库存</p>
<p>yum repolist        //列出个包</p>
</blockquote>
<h2> 三、把默认的CentOS yum源修改成国内的163源</h2>
<h3> 1.安装Centos后默认的yum源如下</h3>
<blockquote>
<p>ll /etc/yum.repos.d/</p>
</blockquote>
<h3> 2.把默认yum源备份(可选)</h3>
<blockquote>
<p>cp CentOS-Base.repo  CentOS-Base.repo-cp</p>
</blockquote>
<h3> 3.下载163 yum源repo文件</h3>
<p><strong>CentOS 5：</strong></p>
<blockquote>
<p>wget <a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo" target="_blank" rel="noopener noreferrer">http://mirrors.163.com/.help/CentOS5-Base-163.repo</a></p>
</blockquote>
<p><strong>CentOS 6：</strong></p>
<blockquote>
<p>wget <a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" target="_blank" rel="noopener noreferrer">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></p>
</blockquote>
<p><strong>CentOS 7：</strong></p>
<blockquote>
<p>wget <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener noreferrer">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p>
</blockquote>
<p><strong>CentOS 8：</strong></p>
<blockquote>
<p>wget <a href="http://mirrors.163.com/.help/CentOS8-Base-163.repo" target="_blank" rel="noopener noreferrer">http://mirrors.163.com/.help/CentOS8-Base-163.repo</a></p>
</blockquote>
<p><em>运行</em></p>
<blockquote>
<p>wget -O /etc/yum.repos.d/CentOS8-Base-163.repo <a href="http://mirrors.163.com/.help/CentOS8-Base-163.repo" target="_blank" rel="noopener noreferrer">http://mirrors.163.com/.help/CentOS8-Base-163.repo</a></p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 4.清除缓存</h3>
<blockquote>
<p>yum clean all             //全部消除缓存</p>
<p>yum makecache        //把yum源缓存到本地，加快软件的搜索好安装速度</p>
<p>yum -y update //更新yum库存</p>
<p>yum repolist        //列出个包</p>
</blockquote>
<hr>
<p><mark>下面可忽略</mark>：</p>
<h2> 四、修改yum源的优先级</h2>
<h3> 1.查看系统是否安装了优先级的插件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2.安装yum-plugin-priorities.noarch插件</h3>
<blockquote>
<p>yum -y install yum-plugin-priorities.noarch</p>
</blockquote>
<h3> 3.查看插件是否启用</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4.修改本地yum源优先使用</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5.测试</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2021-08-14T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ElasticSearch 全文检索</title>
    <id>https://topjf.github.io/middleware/elastic-search.html</id>
    <link href="https://topjf.github.io/middleware/elastic-search.html"/>
    <updated>2023-03-05T14:57:36.000Z</updated>
    <summary type="text">1. ElasticSearch概念 1.1 ES介绍 应用程序搜索 网站搜索 企业搜索 日志处理和分析 基础设施指标和容器监测 应用程序性能监测 地理空间数据分析和可视化 安全分析 业务分析 官方文档 : 官方中文 : 社区中文: 1.2 基本概念 Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ElasticSearch</h1>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> 1. ElasticSearch概念</h2>
<h3> 1.1 ES介绍</h3>
<p>应用程序搜索 网站搜索 企业搜索 日志处理和分析</p>
<p>基础设施指标和容器监测 应用程序性能监测</p>
<p>地理空间数据分析和可视化 安全分析 业务分析</p>
<p>官方文档 : <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>
<p>官方中文 : <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/foreword_id.html" target="_blank" rel="noopener noreferrer">https://www.elastic.co/guide/cn/elasticsearch/guide/current/foreword_id.html</a></p>
<p>社区中文: <a href="https://es.xiaoleilu.com/index.html%E3%80%81http://doc.codingdict.com/elasticsearch/0/" target="_blank" rel="noopener noreferrer">https://es.xiaoleilu.com/index.html、http://doc.codingdict.com/elasticsearch/0/</a></p>
<h3> 1.2 基本概念</h3>
<p>Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。</p>
<p>对比关系：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>index:索引</p>
<p>type: 数据类型</p>
<p>document</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是：Elasticsearch本身就是分布式的，因此即便你只有一个节点，Elasticsearch默认也会对你的数据进行分片和副本操作，
当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。</p>
<h2> 2 安装</h2>
<p><a href="https://www.elastic.co/cn/downloads/elasticsearch#ga-release" target="_blank" rel="noopener noreferrer">downloads</a></p>
<blockquote>
<p>docker pull elasticsearch:7.14.0      存储和检索数据</p>
<p>docker pull kibana:7.14.0        可视化数据</p>
</blockquote>
<p><a href="https://blog.csdn.net/qq_42476834/article/details/112675953" target="_blank" rel="noopener noreferrer">教程</a></p>
<p><a href="/tools/docker/docker-install-mysql-redis-nginx-nacos-mq-es.html#elasticsearch-kibana" target="blank">具体 Docker 安装配置-站内跳转</a></p>
<h3> 查看 elasticsearch</h3>
<figure><figcaption></figcaption></figure>
<h3> 查看 kibana</h3>
<figure><figcaption></figcaption></figure>
<h2> 3 索引操作（indices）</h2>
<h3> 3.1 查询索引</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>es 中会默认存在一个名为.kibana和.kibana_task_manager的索引</p>
<p>表头的含义</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:left">含义说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">health</td>
<td style="text-align:left">green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)</td>
</tr>
<tr>
<td style="text-align:center">status</td>
<td style="text-align:left">是否能使用</td>
</tr>
<tr>
<td style="text-align:center">index</td>
<td style="text-align:left">索引名</td>
</tr>
<tr>
<td style="text-align:center">uuid</td>
<td style="text-align:left">索引统一编号</td>
</tr>
<tr>
<td style="text-align:center">pri</td>
<td style="text-align:left">主节点几个</td>
</tr>
<tr>
<td style="text-align:center">rep</td>
<td style="text-align:left">从节点几个</td>
</tr>
<tr>
<td style="text-align:center">docs.count</td>
<td style="text-align:left">文档数</td>
</tr>
<tr>
<td style="text-align:center">docs.deleted</td>
<td style="text-align:left">文档被删了多少</td>
</tr>
<tr>
<td style="text-align:center">store.size</td>
<td style="text-align:left">整体占空间大小</td>
</tr>
<tr>
<td style="text-align:center">pri.store.size</td>
<td style="text-align:left">主节点占</td>
</tr>
</tbody>
</table>
<h3> 3.2 创建索引</h3>
<p>保存: PUT /index/type/标识id</p>
<p>如: PUT /customer/demo/1</p>
<p><strong>PUT 和 POST都可以.</strong></p>
<p><em>POST</em> 新增。如果不指定id，会自动生成id。指定id就会修改这个数据，并新增版本号</p>
<p><em>PUT</em> 可以新增&amp;修改。PUT必须指定id,由于PUT需要指定id，我们一般都用来做修改操作，不指定id会报错 。</p>
<h4> 响应结果 <a name="响应结果"></a></h4><a name="响应结果">
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></a><h4><a name="响应结果"></a> PUT</h4>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>不指定ID报错</p>
<figure><figcaption></figcaption></figure>
<h4> POST</h4>
<figure><figcaption></figcaption></figure>
<h3> 3.3 get 查询文档&amp;乐观锁</h3>
<p><a href="#%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C">响应结果</a></p>
<p>get <a href="http://192.168.101.5:9200/customer/demo/1" target="_blank" rel="noopener noreferrer">http://192.168.101.5:9200/customer/demo/1</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>更新携带 ?if_seq_no=14&amp;if_primary_term=1</p>
</blockquote>
<h4> 并发修改测试:多个人同时修改一个数据</h4>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>读取</p>
<figure><figcaption></figcaption></figure>
<p>如果想要修改成功,就需要获取最新的_seq_no</p>
<h3> 3.4 post 更新文档</h3>
<p>更新1</p>
<figure><figcaption></figcaption></figure>
<p>读取</p>
<figure><figcaption></figcaption></figure>
<p>更新2</p>
<figure><figcaption></figcaption></figure>
<h3> 3.5 删除文档&amp;索引</h3>
<p>删除ID: <a href="http://192.168.101.5:9200/customer/demo/id/" target="_blank" rel="noopener noreferrer">http://192.168.101.5:9200/customer/demo/id/</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除索引: <a href="http://192.168.101.5:9200/customer/" target="_blank" rel="noopener noreferrer">http://192.168.101.5:9200/customer/</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看索引: <a href="http://192.168.101.5:9200/_cat/indices" target="_blank" rel="noopener noreferrer">http://192.168.101.5:9200/_cat/indices</a></p>
<h3> 3.6 post bulk批量导入 API</h3>
<h4> 使用postman请求</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>post <a href="http://192.168.101.5:9200/customer/demo/_bulk" target="_blank" rel="noopener noreferrer">http://192.168.101.5:9200/customer/demo/_bulk</a></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://192.168.101.5:9200/customer/demo/1" target="_blank" rel="noopener noreferrer">http://192.168.101.5:9200/customer/demo/1</a></p>
<h4> 可视化操作</h4>
<figure><figcaption></figcaption></figure>
<p>POST /_bulk</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> 样本测试数据</h4>
<p><a href="https://download.elastic.co/demos/kibana/gettingstarted/accounts.zip" target="_blank" rel="noopener noreferrer">accounts.zip</a></p>
<figure><figcaption></figcaption></figure>
<h2> 4 映射配置（_mapping）</h2>
<p>索引有了，接下来肯定是添加数据。但是，在添加数据之前必须定义映射。</p>
<p>什么是映射？</p>
<p>映射是定义文档的过程，文档包含哪些字段，这些字段是否保存，是否索引，是否分词等</p>
<p>只有配置清楚，Elasticsearch才会帮我们进行索引库的创建（不一定）</p>
<h3> 4.1 PUT 创建映射字段</h3>
<p>PUT /索引库名/_mapping/类型名称</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型名称：就是前面将的type的概念，类似于数据库中的不同表</p>
<p>字段名：类似于列名，properties下可以指定许多字段。</p>
<p>每个字段可以有很多属性。例如：</p>
<ul>
<li>type：类型，可以是text、long、short、date、integer、object等</li>
<li>index：是否索引，默认为true</li>
<li>store：是否存储，默认为false</li>
<li>analyzer：分词器，这里使用ik分词器：<code>ik_max_word</code>或者<code>ik_smart</code></li>
</ul>
<p><strong>示例</strong></p>
<p>发起请求：</p>
<p><strong>示例1</strong></p>
<p>PUT atguigu/_mapping/goods</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例2</strong></p>
<p>PUT /my_index</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>响应结果：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 4.2 GET 查看映射关系</h3>
<p>语法：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>响应：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>type：字段类型。String（text  keyword） Numeric（long integer float double） date boolean</p>
<p>index：是否创建索引</p>
<p>analyzer：分词器（ik_max_word）</p>
<h3> 4.3 PUT 添加索引字段</h3>
<p>PUT /my_index/_mapping</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于已经存在的映射字段，我们不能更新。更新必须创建新的索引进行数据迁移</p>
<h3> 4.4 映射 PUT 数据迁移</h3>
<p>_type="account" 变为&gt;_type: "_doc",，取消了type，6.0之后取消了type</p>
<p>GET /bank/_mapping</p>
<p>PUT /newbank</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GET /newbank</p>
<p>POST _reindex</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>GET /newbank/_search #_type="account" 变为&gt; _type: "_doc",，取消了type，6.0之后取消了type</p>
</blockquote>
<h2> 5 新增文档（document）</h2>
<p>有了索引、类型和映射，就可以对文档做增删改查操作了。</p>
<h3> 5.1 基本玩法</h3>
<p>如果我们想要自己新增的时候指定id，可以这么做：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示：</p>
<p>查询得到两条数据：小米手机的id是我们指定的id</p>
<ul>
<li><code>_source</code>：源文档信息，所有的数据都在里面。</li>
<li><code>_id</code>：这条文档的唯一标示，与文档自己的id字段没有关联</li>
</ul>
<h3> 5.2 智能判断</h3>
<p>事实上Elasticsearch非常智能，你不需要给索引库设置任何mapping映射，它也可以根据你输入的数据来判断类型，动态添加数据映射。</p>
<p>测试一下：</p>
<p>POST /atguigu/goods/2</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们额外添加了stock库存，saleable是否上架，attr其他属性几个字段。</p>
<p>来看结果：<code>GET /atguigu/_search</code></p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看下索引库的映射关系: <code>GET /atguigu/_mapping</code></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>stock，saleable，attr都被成功映射了。</p>
<p>如果是字符串类型的数据，会添加两种类型：text + keyword。如上例中的category 和 brand</p>
<h2> 6 删除数据</h2>
<p>删除使用DELETE请求，同样，需要根据id进行删除：</p>
<p><strong>语法</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例：</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结果：</strong></p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 7 分词</h2>
<h3> 7.1 默认分词器，对中文不友好</h3>
<p>POST _analyze</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 7.2 ik 分词器</h3>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener noreferrer">github 下载</a></p>
<p>解压到es：plugins</p>
<p>重启es</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 7.3 自定义分词</h3>
<p><strong>nginx 配置</strong></p>
<p><a href="http://localhost:50005/es/fenci.txt" target="_blank" rel="noopener noreferrer">http://localhost:50005/es/fenci.txt</a></p>
<p>ik/config/IKAnalyzer.cfg.xml:</p>
<p><code>&lt;entry key="remote_ext_dict"&gt;http://localhost:50005/es/fenci.txt&lt;/entry&gt;</code></p>
<p>重启es</p>
<h2> 8 查询</h2>
<h3> 8.1 2种查询  <a name="2种查询"></a></h3><a name="2种查询">
<table>
<thead>
<tr>
<th>took</th>
<th>Elasticsearch执行搜索的时间(毫秒)</th>
</tr>
</thead>
<tbody>
<tr>
<td>time_out</td>
<td>告诉我们搜索是否超时</td>
</tr>
<tr>
<td>_shards</td>
<td>告诉我们多少个分片被搜索了，以及统计了成功/失败的搜索分片</td>
</tr>
<tr>
<td>hits</td>
<td>搜索结果</td>
</tr>
<tr>
<td>hits.total</td>
<td>搜索结果</td>
</tr>
<tr>
<td>hits.hits</td>
<td>实际的搜索结果数组(默认为前10的文档)</td>
</tr>
<tr>
<td>sort</td>
<td>结果的排序key (键) (没有则按score排序)</td>
</tr>
<tr>
<td>score和max_score</td>
<td>相关性得分和最高分</td>
</tr>
</tbody>
</table>
<p>GET bank/_search?q=*&amp;sort=account_number:asc</p>
<p>GET bank/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询所有：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据id查询：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了上述简单查询之外。elasticsearch作为搜索引擎，最复杂最强大的功能就是搜索查询功能。包括：匹配查询、词条查询、模糊查询、组合查询、范围查询、高亮、排序、分页等等查询功能。</p>
<p>基本查询语法如下：</p>
<p>GET /索引库名/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的query代表一个查询对象，里面可以有不同的查询属性</p>
<ul>
<li>查询类型：
<ul>
<li>例如：<code>match_all</code>，&nbsp;<code>match</code>，<code>term</code>&nbsp;，&nbsp;<code>range</code> 等等</li>
</ul>
</li>
<li>查询条件：查询条件会根据类型的不同，写法也有差异，后面详细讲解</li>
</ul>
<p>查询结果：</p>
<ul>
<li>took：查询花费时间，单位是毫秒</li>
<li>time_out：是否超时</li>
<li>_shards：分片信息</li>
<li>hits：搜索结果总览对象
<ul>
<li>total：搜索到的总条数</li>
<li>max_score：所有结果中文档得分的最高分</li>
<li>hits：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息
<ul>
<li>_index：索引库</li>
<li>_type：文档类型</li>
<li>_id：文档id</li>
<li>_score：文档得分</li>
<li>_source：文档的源数据</li>
</ul>
</li>
</ul>
</li>
</ul>
</a><h3><a name="2种查询"></a> 8.2 数据准备</h3>
<p>POST /atguigu/goods/_bulk</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对非文本数据检索用 trem，对文本|全文检索就用 match</p>
<h3> 8.3 匹配查询（match &amp;&amp; match_all）</h3>
<h4> 8.3.1 查询所有（match_all ）</h4>
<p>GET /atguigu/_search</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>query</code>：代表查询对象</li>
<li><code>match_all</code>：代表查询所有</li>
</ul>
<h4> 8.3.2 条件匹配（match ）</h4>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询出很多数据，不仅包括<code>小米手机</code>，而且与<code>小米</code>或者<code>手机</code>相关的都会查询到，说明多个词之间是<code>or</code>的关系。</p>
<p>某些情况下，我们需要更精确查找，我们希望这个关系变成<code>and</code>，可以这样做：</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询结果：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 8.3.3 短语匹配 （match phrase） <a name="短语匹配"></a></h4><a name="短语匹配">
<p>GET bank/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只会包含 address=mill lane 记录</p>
</a><h4><a name="短语匹配"></a> 8.3.4 子属性匹配（字段.xx） <a name="子属性匹配"></a></h4><a name="子属性匹配">
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></a><h4><a name="子属性匹配"></a> 8.3.5 多字段匹配（multi_match） <a name="多字段匹配"></a></h4><a name="多字段匹配">
<p><code>match</code>只能根据一个字段匹配查询，如果要根据多个字段匹配查询可以使用<code>multi_match</code></p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fields值匹配到query</p>
</a><h3><a name="多字段匹配"></a> 8.4 词条查询，精确值匹配（term）</h3>
<p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些<strong>未分词</strong>的字符串。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.5 范围查询（range）</h3>
<p><code>range</code> 查询找出那些落在指定区间内的数字或者时间</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> range查询允许以下字符：gt、gte、lt、lte</h4>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">gt</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">gte</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">lt</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">lte</td>
<td style="text-align:center">小于等于</td>
</tr>
</tbody>
</table>
<h3> 8.6 布尔组合（bool)</h3>
<p>布尔查询又叫 <strong>组合查询、复合查询</strong></p>
<p><code>bool</code>把各种其它查询通过<code>must</code>（与）、<code>must_not</code>（非）、<code>should</code>（或）的方式进行组合</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GET bank/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询gender=M并且address=Mill</p>
<p>GET bank/_search</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>查询gender=F &amp; address=Mill &amp; age!=38 ，lastname能匹配到最好，没匹配到也不伤大雅</p>
</blockquote>
<p>注意：一个组合查询里面只能出现一种组合，不能混用</p>
<h3> 8.7 过滤（filter）</h3>
<p>所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件影响评分，那么就不要把过滤条件作为查询条件来用。而是使用<code>filter</code>方式：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：filter 最好是放在最后过滤，这样不会影响查询条件和相关性得分。<code>filter</code>中还可以再次进行<code>bool</code>组合条件过滤。</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 8.8 排序（sort）</h3>
<p><code>sort</code> 可以让我们按照不同的字段进行排序，并且通过<code>order</code>指定排序的方式</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8.9 分页（from/size）</h3>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>from：从那一条开始</p>
<p>size：取多少条</p>
<h3> 8.10 高亮（highlight）</h3>
<p>发现：高亮的本质是给关键字添加了 <code>&lt;em&gt;</code> 标签，在前端再给该标签添加样式即可。</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fields：高亮字段</p>
<p>pre_tags：前置标签</p>
<p>post_tags：后置标签</p>
<p>查询结果如下：</p>
<h3> 8.11 结果过滤（_source）</h3>
<p>默认情况下，elasticsearch在搜索的结果中，会把文档中保存在<code>_source</code>的所有字段都返回。</p>
<p>如果我们只想获取其中的部分字段，可以添加<code>_source</code>的过滤</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果，只有两个字段：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9 聚合（aggregations）</h2>
<p><em>搜索address中包含mill的所有人的年龄分布以及平均年龄，但不显示这些人的详情</em></p>
<p>GET bank/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>按照年龄聚合，并且请求这些年龄段的这些人的平均薪资</em></p>
<p>GET bank/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>查出所有年龄分布，并且这些年隆段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</em></p>
<p>GET bank/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>聚合可以让我们极其方便的实现对数据的统计、分析。例如：</p>
<ul>
<li>什么品牌的手机最受欢迎？</li>
<li>这些手机的平均价格、最高价格、最低价格？</li>
<li>这些手机每月的销售情况如何？</li>
</ul>
<p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现实时搜索效果。</p>
<h3> 9.1 基本概念</h3>
<p>Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫<code>桶</code>，一个叫<code>度量</code>：</p>
<p><strong>桶（bucket）</strong></p>
<p>桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个<code>桶</code>，例如我们根据国籍对人划分，可以得到<code>中国桶</code>、<code>英国桶</code>，<code>日本桶</code>
或者我们按照年龄段对人进行划分：<code>0~10,10~20,20~30,30~40</code>等。</p>
<p>Elasticsearch中提供的划分桶的方式有很多：</p>
<ul>
<li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li>
<li>Histogram Aggregation：根据数值阶梯分组，与日期类似</li>
<li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li>
<li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li>
</ul>
<p>bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量</p>
<p><strong>度量（metrics）</strong></p>
<p>分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为<code>度量</code></p>
<p>比较常用的一些度量聚合方式：</p>
<ul>
<li>Avg Aggregation：求平均值</li>
<li>Max Aggregation：求最大值</li>
<li>Min Aggregation：求最小值</li>
<li>Percentiles Aggregation：求百分比</li>
<li>Stats Aggregation：同时返回avg、max、min、sum、count等</li>
<li>Sum Aggregation：求和</li>
<li>Top hits Aggregation：求前几</li>
<li>Value Count Aggregation：求总数</li>
</ul>
<h3> 9.2 聚合为桶</h3>
<p>首先，我们按照手机的品牌<code>attr.brand.keyword</code>来划分<code>桶</code></p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>size： 查询条数，这里设置为0，因为我们不关心搜索到的数据，只关心聚合结果，提高效率</li>
<li>aggs：声明这是一个聚合查询，是aggregations的缩写
<ul>
<li>brands：给这次聚合起一个名字，任意。
<ul>
<li>terms：划分桶的方式，这里是根据词条划分
<ul>
<li>field：划分桶的字段</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>结果：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>hits：查询结果为空，因为我们设置了size为0</li>
<li>aggregations：聚合的结果</li>
<li>brands：我们定义的聚合名称</li>
<li>buckets：查找到的桶，每个不同的品牌字段值都会形成一个桶
<ul>
<li>key：这个桶对应的品牌字段的值</li>
<li>doc_count：这个桶中的文档数量</li>
</ul>
</li>
</ul>
<h3> 9.3 桶内度量</h3>
<p>前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度量。 例如，每种品牌手机的平均价格是多少？</p>
<p>因此，我们需要告诉Elasticsearch<code>使用哪个字段</code>，<code>使用何种度量方式</code>进行运算，这些信息要嵌套在<code>桶</code>内，<code>度量</code>的运算会基于<code>桶</code>内的文档进行</p>
<p>现在，我们为刚刚的聚合结果添加 求价格平均值的度量：</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>aggs：我们在上一个aggs(brands)中添加新的aggs。可见<code>度量</code>也是一个聚合</li>
<li>avg_price：聚合的名称</li>
<li>avg：度量的类型，这里是求平均值</li>
<li>field：度量运算的字段</li>
</ul>
<p>结果：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到每个桶中都有自己的<code>avg_price</code>字段，这是度量聚合的结果</p>
<h3> 9.4 桶内嵌套桶</h3>
<p>刚刚的案例中，我们在桶内嵌套度量运算。事实上桶不仅可以嵌套运算， 还可以再嵌套其它桶。也就是说在每个分组中，再分更多组。</p>
<p>比如：我们想统计每个品牌都生产了那些产品，按照<code>attr.category.keyword</code>字段再进行分桶</p>
<p>GET /atguigu/_search</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部分结果：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>我们可以看到，新的聚合<code>categorys</code>被嵌套在原来每一个<code>brands</code>的桶中。</li>
<li>每个品牌下面都根据 <code>attr.category.keyword</code>字段进行了分组</li>
<li>我们能读取到的信息：
<ul>
<li>华为有4中产品</li>
<li>华为产品的平均售价是 3999.0美元。</li>
<li>其中3种手机产品，1种笔记本产品</li>
</ul>
</li>
</ul>
<h2> 10 SpringData-Elasticsearch</h2>
<h3> 10.1 介绍</h3>
<p>目前市面上有两类客户端</p>
<p>一类是TransportClient 为代表的ES原生客户端，不能执行原生dsl语句必须使用它的Java api方法。</p>
<p>另外一种是以Rest Api为主的missing client，最典型的就是jest。 这种客户端可以直接使用dsl语句拼成的字符串，直接传给服务端，然后返回json字符串再解析。</p>
<p>两种方式各有优劣，但是最近elasticsearch官网，宣布计划在7.0以后的版本中废除TransportClient。以RestClient为主。</p>
<p>由于原生的Elasticsearch客户端API非常麻烦。所以这里直接学习Spring提供的套件：Spring Data Elasticsearch。</p>
<p><strong>spring-data-Elasticsearch 使用之前,必须先确定版本,elasticsearch 对版本的要求比较高。</strong></p>
<p>java-API选择：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener noreferrer">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p>
<p>选择：Java REST Client <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/index.html" target="_blank" rel="noopener noreferrer">7.14]</a> =&gt; JavaHighLevelRESTClient <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html" target="_blank" rel="noopener noreferrer">文档</a></p>
<h3> 10.2 创建springboot 项目</h3>
<p>创建单独项目 yumall-search</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加入nacos、common、@EnableDiscoveryClient</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10.3 ban测试</h3>
<p>创建配置类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10.4 测试保存</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10.5 测试检索</h3>
<h4> 结构</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 实例</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 10.6 创建module</h3>
<p>在application.properties中添加配置</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10.7 实体类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Data通过注解来声明字段的映射属性，有下面的三个注解：</p>
<ul>
<li><code>@Document</code> 作用在类，标记实体类为文档对象，一般有四个属性
<ul>
<li>indexName：对应索引库名称</li>
<li>type：对应在索引库中的类型</li>
<li>shards：分片数量，默认5</li>
<li>replicas：副本数量，默认1</li>
</ul>
</li>
<li><code>@Id</code> 作用在成员变量，标记一个字段作为id主键</li>
<li><code>@Field</code> 作用在成员变量，标记为文档的字段，并指定字段映射属性：
<ul>
<li>type：字段类型，取值是枚举：FieldType</li>
<li>index：是否索引，布尔类型，默认是true</li>
<li>store：是否存储，布尔类型，默认是false</li>
<li>analyzer：分词器名称：ik_max_word</li>
</ul>
</li>
</ul>
<h3> 10.8 创建索引及映射</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10.9 Repository文档操作</h3>
<p>Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。</p>
<p>其中ElasticsearchRepository接口功能最强大。该接口的方法包括：</p>
<h4> 10.9.1 新增</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改和新增是同一个接口，区分的依据就是id，这一点跟我们在页面发起PUT请求是类似的。</p>
<h4> 10.9.2 删除</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10.10 查询</h3>
<h4> 10.10.1 基本查询</h4>
<p>查询一个：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10.10.2 条件查询</h4>
<p>Spring Data 的另一个强大功能，是根据方法名称自动实现功能。</p>
<p>比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。</p>
<p>当然，方法名称要符合一定的约定：</p>
<table>
<thead>
<tr>
<th>Keyword</th>
<th>Sample</th>
<th>Elasticsearch Query String</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>And</code></td>
<td><code>findByNameAndPrice</code></td>
<td><code>{"bool" : {"must" : [ {"field" : {"name" : "?"}}, {"field" : {"price" : "?"}} ]}}</code></td>
</tr>
<tr>
<td><code>Or</code></td>
<td><code>findByNameOrPrice</code></td>
<td><code>{"bool" : {"should" : [ {"field" : {"name" : "?"}}, {"field" : {"price" : "?"}} ]}}</code></td>
</tr>
<tr>
<td><code>Is</code></td>
<td><code>findByName</code></td>
<td><code>{"bool" : {"must" : {"field" : {"name" : "?"}}}}</code></td>
</tr>
<tr>
<td><code>Not</code></td>
<td><code>findByNameNot</code></td>
<td><code>{"bool" : {"must_not" : {"field" : {"name" : "?"}}}}</code></td>
</tr>
<tr>
<td><code>Between</code></td>
<td><code>findByPriceBetween</code></td>
<td><code>{"bool" : {"must" : {"range" : {"price" : {"from" : ?,"to" : ?,"include_lower" : true,"include_upper" : true}}}}}</code></td>
</tr>
<tr>
<td><code>LessThanEqual</code></td>
<td><code>findByPriceLessThan</code></td>
<td><code>{"bool" : {"must" : {"range" : {"price" : {"from" : null,"to" : ?,"include_lower" : true,"include_upper" : true}}}}}</code></td>
</tr>
<tr>
<td><code>GreaterThanEqual</code></td>
<td><code>findByPriceGreaterThan</code></td>
<td><code>{"bool" : {"must" : {"range" : {"price" : {"from" : ?,"to" : null,"include_lower" : true,"include_upper" : true}}}}}</code></td>
</tr>
<tr>
<td><code>Before</code></td>
<td><code>findByPriceBefore</code></td>
<td><code>{"bool" : {"must" : {"range" : {"price" : {"from" : null,"to" : ?,"include_lower" : true,"include_upper" : true}}}}}</code></td>
</tr>
<tr>
<td><code>After</code></td>
<td><code>findByPriceAfter</code></td>
<td><code>{"bool" : {"must" : {"range" : {"price" : {"from" : ?,"to" : null,"include_lower" : true,"include_upper" : true}}}}}</code></td>
</tr>
<tr>
<td><code>Like</code></td>
<td><code>findByNameLike</code></td>
<td><code>{"bool" : {"must" : {"field" : {"name" : {"query" : "?*","analyze_wildcard" : true}}}}}</code></td>
</tr>
<tr>
<td><code>StartingWith</code></td>
<td><code>findByNameStartingWith</code></td>
<td><code>{"bool" : {"must" : {"field" : {"name" : {"query" : "?*","analyze_wildcard" : true}}}}}</code></td>
</tr>
<tr>
<td><code>EndingWith</code></td>
<td><code>findByNameEndingWith</code></td>
<td><code>{"bool" : {"must" : {"field" : {"name" : {"query" : "*?","analyze_wildcard" : true}}}}}</code></td>
</tr>
<tr>
<td><code>Contains/Containing</code></td>
<td><code>findByNameContaining</code></td>
<td><code>{"bool" : {"must" : {"field" : {"name" : {"query" : "**?**","analyze_wildcard" : true}}}}}</code></td>
</tr>
<tr>
<td><code>In</code></td>
<td><code>findByNameIn(Collection&lt;String&gt;names)</code></td>
<td><code>{"bool" : {"must" : {"bool" : {"should" : [ {"field" : {"name" : "?"}}, {"field" : {"name" : "?"}} ]}}}}</code></td>
</tr>
<tr>
<td><code>NotIn</code></td>
<td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td>
<td><code>{"bool" : {"must_not" : {"bool" : {"should" : {"field" : {"name" : "?"}}}}}}</code></td>
</tr>
<tr>
<td><code>Near</code></td>
<td><code>findByStoreNear</code></td>
<td><code>Not Supported Yet !</code></td>
</tr>
<tr>
<td><code>True</code></td>
<td><code>findByAvailableTrue</code></td>
<td><code>{"bool" : {"must" : {"field" : {"available" : true}}}}</code></td>
</tr>
<tr>
<td><code>False</code></td>
<td><code>findByAvailableFalse</code></td>
<td><code>{"bool" : {"must" : {"field" : {"available" : false}}}}</code></td>
</tr>
<tr>
<td><code>OrderBy</code></td>
<td><code>findByAvailableTrueOrderByNameDesc</code></td>
<td><code>{"sort" : [{ "name" : {"order" : "desc"} }],"bool" : {"must" : {"field" : {"available" : true}}}}</code></td>
</tr>
</tbody>
</table>
<p>准备一组数据：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在UserRepository中定义一个方法：</p>
<p>第一种写法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种写法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 10.10.3 自定义查询</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NativeSearchQueryBuilder：Spring提供的一个查询条件构建器，帮助构建json格式的请求体</p>
<p><code>Page&lt;item&gt;</code>：默认是分页查询，因此返回的是一个分页的结果对象，包含属性：</p>
<ul>
<li>totalElements：总条数</li>
<li>totalPages：总页数</li>
<li>Iterator：迭代器，本身实现了Iterator接口，因此可直接迭代得到当前页的数据</li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="ElasticSearch"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-05-15T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Nginx</title>
    <id>https://topjf.github.io/middleware/nginx.html</id>
    <link href="https://topjf.github.io/middleware/nginx.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">常用指令 1) 重启：./sbin/nginx -s quit &amp;&amp; ./sbin/nginx 2) 加载配置：./sbin/nginx -s reload 3) 退出： ./sbin/nginx -s quit 4) 启动：./sbin/nginx 5) 检查文件：./sbin/nginx -t 6) 查看服务：ps -ef | grep nginx...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>nginx</h1>
<h2> 常用指令</h2>
<ol>
<li><strong>重启</strong>：./sbin/nginx -s quit &amp;&amp; ./sbin/nginx</li>
<li><strong>加载配置</strong>：./sbin/nginx -s reload</li>
<li><strong>退出</strong>： ./sbin/nginx -s quit</li>
<li><strong>启动</strong>：./sbin/nginx</li>
<li><strong>检查文件</strong>：./sbin/nginx -t</li>
<li><strong>查看服务</strong>：ps -ef | grep nginx</li>
</ol>
<h2> 配置</h2>
<h3> http配置</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 日志+自定义格式</h3>
<p>获取不到的值：以 - 代替</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>属性</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$server_addr</td>
<td>172.17.0.9</td>
<td>服务端IP地址</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">dd</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span></span></span></span>http_x_forwarded_for</td>
<td>172.17.0.1,"-"</td>
<td>客户端IP地址</td>
</tr>
<tr>
<td>$remote_user</td>
<td>-</td>
<td>客户端用户</td>
</tr>
<tr>
<td>$time_iso8601</td>
<td>2022-01-20T03:25:07+00:00</td>
<td>时间</td>
</tr>
<tr>
<td>$time_local</td>
<td>20/Jan/2022:03:05:54 +0000</td>
<td>时间</td>
</tr>
<tr>
<td>$request</td>
<td>"GET /codeutil/get/log HTTP/1.1"</td>
<td>请求</td>
</tr>
<tr>
<td>$request_time</td>
<td>12</td>
<td>请求处理时间-秒</td>
</tr>
<tr>
<td>$status</td>
<td>200</td>
<td>状态</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>19</td>
<td>发送的正文字节</td>
</tr>
<tr>
<td>$http_referer</td>
<td>"-"</td>
<td>记录从哪个页面链接访问过来的。<br>场景：防盗链（某网站通过url引用了你的页面，当用户在浏览器上点击url时，<br>http请求的头部中会通过referer头部，将该网站当前页面的url带上，<br>告诉服务器本次请求是由这个页面发起的。）</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>"ApiPOST Runtime +<a href="https://www.apipost.cn" target="_blank" rel="noopener noreferrer">https://www.apipost.cn</a>"<br>"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0"</td>
<td>记录调用端、访问端浏览器相关信息</td>
</tr>
</tbody>
</table>
<h3> https配置</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 代理配置</h3>
<h3> 负载均衡配置</h3>
<table>
<thead>
<tr>
<th>server标签</th>
<th>参数说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>server 10.0.0.6:80</td>
<td>负载均衡后面的RS配置，可以是IP或域名，如果不写端口，默认是80端口。高并发场景下，IP可换成域名，通过DNS做负载均衡。</td>
</tr>
<tr>
<td>weight=1</td>
<td>代表服务器的权重，默认值是1。权重数字越大表示接受的请求比例越大。</td>
</tr>
<tr>
<td>max_fails=1</td>
<td>Nginx尝试连接后端主机失败的次数，这个数值是配置proxy_next_upstream、fastcgi_next_upstream和memcached_next_upstream三个参数来使用的，<br>当Nginx接受后端服务器返回这三个参数定义的状态码时，会将这个请求转发给正常工作的后端服务器，例如404、502、503。max_fails的默认值是1；企业场景：建议2-3次。</td>
</tr>
<tr>
<td>backup</td>
<td>热备配置（RS）节点的高可用，当期面激活的RS都失败后会自动启用热备RS。这标志着这个服务器作为备份服务器，若主服务器全部宕机了，就会向他转发请求；<br>注意：当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</td>
</tr>
<tr>
<td>fail_timeout=10s</td>
<td>在max_fails定义的失败次数后，距离下次检查的间隔时间，默认是10s；如果max_fails是5，他就检测5次。如果5次都是502，那么他就会根据fail_timeout的值，<br>等待10s再去检查，还是只检查一次，如果持续502，在不重新加载nginx配置的情况下，每隔10s都只检测一次。常规业务：2-3秒比较合理。</td>
</tr>
<tr>
<td>down</td>
<td>这标识着服务器永远不可用，这个参数可配合ip_hash使用</td>
</tr>
</tbody>
</table>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 常规配置</h4>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 部署项目</h2>
<h3> 静态资源</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 部署 vue</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 代理java服务</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 完整真实案例</h2>
<p>nginx\conf\nginx.conf</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nginx\conf.d\javacode.conf</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nginx\conf.d\time.txt</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nginx\html</p>
<ul>
<li>50x.html</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>404.html</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>index.html</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="中间件"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-03-10T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">开源项目精选</title>
    <id>https://topjf.github.io/open-source/open-source.html</id>
    <link href="https://topjf.github.io/open-source/open-source.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="html"><![CDATA[<p>精选 Github 和 Gitee 上优质的开源项目。</p>
]]></summary>
    <content type="html"><![CDATA[<p>精选 Github 和 Gitee 上优质的开源项目。</p>
<!-- more -->
<h2> Java</h2>
<ul>
<li><a href="https://gitee.com/y_project" target="_blank" rel="noopener noreferrer">若依 系统开发得力干将</a></li>
<li></li>
<li></li>
</ul>
<h2> 前端</h2>
<h2> Linux</h2>
<h2> 其他</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开源项目"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-05-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">开发工具</title>
    <id>https://topjf.github.io/open-source/tools.html</id>
    <link href="https://topjf.github.io/open-source/tools.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java 相关 JADX (https://github.com/skylot/jadx) ：一款功能强大的反编译工具。; Recaf (https://github.com/Col-E/Recaf) ： Java 字节码编辑器，基于 ASM（Java 字节码操作框架） 来修改字节码，可简化编辑已编译 Java 应用程序的过程。; Redis 可视化管...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Java 相关</h2>
<ul>
<li><strong><a href="https://github.com/skylot/jadx" target="_blank" rel="noopener noreferrer">JADX</a></strong> ：一款功能强大的反编译工具。</li>
<li><strong><a href="https://github.com/Col-E/Recaf" target="_blank" rel="noopener noreferrer">Recaf</a></strong> ： Java 字节码编辑器，基于 ASM（Java 字节码操作框架） 来修改字节码，可简化编辑已编译 Java 应用程序的过程。</li>
</ul>
<h2> Redis 可视化管理</h2>
<ul>
<li><strong><a href="https://github.com/qishibo/AnotherRedisDesktopManager/blob/master/README.zh-CN.md" target="_blank" rel="noopener noreferrer">Another Redis Desktop Manager</a></strong> ：更快、更好、更稳定的 Redis 桌面(GUI)管理客户端。</li>
<li><strong><a href="https://github.com/ngbdf/redis-manager" target="_blank" rel="noopener noreferrer">Redis Manager</a></strong> ：Redis 一站式管理平台，支持集群（cluster、master-replica、sentinel）的监控、安装（除 sentinel）、管理、告警以及基本的数据操作功能。</li>
</ul>
<h2> Docker &amp; Kubernetes 可视化管理</h2>
<ul>
<li><strong><a href="https://github.com/portainer/portainer" target="_blank" rel="noopener noreferrer">Portainer</a></strong> ：可视化管理 Docker 和 Kubernetes。相关阅读：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247504221&amp;idx=1&amp;sn=85a3c69d64fba1b0d6d8485ab28ab4c4&amp;chksm=cea19e96f9d617802920d5769bafc824b3b80afdfb6166a00532f0caa3b6f5bdac930e4e89de&amp;token=693114125&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreferrer">《吊炸天的 Docker 图形化工具 Portainer，必须推荐给你！》</a>。</li>
</ul>
<h2> ZooKeeper 可视化管理</h2>
<ul>
<li><strong><a href="https://github.com/vran-dev/PrettyZoo" target="_blank" rel="noopener noreferrer">PrettyZoo</a></strong> ： 一个基于 Apache Curator 和 JavaFX 实现的 ZooKeeper 图形化管理客户端，颜值非常高，支持 Mac / Windows / Linux 。你可以使用 PrettyZoo 来实现对 ZooKeeper 的可视化增删改查。</li>
<li><strong><a href="https://zktools.readthedocs.io/en/latest/#installing" target="_blank" rel="noopener noreferrer">zktools</a></strong> ： 一个低延迟的 ZooKeeper 图形化管理客户端，颜值非常高，支持 Mac / Windows / Linux 。你可以使用 zktools 来实现对 ZooKeeper 的可视化增删改查。</li>
</ul>
<h2> Markdown</h2>
<ul>
<li><strong><a href="https://github.com/marktext/marktext" target="_blank" rel="noopener noreferrer">MarkText</a></strong> ：一个简单而优雅的开源 Markdown 编辑器，专注于速度和可用性。Linux、macOS 和 Windows 均适用。</li>
<li><strong><a href="https://www.typora.io/" target="_blank" rel="noopener noreferrer">Typora</a>、<a href="https://typoraio.cn/" target="_blank" rel="noopener noreferrer">Typora 中文站</a></strong> :我一直用的一款 Markdown 工具，直接文件夹视图和目录视图，支持 Markdown 格式直接导出成 PDF、HTML 等格式。</li>
<li><strong><a href="https://github.com/adam-p/markdown-here" target="_blank" rel="noopener noreferrer">Markdown Here</a></strong> ：使用 Markdown 语法发邮件，并且提供多种主题，快来拯救你的邮件格式吧！</li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开源项目"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Eclipse管理</title>
    <id>https://topjf.github.io/tools/eclipse.html</id>
    <link href="https://topjf.github.io/tools/eclipse.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">eclipse 汉化 1) 地址： 在上面这个地址里面寻找对应的版本地址，，选中复制，如我的版本网址（） 3) 点击help下的 About Eclipse 查看版本。 4) 点击help下的 Install New Software...。 5) 点开地址栏输入刚才复制的汉化网站，输入完成后点Add进行添加。 例如我的版本是neon，粘贴网址（） 6...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>eclipse</h1>
<h2> eclipse 汉化</h2>
<ol>
<li>地址：  <a href="http://www.eclipse.org/babel/downloads.php" target="_blank" rel="noopener noreferrer">http://www.eclipse.org/babel/downloads.php</a></li>
</ol>
<p>在上面这个地址里面寻找对应的版本地址，，选中复制，如我的版本网址（<a href="http://download.eclipse.org/technology/babel/update-site/R0.15.1/neon" target="_blank" rel="noopener noreferrer">http://download.eclipse.org/technology/babel/update-site/R0.15.1/neon</a>）</p>
<ol start="3">
<li>点击help下的  About Eclipse   查看版本。</li>
<li>点击help下的    Install New Software...。</li>
<li>点开地址栏输入刚才复制的汉化网站，输入完成后点Add进行添加。</li>
</ol>
<p>例如我的版本是neon，粘贴网址（<a href="http://download.eclipse.org/technology/babel/update-site/R0.15.1/neon" target="_blank" rel="noopener noreferrer">http://download.eclipse.org/technology/babel/update-site/R0.15.1/neon</a>）</p>
<ol start="6">
<li>在Name里勾选...Chinese（Simplified），，然后点击next。</li>
<li>然后会弹出协议界面，接受协议，再点击Finsh继续。</li>
<li>出现的加载界面请耐心等待，，同时之间会出现一两个界面，，请点击ok或yes接受安装。</li>
<li>然后重新启动eclipse就ok啦。</li>
</ol>
<h2> 集成与安装第三方插件</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-26T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">gradle管理</title>
    <id>https://topjf.github.io/tools/gradle.html</id>
    <link href="https://topjf.github.io/tools/gradle.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">技术选型 名称 版本 --------------------------------------------------------------------------------------------------------- JDK 17.0.3 Gradle 7.4.2，PDF文档 Groovy 1.5.8 - 3.0.9 Kotlin 1....</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>gradle 使用笔记</h1>
<h2> 技术选型</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>JDK</td>
<td>17.0.3</td>
</tr>
<tr>
<td>Gradle</td>
<td>7.4.2，<a target="_blank" href="https://docs.gradle.org/7.4.2/userguide/userguide.pdf">PDF文档</a></td>
</tr>
<tr>
<td>Groovy</td>
<td>1.5.8 - 3.0.9</td>
</tr>
<tr>
<td>Kotlin</td>
<td>1.3.72 - 1.5.31</td>
</tr>
<tr>
<td>IDEA</td>
<td>2021.2.2</td>
</tr>
</tbody>
</table>
<h2> jdk对应版本</h2>
<table>
<thead>
<tr>
<th>Java version</th>
<th>First Gradle version to support it</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>2.0</td>
</tr>
<tr>
<td>9</td>
<td>4.3</td>
</tr>
<tr>
<td>10</td>
<td>4.7</td>
</tr>
<tr>
<td>11</td>
<td>5.0</td>
</tr>
<tr>
<td>12</td>
<td>5.4</td>
</tr>
<tr>
<td>13</td>
<td>6.0</td>
</tr>
<tr>
<td>14</td>
<td>6.3</td>
</tr>
<tr>
<td>15</td>
<td>6.7</td>
</tr>
<tr>
<td>16</td>
<td>7.0</td>
</tr>
<tr>
<td>17</td>
<td>7.3</td>
</tr>
</tbody>
</table>
<h2> 下载与配置</h2>
<p><a target="_blank" href="https://gradle.org">首页</a>、<a target="_blank" href="https://gradle.org/releases/">下载页</a></p>
<p>选择 <code>7.4.2</code> 版本</p>
<figure><figcaption>image-20220710150404550</figcaption></figure>
<p>window配置</p>
<p>新建<code>系统环境变量</code></p>
<figure><figcaption>image-20220710150516799</figcaption></figure>
<figure><figcaption>image-20220710140953152</figcaption></figure>
<p>配置gradle本地仓库：<code>D:\rj-win\gradle-7.4.2\init.d\init.gradle</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启系统并校验 CMD：gradle -v</p>
<figure><figcaption>image-20220710154305711</figcaption></figure>
<h2> 与maven比较</h2>
<figure><figcaption></figcaption></figure>
<p><code>图中是大型多模块项目Maven和Gradle编译时间的对比，来自gradle官网</code></p>
<p>Gradle是：</p>
<ul>
<li>大型项目更快</li>
<li>无限制可定制 <code>==</code> 更陡峭的学习曲线</li>
<li>使用Groovy或Kotlin代替XML</li>
</ul>
<p>而Maven是：</p>
<ul>
<li>普遍采用</li>
<li>对于较小项目更简单</li>
<li>带有XML和尖括号</li>
</ul>
<h2> Groovy 的优点</h2>
<p>简要介绍一下Groovy。Groovy是一种JVM语言，它可以编译为与Java相同的字节码，并且可以与Java类无缝地互操作。Groovy是Java的向后兼容超集，这意味着Groovy可以透明地与Java库和代码交互。但是，它还增加了许多新功能：可选的键入，函数式编程，运行时灵活性以及许多元编程内容。它还极大地清理了Java中许多冗长的代码格式。Groovy尚未成为主流的开发语言，但是它已经在测试（由于其简化的语法和元编程功能）和构建系统中占据了一席之地。</p>
<h2> 创建项目 Gradle+Java</h2>
<figure><figcaption>image-20220710144146973</figcaption></figure>
<figure><figcaption>image-20220710143607023</figcaption></figure>
<p>选择 <code>是</code></p>
<p>下一步，设置 <code>组</code>、<code>工件</code>、<code>版本</code></p>
<figure><figcaption>image-20220710143759660</figcaption></figure>
<h3> 报错</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 重新修改gradle版本</h3>
<p><code>gradle -&gt; wrapper -&gt; gradle-wrapper.properties</code></p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改为：</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 创建项目 Gradle+Groovy</h2>
<h3> 为什么使用 Groovy?</h3>
<p>答案在于 Gradle 内部的运行环境。 虽然 Gradle 核心目的是作为通用构建工具，但它还是主要面向 Java 项目。 这些项目的团队成员显然熟悉 Java。我们认为一个构建工具应该尽可能地对所有团队成员透明。</p>
<h2> 创建项目 Gradle+Kotlin</h2>
<h2> 核心文件</h2>
<h3> build.gradle</h3>
<p>类似于maven的pom文件、依赖配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> settings.gradle</h3>
<p>项目的gradle配置，里面包含了创建的各子模块.</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> gradle -&gt; wrapper -&gt; gradle-wrapper.properties</h3>
<p>gradle服务核心配置</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> gradle.properties</h3>
<p>gradle环境参数配置</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 语法</h2>
<h3> build.gradle 配置信息格式</h3>
<p>Groovy</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Kotlin</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 依赖管理</h3>
<p>gradle依赖的粒度控制相较于Maven也更加精细，maven只有compile、provided、test、runtime四种scope，而gradle有以下几种scope：</p>
<p>1、implementation，默认的scope。implementation的作用域会让依赖在编译和运行时均包含在内，但是不会暴露在类库使用者的编译时。举例，如果我们的类库包含了gson，那么其他人使用我们的类库时，编译时不会出现gson的依赖。</p>
<p>2、api，和implementation类似，都是编译和运行时都可见的依赖。但是api允许我们将自己类库的依赖暴露给我们类库的使用者。</p>
<p>3、compileOnly和runtimeOnly，这两种顾名思义，一种只在编译时可见，一种只在运行时可见。而runtimeOnly和Maven的provided比较接近。</p>
<p>4、testImplementation，这种依赖在测试编译时和运行时可见，类似于Maven的test作用域。</p>
<p>5、testCompileOnly和testRuntimeOnly，这两种类似于compileOnly和runtimeOnly，但是作用于测试编译时和运行时。</p>
<p>通过简短精悍的依赖配置和多种多样的作用与选择，Gradle可以为我们提供比Maven更加优秀的依赖管理功能。</p>
<h2> 发布到 Maven 仓库</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-10T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">IDEA管理</title>
    <id>https://topjf.github.io/tools/idea.html</id>
    <link href="https://topjf.github.io/tools/idea.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">常用的插件 Alibaba Java、CamelCase、Chinese、codeGlance3、codota、GenerateAllSetter、gitee、Grep Console、mybatis-log、RestfulToolkit、Translation、vuejs、GsonFormatPlus、json parser JetBrains 全系...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 常用的插件</h2>
<p>Alibaba Java、CamelCase、Chinese、codeGlance3、codota、GenerateAllSetter、gitee、Grep Console、mybatis-log、RestfulToolkit、Translation、vuejs、GsonFormatPlus、json parser</p>
<h2> JetBrains 全系列产品无限试用</h2>
<p>1、本激活方法适用于2021.2.2-、2020、2019、2018全系列版本；</p>
<p>2、本教程适用于 JetBrains 全系列产品，包括 Pycharm、IDEA、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</p>
<h3> 方式1：无限重置30天试用期教程（最高支持版本2021.2.2）</h3>
<p><a href="https://www.exception.site/essay/idea-reset-eval" target="_blank" rel="noopener noreferrer">参考地址</a></p>
<p><a href="https://www.jetbrains.com/zh-cn/pycharm/download/other.html" target="_blank" rel="noopener noreferrer">PyCharm 下载地址</a></p>
<p><a href="https://www.jetbrains.com/zh-cn/idea/download/other.html" target="_blank" rel="noopener noreferrer">IDEA 下载地址</a></p>
<p>安装后，点击开始试用</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>选择<code>ide-eval-resetter-2.3.5.zip</code>文件后，弹出下面框</p>
<figure><figcaption></figcaption></figure>
<p>然后重启程序</p>
<figure><figcaption></figcaption></figure>
<p>或者使用拖拽方式（将 <code>ide-eval-resetter-2.3.5.zip</code> 拖拽到pycharm主页里）</p>
<figure><figcaption></figcaption></figure>
<h3> 方式2：激活到2099年教程</h3>
<p><a href="https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3" target="_blank" rel="noopener noreferrer">方式2：激活到2099年教程</a></p>
<h3> 关闭自动更新</h3>
<figure><figcaption></figcaption></figure>
<h2> 常用快捷键</h2>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> idea设置 java类文件注释模板</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 同一个启动类：多环境+多port 运行</h2>
<figure><figcaption>image-20220119195308426</figcaption></figure>
<figure><figcaption>image-20220119195510261</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-05-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">jdk安装与配置</title>
    <id>https://topjf.github.io/tools/java.html</id>
    <link href="https://topjf.github.io/tools/java.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">一、环境准备 前提是先把网络ip配置好 1、下载JDK 官网下载地址： jdk各个版本下载 (https://www.oracle.com/java/technologies/downloads/); jdk各个版本档案 (https://www.oracle.com/java/technologies/downloads/archive/); jdk...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>jdk安装与配置</h1>
<h2> 一、环境准备</h2>
<p>前提是先把网络ip配置好</p>
<h3> 1、下载JDK</h3>
<p>官网下载地址：</p>
<ul>
<li><a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noopener noreferrer">jdk各个版本下载</a></li>
<li><a href="https://www.oracle.com/java/technologies/downloads/archive/" target="_blank" rel="noopener noreferrer">jdk各个版本档案</a></li>
<li><a href="https://pan.baidu.com/s/17pkHcX7YrssnEVctveHbHQ" target="_blank" rel="noopener noreferrer">jdk各版本下载-百度网盘</a> 提取码：1234</li>
</ul>
<h3> 2、下载 SSH Secure File Transfer Client 连接工具 或 MobaXterm</h3>
<p>A:网上随便兽兽道首；</p>
<h2> 二、解压安装</h2>
<h3> 1、使用工具wind10--&gt;Linux传输文件</h3>
<p>file--connect---hostName（linux的ip）---user name（系统用户）---prot（端口：默认）--authentication（选择password）---点击connect后----输入密码</p>
<p>选中点击鼠标右键---Upload-----&gt;</p>
<h3> 2、contos删除自带的jdk</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3.Ubuntu卸载jdk</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、在Linux解压文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 三、配置环境变量</h2>
<p><mark>jdk11后没有jre</mark></p>
<h3> 打开文件</h3>
<blockquote>
<p>vim /etc/profile
按i 开始编辑
//保存退出：
先按 <mark>esc</mark> &gt; 再按 <mark>shift+:</mark>  然后输入<mark>wq</mark> &gt; 回车键</p>
</blockquote>
<p>jdk&gt;=11</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>jdk&lt;11</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 刷新配置</h3>
<blockquote>
<p>source /etc/profile</p>
</blockquote>
<h3> 查看java</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 四、测试、运行hello world。java 程序</h2>
<h3> 创建一个java文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 编写java代码文件</h3>
<blockquote>
<p>vim HelloWorld.java</p>
</blockquote>
<p>内容如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编译java文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 运行文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> docker-centos7 安装jdk、构建jar包镜像</h2>
<p><a href="https://blog.csdn.net/qq_42476834/article/details/125121395" target="_blank" rel="noopener noreferrer">🚀地址🚀</a></p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-21T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">maven管理</title>
    <id>https://topjf.github.io/tools/maven.html</id>
    <link href="https://topjf.github.io/tools/maven.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">安装与配置 Windows、Linux 配置 Maven3.6、gradle 阿里下载源 Maven3.X 下载地址 (https://maven.apache.org/download.cgi); maven nginx导航资源 (https://mirrors.bfsu.edu.cn/apache/maven/); pom依赖查询地址： maven...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 安装与配置</h2>
<p>Windows、Linux 配置 Maven3.6、gradle 阿里下载源</p>
<ul>
<li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener noreferrer">Maven3.X 下载地址</a></li>
<li><a href="https://mirrors.bfsu.edu.cn/apache/maven/" target="_blank" rel="noopener noreferrer">maven nginx导航资源</a></li>
</ul>
<p>pom依赖查询地址：</p>
<ul>
<li><a href="https://mvnrepository.com/" target="_blank" rel="noopener noreferrer">maven 官网 仓库</a></li>
<li><a href="https://developer.aliyun.com/mvn/search" target="_blank" rel="noopener noreferrer">maven 阿里云 仓库</a></li>
</ul>
<h2> win10</h2>
<h3> 自定义本地仓库存储地址</h3>
<p>1、打开配置文件：apache-maven-3.6.3 -&gt; conf -&gt; settings.xml</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 配置阿里仓库下载源</h3>
<p><a href="https://developer.aliyun.com/mvn/guide" target="_blank" rel="noopener noreferrer">maven | gradle  阿里云官网配置指南</a></p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一步：环境配置，在里省略</p>
<h2> linux环境</h2>
<h3> 环境配置sudo vim /etc/profile</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 测试</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常用命令</h2>
<p>清空文件：mvn clean</p>
<p>编译项目：mvn compile</p>
<p>打包jar：mvn package</p>
<p>打包并部署到本地maven目录里：mvn install</p>
<p><code>.jar.original</code> 结尾文件</p>
<blockquote>
<p>.jar.original 是普通 jar 包，不包含依赖</p>
<p>.jar 是可执行 jar 包，包含了 pom 中的所有依赖，可以直接用 <code>java -jar</code> 命令执行</p>
<p>如果是部署，就用 .jar</p>
<p>如果是给别的项目用，就要给 <code>.jar.original</code> 这个包</p>
</blockquote>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">nodejs配置</title>
    <id>https://topjf.github.io/tools/nodejs-setting.html</id>
    <link href="https://topjf.github.io/tools/nodejs-setting.html"/>
    <updated>2023-03-05T09:31:01.000Z</updated>
    <summary type="text">Node.js 安装-教程 (https://blog.csdn.net/qq_42476834/article/details/110789382) node 官网下载 (http://nodejs.cn/download/)、https://github.com/nodejs/release (https://github.com/nodejs/r...</summary>
    <content type="html"><![CDATA[<!-- more -->
<p>Node.js  <a href="https://blog.csdn.net/qq_42476834/article/details/110789382" target="_blank" rel="noopener noreferrer">安装-教程</a></p>
<p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener noreferrer">node 官网下载</a>、<a href="https://github.com/nodejs/release" target="_blank" rel="noopener noreferrer">https://github.com/nodejs/release</a></p>
<h2> NodeJS Release schedule</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Release</th>
<th style="text-align:center">Status</th>
<th style="text-align:center">Codename</th>
<th style="text-align:center">Initial Release</th>
<th style="text-align:center">Active LTS Start</th>
<th style="text-align:center">Maintenance Start</th>
<th style="text-align:center">End-of-life</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">14.x</td>
<td style="text-align:center"><strong>Maintenance</strong></td>
<td style="text-align:center">Fermium</td>
<td style="text-align:center">2020-04-21</td>
<td style="text-align:center">2020-10-27</td>
<td style="text-align:center">2021-10-19</td>
<td style="text-align:center">2023-04-30</td>
</tr>
<tr>
<td style="text-align:center">16.x</td>
<td style="text-align:center"><strong>Maintenance</strong></td>
<td style="text-align:center">Gallium</td>
<td style="text-align:center">2021-04-20</td>
<td style="text-align:center">2021-10-26</td>
<td style="text-align:center">2022-10-18</td>
<td style="text-align:center">2023-09-11</td>
</tr>
<tr>
<td style="text-align:center">18.x</td>
<td style="text-align:center"><strong>LTS</strong></td>
<td style="text-align:center">Hydrogen</td>
<td style="text-align:center">2022-04-19</td>
<td style="text-align:center">2022-10-25</td>
<td style="text-align:center">2023-10-18</td>
<td style="text-align:center">2025-04-30</td>
</tr>
<tr>
<td style="text-align:center">19.x</td>
<td style="text-align:center"><strong>Current</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center">2022-10-18</td>
<td style="text-align:center">-</td>
<td style="text-align:center">2023-04-01</td>
<td style="text-align:center">2023-06-01</td>
</tr>
<tr>
<td style="text-align:center">20.x</td>
<td style="text-align:center"><strong>Pending</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center">2023-04-18</td>
<td style="text-align:center">2023-10-24</td>
<td style="text-align:center">2024-10-22</td>
<td style="text-align:center">2026-04-30</td>
</tr>
</tbody>
</table>
<p><a href="https://pnpm.io/zh/installation" target="_blank" rel="noopener noreferrer">pnpm 官网安装教程</a></p>
<h2> Linux 配置</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置淘宝镜像源</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要换回时改为官方的镜像源</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看配置：<code>npm config list</code></p>
<p><code>npx -p npm@6 npm i --legacy-peer-deps</code></p>
<h3> 使用 corepack 安装 pnpm</h3>
<ul>
<li>安装</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>卸载：<code>corepack disable pnpm</code></li>
</ul>
<h3> 安装 cnpm</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>"user" config from /home/jf123/.npmrc</p>
</blockquote>
<h3> 全局模块存储设置</h3>
<p>创建文件夹：<code>node_global</code>、<code>node_cache</code></p>
<p>npm config -help -s</p>
<p>参数</p>
<blockquote>
<p>npm config set</p>
<p>npm config get</p>
<p>npm config delete cache &amp;&amp; npm config delete prefix</p>
<p>npm config list</p>
<p>npm config edit</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 配置环境变量</h3>
<p><code>sudo vim /etc/profile</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>刷新配置生效：<code>source /etc/profile</code></p>
</li>
<li>
<p>查看：<code>node -v &amp;&amp; npm -v</code></p>
</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p><code>npm install -g vue-cli</code> 会存放在<code>/rj/nodejs/node_global/{bin,lib}</code>目录下</p>
</blockquote>
<h2> window 配置</h2>
<p><a href="https://nodejs.org/download/release/" target="_blank" rel="noopener noreferrer">下载地址</a>，选择 <code>latest-v18.x</code> 版本</p>
<p>双击运行 <code>node-v18.14.2-x64.msi</code>文件进行安装。</p>
<p>安装后，安装其他组件的默认安装存放位置：<code>C:\Users\{username}\AppData\Roaming\npm\node_modules</code> 里面。</p>
<p><strong>如：</strong></p>
<p><code>npm i -g element-ui</code> 存放在 <code>AppData\Roaming\npm\node_modules</code> 目录下-&gt; <code>element-ui</code>;</p>
<p><code>npm i -g pnpm@7.27.0</code> 存放在 <code>AppData\Roaming\npm\node_modules</code> 目录下-&gt; <code>pnpm</code></p>
<h3> 配置npm淘宝源</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 全局模块存储设置</h3>
<p>创建文件夹：<code>node_global</code>、<code>node_cache</code></p>
<p><em>最好赋予nodejs文件权限，不然系统自动创建文件时报错</em></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 配置环境变量</h3>
<p>NODE_HOME: <code>D:\rj-win\nodejs</code></p>
<p>系统变量.Path：<code>%NODE_HOME%</code></p>
<h3> 安装 pnpm</h3>
<h4> 使用npm安装</h4>
<p>安装：<code>npm install -g pnpm</code></p>
<p>配置pnpm环境变量: <em>系统属性.环境变量.系统变量.Path</em>：<code>%NODE_HOME%\node_global\pnpm</code></p>
<h4> 使用PowerShell安装</h4>
<p><a href="https://pnpm.io/zh/installation#windows" target="_blank" rel="noopener noreferrer">https://pnpm.io/zh/installation#windows</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启计算机后查看：<code>pnpm -v</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 全局安装测试</h3>
<p>引入 elementui：<code>npm i -g element-ui -S</code></p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-06T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Linux数据同步工具</title>
    <id>https://topjf.github.io/tools/rsync.html</id>
    <link href="https://topjf.github.io/tools/rsync.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">一、简介 1、认识 Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。Rsync使用所谓的“Rsync算法”来使本地和远 程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快； Rsync支持大多数的类Unix系统，无论是Linux、S...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Linux 数据同步工具</h1>
<h2> 一、简介</h2>
<h3> 1、认识</h3>
<p>Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。Rsync使用所谓的“Rsync算法”来使本地和远
程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快；</p>
<p>Rsync支持大多数的类Unix系统，无论是Linux、Solaris还是BSD上都经过了良好的测试；</p>
<p>此外，它在windows平台下也有相应的版本，如cwRsync和Sync2NAS等工具</p>
<h3> 2、原理</h3>
<p>Rsync本来是用于替代rcp的一个工具，目前由rsync.samba.org维护，所以rsync.conf文件的格式类似于samba的主配 置文件；</p>
<p>Rsync可以通过rsh或ssh使用，也能以daemon模式去运行
在以daemon方式运行时Rsync server会打开一个873 端口，等待客户端去连接。</p>
<p>连接时，Rsync server会检查口令是否相符，若通过口令查核，则可以开始进行文件传输。第一次连通完成时，会把整份文件传输一次，以后则就只需进行增量备份。</p>
<h3> 3、特点</h3>
<ol>
<li>可以镜像保存整个目录树和文件系统；</li>
<li>可以很容易做到保持原来文件的权限、时间、软硬链接等；</li>
<li>无须特殊权限即可安装；</li>
<li>优化的流程，文件传输效率高；</li>
<li>可以使用rsh、ssh等方式来传输文件，当然也可以通过直接的socket连接；</li>
<li>支持匿名传输</li>
</ol>
<h2> 二、ssh模式</h2>
<h3> 1、本地间同步</h3>
<blockquote>
<p>环境：172.16.22.12</p>
</blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、局域网间同步</h3>
<blockquote>
<p>环境：172.16.22.11</p>
</blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、局域网指定用户同步</h3>
<p>—172.16.22.12</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>—172.16.22.11</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 三、daemon模式</h2>
<blockquote>
<p>环境：192.168.22.11</p>
</blockquote>
<h3> 1、服务启动方式</h3>
<h4> 1.1、对于负荷较重的 rsync 服务器应该使用独立运行方式</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 1.2、对于负荷较轻的 rsync 服务器可以使用 xinetd 运行方式</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、配置详解</h3>
<p>两种 rsync 服务运行方式都需要配置 rsyncd.conf，其格式类似于 samba 的主配置文件</p>
<p><strong>全局参数</strong></p>
<ul>
<li>在全局参数部分也可以定义模块参数，这时该参数的值就是所有模块的默认值</li>
<li>address —在独立运行时，用于指定的服务器运行的 IP 地址；由 xinetd 运行时将忽略此参数，使用命令行上的 –address
选项替代。默认本地所有IP</li>
<li>port —指定 rsync 守护进程监听的端口号。由 xinetd 运行时将忽略此参数，使用命令行上的 –port 选项替代。默认 873</li>
<li>motd file —指定一个消息文件，当客户连接服务器时该文件的内容显示给客户</li>
<li>pid file —rsync 的守护进程将其 PID 写入指定的文件</li>
<li>log file —指定 rsync 守护进程的日志文件，而不将日志发送给 syslog</li>
<li>syslog facility —指定 rsync 发送日志消息给 syslog 时的消息级别</li>
<li>socket options —指定自定义 TCP 选项</li>
<li>lockfile —指定rsync的锁文件存放路径</li>
<li>timeout = 600 —超时时间</li>
</ul>
<p><strong>模块参数</strong>
模块参数主要用于定义 rsync 服务器哪个目录要被同步。模块声明的格式必须为 [module] 形式，这个名字就是在 rsync 客户端看到的名字，类似于
Samba 服务器提供的共享名。而服务器真正同步的数据是通过 path 来指定的</p>
<p><strong>基本模块参数</strong></p>
<ul>
<li>path —指定当前模块在 rsync 服务器上的同步路径，该参数是必须指定的</li>
<li>comment —给模块指定一个描述，该描述连同模块名在客户连接得到模块列表时显示给客户</li>
</ul>
<p><strong>模块控制参数</strong></p>
<ul>
<li>use chroot = —默认为 true，在传输文件之前首先 chroot 到 path 参数所指定的目录下；优点，安全；缺点，需要 root 权限，不能备份指向
path 外部的符号连接所指向的目录文件</li>
<li>uid = —指定该模块以指定的 UID 传输文件；默认nobody</li>
<li>gid = —指定该模块以指定的 GID 传输文件；默认nobody</li>
<li>max connections —最大并发连接数，0为不限制</li>
<li>lock file —指定支持 max connections 参数的锁文件。默认 /var/run/rsyncd.lock</li>
<li>list —指定当客户请求列出可以使用的模块列表时，该模块是否应该被列出。默认为 true，显示</li>
<li>read only = —只读选择，也就是说，不让客户端上传文件到服务器上。默认true</li>
<li>write only = —只写选择，也就是说，不让客户端从服务器上下载文件。默认false</li>
<li>ignore errors —忽略IO错误。默认true</li>
<li>ignore nonreadable —指定 rysnc服务器完全忽略那些用户没有访问权限的文件。这对于在需要备份的目录中有些不应该被备份者获得的文件时是有意义的。false</li>
<li>timeout = —该选项可以覆盖客户指定的 IP 超时时间。从而确保 rsync 服务器不会永远等待一个崩溃的客户端。对于匿名 rsync
服务器来说，理想的数字是 600（单位为秒）。0 (未限制)</li>
<li>dont compress  —用来指定那些在传输之前不进行压缩处理的文件。该选项可以定义一些不允许客户对该模块使用的命令选项列表。必须使用选项全名，而不能是简称。
当发生拒绝某个选项的情况时，服务器将报告错误信息然后退出。例如，要防止使用压缩，应该是：”dont
compress = <em>”。</em> .gz <em>.tgz</em> .zip <em>.z</em> .rpm <em>.deb</em> .iso <em>.bz2</em> .tbz</li>
</ul>
<p><strong>模块文件筛选参数</strong></p>
<ul>
<li>exclude —指定多个由空格隔开的多个文件或目录(相对路径)，并将其添加到 exclude 列表中。这等同于在客户端命令中使用 –exclude
来指定模式</li>
<li>exclude from —指定一个包含 exclude 规则定义的文件名，服务器从该文件中读取 exclude 列表定义</li>
<li>include —指定多个由空格隔开的多个文件或目录(相对路径)，并将其添加到 include 列表中。这等同于在客户端命令中使用 –include
来指定模式</li>
<li>include from —指定一个包含 include 规则定义的文件名，服务器从该文件中读取 include 列表定义</li>
</ul>
<p><strong>模块用户认证参数</strong></p>
<ul>
<li>auth users —指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块（和系统用户没有任何关系）。用户名和口令以明文方式存放在
secrets file 参数指定的文件中。默认为匿名方式</li>
<li>secrets file —指定一个 rsync 认证口令文件。只有在 auth users 被定义时，该文件才起作用。文件权限必须是 600</li>
<li>strict modes —指定是否监测口令文件的权限。为 true 则口令文件只能被 rsync 服务器运行身份的用户访问，其他任何用户不可以访问该文件。默认为true</li>
</ul>
<p><strong>模块访问控制参数</strong></p>
<ul>
<li>hosts allow —用一个主机列表指定哪些主机客户允许连接该模块。不匹配主机列表的主机将被拒绝。默认值为 *</li>
<li>hosts deny —用一个主机列表指定哪些主机客户不允许连接该模块</li>
</ul>
<p><strong>模块日志参数</strong></p>
<ul>
<li>
<p>transfer logging —使 rsync 服务器将传输操作记录到传输日志文件。默认值为false</p>
</li>
<li>
<p>log format —指定传输日志文件的字段。默认为：”%o %h [%a] %m (%u) %f %l”
设置了”log file”参数时，在日志每行的开始会添加”%t [%p]“；</p>
<p>可以使用的日志格式定义符如下所示：</p>
<p>%o —操作类型：”send” 或 “recv”</p>
<p>%h —远程主机名</p>
<p>%a —远程IP地址</p>
<p>%m —模块名</p>
<p>%u —证的用户名（匿名时是 null）</p>
<p>%f —文件名</p>
<p>%l —文件长度字符数</p>
<p>%p —该次 rsync 会话的 PID</p>
<p>%P —模块路径</p>
<p>%t —当前时间</p>
<p>%b —实际传输的字节数</p>
<p>%c —当发送文件时，记录该文件的校验码</p>
</li>
</ul>
<h3> 3、服务端配置</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>
<p>uid = root —rsync运行权限为root</p>
</li>
<li>
<p>gid = root —rsync运行权限为root</p>
</li>
<li>
<p>use chroot = no —是否让进程离开工作目录</p>
</li>
<li>
<p>max connections = 5 —最大并发连接数，0为不限制</p>
</li>
<li>
<p>timeout = 600 —超时时间</p>
</li>
<li>
<p>pid file = /var/run/rsyncd.pid —指定rsync的pid存放路径</p>
</li>
<li>
<p>lockfile = /var/run/rsyncd.lock —指定rsync的锁文件存放路径</p>
</li>
<li>
<p>log file = /var/log/rsyncd.log —指定rsync的日志存放路径</p>
</li>
<li>
<p>[web1] —模块名称</p>
<p>path = /data/test/src —该模块存放文件的基础路径</p>
<p>ignore errors = yes —忽略一些无关的I/O错误</p>
<p>read only = no —客户端可以上传</p>
<p>write only = no —客户端可以下载</p>
<p>hosts allow = 192.168.22.12 —允许连接的客户端主机ip</p>
<p>hosts deny = *—黑名单，*表示任何主机</p>
<p>list = yes</p>
<p>auth users = web —认证此模块的用户名</p>
<p>secrets file = /etc/web.passwd —指定存放“用户名：密码”格式的文件</p>
</li>
</ul>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 四、测试</h2>
<h3> 1、客户端</h3>
<blockquote>
<p>环境：192.168.22.12</p>
</blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、小试参数</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>-a —参数，相当于-rlptgoD，</p>
<p>-r —是递归</p>
<p>-l —是链接文件，意思是拷贝链接文件</p>
<p>-i —列出 rsync 服务器中的文件</p>
<p>-p —表示保持文件原有权限</p>
<p>-t —保持文件原有时间</p>
<p>-g —保持文件原有用户组</p>
<p>-o —保持文件原有属主</p>
<p>-D —相当于块设备文件</p>
<p>-z —传输时压缩</p>
<p>-P —传输进度</p>
<p>-v —传输时的进度等信息，和-P有点关系</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、通过密码文件同步</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、客户端自动同步</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>10 0 * rsync -avzP —delete —password-file=/tmp/rsync.password <a href="mailto:web@192.168.22.11">web@192.168.22.11</a>::web1 /data/test/</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 五、数据实时同步</h2>
<p>环境：Rsync + Inotify-tools</p>
<h3> 1、inotify-tools</h3>
<ul>
<li>是为linux下 inotify文件监控工具提供的一套c的开发接口库函数，同时还提供了一系列的命令行工具，这些工具可以用来监控文件系统的事件</li>
<li>inotify-tools是用c编写的，除了要求内核支持 inotify 外，不依赖于其他</li>
<li>inotify-tools提供两种工具：一是inotifywait，它是用来监控文件或目录的变化，二是inotifywatch，它是用来统计文件系统访问的次数</li>
</ul>
<h3> 2、安装inotify-tools</h3>
<blockquote>
<p>下载地址：<a href="http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz" target="_blank" rel="noopener noreferrer">http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</a></p>
</blockquote>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、设置环境变量</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>export PATH=/usr/local/inotify/bin/:$PATH</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、常用参数</h3>
<ul>
<li>-m —始终保持监听状态，默认触发事件即退出</li>
<li>-r —递归查询目录</li>
<li>-q —打印出监控事件</li>
<li>-e —定义监控的事件，可用参数：</li>
<li>access —访问文件</li>
<li>modify —修改文件</li>
<li>attrib —属性变更</li>
<li>open —打开文件</li>
<li>delete —删除文件</li>
<li>create —新建文件</li>
<li>move —文件移动</li>
<li>—fromfile —从文件读取需要监视的文件或者排除的文件，一个文件一行，排除的文件以@开头</li>
<li>—timefmt —时间格式</li>
<li>—format —输出格式</li>
<li>—exclude —正则匹配需要排除的文件，大小写敏感</li>
<li>—excludei —正则匹配需要排除的文件，忽略大小写</li>
<li>%y%m%d %H%M —年月日时钟</li>
<li>%T%w%f%e —时间路径文件名状态</li>
</ul>
<h3> 5、测试一</h3>
<p>检测源目录中是否有如下动作：modify,create,move,delete,attrib；</p>
<p>一旦发生则发布至目标机器；</p>
<p>方式为 ssh
src: 192.168.22.11(Rsync + Inotify-tools) dest: 192.168.22.12</p>
<p>两台机器需要做好 ssh 免密登录</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在目标机上也写一个这样的脚本：</p>
<p>rsync -a —delete /data/test/dest/ 192.168.22.11:/data/test/src ；</p>
<p>这样可以实现双向同步</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-10-11T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">虚拟机批量处理vagrant_vmware</title>
    <id>https://topjf.github.io/tools/vagrant-vmware.html</id>
    <link href="https://topjf.github.io/tools/vagrant-vmware.html"/>
    <updated>2023-03-05T16:15:05.000Z</updated>
    <summary type="text">一、安装 centos7.9 模板 安装：略略略略 步骤 1. 查看当前系统版本 2. 设置sudo权限 3. 国内yum源 4. 升级内核 5. 关闭防火墙firewalld、关闭selinux 6. 配置网卡 7. 禁用该可预测命名规则 8. 重新生成GRUB配置并更新内核参数 1、查看当前系统版本 2、设置sudo权限 1、su root 2、c...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 一、安装 centos7.9 模板</h2>
<p><em>安装：略略略略</em></p>
<h2> 步骤</h2>
<ol>
<li>查看当前系统版本</li>
<li>设置sudo权限</li>
<li>国内yum源</li>
<li>升级内核</li>
<li>关闭防火墙firewalld、关闭selinux</li>
<li>配置网卡</li>
<li>禁用该可预测命名规则</li>
<li>重新生成GRUB配置并更新内核参数</li>
</ol>
<h2> 1、查看当前系统版本</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 2、设置sudo权限</h2>
<p>1、su root</p>
<p>2、chmod u+w /etc/sudoers</p>
<p>3、vim /etc/sudoers</p>
<blockquote>
<p>root ALL=(ALL) ALL</p>
<p>a ALL=(ALL) ALL</p>
</blockquote>
<p>4、撤销sudoers文件写权限，命令：</p>
<p>chmod u-w /etc/sudoers</p>
<p>5、切换用户
su a</p>
<h2> 3、国内yum源（使用华为）</h2>
<p><a href="https://developer.aliyun.com/mirror/?spm=a2c6h.13651102.0.0.44e61b11ewNwcu&amp;serviceType=mirror&amp;tag=%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">阿里镜像站</a></p>
<p><a href="https://mirrors.huaweicloud.com/home" target="_blank" rel="noopener noreferrer">华为镜像站</a></p>
<h3> CentOS-Base.repo</h3>
<h4> centos7</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ubuntu</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> elrepo.repo</h3>
<h4> 华为</h4>
<p><a href="https://mirrors.huaweicloud.com/home" target="_blank" rel="noopener noreferrer">https://mirrors.huaweicloud.com/home</a> 搜索 epel</p>
<p>1 查看：yum list | grep epel-release</p>
<p>=== epel-release.noarch      7-11        extras</p>
<p>2 安装：yum install -y epel-release yum remove -y epel-release</p>
<p>3 替换：</p>
<p>rm -rf /etc/yum.repos.d/epel-testing.repo（不需要这个文件！）</p>
<blockquote>
<p>sed -i "s/#baseurl/baseurl/g" /etc/yum.repos.d/epel.repo</p>
<p>sed -i "s/metalink/#metalink/g" /etc/yum.repos.d/epel.repo</p>
<p>sed -i "s@https?😕/download.fedoraproject.org/pub@<a href="https://repo.huaweicloud.com@g" target="_blank" rel="noopener noreferrer">https://repo.huaweicloud.com@g</a>" /etc/yum.repos.d/epel.repo</p>
</blockquote>
<p>4 执行 yum -y clean all &amp;&amp; yum -y makecache &amp;&amp; yum -y update &amp;&amp; yum repolist all</p>
<h5>epel.repo</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>epel.repo.rpmnew 自动生成</h5>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 阿里</h4>
<p><a href="https://developer.aliyun.com/mirror/epel" target="_blank" rel="noopener noreferrer">https://developer.aliyun.com/mirror/epel</a></p>
<p>1 查看：yum list | grep epel-release</p>
<p>=== epel-release.noarch      7-11        extras</p>
<p>2 安装：yum install -y epel-release</p>
<blockquote>
<p>mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</p>
<p>mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup</p>
</blockquote>
<p>3 wget -O /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo" target="_blank" rel="noopener noreferrer">http://mirrors.aliyun.com/repo/epel-7.repo</a></p>
<h2> 4、升级内核、并删除当前无用的系统内核版本</h2>
<p><a href="https://kernel.org/" target="_blank" rel="noopener noreferrer">https://kernel.org/</a></p>
<table>
<thead>
<tr>
<th>mainline:</th>
<th><strong>5.18-rc6</strong></th>
<th>2022-05-08</th>
<th>[<a href="https://git.kernel.org/torvalds/t/linux-5.18-rc6.tar.gz" target="_blank" rel="noopener noreferrer">tarball</a>]</th>
<th></th>
<th>[<a href="https://git.kernel.org/torvalds/p/v5.18-rc6/v5.17" target="_blank" rel="noopener noreferrer">patch</a>]</th>
<th>[<a href="https://git.kernel.org/torvalds/p/v5.18-rc6/v5.18-rc5" target="_blank" rel="noopener noreferrer">inc. patch</a>]</th>
<th>[<a href="https://git.kernel.org/torvalds/ds/v5.18-rc6/v5.18-rc5" target="_blank" rel="noopener noreferrer">view diff</a>]</th>
<th>[<a href="https://git.kernel.org/torvalds/h/v5.18-rc6" target="_blank" rel="noopener noreferrer">browse</a>]</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>stable:</td>
<td><strong>5.17.6</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.17.6.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.17.6.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.17.6.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.17.5-6.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.17.6/v5.17.5" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.17.6" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.17.6" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>stable:</td>
<td><strong>5.16.20 [EOL]</strong></td>
<td>2022-04-13</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.16.20.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.16.20.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.16.20.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.16.19-20.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.16.20/v5.16.19" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.16.20" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.16.20" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>longterm:</td>
<td><strong>5.15.38</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.38.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.38.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.15.38.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.15.37-38.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.15.38/v5.15.37" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.15.38" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.15.38" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>longterm:</td>
<td><strong>5.10.114</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.114.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.114.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.10.114.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.10.113-114.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.10.114/v5.10.113" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.10.114" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.10.114" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
<tr>
<td>longterm:</td>
<td><strong>5.4.192</strong></td>
<td>2022-05-09</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.192.tar.xz" target="_blank" rel="noopener noreferrer">tarball</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.192.tar.sign" target="_blank" rel="noopener noreferrer">pgp</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-5.4.192.xz" target="_blank" rel="noopener noreferrer">patch</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/incr/patch-5.4.191-192.xz" target="_blank" rel="noopener noreferrer">inc. patch</a>]</td>
<td>[<a href="https://git.kernel.org/stable/ds/v5.4.192/v5.4.191" target="_blank" rel="noopener noreferrer">view diff</a>]</td>
<td>[<a href="https://git.kernel.org/stable/h/v5.4.192" target="_blank" rel="noopener noreferrer">browse</a>]</td>
<td>[<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.4.192" target="_blank" rel="noopener noreferrer">changelog</a>]</td>
</tr>
</tbody>
</table>
<h3> centos 内核升级</h3>
<p><a href="http://www.elrepo.org/" target="_blank" rel="noopener noreferrer">http://www.elrepo.org/</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看可升级的内核版本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可安装的软件包</p>
<p>kernel-lt.x86_64  5.4.211-1.el7.elrepo  elrepo-kernel</p>
<p>kernel-ml.x86_64  5.19.4-1.el7.elrepo  elrepo-kernel</p>
<p>安装内核</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看当前系统内可用内核</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置开机从新内核版本启动（其中 0 是上面查询出来的可用内核编号）</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 并删除当前无用的系统内核版本</h3>
<p>所有已安装的内核版本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前使用的内核版本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 5、关闭防火墙firewalld、关闭selinux、关闭swap、确保不休眠</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 6、配置网卡</h2>
<p>vim /etc/sysconfig/network-scripts/ifcfg-ens33</p>
<p>生产 UUID： uuidgen ens33</p>
<p>ls -l /dev/disk/by-uuid</p>
<p>查看 UUID： nmcli con | sed -n '1,2p'</p>
<p>BOOTPROTO：</p>
<blockquote>
<p>dhcp 表示使用动态IP，dhcp 动态IP地址是自行生成。</p>
<p>none 无（不指定）通常是DHCP</p>
<p>static 要自己自行指定IP地址</p>
<p>bootp</p>
</blockquote>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>/etc/hosts</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>systemctl start network.service    systemctl stop network.service</p>
<p>systemctl restart network.service   systemctl status network.service</p>
<p>netplan apply</p>
<h2> 7、编写后期需要的脚本：vim /root/first.sh<a name="first.sh"></a></h2>
<p>具体使用地址：<a href="#%E4%BD%BF%E7%94%A8first.sh">使用first.sh</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上传到模板镜像的<code>/root/</code> 目录下</p>
<p>赋予权限：<code>chmod +x /root/first.sh</code></p>
<h2> 8、禁用 grub 规则</h2>
<h3> 在 grub 文件里面的 GRUB_CMDLINE_LINUX 变量添加 net.ifnames=0 biosdevname=0</h3>
<p><strong>原来配置的网卡ip会生效：/etc/sysconfig/network-scripts/ifcfg-ens33</strong>，所以我不需要这里</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新生成GRUB配置并更新内核参数</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 9、安装对window格式的 sh 脚本转码 dos2unix</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 二、Vagrant</h2>
<h3> 1、centos7.9 基本配置</h3>
<h3> 2、Vagrantfile 文件</h3>
<h4> Vagrant + VirtualBox</h4>
<p>安装 VirtualBox ：<a href="https://download.virtualbox.org/virtualbox/6.1.34/VirtualBox-6.1.34-150636-Win.exe" target="_blank" rel="noopener noreferrer">https://download.virtualbox.org/virtualbox/6.1.34/VirtualBox-6.1.34-150636-Win.exe</a></p>
<p>下载 vagrantfile：<a href="https://releases.hashicorp.com/vagrant/2.2.19/" target="_blank" rel="noopener noreferrer">https://releases.hashicorp.com/vagrant/2.2.19/</a></p>
<p>查找下载centos7：<a href="https://app.vagrantup.com/boxes/search?utf8=%E2%9C%93&amp;sort=downloads&amp;provider=&amp;q=centos" target="_blank" rel="noopener noreferrer">https://app.vagrantup.com/boxes/search?utf8=✓&amp;sort=downloads&amp;provider=&amp;q=centos</a></p>
<p><strong>Vagrant 环境变量配置</strong></p>
<p>新建用户变量：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>vagrant box add centos7 D:\iso\Centos7.box</p>
<p>centos7 是为 box 取的名字，供后续创建虚拟机。</p>
<p>查看是否添加成功</p>
<p>vagrant box list</p>
<blockquote>
<p>D:\iso&gt;vagrant box list
centos7 (virtualbox, 0)</p>
</blockquote>
</blockquote>
<p>新建目录：F:\vb\centos7，然后进入cmd</p>
<blockquote>
<p>创建虚拟机</p>
<blockquote>
<p>cd F:\vm\masterVagrantfile、cd F:\vm\nodeVagrantfile</p>
<p>vagrant init centos7</p>
<p>会在当前目录 <code>F:\vb\xxx</code> 生成 Vagrantfile 文件</p>
</blockquote>
</blockquote>
<h4> Vagrantfile 脚本<a name="Vagrantfile 脚本"></a></h4>
<p><a href="https://www.vagrantup.com/docs/disks" target="_blank" rel="noopener noreferrer">https://www.vagrantup.com/docs/disks</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成配置后，下面安装虚拟机</p>
<blockquote>
<p>cd F:\vm\masterVagrantfile、cd F:\vm\nodeVagrantfile</p>
<blockquote>
<p>vagrant up</p>
</blockquote>
<p>默认用户：vagrant 密码：vagrant</p>
<p>root用户：root：密码：vagrant</p>
</blockquote>
<h4> Vagrant + VMware-desktop</h4>
<p><strong>1.下载</strong> <a href="https://releases.hashicorp.com/vagrant/2.2.19/vagrant_2.2.19_x86_64.msi" target="_blank" rel="noopener noreferrer">vagrant</a>、 <a href="https://www.vagrantup.com/vmware/downloads" target="_blank" rel="noopener noreferrer">vmware-utility</a></p>
<p><strong>2.下载 vmware-desktop插件</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.下载</strong> <a href="https://app.vagrantup.com/centos/boxes/7" target="_blank" rel="noopener noreferrer">centos-box</a></p>
<p>vmware_desktop：</p>
<blockquote>
<p><a href="https://app.vagrantup.com/generic/boxes/centos7" target="_blank" rel="noopener noreferrer">https://app.vagrantup.com/generic/boxes/centos7</a> (675 MB)</p>
<p><a href="https://app.vagrantup.com/dds/boxes/vagrant-base-centos7" target="_blank" rel="noopener noreferrer">https://app.vagrantup.com/dds/boxes/vagrant-base-centos7</a> (:995MB)</p>
</blockquote>
<p>vmware_workstation：</p>
<blockquote>
<p><a href="https://app.vagrantup.com/dds/boxes/vagrant-base-centos7" target="_blank" rel="noopener noreferrer">https://app.vagrantup.com/dds/boxes/vagrant-base-centos7</a> (:995MB)</p>
</blockquote>
<p><strong>4.本地安装box</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.生成Vagrantfile文件</strong>，[Vagrantfile 脚本](#Vagrantfile 脚本)</p>
<blockquote>
<p>cd F:\vm\k8s</p>
<p>vagrant init centos7d</p>
</blockquote>
<p><strong>6.安装</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7.脚本</strong></p>
<p><strong>sh脚本均已 Git Bash 执行，bat以 cmd 执行</strong></p>
<p>1、<a href="http://clear.sh" target="_blank" rel="noopener noreferrer">clear.sh</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、<a href="http://init.sh" target="_blank" rel="noopener noreferrer">init.sh</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次开始创建镜像的目录文件有</p>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、<a href="http://install.sh" target="_blank" rel="noopener noreferrer">install.sh</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后执行<code>kill.bat</code>结束VMware虚拟机的【vmware-vmx.exe】</p>
<figure><figcaption>image-20220508160013429</figcaption></figure>
<p>4、kill.bat</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、<a href="http://cp.sh" target="_blank" rel="noopener noreferrer">cp.sh</a> 虚拟机到新目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、修改虚拟机引用镜像地址 boxes</p>
<p>/f/vm/k8s/下的：master、node[1-3]</p>
<p>把【master、node[1-3]】/c2c6ff32-7b85-4fb9-8cdf-48497b898d32：36位名称+4</p>
<p>遍历后把 <code>c2c6ff32-7b85-4fb9-8cdf-48497b898d32/. ../master</code></p>
<p><strong>直接把D:\rj-win\Vagrant.vagrant.d\boxes\centos7w\0\vmware_desktop\复制到F:\vm\k8s\vmware_desktop不就行了，然后修改每个节点的（下面提到的3个文件）！！！！</strong></p>
<p>7、正则复制</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>disk1-cl1.vmdk 磁盘描述符文件</p>
<p>修改：<code>[master,node[1-3]]/c2c6ff32-7b85-4fb9-8cdf-48497b898d32/disk1-cl1.vmdk</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制：</p>
<p>把 <code>D:\rj-win\Vagrant\.vagrant.d\boxes\centos7w\0\vmware_desktop\disk1-s001.vmdk</code>--&gt;<code>disk1-s032.vmdk</code> 复制到<code>F:\vm\k8s\master\xxx\serve\</code></p>
<p>把 <code>D:\rj-win\Vagrant\.vagrant.d\boxes\centos7w\0\vmware_desktop\disk1-000001-s001.vmdk</code>--&gt;<code>disk1-000001-s032.vmdk</code> 复制到<code>F:\vm\k8s\node1\xxx\serve\</code></p>
<p>把 <code>D:\rj-win\Vagrant\.vagrant.d\boxes\centos7w\0\vmware_desktop\disk1-000002-s001.vmdk</code>--&gt;<code>disk1-000002-s032.vmdk</code> 复制到<code>F:\vm\k8s\node2\xxx\serve\</code></p>
<p>把 <code>D:\rj-win\Vagrant\.vagrant.d\boxes\centos7w\0\vmware_desktop\disk1-000003-s001.vmdk</code>--&gt;<code>disk1-000003-s032.vmdk</code> 复制到<code>F:\vm\k8s\node3\xxx\serve\</code></p>
<p>vagrant-base-centos7.vmsd</p>
<p>[master,node[1-3]]/c2c6ff32-7b85-4fb9-8cdf-48497b898d32/vagrant-base-centos7.vmsd</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vagrant-base-centos7.vmx</p>
<p>[master,node[1-3]]/c2c6ff32-7b85-4fb9-8cdf-48497b898d32/vagrant-base-centos7.vmx</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、</h3>
<p>安装kernel-devel,需要安装VBOX的增强包，就必须安装这个</p>
<p>安装增强包：就是vm-tool（在vm安装目录里的 xx.iso）</p>
<h3> Vagrant Box 打包</h3>
<h3> 权限配置公钥</h3>
<p>为vagrant添加sudo权限</p>
<h3> 配置网卡</h3>
<p>此步骤时候我很郁闷的一步，就是当你直接把这个镜像打包后，以后如果在同一台机器上面使用同一个box虚拟多台机器，配置就会出问题。因此这步骤还是比较关键的。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 打包BOX</h3>
<div class="language-csharp line-numbers-mode" data-ext="cs"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 二、vmrun</h2>
<p><a href="https://docs.vmware.com/cn/" target="_blank" rel="noopener noreferrer">https://docs.vmware.com/cn/</a></p>
<h3> 格式：vmrun [身份验证标志] 命令 [参数]</h3>
<p><a href="https://www.vmware.com/pdf/vix162_vmrun_command.pdf" target="_blank" rel="noopener noreferrer">https://www.vmware.com/pdf/vix162_vmrun_command.pdf</a></p>
<p><a href="https://docs.vmware.com/cn/search/#/vmrun" target="_blank" rel="noopener noreferrer">https://docs.vmware.com/cn/search/#/vmrun</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 步骤</h3>
<ol>
<li>cd D:\rj-win\vm16\vmrun.exe 程序</li>
<li>git 软件</li>
<li>编写脚本 <a href="http://auto.sh" target="_blank" rel="noopener noreferrer">auto.sh</a></li>
<li>sh auto_VM.sh create</li>
<li>sh auto_VM.sh start | sh auto_VM.sh</li>
<li>设置IP的脚本 set_ip.bat</li>
</ol>
<blockquote>
<p>执行流程：create》start》set_ip》window下运行set_ip.bat脚本</p>
</blockquote>
<h3> 脚本：auto_VM.sh</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 脚本：<a href="#first.sh">first.sh</a></h3>
<h3> start 后，通过 嘉宾（set_ip1.bat） 的方式来设置虚拟机（ip、hostname）<a name="使用first.sh"></a></h3>
<p>脚本：<a href="#first.sh">first.sh</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 三、</h2>
<h2> 四、</h2>
<h2> 五、</h2>
<h2> 六、</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="开发工具"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">react</title>
    <id>https://topjf.github.io/web/web-react.html</id>
    <link href="https://topjf.github.io/web/web-react.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">一、基础语法 1、react 常用UI组件库 Material-UI：端） 蚂蚁设计Ant Design：端） SemanticUI： React Desktop：（面向MacOS Sierra和Windows10桌面风格的ReactUI组件库） 2、通过 Props 传递数据 3、使用 setae 保存数据 4、类组件 -constructor是可选...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 一、基础语法</h2>
<p><a href="https://zh-hans.reactjs.org/" target="_blank" rel="noopener noreferrer">https://zh-hans.reactjs.org/</a></p>
<h3> 1、react 常用UI组件库</h3>
<p>Material-UI：<a href="https://material-ui.com/%EF%BC%88%E9%9D%A2%E5%90%91web" target="_blank" rel="noopener noreferrer">https://material-ui.com/（面向web</a>端）</p>
<p>蚂蚁设计Ant Design：<a href="https://ant.design/%EF%BC%88%E9%9D%A2%E5%90%91web" target="_blank" rel="noopener noreferrer">https://ant.design/（面向web</a>端）</p>
<p>SemanticUI：<a href="https://semantic-ui.com/" target="_blank" rel="noopener noreferrer">https://semantic-ui.com/</a></p>
<p>React Desktop：（面向MacOS Sierra和Windows10桌面风格的ReactUI组件库）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 2、通过 Props 传递数据</h3>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3、使用 setae 保存数据</h3>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4、类组件</h3>
<p>-constructor是可选的，我们通常在constructor中初始化一些数据；</p>
<ul>
<li>this.state中维护的就是我们组件内部的数据；</li>
<li>render() 方法是 class 组件中唯一必须实现的方法；</li>
</ul>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5、函数组件</h3>
<p><strong>函数组件必须首字母大写</strong></p>
<p>函数组件的特点：</p>
<ul>
<li>没有生命周期，也会被更新并挂载，但是没有生命周期函数；</li>
<li>没有this(组件实例）；</li>
<li>没有内部状态（state）；</li>
</ul>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、生命周期</h3>
<p>生命周期和生命周期函数的关系：</p>
<blockquote></blockquote>
<ul>
<li></li>
<li></li>
<li></li>
</ul>
<h3> 7、数据替换</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 8、tsx 结构</h3>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 9、项目结构</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 10、嵌入组件</h3>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11、12、13、14、15、16、17、</h3>
<h2> 二、创建项目 react+vite+ts+Ant Design4</h2>
<p>Ant Design4：<a href="https://ant.design/" target="_blank" rel="noopener noreferrer">https://ant.design/</a></p>
<p><a href="https://gitee.com/MFork/vite-material-ui" target="_blank" rel="noopener noreferrer">https://gitee.com/MFork/vite-material-ui</a></p>
<h3> 1、使用命令创建项目</h3>
<p>vite</p>
<blockquote>
<p>mkdir  javacode-react</p>
<p>cd javacode-react</p>
<p>npm init @vitejs/app</p>
<p>npm install</p>
</blockquote>
<p>ant-design-pro</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ant-design</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 模板</h4>
<p><a href="https://gitee.com/MFork/ant-design-pro" target="_blank" rel="noopener noreferrer">https://gitee.com/MFork/ant-design-pro</a></p>
<p><a href="https://v4-pro.ant.design/docs/layout-cn" target="_blank" rel="noopener noreferrer">https://v4-pro.ant.design/docs/layout-cn</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Error: spawn E:\code\javacode\myre\node_modules\esbuild-loader\node_modules\esbuild\esbuild.exe ENOENT</h4>
<blockquote>
<p>解决：cd E:\code\javacode\myre\node_modules\esbuild-loader\node_modules\esbuild</p>
<p>运行：node .\install.js  npm install -g</p>
</blockquote>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、内置组件</h3>
<h4> React.FC（函数式组件）</h4>
<p>使用 React.FC 来写 React 组件的时候，是不能用 setState 的，取而代之的是 useState()、useEffect()</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> React.VFC（无函数式组件）</h4>
<h4> React.Component（）</h4>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> React.FC（）</h4>
<h3> 3、路由</h3>
<figure><figcaption></figcaption></figure>
<h3> 4、</h3>
<h3> 5、6、7、8、</h3>
<h2> 三、react + vite + ts + Material-UI</h2>
<p><a href="https://mui.com/zh/" target="_blank" rel="noopener noreferrer">https://mui.com/zh/</a></p>
<p>模板市场</p>
<p><a href="https://mui.com/store/?utm_source=docs&amp;utm_medium=referral&amp;utm_campaign=in-house-themes" target="_blank" rel="noopener noreferrer">https://mui.com/store/?utm_source=docs&amp;utm_medium=referral&amp;utm_campaign=in-house-themes</a></p>
<p>01：<a href="https://mui.com/store/previews/berry-react-material-admin-free/" target="_blank" rel="noopener noreferrer">https://mui.com/store/previews/berry-react-material-admin-free/</a></p>
<p><a href="https://berrydashboard.io/free/" target="_blank" rel="noopener noreferrer">https://berrydashboard.io/free/</a>#</p>
<p><a href="https://gitee.com/kong19/react-admin-template" target="_blank" rel="noopener noreferrer">https://gitee.com/kong19/react-admin-template</a></p>
<figure><figcaption></figcaption></figure>
<p>02：</p>
<h3> 1、</h3>
<h3> 2、</h3>
<h3> 3、</h3>
<h3> 4、</h3>
<h3> 5、6、7、8、</h3>
<h2> 四、五、六、七、八、九</h2>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="web"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">vue</title>
    <id>https://topjf.github.io/web/web-vue.html</id>
    <link href="https://topjf.github.io/web/web-vue.html"/>
    <updated>2023-03-05T14:57:36.000Z</updated>
    <summary type="text">一、Vue2 Vue创建模板 http请求 工具 get post 自定义 message.js 基本语法 指令：单项绑定v-bind &amp; 双向绑定v-model 1. 单向绑定：v-bind（简写：‘‘:style’’）、更改页面元素但data不会变 2. 双向绑定 v-model 指令：v-no、v-for、v-if、v-show v-no：用来绑...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 一、Vue2</h2>
<h3> Vue创建模板</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> http请求</h3>
<h4> 工具</h4>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> get</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> post</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 自定义 message.js</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 基本语法</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 指令：单项绑定v-bind &amp; 双向绑定v-model</h3>
<ol>
<li>单向绑定：v-bind（简写：‘‘:style’’）、更改页面元素但data不会变</li>
</ol>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>双向绑定 v-model</li>
</ol>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 指令：v-no、v-for、v-if、v-show</h3>
<h4> v-no：用来绑定事件</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> v-for</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> v-if、v-show</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 计算属性</h3>
<h4> 监听器watch</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> 过滤器filter</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 组件化</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 生命周期</h3>

<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 脚手架</h3>
<figure><figcaption></figcaption></figure>
<h2> 二、Vue3</h2>
<figure><figcaption></figcaption></figure>
<h3> 变化</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>Vue2.x</th>
<th>Vue3</th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeCreate</td>
<td>使用 setup(props&amp;context)</td>
</tr>
<tr>
<td>created</td>
<td>使用 setup()</td>
</tr>
<tr>
<td>beforeMount</td>
<td>onBeforeMount</td>
</tr>
<tr>
<td>mounted</td>
<td>onMounted</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>onBeforeUpdate</td>
</tr>
<tr>
<td>updated</td>
<td>onUpdated</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>onBeforeUnmount</td>
</tr>
<tr>
<td>destroyed</td>
<td>onUnmounted</td>
</tr>
<tr>
<td>errorCaptured</td>
<td>onErrorCaptured</td>
</tr>
</tbody>
</table>
<h3> setup的参数</h3>
<p>setup (props, {attrs, emit, slots})</p>
<ul>
<li>setup(props, context) / setup(props, {attrs, slots, emit})</li>
<li>props: 包含props配置声明且传入了的所有属性的对象</li>
<li>attrs: 包含没有在props配置中声明的属性的对象, 相当于 this.$attrs</li>
<li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li>
<li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 生命周期</h3>
<p><a href="https://www.cnblogs.com/baifangzi/p/14156726.html" target="_blank" rel="noopener noreferrer">vue3与vue2的区别</a></p>
<h3> 创建模板</h3>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> main.ts</h3>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> element.ts</h3>
<div class="language-tsx line-numbers-mode" data-ext="tsx"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> IconPark.ts</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 多环境dev、prod、test</h3>
<p>在项目根路径下创建：.env.dev .env.prod .env.test</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>package.json</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> axios 请求</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> proxy 请求代理</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 计算属性与监视 watch</h3>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ref获取元素</h3>
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 三、vue+vite+typescript</h2>
<p>vitejs：<a href="https://vitejs.dev/config/" target="_blank" rel="noopener noreferrer">https://vitejs.dev/config/</a></p>
<p>TS ：<a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener noreferrer">https://www.tslang.cn/docs/home.html</a></p>
<p>Vue3+TS 快速上手：<a href="https://24kcs.github.io/vue3_study/" target="_blank" rel="noopener noreferrer">https://24kcs.github.io/vue3_study/</a></p>
<h3> 1、创建TS项目步骤</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、自动导入：自定义工具、api 接口，实现 vue 组件不需要 import 指令</h3>
<h4> 2.1、配置 vite.config.ts</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.2、自定义api：src/util/xxx.ts</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.3、查看编译结果 src/auto-imports.d.ts</h4>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 2.4、vue 组件应用</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20220330185438315</figcaption></figure>
<figure><figcaption>image-20220330185452637</figcaption></figure>
<h3> 3、vite.config.ts +自动导入组件，在vue页面里不用import （src/Components、vite、vue、vuex）依赖：【unplugin-auto-import/vite、unplugin-vue-components/vite、unplugin-vue-components/resolvers】</h3>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：</p>
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> package.json</h3>
<div class="language-javascripton line-numbers-mode" data-ext="javascripton"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> tsconfig.json</h3>
<div class="language-javascripton line-numbers-mode" data-ext="javascripton"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> vue3+ts模板 <a name="vue+ts模板"></a></h3><a name="vue+ts模板">
<div class="language-vue line-numbers-mode" data-ext="vue"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></a><h3><a name="vue+ts模板"></a> 全局函数</h3>
<p><em>代码</em></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>声明</em></p>
<p>使用<code>declare function</code>声明函数。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> ts 回调函数\组合式 API 语法</h3>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 问题</h3>
<figure><figcaption>image-20220124164859102</figcaption></figure>
<h2> 四、其他</h2>
<h3> eslint 配置</h3>
<p><a href="https://eslint.vuejs.org/user-guide/#usage" target="_blank" rel="noopener noreferrer">https://eslint.vuejs.org/user-guide/#usage</a></p>
<h3> 按需导入css样式</h3>
<p><a href="https://github.com/vbenjs/vite-plugin-style-import/blob/HEAD/README.zh_CN.md" target="_blank" rel="noopener noreferrer">https://github.com/vbenjs/vite-plugin-style-import/blob/HEAD/README.zh_CN.md</a></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 五、vue3+vite+AntDesignVue 专用pc、web端</h2>
<p>Ant Design Vue专用pc、web端</p>
<h2> 六、vue3 + vite + vant + typescript 专用app移动端</h2>
<p>Vant专用app移动端</p>
<p><a href="https://youzan.github.io/vant/v4/#/zh-CN" target="_blank" rel="noopener noreferrer">https://youzan.github.io/vant/v4/#/zh-CN</a></p>
<h3> 快速上手</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vite.config.ts</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入组件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>&lt;script setup&gt;</code> 中可以直接使用 Vant 组件，不需要进行组件注册。</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 桌面端适配</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 底部安全区适配</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20220330011947826</figcaption></figure>
<h2> 七、vue+vuetify 快速开发</h2>
<p>设备匹配：pc、web端、app</p>
<h2> 九、Tailwind CSS 样式</h2>
<p><a href="https://www.tailwindcss.cn/" target="_blank" rel="noopener noreferrer">https://www.tailwindcss.cn/</a></p>
<p>npm install tailwindcss</p>
<h2> 十、vue项目打包</h2>
<h3> git</h3>
<p><a href="https://cli.vuejs.org/zh/guide/deployment.html#github-pages" target="_blank" rel="noopener noreferrer">https://cli.vuejs.org/zh/guide/deployment.html#github-pages</a></p>
<p><a href="https://cn.vitejs.dev/guide/static-deploy.html" target="_blank" rel="noopener noreferrer">https://cn.vitejs.dev/guide/static-deploy.html</a></p>
<h3> Webpack</h3>
<h3> Rollup</h3>
<h3> vue3+vite+nginx</h3>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="web"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">前端部分</title>
    <id>https://topjf.github.io/web/webpart.html</id>
    <link href="https://topjf.github.io/web/webpart.html"/>
    <updated>2023-03-05T14:57:36.000Z</updated>
    <summary type="text">CSS 模型盒 1、margin: 包括margin-top、margin-right、margin-bottom、margin-left，控制块级元素之间的距离，它们是透明不可见的。 2、padding: 包括padding-top、padding-right、padding-bottom、padding-left，控制块级元素内部，content与...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> CSS 模型盒</h2>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>1、margin: 包括margin-top、margin-right、margin-bottom、margin-left，<strong>控制块级元素之间的距离</strong>，它们是透明不可见的。</p>
<p>2、padding: 包括padding-top、padding-right、padding-bottom、padding-left，<strong>控制块级元素内部</strong>，content与border之间的距离。</p>
<p>Vite 2.0 —— 超快的构建工具
Vue 3.0 —— 更强大更灵活的 Vue
SSG —— 服务端渲染方案，利于 SEO 进行内容收录
PWA —— 构建离线应用</p>
<h2> vuepress打包报错</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看<code>runtime-core\dist\runtime-.prod.js:3179:15</code></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看信息输出</p>
<blockquote>
<p>由于在 md 文件中存在的标签 &lt;Hello /&gt;，不是 Vue 组件、或未经注册，Vue WeakMap 接收的 key
本应是组件对象，变成了 string 引发错误。</p>
<p>构建抛错程序会中止，把组件参数打印出来，最后的打印输出就是有问题的标签，将 md 中相应标签处理即可解决。</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 一、ES6</h2>
<h3> let &amp; var &amp; const</h3>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 解构&amp;字符串</h4>
<p>数组解构、对象解构、字符串扩展、字符串模板</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 函数优化</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 对象优化</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> map、reduce</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> promise异步编排</h4>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="web"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">MySQL内容整理</title>
    <id>https://topjf.github.io/database/mysql/MySQL.html</id>
    <link href="https://topjf.github.io/database/mysql/MySQL.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="html"><![CDATA[<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">数据结构在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/BST.html">二叉树在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">红黑树在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">B树在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">B+树在线演示</a></p>
]]></summary>
    <content type="html"><![CDATA[<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">数据结构在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/BST.html">二叉树在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">红黑树在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">B树在线演示</a></p>
<p><a target="_blank" href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">B+树在线演示</a></p>
<!-- more -->
<h2> 1.1、SQL概述</h2>
<p>SQL，一般发音为sequel，SQL的全称Structured Query Language)，SQL用来和数据库打交道，完成和数据库的通信，SQL是一套标准。但是每一个数据库都有自己的特别的数据库没有,当使用这个数据库特性相关的功能,这时SQL语句可能就不是标准了.(90%以上的SQL都是通用的)</p>
<h2> 1.2、什么是数据库</h2>
<p>数据库，通常是一个或一组文件，保存了一些符合特定规格的数据,数据库对应的英语单词是DataBase,简称:DB,数据库软件称为数据库管理系统（DBMS），全称为DataBase Management System，如：Oracle、SQL Server、MySql、Sybase、informix、DB2、interbase、PostgreSql 。</p>
<h2> 1.3、MySql概述</h2>
<p>MySQL最初是由“MySQL AB”公司开发的一套关系型数据库管理系统（RDBMS-Relational Database Mangerment System）。
MySQL不仅是最流行的开源数据库，而且是业界成长最快的数据库，每天有超过7万次的下载量，其应用范围从大型企业到专有的嵌入应用系统。
MySQL AB是由两个瑞典人和一个芬兰人：David Axmark、Allan Larsson和Michael “Monty” Widenius在瑞典创办的。
在2008年初，Sun Microsystems收购了MySQL AB公司。在2009年，Oracle收购了Sun公司，使MySQL并入Oracle的数据库产品线。</p>
<h2> 1.4、MySql的安装</h2>
<p>打开下载的mysql安装文件mysql-essential-5.0.22-win32.msi，双击运行，出现如下界面</p>
<figure><figcaption></figcaption></figure>
<p>按“Next”继续</p>
<figure><figcaption></figcaption></figure>
<p>选择安装类型，有“Typical（默认）”、“Complete（完全）”、“Custom（用户自定义）”三个选项，我们选择“Custom”，有更多的选项，也方便熟悉安装过程</p>
<figure><figcaption></figcaption></figure>
<p>上一步选择了 Custom 安装，这里将设定 MySQL 的组件包和安装路径，设定好之后，单击 Next 继续安装。</p>
<figure><figcaption></figcaption></figure>
<p>现在软件安装完成了，出现上面的界面，将 “Configure the Mysql Server now”前面的勾打上，点“Finish”结束软件的安装并启动mysql配置向导。
mysql配置向导启动界面，按“Next”继续。</p>
<figure><figcaption></figcaption></figure>
<p>选择配置方式，“Detailed Configuration（手动精确配置）”、“Standard Configuration（标准配置）”，我们选择“Detailed Configuration”，方便熟悉配置过程。</p>
<figure><figcaption></figcaption></figure>
<p>选择服务器类型，“Developer Machine（开发测试类，mysql占用很少资源）”、“Server Machine（服务器类型，mysql占用较多资源）”、“Dedicated MySQL Server Machine（专门的数据库服务器，mysql占用所有可用资源）”，大家根据自己的类型选择了，一般选“Server Machine”，不会太少，也不会占满。</p>
<figure><figcaption></figcaption></figure>
<p>选择mysql数据库的大致用途，“Multifunctional Database（通用多功能型，能很好的支持InnoDB与MyISAM存储引擎）”、“Transactional Database Only（服务器类型，专注于事务处理，一般）”、“Non-Transactional Database Only（非事务处理型，较简单，主要做一些监控、记数用，对MyISAM数据类型的支持仅限于non-transactional），随自己的用途而选择了，我这里选择“Multifunctional Database”， 按“Next”继续。</p>
<figure><figcaption></figcaption></figure>
<p>对InnoDB Tablespace进行配置，就是为InnoDB 数据库文件选择一个存储空间，如果修改了，要记住位置，重装的时候要选择一样的地方，否则可能会造成数据库损坏，当然，对数据库做个备份就没问题了，这里不详述。我这里没有修改，使用用默认位置，直接按“Next”继续。</p>
<figure><figcaption></figcaption></figure>
<p>选择您的网站的一般mysql访问量，同时连接的数目，“Decision Support(DSS)/OLAP（20个左右）”、“Online Transaction Processing(OLTP)（500个左右）”、“Manual Setting（手动设置，自己输一个数）”，我这里选“Decision Support(DSS)/OLAP)”，按“Next”继续</p>
<figure><figcaption></figcaption></figure>
<p>是否启用TCP/IP连接，设定端口，如果不启用，就只能在自己的机器上访问mysql数据库了，我这里启用，把前面的勾打上，Port Number：3306，在这个页面上，您还可以选择“启用标准模式”（Enable Strict Mode），按“Next”继续。</p>
<figure><figcaption></figcaption></figure>
<p>这个比较重要，就是对mysql默认数据库语言编码进行设置，第一个是西文编码，我们要设置的是utf8编码，按 “Next”继续。</p>
<figure><figcaption></figcaption></figure>
<p>选择是否将mysql安装为windows服务，还可以指定Service Name（服务标识名称），是否将mysql的bin目录加入到Windows PATH（加入后，就可以直接使用bin下的文件，而不用指出目录名，比如连接，“mysql.exe -uusername -ppassword;”就可以了，不用指出mysql.exe的完整地址，很方便），我这里全部打上了勾，Service Name不变。按“Next”继续。</p>
<figure><figcaption></figcaption></figure>
<p>设置完毕，按“Next”继续。</p>
<figure><figcaption></figcaption></figure>
<p>确认设置无误，如果有误，按“Back”返回检查。按“Execute”使设置生效。</p>
<figure><figcaption></figcaption></figure>
<p>设置完毕，按“Finish”结束mysql的安装与配置
可以通过服务管理器管理 MYSQL 的服务。
通过命令调用服务管理器:services.msc
停止 MYSQL 的服务。</p>
<figure><figcaption></figcaption></figure>
<p>启动 MYSQL 的服务。</p>
<figure><figcaption></figcaption></figure>
<p>也可以在 DOS 中直接通过命令行的形式进行控制。
停止 MYSQL 的服务。Net stop mysql</p>
<figure><figcaption></figcaption></figure>
<p>启动 MYSQL 的服务。 Net start mysql</p>
<figure><figcaption></figcaption></figure>
<h2> 1.5、表</h2>
<p>表(table)是一种 <strong>结构化的文件</strong>，可以用来存储特定类型的数据，如：学生信息，课程信息，都可以放到表中。另外表都有特定的名称，而且不能重复。表中具有几个概念：列、行、主键。 列叫做字段(Column),行叫做表中的记录,每一个字段都有:字段名称/字段数据类型/字段约束/字段长度</p>
<p>学生信息表</p>
<table>
<thead>
<tr>
<th>学号（主键）</th>
<th>姓名</th>
<th>性别</th>
<th>年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td>00001</td>
<td>张三</td>
<td>男</td>
<td>20</td>
</tr>
<tr>
<td>00002</td>
<td>李四</td>
<td>女</td>
<td>20</td>
</tr>
</tbody>
</table>
<h2> 1.6、SQL的分类</h2>
<p>数据查询语言(DQL-Data Query Language)
代表关键字:select
数据操纵语言(DML-Data Manipulation Language)
代表关键字:insert,delete,update
数据定义语言(DDL-Data Definition Language)
代表关键字:create ,drop(删除),alter(修改)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>事务控制语言(TCL-Transactional Control Language)
代表关键字:e_commit ,rollback（事物回滚）;
数据控制语言(DCL-Data Control Language)
代表关键字:grant（授权）,revoke（回收权限）.</p>
<h2> 1.7、导入演示数据</h2>
<p>使用MySQL命令行客户端来装载数据库。</p>
<ol>
<li>连接MySql  mysql -uroot -proot</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>创建“testtable”数据库</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>选择数据库</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li>导入数据</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5">
<li>删除数据库(这里不要做!)</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 1.8、表结构描述</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>2、常用命令</h1>
<h2> 2.1、查看msyql版本</h2>
<p>MySQL程序选项具有以下两种通用形式：</p>
<blockquote>
<p>–     长选项，由单词之前加两个减号组成</p>
<blockquote>
<p>C:\Users\Administrator&gt;mysql --version</p>
<p>mysql Ver 14.14 Distrib 5.5.36, for Win32 (x86)</p>
</blockquote>
<p>–     短选项，由单个字母之前加一个减号组成</p>
<blockquote>
<p>C:\Users\Administrator&gt;mysql -V</p>
<p>mysql Ver 14.14 Distrib 5.5.36, for Win32 (x86)</p>
</blockquote>
</blockquote>
<h2> 2.2、创建数据库</h2>
<ol>
<li>create database 数据库名称;</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>use 数据库名称</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在数据库中建立表，因此创建表的时候必须要先选择数据库。</p>
<h2> 2.3、查询当前使用的数据库</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询数据库版本也可以使用</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 2.4、终止一条语句</h2>
<p>如果想要终止一条正在编写的语句，可键入\c。</p>
<h2> 2.5、退出mysql</h2>
<p>可使用\q、QUIT或EXIT：</p>
<p>如：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1>3、查看“演示数据”的表结构</h1>
<h2> 3.1、查看和指定现有的数据库</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3.2、指定当前缺省数据库</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3.3、查看当前使用的库</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3.4、查看当前库中的表</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 3.5、查看其他库中的表</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如查看exam库中的表</p>
<figure><figcaption></figcaption></figure>
<h2> 3.6、查看表的结构</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如：</p>
<figure><figcaption></figcaption></figure>
<h2> 3.7、查看表的创建语句</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如：</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h1>4、简单的查询</h1>
<h2> 4.1、查询一个字段</h2>
<p>l 查询员工姓名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>Select语句后面跟的是字段名称，select是关键字，select和字段名称之间采用空格隔开，from表示将要查询的表，它和字段之间采用空格隔开</p>
<h2> 4.2、查询多个字段</h2>
<p>l 查询员工的编号和姓名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>查询多个字段，select中的字段采用逗号间隔即可，最后一个字段，也就是在from前面的字段不能使用逗号了。</p>
<h2> 4.3、查询全部字段</h2>
<p>可以将所有的字段放到select语句的后面，这种方案不方便，但是比较清楚，我们可以采用如下便捷的方式查询全部字段</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>采用select <em>from emp，虽然简单，但是</em>号不是很明确，建议查询全部字段将相关字段写到select语句的后面,在以后java连接数据库的时候,是需要在java程序中编写SQL语句的,这个时候编写的SQL语句不建议使用select * 这种形式,建议写明字段,这样可读性强.</p>
<h2> 4.4、计算员工的年薪</h2>
<p>l 列出员工的编号，姓名和年薪</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>在select语句中可以使用运算符，以上存在一些问题，年薪的字段名称不太明确</p>
<h2> 4.5、将查询出来的字段显示为中文</h2>
<p>select e_no as ‘员工编号’, e_name as ‘员工姓名’, e_sal*12 as ‘年薪’ from emp;  注意:字符串必须添加单引号 | 双引号</p>
<figure><figcaption></figcaption></figure>
<p>可以采用as关键字重命名表字段，其实as也可以省略，如：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1>5、条件查询</h1>
<p>条件查询需要用到where语句，where必须放到from语句表的后面</p>
<p>支持如下运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;或!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>between … and ….</td>
<td>两个值之间,<strong>等同于 &gt;= and &lt;=</strong></td>
</tr>
<tr>
<td>is null</td>
<td>为null（is not null 不为空）</td>
</tr>
<tr>
<td><strong>and</strong></td>
<td>并且</td>
</tr>
<tr>
<td><strong>or</strong></td>
<td>或者</td>
</tr>
<tr>
<td>in</td>
<td>包含，相当于多个or（not in不在这个范围中）</td>
</tr>
<tr>
<td>not</td>
<td>not可以取非，主要用在is 或in中</td>
</tr>
<tr>
<td>like</td>
<td>like称为模糊查询，支持%或下划线匹配  %匹配任意个字符  下划线，一个下划线只匹配一个字符</td>
</tr>
</tbody>
</table>
<h2> 5.1、等号操作符</h2>
<p>l 查询薪水为5000的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询e_job为MANAGER的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上查询出现错误，因为e_job为字符串，所以出现了以上错误</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>也可以使用单引号</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上输出正确，Mysql默认情况下大小写是不敏感的。</p>
<p>注意：</p>
<p>MySQL在windows下是不区分大小写的，将script文件导入MySQL后表名也会自动转化为小写，结果再 想要将数据库导出放到linux服务器中使用时就出错了。因为在linux下表名区分大小写而找不到表，查了很多都是说在linux下更改MySQL的设置使其也不区分大小写，但是有没有办法反过来让windows 下大小写敏感呢。其实方法是一样的，相应的更改windows中MySQL的设置就行了。</p>
<p>​    具体操作：</p>
<p>​    在MySQL的配置文件my.ini中增加一行：</p>
<p>​    lower_case_table_names = 0</p>
<p>​    其中 0：区分大小写，1：不区分大小写</p>
<p>​    MySQL在Linux下数据库名、表名、列名、别名大小写规则是这样的：</p>
<p>1、数据库名与表名是严格区分大小写的；</p>
<p>2、表的别名是严格区分大小写的；</p>
<p>3、列名与列的别名在所有的情况下均是忽略大小写的；</p>
<p>4、变量名也是严格区分大小写的；  MySQL在Windows下都不区分大小写</p>
<h2> 5.2、 &lt;&gt; 操作符</h2>
<p>l 查询薪水不等于5000的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>一下写法等同于以上写法，建议使用第一种写法</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数值也可以采用单引号引起来，如一下语句是正确的(不建议这么写)：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>l 查询工作岗位不等于MANAGER的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 5.3、between … and … 操作符</h2>
<p>l 查询薪水为1600到3000的员工(第一种方式，采用&gt;=和&lt;=)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询薪水为1600到3000的员工(第一种方式，采用between … and …)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>关于between … and …，它是包含最大值和最小值的</p>
<h2> 5.4、is null</h2>
<p>l Null为空，但不是空串，为null可以设置这个字段不填值，如果查询为null的字段，采用is null</p>
<p>l 查询津贴为空的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上也无法查询出符合条件的数据，因为null类型比较特殊，必须使用 is来比较</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上查询正确</p>
<h2> 5.5、 and</h2>
<p>and表示并且的含义，表示所有的条件必须满足</p>
<p>l 工作岗位为MANAGER,薪水大于2500的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 5.6、or</h2>
<p>or，只要满足条件即可,相当于包含</p>
<p>l 查询出e_job为manager或者e_job为e_salesman的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 5.7、表达式的优先级</h2>
<p>l 查询薪水大于1800，并且部门代码为20或30的员工（错误的写法）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上输出不是预期结果，薪水小于1800的数据也被查询上来了，原因是表达式的优先级导致的，首先过滤e_sal &gt; 1800 and d_no = 20，然后再将d_no = 30员工合并过来，所以是不对的</p>
<p>l 查询薪水大于1800，并且部门代码为20或30的（正确的写法）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>关于运算符的问题：不用记，没有把握尽量采用括号</p>
<h2> 5.8、in</h2>
<p>in表示包含的意思，完全可以采用or来表示，采用in会更简洁一些</p>
<p>l 查询出e_job为manager或者e_job为e_salesman的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询出薪水包含1600和薪水包含3000的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 5.9、not</h2>
<p>l 查询出薪水不包含1600和薪水不包含3000的员工（第一种写法）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询出薪水不包含1600和薪水不包含3000的员工（第二种写法</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询出薪水不包含1600和薪水不包含3000的员工（第三种写法）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询出津贴不为null的所有员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 5.10、like</h2>
<p>l Like可以实现模糊查询，like支持%和下划线匹配</p>
<p>l 查询姓名以M开头所有的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询姓名以N结尾的所有的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询姓名中包含O的所有的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询姓名中第二个字符为A的所有员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>Like中%和下划线的差别？
%匹配任意字符出现的个数
下划线只匹配一个字符
Like 中的表达式必须放到单引号中|双引号中，以下写法是错误的：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1>6、排序数据</h1>
<h2> 6.1、单一字段排序</h2>
<p>排序采用order by子句，order by后面跟上排序字段，排序字段可以放多个，多个采用逗号间隔，order by默认采用升序，如果存在where子句那么order by必须放到where语句的后面</p>
<p>l 按照薪水由小到大排序(系统默认由小到大)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 取得e_job为MANAGER的员工，按照薪水由小到大排序(系统默认由小到大)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>如果包含where语句order by必须放到where后面，如果没有where语句order by放到表的后面</p>
<p>以下写法是错误的：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>l 按照多个字段排序，如：首先按照e_job排序，再按照e_sal排序</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 6.2、手动指定排序顺序</h2>
<p>l 手动指定按照薪水由小到大排序</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 手动指定按照薪水由大到小排序</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 6.3、多个字段排序</h2>
<p>l 按照e_job和薪水倒序</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>如果采用多个字段排序，如果根据第一个字段排序重复了，会根据第二个字段排序</p>
<h2> 6.4、使用字段的位置来排序</h2>
<p>l 按照薪水升序</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>不建议使用此种方式，采用数字含义不明确，程序不健壮</p>
<h1>7、数据处理函数/单行处理函数</h1>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lower</td>
<td>转换小写</td>
</tr>
<tr>
<td>upper</td>
<td>转换大写</td>
</tr>
<tr>
<td>substr</td>
<td>取子串 substr(被截取的字符串,起始下标,截取的长度)</td>
</tr>
<tr>
<td>length</td>
<td>取长度</td>
</tr>
<tr>
<td>trim</td>
<td>去空格</td>
</tr>
<tr>
<td>str_to_date</td>
<td>将字符串转换成日期</td>
</tr>
<tr>
<td>date_format</td>
<td>格式化日期</td>
</tr>
<tr>
<td>format</td>
<td>设置千分位</td>
</tr>
<tr>
<td>round</td>
<td>四舍五入</td>
</tr>
<tr>
<td>rand()</td>
<td>生成随机数</td>
</tr>
<tr>
<td>ifnull</td>
<td>可以将null转换成一个具体值</td>
</tr>
</tbody>
</table>
<h2> 7.1、lower</h2>
<p>l 查询员工，将员工姓名全部转换成小写</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 7.2、upper</h2>
<p>l 查询e_job为manager的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 7.3、substr</h2>
<p>l 查询姓名以M开头所有的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 7.4、length</h2>
<p>l 取得员工姓名长度为5的</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 7.5、trim</h2>
<p>trim会去首尾空格，不会去除中间的空格</p>
<p>l 取得工作岗位为manager的所有员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 7.6、str_to_date (必须严格按照标准输出)</h2>
<p>l 查询1981-02-20入职的员工（第一种方法，与数据库的格式匹配上）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询1981-02-20入职的员工（第二种方法，将字符串转换成date类型）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>str_to_date可以将字符串转换成日期，具体格式str_to_date (字符串，匹配格式)</p>
<h2> 7.7、date_format</h2>
<p>l 查询1981-02-20以后入职的员工，将入职日期格式化成yyyy-mm-dd hh:mm:ss</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>now() 获得当前时间</p>
<p>日期格式的说明</p>
<table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%Y</td>
<td>代表4位的年份</td>
</tr>
<tr>
<td>%y</td>
<td>代表2位的年份</td>
</tr>
<tr>
<td>%m</td>
<td>代表月, 格式为(01……12)</td>
</tr>
<tr>
<td>%c</td>
<td>代表月, 格式为(1……12)</td>
</tr>
<tr>
<td>%H</td>
<td>代表小时,格式为(00……23)</td>
</tr>
<tr>
<td>%h</td>
<td>代表小时,格式为(01……12)</td>
</tr>
<tr>
<td>%i</td>
<td>代表分钟, 格式为(00……59)</td>
</tr>
<tr>
<td>%r</td>
<td>代表 时间,格式为12 小时(hh:mm:ss [AP]M)</td>
</tr>
<tr>
<td>%T</td>
<td>代表 时间,格式为24 小时(hh:mm:ss)</td>
</tr>
<tr>
<td>%S</td>
<td>代表 秒,格式为(00……59)</td>
</tr>
<tr>
<td>%s</td>
<td>代表 秒,格式为(00……59)</td>
</tr>
</tbody>
</table>
<h2> 7.8、format</h2>
<p>l 查询员工薪水加入千分位</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询员工薪水加入千分位和保留两位小数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 7.9、round</h2>
<p>四舍五入</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 7.10、rand()</h2>
<p>生成随机数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>随机抽取记录数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 7.11、case … when … then …..else …end</h2>
<p>l 如果e_job为MANAGERG薪水上涨10%,如果e_job为SALESMAN工资上涨50%</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>其他的工资不动，需要添加else</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>e.*:取emp表所有的字段 , emp as e 是表的别名可以省略as emp  e</p>
<figure><figcaption></figcaption></figure>
<h2> 7.12、ifnull</h2>
<p>select ifnull(e_comm,0) from emp;
如果e_comm为null 就替换为 0  在SQL语句当中若有NULL值参与数学运算，计算结果一定是NULL
为了防止计算结果出现NULL，建议先使用ifnull空值处理函数预先处理。 以下SQL是计算年薪的：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p><strong>数据处理函数又被称为单行处理函数，特点：输入一行输出一行</strong></p>
<h1>8、分组函数/聚合函数/多行处理函数</h1>
<table>
<thead>
<tr>
<th>函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>count</td>
<td style="text-align:left">取得记录数</td>
</tr>
<tr>
<td>sum</td>
<td style="text-align:left">求和</td>
</tr>
<tr>
<td>avg</td>
<td style="text-align:left">取平均</td>
</tr>
<tr>
<td>max</td>
<td style="text-align:left">取最大的数</td>
</tr>
<tr>
<td>min</td>
<td style="text-align:left">取最小的数</td>
</tr>
</tbody>
</table>
<p><strong>注意：分组函数自动忽略空值，不需要手动的加where</strong> 条件排除空值。</p>
<p>select count(*) from emp where xxx;        <strong>符合条件的所有记录总数。</strong>
select count(e_comm) from emp;    <strong>e_comm 这个字段中不为空的元素总数。</strong></p>
<p>注意：分组函数不能直接使用在where关键字后面。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 8.1、count</h2>
<p>l 取得所有的员工数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>Count(*)表示取得所有记录，忽略null，为null的值也会取得</p>
<p>l 取得津贴不为null员工数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>采用count(字段名称)，不会取得为null的记录</p>
<p>l 取得工作岗位的个数</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 8.2、sum</h2>
<p>l Sum可以取得某一个列的和，null会被忽略</p>
<p>l 取得薪水的合计</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 取得津贴的合计</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>null会被忽略</p>
<p>l 取得薪水的合计（e_sal+e_comm）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>从以上结果来看，不正确，原因在于e_comm字段有null值，所以无法计算，sum会忽略掉，正确的做法是将e_comm字段转换成0</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 8.3、avg</h2>
<p>取得某一列的平均值</p>
<p>l 取得平均薪水</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 8.4、max</h2>
<p>取得某个一列的最大值</p>
<p>l 取得最高薪水</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 取得最晚入职得员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 8.5、min</h2>
<p>取得某个一列的最小值</p>
<p>l 取得最低薪水</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 取得最早入职得员工（可以不使用str_to_date转换）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 8.6、组合聚合函数</h2>
<p>可以将这些聚合函数都放到select中一起使用</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h1>9、分组查询</h1>
<p>分组查询主要涉及到两个子句，分别是：group by和having</p>
<h2> 9.1、group by</h2>
<p>l 取得每个工作岗位的工资合计，要求显示岗位名称和工资合计</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>如果使用了order by，order by必须放到group by后面</p>
<figure><figcaption></figcaption></figure>
<p>l 按照工作岗位和部门编码分组，取得的工资合计</p>
<p>n 原始数据</p>
<figure><figcaption></figcaption></figure>
<p>n 分组语句</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>+-------+--------+-------------+</p>
<p>| e_no | d_no | avg(e_sal)  |</p>
<p>+-------+--------+-------------+</p>
<p>| 7782 |   10 | 2916.666667 |</p>
<p>| 7369 |   20 | 2175.000000 |</p>
<p>| 7499 |   30 | 1566.666667 |</p>
<p>+-------+--------+-------------+</p>
<p>以上SQL语句在Oracle数据库中无法执行，执行报错。
以上SQL语句在Mysql数据库中可以执行，但是执行结果矛盾。
在SQL语句中若有group by 语句，那么在select语句后面只能跟 <strong>分组函数+参与分组的字段</strong>。</p>
<h2> 9.2、having</h2>
<p>如果想对分组数据再进行过滤需要使用having子句
取得每个岗位的平均工资大于2000</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>分组函数的执行顺序：
根据条件查询数据
分组
采用having过滤，取得正确的数据</p>
<h2> 9.3、select语句总结</h2>
<p>一个完整的select语句格式如下</p>
<blockquote>
<p>select 字段  from 表名  where …….  group by ……..  having …….(就是为了过滤分组后的数据而存在的—不可以单独的出现)  order by ……..</p>
</blockquote>
<p>以上语句的执行顺序</p>
<ol>
<li>首先执行where语句过滤原始数据</li>
<li>执行group by进行分组</li>
<li>执行having对分组数据进行操作</li>
<li>执行select选出数据</li>
<li>执行order by排序</li>
</ol>
<p>原则：能在where中过滤的数据，尽量在where中过滤，效率较高。having的过滤是专门对分组之后的数据进行过滤的。</p>
<h1>10、连接查询</h1>
<h2> 10.1、SQL92语法</h2>
<p>连接查询：也可以叫跨表查询，需要关联多个表进行查询</p>
<p>l 显示每个员工信息，并显示所属的部门名称</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上输出，不正确，输出了56条数据，其实就是两个表记录的成绩，这种情况我们称为：“笛卡儿乘积”，出现错误的原因是：没有指定连接条件</p>
<p>指定连接条件</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用别名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上结果输出正确，因为加入了正确的连接条件</p>
<p>以上查询也称为 “内连接”，只查询相等的数据（连接条件相等的数据）</p>
<p>l 取得员工和所属的领导的姓名</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上称为“自连接”，只有一张表连接，具体的查询方法，把一张表看作两张表即可，如以上示例：第一个表emp e代码了员工表，emp m代表了领导表，相当于员工表和部门表一样</p>
<h2> 10.2、SQL99语法</h2>
<p>l （内连接）显示薪水大于2000的员工信息，并显示所属的部门名称</p>
<p>采用SQL92语法：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>采用SQL99语法：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在实际中一般不加inner关键字</p>
<p>Sql92语法和sql99语法的区别：99语法可以做到表的连接和查询条件分离，特别是多个表进行连接的时候，会比sql92更清晰</p>
<p>l （外连接）显示员工信息，并显示所属的部门名称，如果某一个部门没有员工，那么该部门也必须显示出来</p>
<p>右连接：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>左连接：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上两个查询效果相同</p>
<figure><figcaption></figcaption></figure>
<h2> 10.3、连接分类</h2>
<h3> 内链接 inner join</h3>
<blockquote>
<p>表1 inner join 表2 on 关联条件，做连接查询的时候一定要写上关联条件；inner 可以省略。</p>
</blockquote>
<figure><figcaption>image-20220705101830024</figcaption></figure>
<h3> 外连接 left join 、right join</h3>
<blockquote>
<p>左外连接</p>
<blockquote>
<p>表1 left outer join 表2 on 关联条件，做连接查询的时候一定要写上关联条件；outer 可以省略。</p>
</blockquote>
<figure><figcaption>image-20220705101852038</figcaption></figure>
<p>右外连接</p>
<blockquote>
<p>表1 right outer join 表2 on 关联条件，做连接查询的时候一定要写上关联条件；outer 可以省略。</p>
</blockquote>
<figure><figcaption>image-20220705101907499</figcaption></figure>
</blockquote>
<h3> 左外连接（左连接）和右外连接（右连接）的区别？</h3>
<blockquote>
<ul>
<li>
<p><strong>左连接</strong> 以左面的表为准和右边的表比较，和左表相等的不相等都会显示出来，右表符合条件的显示,不符合条件的不显示。</p>
</li>
<li>
<p><strong>右连接</strong> 恰恰相反，以上左连接和右连接也可以加入outer关键字，但一般不建议这种写法，如：</p>
</li>
</ul>
</blockquote>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>左连接能完成的功能右连接一定可以完成</p>
<figure><figcaption></figcaption></figure>
<h1>11、子查询</h1>
<p>子查询就是嵌套的select语句，可以理解为子查询是一张表</p>
<h2> 11.1、在where语句中使用子查询，也就是在where语句中加入select语句</h2>
<p>l 查询员工信息，查询哪些人是管理者，要求显示出其员工编号和员工姓名</p>
<p>实现思路：</p>
<p>l 1、首先取得管理者的编号，去除重复的</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>l 2、查询员工编号包含管理者编号的</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询哪些人的薪水高于员工的平均薪水，需要显示员工编号，员工姓名，薪水</p>
<p>实现思路</p>
<p>1、 取得平均薪水</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、 取得大于平均薪水的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 11.2、在from语句中使用子查询，可以将该子查询看做一张表</h2>
<p>l 查询员工信息，查询哪些人是管理者，要求显示出其员工编号和员工姓名</p>
<p>首先取得管理者的编号，去除重复的</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将以上查询作为一张表，放到from语句的后面</p>
<p>使用92语法：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用99语法：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 查询各个部门的平均薪水所属等级，需要显示部门编号，平均薪水，等级编号</p>
<p>实现思路</p>
<p>1、首先取得各个部门的平均薪水</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>2、将部门的平均薪水作为一张表与薪水等级表建立连接，取得等级</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote></blockquote>
<p>薪水等级表
平均薪水表</p>
<figure><figcaption></figcaption></figure>
<h2> 11.3、在select语句中使用子查询</h2>
<p>l 查询员工信息，并显示出员工所属的部门名称</p>
<p>第一种做法，将员工表和部门表连接</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二种做法，在select语句中再次嵌套select语句完成部分名称的查询</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h1>12、union 合并sql语句</h1>
<h2> 12.1、union可以合并集合（相加）</h2>
<p>1、查询e_job包含MANAGER和包含SALESMAN的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>2、采用union来合并</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>合并结果集的时候，需要查询字段对应个数相同。在<strong>Oracle</strong>中更严格，不但要求个数相同，而且还要求类型对应相同。</p>
<h1>13、limit 的使用</h1>
<p>mySql提供了limit ，主要用于提取前几条或者中间某几行数据</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中m是指记录开始的index，从0开始，表示第一条记录
n是指从第m+1条开始，取n条。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>即取出第3条至第6条，4条记录</p>
<h2> 13.1、取得前5条数据</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> 13.2、从第二条开始取两条数据</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 13.3、取得薪水最高的前5名</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h1>14、表</h1>
<h2> 14.1、创建表</h2>
<p>l 语法格式</p>
<p>create  table tableName(    columnName dataType(length),    ………………..    columnName dataType(length)  );  set  character_set_results='gbk';
show  variables like '%char%';</p>
<p>创建表的时候，表中有字段，每一个字段有： <em>字段名</em> 字段数据类型 <em>字段长度限制</em> 字段约束</p>
<p>l MySql常用数据类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Char(长度)</td>
<td>定长字符串，存储空间大小固定，适合作为主键或外键</td>
</tr>
<tr>
<td>Varchar(长度)</td>
<td>变长字符串，存储空间等于实际数据空间</td>
</tr>
<tr>
<td>double(有效数字位数，小数位)</td>
<td>数值型</td>
</tr>
<tr>
<td>Float(有效数字位数，小数位)</td>
<td>数值型</td>
</tr>
<tr>
<td>Int( 长度)</td>
<td>整型</td>
</tr>
<tr>
<td>bigint(长度)</td>
<td>长整型</td>
</tr>
<tr>
<td>Date</td>
<td>日期型</td>
</tr>
<tr>
<td>BLOB</td>
<td>Binary  Large OBject（二进制大对象）</td>
</tr>
<tr>
<td>CLOB</td>
<td>Character  Large OBject（字符大对象）</td>
</tr>
<tr>
<td>其它...</td>
<td></td>
</tr>
</tbody>
</table>
<p>l 建立学生信息表，字段包括：学号、姓名、性别、出生日期、email、班级标识</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 向t_student表中加入数据,（必须使用客户端软件，我们的cmd默认是GBK编码,数据中设置的编码是UTF-8）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>l 向t_student表中加入数据（使用默认值）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 14.2、增加/删除/修改表结构</h2>
<p>采用alter table来增加/删除/修改表结构，不影响表中的数据</p>
<h3> 14.2.1、添加字段</h3>
<p>如：需求发生改变，需要向t_student中加入联系电话字段，字段名称为：contatct_tel 类型为varchar(40)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 14.2.2、修改字段</h3>
<p>如：student_name无法满足需求，长度需要更改为100</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>如sex字段名称感觉不好，想用gender那么就需要更爱列的名称</p>
<figure><figcaption></figcaption></figure>
<h3> 14.2.3、删除字段</h3>
<p>如：删除联系电话字段</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 14.3、添加、修改和删除</h2>
<h3> 14.3.1、insert</h3>
<p>添加、修改和删出都属于DML，主要包含的语句：insert、update、delete</p>
<p>l Insert语法格式</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>l 省略字段的插入</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>不建议使用此种方式，因为当数据库表中的字段位置发生改变的时候会影响到insert语句
l 指定字段的插入(建议使用此种方式)</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>出现了主键重复的错误，主键表示了记录的唯一性，不能重复</p>
<figure><figcaption></figcaption></figure>
<p>如何插入日期：
第一种方法，插入的日期格式和显示的日期格式一致</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>第二种方法，采用str_to_date</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>第三种方法，添加系统日期（now()）</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>l 表复制</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>以上方式，会自动创建表，将符合查询条件的数据自动复制到创建的表中</p>
<p>l 如何将查询的数据直接放到已经存在的表中，可以使用条件</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 14.3.2、update</h3>
<p>可以修改数据，可以根据条件修改数据</p>
<p>l 语法格式：</p>
<p>update 表名 set  字段名称1=需要修改的值1,  字段名称2=需要修改的值2  where …….</p>
<p>l 将e_job为manager的员工的工资上涨10%</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 14.3.3、delete</h3>
<p>可以删除数据，可以根据条件删除数据</p>
<p>l 语法格式：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>l 删除津贴为500的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>l 删除津贴为null的员工</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 14.4、创建表加入约束</h2>
<p>l 常见的约束</p>
<blockquote>
<p>a) 非空约束，not null
b) 唯一约束，unique
c) 主键约束，primary key
d) 外键约束，foreign key
e) 自定义检查约束，check（不建议使用）(在mysql中现在还不支持)</p>
</blockquote>
<h3> 14.4.1、非空约束，not null</h3>
<p>非空约束，针对某个字段设置其值不为空，如：学生的姓名不能为空</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上错误为加入的学生姓名为空。</p>
<h3> 14.4.2、唯一约束，unique</h3>
<p>唯一性约束，它可以使某个字段的值不能重复，如：email不能重复：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上插入了重复的email，所以出现了“违反唯一约束错误”，所以unique起作用了</p>
<p>同样可以为唯一约束起个约束名</p>
<p>l 我们可以查看一下约束</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>关于约束名称可以到table_constraints中查询
以上约束的名称我们也可以自定义。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 14.4.3、主键约束，primary key</h3>
<p>每个表应该具有主键，主键可以标识记录的唯一性，主键分为单一主键和复合（联合）主键，单一主键是由一个字段构成的，复合（联合）主键是由多个字段构成的</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向以上表中加入学号为1001的两条记录，出现如下错误，因为加入了主键约束</p>
<figure><figcaption></figcaption></figure>
<p>我们也可以通过表级约束为约束起个名称：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 14.4.4、外键约束，foreign key</h3>
<p>外键主要是维护表之间的关系的，主要是为了保证参照完整性，如果表中的某个字段为外键字段，那么该字段的值必须来源于参照的表的主键，如：emp中的d_no值必须来源于dept表中的d_no字段值。
建立学生和班级表之间的连接
首先建立班级表t_classes</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在t_student中加入外键约束</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向t_student中加入数据</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>出现错误，因为在班级表中不存在班级编号为10班级，外键约束起到了作用
存在外键的表就是子表，参照的表就是父表，所以存在一个父子关系，也就是主从关系，主表就是班级表，从表就是学生表</p>
<figure><figcaption></figcaption></figure>
<p>以上成功的插入了学生信息，当时classes_id没有值，这样会影响参照完整性，所以我们建议将外键字段设置为非空</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次插入班级编号为null的数据</p>
<figure><figcaption></figcaption></figure>
<p>添加数据到班级表，添加数据到学生表，删除班级数据，将会出现如下错误：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<blockquote>
<p>因为子表（t_student）存在一个外键classes_id，它参照了父表（t_classes）中的主键，所以先删除子表中的引用记录，再修改父表中的数据。  我们也可以采取以下措施 级联更新。</p>
</blockquote>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<blockquote>
<p>因为子表（t_student）存在一个外键classes_id，它参照了父表（t_classes)中的主键，所以先删除父表，那么将会影响子表的参照完整性，所以正确的做法是，先删除子表中的数据，再删除父表中的数据，采用drop table也不行，必须先drop子表，再drop父表  我们也可以采取以下措施 级联删除。</p>
</blockquote>
<h2> 14.4.5、级联更新与级联删除</h2>
<h3> 14.4.5.1、on update cascade</h3>
<p>mysql对有些约束的修改比较麻烦，所以我们可以先删除，再添加</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>我们只修改了父表中的数据，但是子表中的数据也会跟着变动。</p>
<h3> 14.4.5.2、on delete cascade</h3>
<p>mysql对有些约束的修改时不支持的，所以我们可以先删除，再添加</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>我们只删除了父表中的数据，但是子表也会中的数据也会删除。</p>
<h2> 14.5、t_student和t_classes完整示例</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​</p>
<h2> 14.6、增加/删除/修改表约束</h2>
<h3> 14.6.1、删除约束</h3>
<p>将t_student</p>
<p>删除外键约束：alter table 表名 drop foreign key 外键（区分大小写）;</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除主键约束：alter table 表名 drop  primary key ;</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除约束约束：alter table 表名 drop  key 约束名称 ;</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 14.6.2、添加约束</h3>
<p>将t_student中的约束</p>
<p>添加外键约束：alter table 从表 add constraint  约束名称 foreign key 从表(外键字段) references 主表(主键字段);</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加主键约束：alter table 表 add constraint  约束名称 primary key 表(主键字段);</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加唯一性约束：alter table 表 add constraint  约束名称 unique 表(字段);</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 14.6.3、修改约束，其实就是修改字段</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>mysql对有些约束的修改时不支持，所以我们可以先删除，再添加</p>
<h1>15、存储引擎</h1>
<h2> 15.1、存储引擎的使用</h2>
<p>• 数据库中的各表均被（在创建表时）指定的存储引擎来处理。</p>
<p>• 服务器可用的引擎依赖于以下因素：</p>
<p>• MySQL的版本</p>
<p>• 服务器在开发时如何被配置</p>
<p>• 启动选项</p>
<p>• 为了解当前服务器中有哪些存储引擎可用，可使用SHOW ENGINES语句：
SHOW ENGINES\G</p>
<figure><figcaption></figcaption></figure>
<p>• 在创建表时，可使用ENGINE选项为CREATE TABLE语句显式指定存储引擎。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>• 如果在创建表时没有显式指定存储引擎，则该表使用当前默认的存储引擎</p>
<p>• 默认的存储引擎可在my.ini配置文件中使用default-storage-engine选项指定。</p>
<p>• 现有表的存储引擎可使用ALTER TABLE语句来改变：ALTER TABLE TABLENAME ENGINE = INNODB;</p>
<p>• 为确定某表所使用的存储引擎，可以使用SHOW CREATE TABLE或SHOW TABLE STATUS语句：</p>
<p>SHOW CREATE TABLE emp\G
SHOW TABLE STATUS LIKE 'emp' \G</p>
<h2> 15.2、常用的存储引擎</h2>
<h3> 15.2.1、MyISAM存储引擎</h3>
<p>• MyISAM存储引擎是MySQL最常用的引擎。
• 它管理的表具有以下特征：
– 使用三个文件表示每个表：
• 格式文件 — 存储表结构的定义（mytable.frm）
• 数据文件 — 存储表行的内容（mytable.MYD）
• 索引文件 — 存储表上索引（mytable.MYI）
– 灵活的AUTO_INCREMENT字段处理
– 可被转换为压缩、只读表来节省空间</p>
<h3> 15.2.2、InnoDB存储引擎</h3>
<p>• InnoDB存储引擎是MySQL的缺省引擎。</p>
<p>• 它管理的表具有下列主要特征：</p>
<p>– 每个InnoDB表在数据库目录中以.frm格式文件表示
– InnoDB表空间tablespace被用于存储表的内容
– 提供一组用来记录事务性活动的日志文件
– 用COMMIT(提交)、SAVEPOINT及ROLLBACK(回滚)支持事务处理
– 提供全ACID兼容
– 在MySQL服务器崩溃后提供自动恢复
– 多版本（MVCC）和行级锁定
– 支持外键及引用的完整性，包括级联删除和更新</p>
<h3> 15.2.3、MEMORY存储引擎</h3>
<p>• 使用MEMORY存储引擎的表，其数据存储在内存中，且行的长度固定，这两个特点使得MEMORY存储引擎非常快。
• MEMORY存储引擎管理的表具有下列特征：
– 在数据库目录内，每个表均以.frm格式的文件表示。
– 表数据及索引被存储在内存中。
– 表级锁机制。
– 不能包含TEXT或BLOB字段。</p>
<p>• MEMORY存储引擎以前被称为HEAP引擎。</p>
<h2> 15.3、选择合适的存储引擎</h2>
<p>• MyISAM表最适合于大量的数据读而少量数据更新的混合操作。MyISAM表的另一种适用情形是使用压缩的只读表。</p>
<p>• 如果查询中包含较多的数据更新操作，应使用InnoDB。其行级锁机制和多版本的支持为数据读取和更新的混合操作提供了良好的并发机制。</p>
<p>• 可使用MEMORY存储引擎来存储非永久需要的数据，或者是能够从基于磁盘的表中重新生成的数据。</p>
<h1>16、事务</h1>
<h2> 16.1、概述</h2>
<figure><figcaption>image-20220619223138980</figcaption></figure>
<p>事务可以保证多个操作原子性，要么全成功，要么全失败。对于数据库来说事务保证批量的DML要么全成功，要么全失败。事务具有四个特征ACID</p>
<blockquote>
<p>a) 原子性（Atomicity） 整个事务中的所有操作，必须作为一个单元全部完成（或全部取消）。
b) 一致性（Consistency） 在事务开始之前与结束之后，数据库都保持一致状态。
c) 隔离性(Isolation) 一个事务不会影响其他事务的运行。
d) 持久性(Durability) 在事务完成以后，该事务对数据库所作的更改将持久地保存在数据库之中，并不会被回滚。</p>
</blockquote>
<p>事务中存在一些概念：</p>
<blockquote>
<p>a) 事务（Transaction）：一批操作（一组DML）
b) 开启事务（Start Transaction）
c) 回滚事务（rollback）
d) 提交事务（e_commit）
e) SET AUTOCOMMIT：禁用或启用事务的自动提交模式</p>
</blockquote>
<p>当执行DML语句是其实就是开启一个事务</p>
<p>关于事务的回滚需要注意：只能回滚insert、delete和update语句，不能回滚select（回滚select没有任何意义），对于create、drop、alter这些无法回滚.</p>
<p>事务只对DML有效果。</p>
<p>注意：rollback，或者e_commit后事务就结束了。</p>
<h2> 16.2、事务的提交与回滚演示</h2>
<ol>
<li>创建表</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>查询表中数据</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>
<p>开启事务START TRANSACTION;</p>
</li>
<li>
<p>插入数据</p>
</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="5">
<li>查看数据</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="6">
<li>修改数据</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="7">
<li>查看数据</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="8">
<li>回滚事务</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="9">
<li>查看数据</li>
</ol>
<figure><figcaption></figcaption></figure>
<h2> 16.3、自动提交模式</h2>
<p>• 自动提交模式用于决定新事务如何及何时启动。</p>
<p>• 启用自动提交模式：</p>
<p>– 如果自动提交模式被启用，则单条DML语句将缺省地开始一个新的事务。</p>
<p>– 如果该语句执行成功，事务将自动提交，并永久地保存该语句的执行结果。</p>
<p>– 如果语句执行失败，事务将自动回滚，并取消该语句的结果。</p>
<p>– 在自动提交模式下，仍可使用START TRANSACTION语句来显式地启动事务。这时，一个事务仍可包含多条语句，直到这些语句被统一提交或回滚。</p>
<p>• 禁用自动提交模式：</p>
<p>– 如果禁用自动提交，事务可以跨越多条语句。</p>
<p>– 在这种情况下，事务可以用COMMIT和ROLLBACK语句来显式地提交或回滚。</p>
<p>• 自动提交模式可以通过服务器变量AUTOCOMMIT来控制。</p>
<p>• 例如：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>show variables like '%auto%'; -- 查看变量状态</p>
</blockquote>
<h2> 16.4、事务的隔离级别</h2>
<h3> 16.4.1、隔离级别</h3>
<p>• 事务的隔离级别决定了事务之间可见的级别。
• 当多个客户端并发地访问同一个表时，可能出现下面的一致性问题：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>脏读取（Dirty Read）</td>
<td>一个事务开始读取了某行数据，但是另外一个事务已经更新了此数据但没有能够及时提交，这就出现了脏读取。</td>
</tr>
<tr>
<td>不可重复读（Non-repeatable Read）</td>
<td>在同一个事务中，同一个读操作对同一个数据的前后两次读取产生了不同的结果，这就是不可重复读。</td>
</tr>
<tr>
<td>幻像读（Phantom Read）</td>
<td>幻像读是指在同一个事务中以前没有的行，由于其他事务的提交而出现的新行。</td>
</tr>
</tbody>
</table>
<h3> 16.4.2、四个隔离级别</h3>
<p>• InnoDB 实现了四个隔离级别，用以控制事务所做的修改，并将修改通告至其它并发的事务：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>读未提交（READ UMCOMMITTED）</td>
<td>允许一个事务可以看到其他事务未提交的修改。</td>
</tr>
<tr>
<td>读已提交（READ COMMITTED）</td>
<td>允许一个事务只能看到其他事务已经提交的修改，未提交的修改是不可见的。</td>
</tr>
<tr>
<td>可重复读（REPEATABLE READ）</td>
<td>确保如果在一个事务中执行两次相同的SELECT语句，都能得到相同的结果，不管其他事务是否提交这些修改。 （银行总账）该隔离级别为InnoDB的缺省设置。</td>
</tr>
<tr>
<td>串行化（SERIALIZABLE） 【序列化】</td>
<td>将一个事务与其他事务完全地隔离。</td>
</tr>
</tbody>
</table>
<p>例:A可以开启事物,B也可以开启事物
A在事物中执行DML语句时,未提交
B不以执行DML,DQL语句</p>
<h3> 16.4.3、隔离级别与一致性问题的关系</h3>
<figure><figcaption></figcaption></figure>
<h3> 16.4.4、设置服务器缺省隔离级别</h3>
<h4> 通过修改配置文件设置</h4>
<p>• 可以在my.ini文件中使用transaction-isolation选项来设置服务器的缺省事务隔离级别。
• 该选项值可以是：</p>
<p>– READ-UNCOMMITTED
– READ-COMMITTED
– REPEATABLE-READ
– SERIALIZABLE</p>
<p>• 例如：</p>
<blockquote>
<p>[mysqld]</p>
<p>transaction-isolation = READ-COMMITTED</p>
</blockquote>
<h4> 通过命令动态设置隔离级别</h4>
<p>• 隔离级别也可以在运行的服务器中动态设置，应使用SET TRANSACTION ISOLATION LEVEL语句。
• 其语法模式为：</p>
<blockquote>
<p>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL &lt;isolation-level&gt;
其中的&lt;isolation-level&gt;可以是：</p>
</blockquote>
<p>– READ UNCOMMITTED
– READ COMMITTED
– REPEATABLE READ
– SERIALIZABLE</p>
<p>• 例如： SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</p>
<h3> 16.4.5、隔离级别的作用范围</h3>
<p>• 事务隔离级别的作用范围分为两种：</p>
<p>– 全局级：对所有的会话有效</p>
<p>– 会话级：只对当前的会话有效</p>
<p>• 例如，设置会话级隔离级别为READ COMMITTED ：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>• 设置全局级隔离级别为READ COMMITTED ：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 16.4.6、查看隔离级别</h3>
<p>• 服务器变量tx_isolation（包括会话级和全局级两个变量）中保存着当前的会话隔离级别。</p>
<p>• 为了查看当前隔离级别，可访问tx_isolation变量：</p>
<p>– 查看会话级的当前隔离级别：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>– 查看全局级的当前隔离级别：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 16.4.7、并发事务与隔离级别示例</h3>
<h4> read une_committed(未提交读) --脏读(Drity Read)</h4>
<table>
<thead>
<tr>
<th>会话一</th>
<th>会话二</th>
</tr>
</thead>
<tbody>
<tr>
<td>prompt s1&gt;</td>
<td>use testtable</td>
</tr>
<tr>
<td>s1&gt;use testtable</td>
<td>prompt s2&gt;</td>
</tr>
<tr>
<td>s1&gt;create table tx (  id int(11),  num int (10)  );</td>
<td></td>
</tr>
<tr>
<td>s1&gt;set global transaction  isolation level read une_committed;</td>
<td></td>
</tr>
<tr>
<td>s1&gt;start transaction;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;start transaction;</td>
</tr>
<tr>
<td>s1&gt;insert into tx values  (1,10);</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;select * from tx;</td>
</tr>
<tr>
<td>s1&gt;rollback;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;select * from tx;</td>
</tr>
</tbody>
</table>
<h4> read e_committed(已提交读)</h4>
<table>
<thead>
<tr>
<th>会话一</th>
<th>会话二</th>
</tr>
</thead>
<tbody>
<tr>
<td>s1&gt; set global transaction isolation  level read e_committed;</td>
<td></td>
</tr>
<tr>
<td>s1&gt;start transaction;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;start transaction;</td>
</tr>
<tr>
<td>s1&gt;insert into tx values (1,10);</td>
<td></td>
</tr>
<tr>
<td>s1&gt;select * from tx;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;select * from tx;</td>
</tr>
<tr>
<td>s1&gt;e_commit;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;select * from tx;</td>
</tr>
</tbody>
</table>
<h4> repeatable read(可重复读)</h4>
<table>
<thead>
<tr>
<th>会话一</th>
<th>会话二</th>
</tr>
</thead>
<tbody>
<tr>
<td>s1&gt; set global transaction isolation  level repeatable read;</td>
<td></td>
</tr>
<tr>
<td>s1&gt;start transaction;</td>
<td>s2&gt;start transaction;</td>
</tr>
<tr>
<td>s1&gt;select * from tx;</td>
<td></td>
</tr>
<tr>
<td>s1&gt;insert into tx values (1,10);</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;select * from tx;</td>
</tr>
<tr>
<td>s1&gt;e_commit;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>s2&gt;select * from tx;</td>
</tr>
</tbody>
</table>
<h1>17、索引</h1>
<h2> 17.1、索引原理</h2>
<p>索引被用来快速找出在一个列上用一特定值的行。没有索引，MySQL不得不首先以第一条记录开始，然后读完整个表直到它找出相关的行。表越大，花费时间越多。对于一个有序字段，可以运用二分查找（Binary Search），这就是为什么性能能得到本质上的提高。MYISAM和INNODB都是用B+Tree作为索引结构</p>
<p>（主键，unique 都会默认的添加索引）</p>
<h2> 17.2、索引的应用</h2>
<h3> 17.2.1、创建索引</h3>
<p>如果未使用索引，我们查询 工资大于 1500的会执行全表扫描</p>
<figure><figcaption></figcaption></figure>
<p><strong>什么时候需要给字段添加索引：</strong></p>
<ul>
<li>表中该字段中的数据量庞大</li>
<li>经常被检索，经常出现在 where 子句中的字段</li>
<li>经常被 DML 操作的字段不建议添加索引</li>
</ul>
<p>索引等同于一本书的目录
主键会自动添加索引，所以尽量根据主键查询效率较高。
如经常根据e_sal进行查询，并且遇到了性能瓶颈，首先查看程序是否存算法问题，再考虑对e_sal建立索引，建立索引如下：</p>
<p>1、create unique index 索引名 on 表名(列名);</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、alter table 表名 add unique index 索引名 (列名);</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 17.2.2、查看索引</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 17.2.3、使用索引</h3>
<p>注意一定不可以用select * … 可以看到type!=all了，说明使用了索引</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>条件中的e_sal使用了索引</p>
<figure><figcaption></figcaption></figure>
<p>如下图：假如我们要查找e_sal大于1500的所有行，那么可以扫描索引，索引时排序的，结果得出7行，我们知道不会再有匹配的记录，可以退出了。
如果查找一个值，它在索引表中某个中间点以前不会出现，那么也有找到其第一个匹配索引项的定位算法，而不用进行表的顺序扫描（如二分查找法）。
这样，可以快速定位到第一个匹配的值，以节省大量搜索时间。数据库利用了各种各样的快速定位索引值的技术，通常这些技术都属于DBA的工作。</p>
<h3> 17.2.4、删除索引</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，前两条语句是等价的，删除掉table_name中的索引index_name。</p>
<p>第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除后就不再使用索引了，查询会执行全表扫描。</p>
<figure><figcaption></figcaption></figure>
<h1>18、视图(虚拟表)</h1>
<h2> 18.1、什么是视图</h2>
<p>• 视图是一种根据查询（也就是SELECT表达式）定义的数据库对象，用于获取想要看到和使用的局部数据。
• 视图有时也被成为 <strong>虚拟表</strong>。
• 视图可以被用来从常规表（称为“基表”）或其他视图中查询数据。
• 相对于从基表中直接获取数据，视图有以下好处：
– 访问数据变得简单
– 可被用来对不同用户显示不同的表的内容
用来协助适配表的结构以适应前端现有的应用程序
视图作用：</p>
<ul>
<li>提高检索效率</li>
<li>隐藏表的实现细节【面向视图检索】</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 18.2、创建视图</h2>
<p>如下示例：查询员工的姓名，部门，工资入职信息等信息。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为什么使用视图？因为需求决定以上语句需要在多个地方使用，如果频繁的拷贝以上代码，会给维护带来成本，视图可以解决这个问题</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意mysql不支持子查询创建视图</p>
<h2> 18.3、修改视图</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​</p>
<h2> 18.4、删除视图</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1>19、存储过程</h1>
<h2> 19.1、基础介绍</h2>
<h2> 19.2、创建存储过程</h2>
<h2> 19.3、删除存储过程</h2>
<h1>20、触发器</h1>
<h2> 20.1、</h2>
<h2> 20.2、</h2>
<h2> 20.3、</h2>
<h1>21、DBA命令</h1>
<h2> 21.1、新建用户</h2>
<blockquote>
<p>CREATE USER username IDENTIFIED BY 'password';</p>
</blockquote>
<p>说明: username——你将创建的用户名, password——该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.  例如：  create user p361 identified by '123';  --可以登录但是只可以看见一个库 information_schema</p>
<h2> 21.2、授权</h2>
<p>命令详解</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol>
<li>dbname=* 表示所有数据库</li>
<li>tbname=* 表示所有表</li>
<li>login ip=% 表示任何ip</li>
<li>password为空，表示不需要密码即可登录</li>
<li>with grant option;  表示该用户还可以授权给其他用户</li>
</ol>
<p><strong>细粒度授权</strong></p>
<p>首先以root用户进入mysql，然后键入命令：grant select,insert,update,delete on <em>.</em> to p361  @localhost Identified by "123";   如果希望该用户能够在任何机器上登陆mysql，则将localhost改为 "%" 。</p>
<p><strong>粗粒度授权</strong></p>
<p>我们测试用户一般使用该命令授权，  GRANT ALL PRIVILEGES ON <em>.</em> TO 'p361'@'%'  Identified by "123";
注意:用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:</p>
<blockquote>
<p>GRANT ALL PRIVILEGES ON <em>.</em> TO 'p361'@'%'  Identified by "123"   WITH GRANT OPTION;</p>
</blockquote>
<p>privileges包括：</p>
<ol>
<li>alter：修改数据库的表</li>
<li>create：创建新的数据库或表</li>
<li>delete：删除表数据</li>
<li>drop：删除数据库/表</li>
<li>index：创建/删除索引</li>
<li>insert：添加表数据</li>
<li>select：查询表数据</li>
<li>update：更新表数据</li>
<li>all：允许任何操作</li>
<li>usage：只允许登录</li>
</ol>
<h2> 21.3、回收权限</h2>
<p>命令详解</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入 mysql库中  修改密码;</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>刷新权限：flush privileges</p>
<h2> 21.4、导出导入</h2>
<h3> 21.4.1、导出</h3>
<h4> 21.4.1.1、导出整个数据库</h4>
<p>在windows的dos命令窗口中执行：mysqldump testtable&gt;D:\testtable.sql -uroot -p123</p>
<h4> 21.4.1.2、导出指定库下的指定表</h4>
<p>在windows的dos命令窗口中执行：mysqldump testtable emp&gt; D:\ testtable.sql -uroot –p123</p>
<h3> 21.4.2、导入</h3>
<p>登录MYSQL数据库管理系统之后执行：source D:\ testtable.sql</p>
<h1>22、数据库设计的三范式</h1>
<h2> 22.1、第一范式</h2>
<p>数据库表中不能出现重复记录，每个字段是原子性的不能再分</p>
<p>不符合第一范式的示例</p>
<table>
<thead>
<tr>
<th>学生编号</th>
<th>学生姓名</th>
<th>联系方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>张三</td>
<td><a href="mailto:zs@gmail.com">zs@gmail.com</a>,1359999999</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td><a href="mailto:ls@gmail.com">ls@gmail.com</a>,13699999999</td>
</tr>
<tr>
<td>1001</td>
<td>王五</td>
<td><a href="mailto:ww@163.net">ww@163.net</a>,13488888888</td>
</tr>
</tbody>
</table>
<p>存在问题：</p>
<p>n 最后一条记录和第一条重复（不唯一，没有主键）</p>
<p>n 联系方式字段可以再分，不是原子性的</p>
<table>
<thead>
<tr>
<th>学生编号(pk)</th>
<th>学生姓名</th>
<th>email</th>
<th>联系电话</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>张三</td>
<td><a href="mailto:zs@gmail.com">zs@gmail.com</a></td>
<td>1359999999</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td><a href="mailto:ls@gmail.com">ls@gmail.com</a></td>
<td>13699999999</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td><a href="mailto:ww@163.net">ww@163.net</a></td>
<td>13488888888</td>
</tr>
</tbody>
</table>
<p>关于第一范式，每一行必须唯一，也就是每个表必须有主键，这是我们数据库设计的最基本要求，主要通常采用数值型或定长字符串表示，关于列不可再分，应该根据具体的情况来决定。如联系方式，为了开发上的便利行可能就采用一个字段了。</p>
<h2> 22.2、第二范式</h2>
<p>第二范式是建立在第一范式基础上的，另外要求所有非主键字段完全依赖主键，不能产生部分依赖</p>
<p>示例：</p>
<table>
<thead>
<tr>
<th>学生编号</th>
<th>学生姓名</th>
<th>教师编号</th>
<th>教师姓名</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>张三</td>
<td>001</td>
<td>王老师</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td>002</td>
<td>赵老师</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td>001</td>
<td>王老师</td>
</tr>
<tr>
<td>1001</td>
<td>张三</td>
<td>002</td>
<td>赵老师</td>
</tr>
</tbody>
</table>
<p>确定主键：</p>
<table>
<thead>
<tr>
<th>学生编号(PK)</th>
<th>教师编号(PK)</th>
<th>学生姓名</th>
<th>教师姓名</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>001</td>
<td>张三</td>
<td>王老师</td>
</tr>
<tr>
<td>1002</td>
<td>002</td>
<td>李四</td>
<td>赵老师</td>
</tr>
<tr>
<td>1003</td>
<td>001</td>
<td>王五</td>
<td>王老师</td>
</tr>
<tr>
<td>1001</td>
<td>002</td>
<td>张三</td>
<td>赵老师</td>
</tr>
</tbody>
</table>
<p>以上虽然确定了主键，但此表会出现大量的冗余，主要涉及到的冗余字段为“学生姓名”和“教师姓名”，出现冗余的原因在于，学生姓名部分依赖了主键的一个字段学生编号，而没有依赖教师编号，而教师姓名部门依赖了主键的一个字段教师编号，这就是第二范式部分依赖。</p>
<p>解决方案如下：</p>
<p>学生信息表</p>
<table>
<thead>
<tr>
<th>学生编号（PK）</th>
<th>学生姓名</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>张三</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
</tr>
</tbody>
</table>
<p>教师信息表</p>
<table>
<thead>
<tr>
<th>教师编号（PK）</th>
<th>教师姓名</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>王老师</td>
</tr>
<tr>
<td>002</td>
<td>赵老师</td>
</tr>
</tbody>
</table>
<p>教师和学生的关系表</p>
<table>
<thead>
<tr>
<th>学生编号(PK) fkà学生表的学生编号</th>
<th>教师编号(PK) fkà教师表的教师编号</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>001</td>
</tr>
<tr>
<td>1002</td>
<td>002</td>
</tr>
<tr>
<td>1003</td>
<td>001</td>
</tr>
<tr>
<td>1001</td>
<td>002</td>
</tr>
</tbody>
</table>
<p>如果一个表是单一主键，那么它就复合第二范式，部分依赖和主键有关系</p>
<p><strong>以上是一种典型的“多对多”的设计</strong></p>
<h2> 22.3、第三范式</h2>
<p>建立在第二范式基础上的，非主键字段不能传递依赖于主键字段。（<strong>不要产生传递依赖</strong>）</p>
<table>
<thead>
<tr>
<th>学生编号（PK）</th>
<th>学生姓名</th>
<th>班级编号</th>
<th>班级名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>张三</td>
<td>01</td>
<td>一年一班</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td>02</td>
<td>一年二班</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td>03</td>
<td>一年三班</td>
</tr>
<tr>
<td>1004</td>
<td>六</td>
<td>03</td>
<td>一年三班</td>
</tr>
</tbody>
</table>
<p>从上表可以看出，班级名称字段存在冗余，因为班级名称字段没有直接依赖于主键，班级名称字段依赖于班级编号，班级编号依赖于学生编号，那么这就是传递依赖，解决的办法是将冗余字段单独拿出来建立表，如：</p>
<p>学生信息表</p>
<table>
<thead>
<tr>
<th>学生编号（PK）</th>
<th>学生姓名</th>
<th>班级编号（FK）</th>
</tr>
</thead>
<tbody>
<tr>
<td>1001</td>
<td>张三</td>
<td>01</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td>02</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td>03</td>
</tr>
<tr>
<td>1004</td>
<td>六</td>
<td>03</td>
</tr>
</tbody>
</table>
<p>班级信息表</p>
<table>
<thead>
<tr>
<th>班级编号（PK）</th>
<th>班级名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>一年一班</td>
</tr>
<tr>
<td>02</td>
<td>一年二班</td>
</tr>
<tr>
<td>03</td>
<td>一年三班</td>
</tr>
</tbody>
</table>
<p>以上设计是一种典型的一对多的设计，一存储在一张表中，多存储在一张表中，在多的那张表中添加外键指向一的一方的主键</p>
<h2> 22.4、三范式总结</h2>
<p>第一范式：有主键，具有原子性，字段不可分割
第二范式：完全依赖，没有部分依赖
第三范式：没有传递依赖 冗余</p>
<blockquote>
<p>数据库设计尽量遵循三范式，但是还是根据实际情况进行取舍，有时可能会拿冗余换速度，最终用目的要满足客户需求。</p>
</blockquote>
<p><strong>一对一设计，有两种设计方案：</strong></p>
<p>第一种设计方案：主键共享
第二种设计方案：外键唯一</p>
<h1>索引面试题</h1>
<h2> 1，请问，慢查询出现后如何调优？</h2>
<p>慢查询出现后，首先查看是否缺少索引</p>
<h2> 2，请问，应该使用哪种索引引擎？</h2>
<p>innodb</p>
<h2> 3，索引的常用形式是如何？</h2>
<p>多字段联合索引</p>
<h2> 4，id自增设定是否合理？</h2>
<p>合理，因为自增索引为自然数，显示为1 2 3 4 5 6 ，无论是范围查询例如id&lt;6 and id&gt;4，通过
叶子节点的双向指针可以快地进行范围查询；还是做精确查询，21亿个数只需查3次，都是非常方便和迅速
的，要把方便做范围查询，排序，和兼有良好的精确查询效率都答出来</p>
<h2> 5，应该推荐整型索引使用还是uuid唯一性字符索引使用？</h2>
<p>整型更好，方便做范围查询，uuid可以做唯一性的精确查询，但是范围查询对于一串字符串来说并不友
好，而且整型更利于排序</p>
<h2> 6，mysql的索引是什么？</h2>
<p>帮助mysql高效获取数据的数据结构</p>
<h2> 7，mysql的索引结构是什么？为什么？其他的参考结构差到哪里？</h2>
<p>B+树 数据结构，1、检索速度快；2、排序快，
1.单一节点存储更多的元素，使得查询的IO次数更少。
2.所有查询都要查找到叶子节点，查询性能稳定。
3.所有叶子节点形成有序链表，便于范围查询。，其他结构如B-树在数据量过大时会变成链表</p>
<h1>练习</h1>
<h2> 1、取得每个部门最高薪水的人员名称</h2>
<p>1,取得各个部门的最高薪水  2,使用内连接查询最高薪水是哪些人</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 2、哪些人的薪水在部门的平均薪水之上</h2>
<p>1,部门的平均薪水是多少.
2,哪些人的薪水大于平均薪水.</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 3、取得部门中（所有人的）平均的薪水等级，如下</h2>
<p>1、先取得每个人的等级（员工表-e_sal，，e_salgrade表）以及对应的部门.
2、在计算各部门的平均等级，基于部门分组.</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 4、不准用组函数（Max），取得最高薪水（给出两种解决方案）</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 5、取得平均薪水最高的部门的部门编号（至少给出两种解决方案）</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 6、取得平均薪水最高的部门的部门名称</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 7、求平均薪水的等级最低的部门的部门名称</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 8、取得比普通员工的最高薪水还要高的领导人姓名</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 9、取得薪水最高的前五名员工</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 10、取得薪水最高的第六到第十名员工</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 11、取得最后入职的5名员工</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 12、取得每个薪水等级有多少员工</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 13、学生面试题</h2>
<p>有3个表S(学生表)，C（课程表），SC（学生选课表）
S（SNO，SNAME）代表（学号，姓名）
C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）
SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）</p>
<p>问题：</p>
<p>1，找出没选过“黎明”老师的所有学生姓名。
2，列出2门以上（含2门）不及格学生姓名及平均成绩。
3，即学过1号课程又学过2号课所有学生的姓名。</p>
<p>请用标准SQL语言写出答案，方言也行（请说明是使用什么方言）。</p>
<hr>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题1.找出没选过“黎明”老师的所有学生姓名。
即:</p>
<figure><figcaption></figcaption></figure>
<p>问题2:列出2门以上（含2门）不及格学生姓名及平均成绩。
问题3:即学过1号课程又学过2号课所有学生的姓名。</p>
<h2> 14、列出所有员工及领导的姓名</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 15、列出受雇日期早于其直接上级的所有员工的编号,姓名,部门名称</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 16、列出部门名称和这些部门的员工信息,同时列出那些没有员工的部门</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 17、列出至少有5个员工的所有部门</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 18、列出薪金比"SMITH"多的所有员工信息</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 19、列出所有"CLERK"(办事员)的姓名及其部门名称,部门的人数</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 20、列出最低薪金大于1500的各种工作及从事此工作的全部雇员人数</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 21、列出在部门"SALES"&lt;销售部&gt;工作的员工的姓名,假定不知道销售部的部门编号</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 22、列出薪金高于公司平均薪金的所有员工,所在部门,上级领导,雇员的工资等级</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 23、列出与"SCOTT"从事相同工作的所有员工及部门名称</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 24、列出薪金等于部门30中员工的薪金的其他员工的姓名和薪金</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><h2> 25、列出薪金高于在部门30工作的所有员工的薪金的员工姓名和薪金.部门名称</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 26、列出在每个部门工作的员工数量,平均工资和平均服务期限</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 27、列出所有员工的姓名、部门名称和工资</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 28、列出所有部门的详细信息和人数</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 29、列出各种工作的最低工资及从事此工作的雇员姓名</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 30、列出各个部门的MANAGER(领导)的最低薪金</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 31、列出所有员工的年工资,按年薪从低到高排序</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"></div></div><figure><figcaption></figcaption></figure>
<h2> 32、求出员工领导的薪水超过3000的员工名称与领导名称</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 33、求出部门名称中,带'S'字符的部门员工的工资合计、部门人数</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 34、给任职日期超过15年的员工加薪20%</h2>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="database"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-05-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">linux安装MySQL</title>
    <id>https://topjf.github.io/database/mysql/install.html</id>
    <link href="https://topjf.github.io/database/mysql/install.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">rpm 方式安装 mysql 1、检查当前操作系统是否安装过mysql ，如果安装进行卸载操作 2、下载与安装mysql 要求在线下载安装，所以必须保证你的虚拟机的Linux系统能正常的访问外网( 上网) 注：如何系统中没安装wget软件, 先安装: 使用 wget 命令下载mysql的repo源 https://downloads.mysql.com...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Linux下安装mysql</h1>
<h2> rpm 方式安装 mysql</h2>
<h3> 1、检查当前操作系统是否安装过mysql   ，如果安装进行卸载操作</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2、下载与安装mysql</h3>
<p>要求在线下载安装，所以必须保证你的虚拟机的Linux系统能正常的访问外网( 上网)</p>
<p>注：如何系统中没安装wget软件, 先安装:</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 使用 wget 命令下载mysql的repo源</h4>
<hr>
<p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener noreferrer">https://downloads.mysql.com/archives/community/</a>：下载【common、libs、client、server】这几个文件</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> 使用 rpm 安装mysql 的yum源</h4>
<ul>
<li>安装时必须严格遵守安装顺序 <strong>依赖关系依次为 common → libs → client → server</strong></li>
<li><strong>注</strong>：ivh中， i-install安装；v-verbose进度条；h-hash哈希校验</li>
</ul>
<p><strong>方式一：</strong><code>yum -y install ./mysql57-community-release-el7-11.noarch.rpm</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二：</strong><code>rpm -ivh ./mysql57-community-release-el7-11.noarch.rpm</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>yum 源安装mysql服务</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>方式三：（推荐）</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不需要执行：yum -y install mysql-community-server</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h3> 3、 启动 mysql 服务</h3>
<table>
<thead>
<tr>
<th>CentOS6及以前版本</th>
<th>CentOS7</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>service  服务名  start</td>
<td>systemctl  start   服务名</td>
<td>启动某个服务</td>
</tr>
<tr>
<td>service  服务名  stop</td>
<td>systemctl  stop 服务名</td>
<td>停止</td>
</tr>
<tr>
<td>service   服务名  restart</td>
<td>systemctl restart   服务名</td>
<td>重启</td>
</tr>
<tr>
<td>service 服务名  status</td>
<td>systemctl status 服务名</td>
<td>查看状态</td>
</tr>
<tr>
<td></td>
<td>systemctl enable    服务名</td>
<td>服务永久生效</td>
</tr>
<tr>
<td></td>
<td>systemctl disable    服务名</td>
<td>服务永久关闭</td>
</tr>
</tbody>
</table>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4 、配置mysql</h3>
<h4> 查看密码</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 登陆mysql</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 进入mysql系统数据库</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在执行此语句之前，必须使用ALTER USER语句重置密码</p>
<blockquote>
<p>You must reset your password using ALTER USER statement before executing this statement.</p>
</blockquote>
<h4> 设置密码</h4>
<p><strong>判断修改密码时候新密码是否符合当前的策略，密码不满足会报错，不让修改。</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（选1种即可：）</p>
<p><strong>（1）</strong> ALTER USER 'root'@'localhost' IDENTIFIED  BY 'root12';</p>
<p><strong>（2）</strong> update user set password=password('root12') where user='root';</p>
<p><strong>刷新：</strong> flush privileges;</p>
<p>如果出现【ERROR1054(42S22):Unknown column 'password' in 'field list'】</p>
<p>执行：<code>update mysql.user set authentication_string=password('root12') where user='root';</code>  即可</p>
<h4> 查看 新密码校验插件（可选项）</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 设置访问权限,可以通过外部连接 数据库</h4>
<p>GRANT ALL PRIVILEGES ON *.* TO [远程访问用户名]@'IP' IDENTIFIED BY ['密码'] WITH GRANT OPTION;</p>
<p>如：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> 开启log-bin日志</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>刷新马上生效</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重启mysql服务</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看进程</strong></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 5、开放端口</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 6、自己配置文件 vim /etc/my.cnf</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>systemctl restart mysqld</p>
<h2> tar 方式安装</h2>
<p>wget <a href="https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.38-el7-x86_64.tar.gz" target="_blank" rel="noopener noreferrer">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.38-el7-x86_64.tar.gz</a></p>
<h3> 解压</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="database"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2020-05-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ArrayList集合</title>
    <id>https://topjf.github.io/java/basis/arraylist.html</id>
    <link href="https://topjf.github.io/java/basis/arraylist.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">ArrayList集合 示例 1 : 使用数组的局限性 示例 2 : ArrayList存放对象 示例1:使用数组的局限性 如果要存放多个对象，可以使用数组，但是数组有局限性 比如 声明长度是10的数组 不用的数组就浪费了 超过10的个数，又放不下 引入arraylist的泛型使用方式，解决代码不好看问题 ```java //import java.u...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> ArrayList集合</h2>
<p>示例 1 : 使用数组的局限性</p>
<p>示例 2 : ArrayList存放对象</p>
<h3> 示例1:使用数组的局限性</h3>
<p>如果要存放多个对象，可以使用数组，但是数组有局限性
比如 声明长度是10的数组
不用的数组就浪费了
超过10的个数，又放不下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例2: ArrayList存放对象</h3>
<p>为了解决数组的局限性，引入容器类的概念。 最常见的容器类就是ArrayList</p>
<p>容器容量"capacity"会随着对象的增加，自动增长
只需要不断往容器里增加英雄即可，不用担心会出现数组的边界问题</p>
<h4> arraylist的源码结构如下</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 引入arraylist的泛型使用方式，解决代码不好看问题</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例3：arraylist常用方法</h3>
<figure><figcaption>img</figcaption></figure>
<p>类似操作自行实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例4：list接口</h3>
<p>List&lt;Hero&gt;  heros3=<strong>new</strong> ArrayList&lt;Hero&gt;();</p>
<h3> </h3>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-08T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">面向对象基础</title>
    <id>https://topjf.github.io/java/basis/basic-grammar.html</id>
    <link href="https://topjf.github.io/java/basis/basic-grammar.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">面向对象基础 核心：一切行为，让对象自己做自己的事情，其他人不能手动操作 前提案例 img 案例演示 需求：创建一个女神泪 img 女神泪装备类： 名称 价格 效果 Left-装备 Right-装备 被动功能：f(){} 主动功能 默认功能：合成其他装备 结构图 img 案例代码 1、类和对象 类：class 对象模型，模板 对象：new出来的 具体的...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 面向对象基础</h2>
<h3> 核心：一切行为，让对象自己做自己的事情，其他人不能手动操作</h3>
<h3> 前提案例</h3>
<figure><figcaption>img</figcaption></figure>
<h3> 案例演示</h3>
<p>需求：创建一个女神泪</p>
<figure><figcaption>img</figcaption></figure>
<p>女神泪装备类：</p>
<p>名称</p>
<p>价格</p>
<p>效果</p>
<p>Left-装备</p>
<p>Right-装备</p>
<p>被动功能：f(){}</p>
<p>主动功能</p>
<p>默认功能：合成其他装备</p>
<h3> 结构图</h3>
<figure><figcaption>img</figcaption></figure>
<h3> 案例代码</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 1、类和对象</h3>
<p>类：class  对象模型，模板</p>
<p>对象：new出来的  具体的东西</p>
<h3> 2、对象属性</h3>
<p>属性：这里主要强调模板属性，能够提供特别信息和功能的组件</p>
<h4> 属性的类型</h4>
<p>String：字符串—用来存储一串文字</p>
<p>Int：用来存储整数</p>
<p>Float：用来存储小数（浮点数）</p>
<h4> 属性名称</h4>
<p>自定义——驼峰命名格式，首字母小写</p>
<h3> 3、对象方法</h3>
<p>方法：函数，特殊功能，执行内容—method-function—js</p>
<p>特点：</p>
<p>返回值—— 一个方法执行之后要返回信息，将信息存进变量中，提供这个有值的变量，供其他地方使用</p>
<p>方法名称——驼峰命名，首字母小写</p>
<p>方法参数——自定义传不传参数，传多少个，传的类型，传递的对象的顺序</p>
<h3> 模拟语境训练</h3>
<p>游戏：组件—价格，房间号 ，被开被关  方法— 我嘿你 你嘿我</p>
<p>游客：组件—体重  方法—开， 关门 跑 嘿嘿，被嘿</p>
<p>教练：组件—衣服  方法—tip，run，被嘿 ，嘿嘿</p>
<p>阐述需求：</p>
<p>游客给钱，选择 门，开门，关门，教练tip，run，嘿嘿，游客被嘿</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 变量</h2>
<p>看效果</p>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<h3> 什么是变量</h3>
<p>变量的定义：用来命名一个数据的标识符</p>
<p>1949年，这个1949代表的是一个年份</p>
<p>如果要给这个1949取名字，year=1949，int year=1949；</p>
<p>加法运算：1+2=3；</p>
<p>Int a=1；</p>
<p>Int b=2；</p>
<p>Int c=a+b;</p>
<p>C=3</p>
<h4> 变量的分类</h4>
<p>局部变量：在方法中的变量</p>
<figure><figcaption>img</figcaption></figure>
<p>全局变量-成员变量</p>
<figure><figcaption>img</figcaption></figure>
<h4> 变量的修饰类型</h4>
<ul>
<li>类类型</li>
</ul>
<p>自定义以及系统自带的类(例如：java.lang.String)</p>
<ul>
<li>基本数据类型</li>
</ul>
<blockquote>
<p>Byte short char int float double long boolean</p>
<p>整型（byte，short，int，long），字符型（char），浮点型（float，double），布尔型（boolean）</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<h3> 基本变量类型</h3>
<h4> 探讨整型（byte，short，int，long）滴取值范围</h4>
<h5>原码，补码，反码</h5>
<p>计算机所有的运算都是补码层面进行运算，原码层面进行呈现</p>
<p>正数：原码，反码，补码组成内容一样</p>
<p>负数：原码，反码：原码符号位不变，其他位取反，补码+1</p>
<p>案例：</p>
<p>十进制+1</p>
<blockquote>
<p>原码：0-0000001</p>
<p>反码：0-0000001</p>
<p>补码：0-0000001</p>
</blockquote>
<p>十进制-1</p>
<blockquote>
<p>原码：1-0000001</p>
<p>反码：1-1111110</p>
<p>补码：1-1111111</p>
</blockquote>
<p>特别的值：</p>
<blockquote>
<p>0-0000000:0</p>
<p>1-0000000：-128---》规定这个就是-128</p>
<p>最大值：127:0-1111111</p>
</blockquote>
<p>Byte：-128~127</p>
<figure><figcaption>img</figcaption></figure>
<p>注意事项：如果给变量的值草出了变量类型的取值范围，就会出点问题</p>
<p>例如：</p>
<p>编译都无法通过，所以写的时候要注意类型的取值范围</p>
<p>思考题：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>注意1</h5>
<p>基本数据类型的相互转型，要注意他们滴取值范围，范围类操作没有问题，范围外操作，出大问题，尽量禁止范围外类型互相转换</p>
<h5>注意2</h5>
<p>有一个基础前提：如果出现了一个整型数字，这个数字就是int类型</p>
<p>默认的向下转型案例</p>
<p>​     <strong>byte</strong> a=1;//int 1   (byte)1 基本数据类型自动向下转型     //等价于(byte)          <strong>float</strong> a2=(<strong>float</strong>)3.3;<a href="//3.3" target="_blank" rel="noopener noreferrer">//3.3</a> double      <strong>float</strong> a3=3.3f;</p>
<h5>注意3</h5>
<p>一个常量是不可以被改变的</p>
<p>例如：</p>
<p>12</p>
<p>‘A’</p>
<p>true</p>
<h4> 字符型</h4>
<p>Char类型用于存放一个字符，使用单引号表示（双引号表示的是字符串）</p>
<p>其长度和short一样是16位：二进制位 1010101010101010</p>
<p>单引号之内只能存放一个字符，超过就会报错</p>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<h4> 浮点型</h4>
<p>Float：32位</p>
<p>Double：64位</p>
<p>注意：默认的小数值就是double类型</p>
<p>Float f=54.321会产生编译错误，</p>
<p>在后面加f，解决编译问题</p>
<figure><figcaption>img</figcaption></figure>
<h4> 布尔类型</h4>
<p>Boolean a=true;//1</p>
<p>Boolean b=false;//0</p>
<p>作业：</p>
<p>请大家分别为下面的数据查找合适的类型</p>
<p>3.14</p>
<p>2.567473</p>
<p>365</p>
<p>‘吃’</p>
<p>False</p>
<p>“不可描述”</p>
<p>答案：</p>
<figure><figcaption>img</figcaption></figure>
<h3> 字面量=字面值</h3>
<p>Hero h=new Hero();</p>
<p>Int a=1;</p>
<p>解释：创建一个英雄对象会用到new关键字，但是给一个基本数据类型变量赋值是不需要new关键字滴，基本类型的变量在java中是一种特别的内置数据类型，并非某个对象</p>
<p>定义：给基本类型变量赋值的方式就叫做字面量或者字面值</p>
<p>Float hp=120;</p>
<p>Int armor=10;</p>
<h4> 整数字面值</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当以L或者l结尾的时候，一个整型的字面量是long类型，否则就是int类型。建议用L而非小写的l，容易和1混淆。</p>
<p>Byte，short,int,long 的字面量都可以通过int类型的字面量来创建，整数字面量可以用四种类型来表示：</p>
<p>二进制</p>
<p>八进制</p>
<p>十进制</p>
<p>十六进制</p>
<h4> 浮点类型字面量</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浮点类型尽量用F</p>
<p>浮点类型可以用科学计数法 e2表示10的2次方</p>
<h4> 字符和字符串字面量</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\ 表示转义，将特殊的带有格式效果的格式符号转换成字符效果的符号</p>
<p>作业：</p>
<p>给出变量类型。赋予合法的字面量</p>
<p>Byte b;</p>
<p>Short s;</p>
<p>Int I;</p>
<p>Long L;</p>
<p>Float f;</p>
<p>Double d;</p>
<p>Char c;</p>
<p>String str;</p>
<h3> 命名规则</h3>
<p>变量名称只能用  字母，数字，$ _</p>
<p>变量名第一个字母不能使用数字</p>
<p>编译会出问题</p>
<p>使用完整英文单词名称，而非缩写</p>
<figure><figcaption>img</figcaption></figure>
<p>不能使用关键字</p>
<p>
凡是系统自带的具有特殊意义的关键字，通通不能作为变量名称</p>
<p>关键字的列表</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>异常</td>
<td>try catch finally throws throw</td>
</tr>
<tr>
<td>对象相关</td>
<td>new extends implements class instanceof this super</td>
</tr>
<tr>
<td>字面值常量</td>
<td>1 2 3… false true null</td>
</tr>
<tr>
<td>方法</td>
<td>void return</td>
</tr>
<tr>
<td>包相关</td>
<td>package import</td>
</tr>
<tr>
<td>保留字</td>
<td>goto const</td>
</tr>
</tbody>
</table>
<p>其他关键字</p>
<p>八种基本数据类型不可以</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>循环</td>
<td>for do while break continue</td>
</tr>
<tr>
<td>分支关键字</td>
<td>if else else if switch case default</td>
</tr>
<tr>
<td>方法</td>
<td>private public protected final static abstract synchronized transist volatile strictfp</td>
</tr>
</tbody>
</table>
<p>中文词组也可以当做变量名只是不常用，建议，不要用</p>
<figure><figcaption>img</figcaption></figure>
<h3> 作用域</h3>
<h4> 字段，属性，field—（成员变量—类—模板的组件）</h4>
<p>只要是成员变量就可以被整个作用域给访问到</p>
<p>作用域：一对大括号</p>
<h4> 参数</h4>
<figure><figcaption>img</figcaption></figure>
<p>如果一个变量，是声明在一个方法上，就叫做参数</p>
<p>参数的作用域是该方法内所有的代码——{}包含的</p>
<p>其他方法和类中的其他位置，都是不可以访问这个参数的</p>
<h4> 局部变量</h4>
<figure><figcaption>img</figcaption></figure>
<p>定义在方法内的变量就叫做局部变量</p>
<p>作用域就是包含他的那对大括号{}</p>
<h4> 作业</h4>
<p>取什么值？</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Final</h3>
<h4> 声明时候赋值</h4>
<figure><figcaption>img</figcaption></figure>
<p>Final代表最终状态，不可以被修改</p>
<h4> 在声明的时候没有赋值</h4>
<figure><figcaption>img</figcaption></figure>
<p>如果在声明的时候没有赋值，可以在后面的代码中国赋值唯一一次——final修饰的</p>
<h4> Final可以修饰类也可以修饰方法</h4>
<figure><figcaption>img</figcaption></figure>
<p>Final修饰的类与方法，均不可以被继承与修改</p>
<h4> 参数中也可以使用final</h4>
<figure><figcaption>img</figcaption></figure>
<h3> 表达式</h3>
<p>以分号结尾的代码就是一个表达式</p>
<figure><figcaption>img</figcaption></figure>
<p>单一的； 分号，就是一个完整的表达式</p>
<figure><figcaption>img</figcaption></figure>
<h3> 代码块</h3>
<p></p>
<p>可以在一个类中的任意位置，任意嵌套，任意并排排列</p>
<h3> 变量的初始化TODO</h3>
<h2> 操作符</h2>
<p>+ - % / = &gt; &lt; &gt;&gt; &lt;&lt; &gt;&gt;&gt; ~ ^ ++ -- += -= == *= /= -= !=</p>
<h3> 算术操作符</h3>
<p>+ - * / % ++ --</p>
<p>a++，先做（）中a的呈现，再在括号外做自增1 ++a</p>
<p>++a,先自增1，然后再做呈现（参与运算）</p>
<p>同理--</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 关系操作符</h3>
<p>关系操作符生成的是一个Boolean结果</p>
<p>关系操作符包括(&lt;、&gt;、&lt;=、&gt;=、==、!=)</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 逻辑操作符</h3>
<p>&amp;&amp;（短路与）、&amp;（与）、||（短路或）、|（非短路或）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 位移操作符</h3>
<p>在二进制层面，对二进制位进行移动和取舍操作，强调，所有的位移操作都是补码层面上进行的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 赋值操作</h3>
<p>= ！= 》= 《=》 ==</p>
<h3> 三元操作符：三目运算</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 控制流程（选择语句+循环）</h2>
<p>1， if语句</p>
<p>2， switch</p>
<p>3， while，do while</p>
<p>4， for，增强for循环（foreach）</p>
<p>5， continue，break</p>
<h3> if语句</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> If语句的坑</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> If else</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> else if</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果满足多个条件，第一个执行后就结束判断</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Switch</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Switch是if else if else if else的一种变形，格式更加简洁，操作更加方便，但是不能适应复杂表达式，只能简单判断单一的值</p>
<h3> 选择语句练习题</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 循环</h2>
<p>1+2+3+…+100=?</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印一个九九乘法表</p>
<p>1*1=1</p>
<p>1<em>2=2  2</em>2=4</p>
<p>1<em>3=3  2</em>3=6 3*3=9</p>
<p>解决思路</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作业：</p>
<p>请输入一个任意数字，打印一个对应上行数的完整菱形</p>
<p>例如：</p>
<figure><figcaption>image-20220530185209145</figcaption></figure>
<p>即，上面三角形的行数，下面三角形的行数是上面的行数减去一行的菱形表达形式</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-07T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">数据结构</title>
    <id>https://topjf.github.io/java/basis/data-structure.html</id>
    <link href="https://topjf.github.io/java/basis/data-structure.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">img 数组基础 img 给数组取一个名字Array ——arr 真实环境中更需要给数组取一个有实际意义的名字 数据的索引 索引概念很重要，可以有语义也可以没有语义 img 对于索引的理解 1， 数组的最大优点：快速查询——scores【2】 2， 数组最好应用于“索引有语意”的情况 3， 但并非所有有语意的索引都适用于数组 身份证号：50010520...</summary>
    <content type="html"><![CDATA[<!-- more -->
<figure><figcaption>img</figcaption></figure>
<h2> 数组基础</h2>
<figure><figcaption>img</figcaption></figure>
<p>给数组取一个名字Array ——arr</p>
<p>真实环境中更需要给数组取一个有实际意义的名字</p>
<h3> 数据的索引</h3>
<p>索引概念很重要，可以有语义也可以没有语义</p>
<figure><figcaption>img</figcaption></figure>
<h3> 对于索引的理解</h3>
<p>1，   数组的最大优点：快速查询——scores【2】</p>
<p>2，   数组最好应用于“索引有语意”的情况</p>
<p>3，   但并非所有有语意的索引都适用于数组</p>
<p>身份证号：50010520189898</p>
<p>4，   数组也可以处理索引没有语意的情况</p>
<p>5，   本章处理主要就是处理“索引没有语意”的情况数组的使用</p>
<p>需求：遍历数组，打印一个班的成绩</p>
<figure><figcaption>img</figcaption></figure>
<h2> 封装数组</h2>
<figure><figcaption>img</figcaption></figure>
<p>提出需求：需要基于java数组，二次封装属于我们自己的数组类，区别于java本身的静态数组，性能媲美静态数组</p>
<h3> 动态数组设计过程</h3>
<figure><figcaption>img</figcaption></figure>
<p>Capacity：容量</p>
<h4> V1.0版本：基础数组结构</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.1版本：向数组中添加元素</h4>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.2版本：向指定的位置插入指定的元素，提供一个addFirst</h4>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<p>代码写完后需要修改刚才的增加函数</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.3版本：在数组中查询元素和修改元素</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.4版本：包含搜索和删除</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.5版本：使用泛型</h4>
<p>理由：</p>
<figure><figcaption>img</figcaption></figure>
<p>代码改造：Array</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类：student</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印类：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.5版本：动态数组</h4>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.51经典版程序</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> V1.6版本：使用泛型</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 数组时间复杂度算法简单分析</h3>
<h4> 1， 简单复杂度分析</h4>
<p>通过时间复杂度分析出算法的性能如何</p>
<p>时间复杂度通常是如下表示的</p>
<figure><figcaption>img</figcaption></figure>
<p>读作大O1 大On大O nlogn 大On平方</p>
<p>这里的这个大O就是描述的算法的运行时间和输入数据之间的关系</p>
<p>什么是运行时间和输入数据之间的关系呢？通过下面例子来演示</p>
<figure><figcaption>img</figcaption></figure>
<p>也就是说这里产生了n个数，那么n的数量是多少，对应的时间也就线性增加，但其实，每个n并非是时间系数为1的.</p>
<p>比如：操作每一个数（temp），需要从这个这个数组中通过for循环取出来，然后需要取出sum并与temp加在一起重新再赋值给sum，对于每个数其实都是需需要这么多操作的，那么这样的操作所花费的时间系数，我们称之为C1，那么在开始计算之前可能还需要赋值sum=0，完成计算后还要返回这个sum，这些每次都有的操作所花费的等同的时间叫做c2</p>
<figure><figcaption>img</figcaption></figure>
<p>为什么要忽略这个c1，c2呢，因为拿这里的c1来说，就算是直接使用，基于不同的语言，执行时间段也是不同的，就算是执行时间相同，底层的操作系统的汇编层面或者机器语言所花费的解析时间也不同，而且不同的cpu也是不同的，因此c2也是同理。接下来看一组结论和案例对比：</p>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<p>这里的时间复杂度描述的不是临界值，而是n趋近于无穷时候，这个算法谁块谁慢，同理，在这种情况下，低阶项实际上也很小，可以看做也是一个常数，忽略不计</p>
<figure><figcaption>img</figcaption></figure>
<p>分析自定义数组的各项操作</p>
<figure><figcaption>img</figcaption></figure>
<p>针对删除操作，删除1个跟删除n个平均来看，就是n/2，1/2也是一个常数系数，舍去系数O（n）</p>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<p>结论：</p>
<figure><figcaption>img</figcaption></figure>
<p>问题：删除和增加的分析完全使用最坏时间复杂度来分析是不合理的，因为并不是所有的操作都会触发这个容积的扩容</p>
<h4> 2， 均摊复杂度和防止复杂度的震荡</h4>
<p>分析增加操作中触发resize操作的条件</p>
<figure><figcaption>img</figcaption></figure>
<p>分析：假如一个数组的capacity是10个元素，那么添加10个元素才可能会触发一次resize，此时触发resize之后数组的容量就会变成20，此时再添加10个才会再次触发这个resize，这个时候会变成capacity为40，也就是再添加20个数，才会触发resize，也就是说不会是每次添加一个元素都会触发resize，而我们却一直用最坏时间复杂度分析，这样是不合理的</p>
<p>再次深入分析，案例如下：</p>
<p>在resize之前，所有的操作都是O（1）级别，而在addlast为第9个时候需要扩容，那么第九次等于for循环所有数组里的值进入新数组的时间和，再加1次add操作</p>
<figure><figcaption>img</figcaption></figure>
<p>所以，对于addLast来说，9次操作，平均来讲，每次的操作接近2次基本操作</p>
<p>结论</p>
<figure><figcaption>img</figcaption></figure>
<p>这样均摊计算，时间复杂度是O（1）级别，在这样的例子里，这样均摊计算比计算最坏情况有意义</p>
<figure><figcaption>img</figcaption></figure>
<p>按照这样理解removeLast的均摊时间复杂度也是O（1）级别</p>
<p>但是这样会引发下一个问题</p>
<h4> 3，复杂度震荡</h4>
<p>初始条件</p>
<figure><figcaption>img</figcaption></figure>
<p>这个时候增加一个元素，触发的是扩容操作，加一个元素</p>
<figure><figcaption>img</figcaption></figure>
<p>马上又进行removeLast的操作，此时又会触发缩容的操作，再次调用resize，时间复杂度依然是O（n）</p>
<figure><figcaption>img</figcaption></figure>
<p>一直这样循环呢？</p>
<figure><figcaption>img</figcaption></figure>
<p>解决办法</p>
<figure><figcaption>img</figcaption></figure>
<p>扩容没有办法减少时间复杂度的增加，但是缩小的时候，并不着急把扩到二倍的数组容量减少为原来的1倍，同理这个时候要扩容也不用再次O（n）的addLast操作而是O（1）</p>
<figure><figcaption>img</figcaption></figure>
<p>当全部元素只剩下原来的4分1，也就是说</p>
<figure><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 栈（stack）</h2>
<p>Stack是一种线性结构</p>
<p>相比数组，栈对应的操作是数组的子集，而且他的操作更少</p>
<p>只能从唯一的一端添加元素，也只能从这个唯一的一端取出元素</p>
<p>这个唯一的一端称为栈顶</p>
<h3> 展示元素入栈的过程</h3>
<p>3这个元素只能在这个位置，不可以插入2和1元素之间</p>
<h3> 展示元素出栈的过程</h3>
<figure><figcaption>img</figcaption></figure>
<h3> 小结</h3>
<p>1，   栈是一种后进先出的数据结构</p>
<p>2，   Last In First Out(LIFO)</p>
<p>3，   Stack在计算机的运用里拥有不可思议的作用</p>
<h4> 案例1</h4>
<p>沉迷学习无法自拔</p>
<figure><figcaption>img</figcaption></figure>
<p>最直接的一个案例，比如word中的文字撤销操作，比如以下的撤销不法，当这个不法两个字被撤销后，不需要再保留他们，直接出栈</p>
<figure><figcaption>img</figcaption></figure>
<p>输入正确的内容和顺序</p>
<figure><figcaption>img</figcaption></figure>
<h4> 案例2</h4>
<p>程序调用的系统栈</p>
<figure><figcaption>img</figcaption></figure>
<p>首先执行A这个函数</p>
<figure><figcaption>img</figcaption></figure>
<p>顺序执行1,2,3，行，当在执行到第二行的时候</p>
<figure><figcaption>img</figcaption></figure>
<p>会跳去执行B这个函数，a函数会暂时中断</p>
<figure><figcaption>img</figcaption></figure>
<p>此时可以在系统栈中认为，A函数执行到了第二行，记为A2</p>
<figure><figcaption>img</figcaption></figure>
<p>然后继续执行</p>
<figure><figcaption>img</figcaption></figure>
<p>同理</p>
<figure><figcaption>img</figcaption></figure>
<p>最后C函数在执行完成之后，就会回到B2继续执行，然后执行完成，B2出栈，剩下一个A2，继续执行A函数的内容最后A2出栈函数全部执行完毕</p>
<h3> 栈的基本实现</h3>
<figure><figcaption>img</figcaption></figure>
<p>栈的实现有很多种数据结构的方式，数组实现只是其中一种</p>
<figure><figcaption>img</figcaption></figure>
<p>栈的实现结构</p>
<figure><figcaption>img</figcaption></figure>
<p>对应的array的数组，增加部分加粗标红</p>
<h4> Array</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Stack</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ArrayStack</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Main</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 栈的时间复杂度分析</h3>
<h3> Stack案例实操（编译器对括号的匹配报错机制）</h3>
<figure><figcaption>img</figcaption></figure>
<p>分析思路</p>
<figure><figcaption>img</figcaption></figure>
<p>逐一加入栈结构</p>
<figure><figcaption>img</figcaption></figure>
<p>当开始匹配右括号的时候，需要看当前栈顶是否是和他匹配的，如果匹配那么当前栈顶的括号就可以出栈了</p>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<p>当全部出栈，那么当前的匹配就是一个合法的字符串</p>
<p>代码实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 队列</h2>
<h3> 定义</h3>
<p>队列是一种线性结构</p>
<p>只能从一端（队尾）添加元素，只能从另一端（队首）取出元素</p>
<p></p>
<p>结论：队列是一种先进先出的数据结构（First in First out）</p>
<figure><figcaption>img</figcaption></figure>
<p>队列的实现</p>
<figure><figcaption>img</figcaption></figure>
<p>队列时间复杂度分析</p>
<figure><figcaption>img</figcaption></figure>
<h3> Array</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ArrayQueue</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Queue</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引出一个问题</p>
<p>删除队首元素会引发O（n）的操作</p>
<p>因此提出指向一个队首和队尾的指针</p>
<figure><figcaption>img</figcaption></figure>
<p>循环队列</p>
<p>Front和tail相等的时候队列为空</p>
<figure><figcaption>img</figcaption></figure>
<p>当往队首添加元素的时候</p>
<figure><figcaption>img</figcaption></figure>
<p>如果出现出队的同时又出现入队</p>
<figure><figcaption>img</figcaption></figure>
<p>当队尾出入队到容量的极限的时候，会先去看一下front之前有没有位置，</p>
<figure><figcaption>img</figcaption></figure>
<p>如果有空位</p>
<figure><figcaption>img</figcaption></figure>
<p>Tail会到回到容量的起始，再依次往后，（tail+1）%capacity(data.length)=front——》队列满，整个循环队列的结构是有意识地浪费了一个空间</p>
<figure><figcaption>img</figcaption></figure>
<p>解释一下循环队列的代码：</p>
<p>Newdata0-front</p>
<p>Newdata1-front+1</p>
<p>真正的队列偏移是front+i的，由于又是循环队列，因此防止数组越界，(front+i)%data.length</p>
<p>代码实现</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 循环队列与数组队列的时间复杂度分析</h3>
<figure><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 链表</h2>
<p>前瞻课程：</p>
<p>内部类</p>
<p>链表是一种真正的动态数据结构</p>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<h3> 数据存储在“节点”（node）中</h3>
<figure><figcaption>img</figcaption></figure>
<p>优点：真正的动态，不需要处理固定容量的问题,不需要跟动态数组一样，一下子new出来这么多的空间</p>
<p>缺点：丧失了随机访问的能力（无法如数组那样，根据索引查询元素，只能根据指向线索进行索引）</p>
<h3> 数组结构和链表结构的对比</h3>
<figure><figcaption>img</figcaption></figure>
<p>动态链表基础结构</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 给链表中添加元素</h3>
<figure><figcaption>img</figcaption></figure>
<h4> 在表头添加数据</h4>
<figure><figcaption>img</figcaption></figure>
<p>将head指向node</p>
<figure><figcaption>img</figcaption></figure>
<p>于是node就成为了该链表的head，进入链表中后，成为了链表的一部分</p>
<h4> 在链表指定索引处添加节点</h4>
<figure><figcaption>img</figcaption></figure>
<p>Head节点处有一个prev节点指标</p>
<figure><figcaption>img</figcaption></figure>
<p>把这个prev插入的需要插入的节点:前一个节点</p>
<figure><figcaption>img</figcaption></figure>
<p>插入过程中关系的转换体现</p>
<figure><figcaption>img</figcaption></figure>
<p>插入成功后的链表样式</p>
<figure><figcaption>img</figcaption></figure>
<p>思考一下，执行插入的时候顺序能否发生变化</p>
<figure><figcaption>img</figcaption></figure>
<p>代码实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 给链表使用虚拟头结点</h4>
<figure><figcaption>img</figcaption></figure>
<p>为链表添加一个虚拟的空的节点，注意，这个头结点是根本不存在的，是虚拟的，只是为了逻辑方便实现，添加的一个虚拟空的元素，否则就会对处理头结点有不同的逻辑，可以类别循环队列</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 链表的遍历，查询和修改</h3>
<p>对于链表来说，查询并非是一个常用操作，目前用于练习使用</p>
<p>Linkedlist</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Main</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 从链表中删除元素</h3>
<figure><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度计算</p>
<figure><figcaption>img</figcaption></figure>
<figure><figcaption>img</figcaption></figure>
<p>总结</p>
<figure><figcaption>img</figcaption></figure>
<h3> 使用链表实现栈</h3>
<figure><figcaption>img</figcaption></figure>
<p>Stack</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"></div></div><p>Main</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"></div></div><h3> 使用链表实现队列结构</h3>
<figure><figcaption>img</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-10T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">异常</title>
    <id>https://topjf.github.io/java/basis/exception.html</id>
    <link href="https://topjf.github.io/java/basis/exception.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">异常定义 异常处理常见手段： try catch finally throws throw 步骤 1 : try catch 1、将可能抛出ArrayIndexOutOfBoundsException数组角标越界异常的代码放在try里 2、如果角标存在，就会顺序往下执行，并且不执行catch块中的代码 3、如果角标不存在，try 里的代码会立即终止，程...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 异常定义</h2>
<p>异常处理常见手段： try catch finally throws throw</p>
<h3> 步骤 1 : try catch</h3>
<p>1、将可能抛出ArrayIndexOutOfBoundsException<strong>数组角标越界异常</strong>的代码放在try里</p>
<p>2、如果角标存在，就会顺序往下执行，并且不执行catch块中的代码</p>
<p>3、如果角标不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中</p>
<p>4、e.printStackTrace(); 会打印出方法的调用痕迹，这样就便于定位和分析到底哪里出了异常</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>img</figcaption></figure>
<h3> 步骤 2 : 使用异常的父类进行catch</h3>
<p>ArrayIndexOutOfBoundsException是Exception的子类，使用Exception也可以catch住ArrayIndexOutOfBoundsException</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 步骤 3 : 多异常捕捉办法1</h3>
<p>需求，出现了算术异常，又可能出现数组下标越界，我们希望出现哪个就打印哪个的问题，这里需要多异常捕获</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 步骤 4 : 多异常捕捉办法2</h3>
<p>Jdk7之后出现了一种新的连续捕获方法，方便的是可以一次捕获完，不方便的是需要多次处理</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 步骤 5 : finally</h3>
<p>无论是否出现异常，finally中的代码都会被执行</p>
<blockquote>
<p>finally {//最终执行</p>
<p>​    System.out.println("出问题了哈？该背时");</p>
<p>}</p>
</blockquote>
<h3> 步骤 6 : throws</h3>
<p>考虑如下情况：
主方法调用method1
method1调用method2
method2中访问数组，可能会越界</p>
<p>method2中需要进行异常处理
但是method2<strong>不打算处理</strong>，而是把这个异常通过<strong>throws</strong>抛出去
那么method1就会<strong>接到该异常</strong>。 处理办法也是两种，要么是try catch处理掉，要么也是<strong>抛出去</strong>。
method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 步骤 7 : throw和throws的区别</h3>
<p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：</p>
<ol>
<li>
<p>throws 出现在方法声明上，而throw通常都出现在方法体内。</p>
</li>
<li>
<p>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</p>
</li>
</ol>
<h3> 最佳实践1</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 最佳实践2</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 最佳实践3</h3>
<p>参照exception包中的电脑案例 如何把异常都处理完？</p>
<h2> 异常分类</h2>
<p>异常分类： 可查异常，运行时异常和错误3种。
其中，运行时异常和错误又叫非可查异常。</p>
<figure><figcaption><a href="http://how2j.cn/img/site/step/2412.png" target="_blank" rel="noopener noreferrer">http://how2j.cn/img/site/step/2412.png</a></figcaption></figure>
<h3> 步骤1 : 可查异常</h3>
<p>可查异常： CheckedException
可查异常即<strong>必须进行处理的异常</strong>，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException如果不处理，编译器，就不让你通过。</p>
<h3> 步骤2：运行时异常</h3>
<p>运行时异常RuntimeException指： <strong>不是必须进行<strong><strong>try catch</strong></strong>的异常</strong>
<strong>常见运行时异常</strong>**😗*
除数不能为0异常:ArithmeticException
下标越界异常:ArrayIndexOutOfBoundsException
空指针异常:NullPointerException
在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，<strong>即便不进行<strong><strong>try catch</strong></strong>，也不会有编译错误</strong>
Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常<strong>太过于普遍</strong>，如果都需要进行捕捉，代码的可读性就会变得很糟糕。</p>
<h3> 步骤3：错误</h3>
<p>错误Error，指的是<strong>系统级别的异常</strong>，通常是内存用光了
在<strong>默认设置下</strong>，一般java程序启动的时候，最大可以使用16m的内存
如例不停的给StringBuffer追加字符，很快就把内存使用光了。抛出<strong>OutOfMemoryError</strong>
与运行时异常一样，错误也是不要求强制捕捉的</p>
<h2> Throwable</h2>
<p>Throwable是类，Exception和Error都继承了该类
所以在捕捉的时候，也可以使用Throwable进行捕捉
如图： 异常分<strong>Error</strong>和<strong>Exception</strong>
Exception里又分<strong>运行时异常</strong>和<strong>可查异常</strong></p>
<figure><figcaption><a href="http://how2j.cn/img/site/step/742.png" target="_blank" rel="noopener noreferrer">http://how2j.cn/img/site/step/742.png</a></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 自定义异常</h2>
<p>实现 throwable 或者继承运行时异常类</p>
<p>try语句在返回前，将其他所有的操作执行完，保留好要返回的值，而后转入执行finally中的语句，而后分为以下三种情况：</p>
<p><strong>情况一</strong>：如果finally中有return语句，则会将try中的return语句”覆盖“掉，直接执行finally中的return语句，得到返回值，这样便无法得到try之前保留好的返回值。</p>
<p><strong>情况二</strong>：如果finally中没有return语句，也没有改变要返回值，则执行完finally中的语句后，会接着执行try中的return语句，返回之前保留的值。</p>
<p><strong>情况三</strong>：如果finally中没有return语句，但是改变了要返回的值，这里有点类似与引用传递和值传递的区别，分以下两种情况：</p>
<blockquote>
<p>1）如果return的数据是基本数据类型或文本字符串，则在finally中对该基本数据的改变不起作用，try中的return语句依然会返回进入finally块之前保留的值。</p>
<p>2）如果return的数据是引用数据类型，而在finally中对该引用数据类型的属性值的改变起作用，try中的return语句返回的就是在finally中改变后的该属性的值。</p>
</blockquote>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">IO文件流</title>
    <id>https://topjf.github.io/java/basis/io-note.html</id>
    <link href="https://topjf.github.io/java/basis/io-note.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">img 分类 1、字节类， img 2、字符类 img java输入/输出流体系中常用的流的分类表 分类 字节输入流 字节输出流 字符输入流 字符输出流 :--------: ------------------------ ------------------------- ------------------- ------------------...</summary>
    <content type="html"><![CDATA[<!-- more -->
<figure><figcaption>img</figcaption></figure>
<h2> 分类</h2>
<p>1、字节类，</p>
<figure><figcaption>img</figcaption></figure>
<p>2、字符类</p>
<figure><figcaption>img</figcaption></figure>
<p>java输入/输出流体系中常用的流的分类表</p>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th>字节输入流</th>
<th>字节输出流</th>
<th>字符输入流</th>
<th>字符输出流</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">抽象基类</td>
<td>InputStream</td>
<td>OutputStream</td>
<td>Reader</td>
<td>Writer</td>
</tr>
<tr>
<td style="text-align:center">访问文件</td>
<td><strong>FileInputStream</strong></td>
<td><strong>FileOutputStream</strong></td>
<td><strong>FileReader</strong></td>
<td><strong>FileWriter</strong></td>
</tr>
<tr>
<td style="text-align:center">访问数组</td>
<td><strong>ByteArrayInputStream</strong></td>
<td><strong>ByteArrayOutputStream</strong></td>
<td><strong>CharArrayReader</strong></td>
<td><strong>CharArrayWriter</strong></td>
</tr>
<tr>
<td style="text-align:center">访问管道</td>
<td><strong>PipedInputStream</strong></td>
<td><strong>PipedOutputStream</strong></td>
<td><strong>PipedReader</strong></td>
<td><strong>PipedWriter</strong></td>
</tr>
<tr>
<td style="text-align:center">访问字符串</td>
<td></td>
<td></td>
<td><strong>StringReader</strong></td>
<td><strong>StringWriter</strong></td>
</tr>
<tr>
<td style="text-align:center">缓冲流</td>
<td>BufferedInputStream</td>
<td>BufferedOutputStream</td>
<td>BufferedReader</td>
<td>BufferedWriter</td>
</tr>
<tr>
<td style="text-align:center">转换流</td>
<td></td>
<td></td>
<td>InputStreamReader</td>
<td>OutputStreamWriter</td>
</tr>
<tr>
<td style="text-align:center">对象流</td>
<td>ObjectInputStream</td>
<td>ObjectOutputStream</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">抽象基类</td>
<td>FilterInputStream</td>
<td>FilterOutputStream</td>
<td>FilterReader</td>
<td>FilterWriter</td>
</tr>
<tr>
<td style="text-align:center">打印流</td>
<td></td>
<td>PrintStream</td>
<td></td>
<td>PrintWriter</td>
</tr>
<tr>
<td style="text-align:center">推回输入流</td>
<td>PushbackInputStream</td>
<td></td>
<td>PushbackReader</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">特殊流</td>
<td>DataInputStream</td>
<td>DataOutputStream</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>Io流</h1>
<h2> 什么是流</h2>
<p>当不同的介质之间有数据交互的时候，JAVA就使用流来实现。
数据源可以是文件，还可以是数据库，网络甚至是其他的程序</p>
<p>比如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流
输入流： InputStream
输出流：OutputStream</p>
<figure><figcaption><a href="http://how2j.cn/img/site/step/759.png" target="_blank" rel="noopener noreferrer">http://how2j.cn/img/site/step/759.png</a></figcaption></figure>
<h2> 文件输入流</h2>
<p>如下代码，就建立了一个文件输入流，这个流可以用来把数据从硬盘的文件，读取到JVM(内存)</p>
<p>目前代码只是建立了流，还没有开始读取</p>
<h2> 文件输出流</h2>
<p>参考文件输入流的建立，建立一个文件输出流</p>
<figure><figcaption>img</figcaption></figure>
<h2> Ascll码概念</h2>
<p>所有的数据存放在计算机中都是以数字的形式存放的。 所以<strong>字母就需要转换为数字才能够存放</strong>
比如A就对应的数字65，a对应的数字97. 不同的字母和符号对应不同的数字，就是一张码表。
ASCII是这样的一种码表。 只<strong>包含简单的英文字母</strong>，符号，数字等等。 <strong>不包含中文，德文，俄语等复杂</strong>的。</p>
<p>示例中列出了可见的ASCII码以及对应的十进制和十六进制数字，不可见的暂未列出</p>
<h2> 以字节流的形式读取文件</h2>
<p>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。
FileInputStream 是InputStream子类，以FileInputStream 为例进行文件读取</p>
<h2> 以字节流的形式向文件写数据</h2>
<p>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。
FileOutputStream 是OutputStream子类，以FileOutputStream 为例向文件写出数据</p>
<p>注: 如果文件d:/lol2.txt不存在，写出操作会自动创建该文件。
但是如果是文件 d:/xyz/lol2.txt，而目录xyz又不存在，会抛出异常</p>
<h1>字符流</h1>
<p>Reader字符输入流
Writer字符输出流
专门用于字符的形式读取和写入数据</p>
<h2> 字符流读取文件</h2>
<p>FileReader 是Reader子类，以FileReader 为例进行文件读取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 字符流写入到文件</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>转换流</h1>
<h1>缓冲流</h1>
<p>以介质是硬盘为例，<strong>字节流和字符流的弊端</strong>：
在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。</p>
<p>为了解决以上弊端，采用缓存流。
缓存流在读取的时候，<strong>会一次性读较多的数据到缓存中</strong>，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。</p>
<p>就好比吃饭，<strong>不用缓存就是每吃一口都到锅里去铲</strong>。<strong>用缓存就是先把饭盛到碗里</strong>，碗里的吃完了，再到锅里去铲</p>
<p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区<strong>达到一定的量</strong>，才把这些数据，<strong>一起写入到硬盘中去</strong>。按照这种操作模式，就不会像字节流，字符流那样<strong>每写一个字节都访问硬盘</strong>，从而减少了IO操作</p>
<h2> 使用缓存流读取数据</h2>
<h3> 使用缓存流写数据</h3>
<h1>public class PrintWriter</h1>
<p>·     extends [Writer](mk:@MSITStore:C:\Users\Administrator\Desktop\Java Platform SE 8.chm::/java/io/Writer.html)</p>
<p>Prints formatted representations of objects to a text-output stream. This class implements all of the print methods found in [PrintStream](mk:@MSITStore:C:\Users\Administrator\Desktop\Java Platform SE 8.chm::/java/io/PrintStream.html). It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams.</p>
<p>Unlike the [PrintStream](mk:@MSITStore:C:\Users\Administrator\Desktop\Java Platform SE 8.chm::/java/io/PrintStream.html) class, if automatic flushing is enabled it will be done only when one of the println, printf, or format methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character.</p>
<p>Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking [checkError()](mk:@MSITStore:C:\Users\Administrator\Desktop\Java Platform SE 8.chm::/java/io/PrintWriter.html#checkError--).</p>
<p>可以使用除开byte相关的print方法，实践案例是生成模板</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>编码问题</h1>
<p>步骤 1 : 编码概念</p>
<p>步骤 2 : 常见编码</p>
<p>步骤 3 : UNICODE和UTF</p>
<p>步骤 4 : Java采用的是Unicode</p>
<p>步骤 5 : 一个汉字使用不同编码方式的表现</p>
<p>步骤 6 : 文件的编码方式-记事本</p>
<p>步骤 7 : 文件的编码方式-eclipse</p>
<p>步骤 8 : 用FileInputStream 字节流正确读取中文</p>
<p>步骤 9 : 用FileReader 字符流正确读取中文</p>
<figure><figcaption>img</figcaption></figure>
<p>总结：保证文件的编码（存储的时候存储的文件编码格式）与编码化的文字，与取出来的编码，与展现的编码，要保证一致</p>
<p>最简单总结：凡是出现charset的地方，全部utf-8</p>
<h2> 步骤 1 : 编码概念</h2>
<p>计算机存放数据只能存放数字，所有的字符都会被转换为不同的数字。
就像一个棋盘一样，不同的字，处于不同的位置，而不同的位置，有不同的数字编号。
有的棋盘很小，只能放数字和英文
有的大一点，还能放中文
有的“足够”大，能够放下世界人民所使用的所有文字和符号</p>
<p>如图所示，英文字符 <strong>A</strong> 能够放在所有的棋盘里，而且位置都差不多
中文字符, 中文字符 <strong>中</strong> 能够放在后两种棋盘里，并且位置不一样，而且在小的那个棋盘里，就放不下中文</p>
<figure><figcaption><a href="http://how2j.cn/img/site/step/2481.png" target="_blank" rel="noopener noreferrer">http://how2j.cn/img/site/step/2481.png</a></figcaption></figure>
<h2> 步骤 2 : 常见编码</h2>
<p>工作后经常接触的编码方式有如下几种：
<strong>ISO-8859-1 ASCII</strong> 数字和西欧字母
<strong>GBK GB2312 BIG5</strong> 中文
<strong>UNICODE</strong> (统一码，万国码)</p>
<p>其中
ISO-8859-1 包含 ASCII
GB2312 是简体中文，BIG5是繁体中文，GBK同时包含简体和繁体以及日文。
UNICODE 包括了所有的文字，无论中文，英文，藏文，法文，世界所有的文字都包含其中</p>
<h2> 步骤 3 : UNICODE和UTF</h2>
<p>不同的编码方式对应不同的<strong>棋盘</strong>，而UNICODE因为要存放所有的数据，那么它的棋盘是最大的。
不仅如此，棋盘里每个数字都是很长的(4个字节)，因为不仅要表示字母，还要表示汉字等。</p>
<p>如果完全按照UNICODE的方式来存储数据，就会有很大的浪费。
比如在ISO-8859-1中，<strong>a</strong> 字符对应的数字是0x61
而UNICODE中对应的数字是 0x00000061，倘若一篇文章大部分都是英文字母，那么按照UNICODE的方式进行数据保存就会消耗很多空间</p>
<p>在这种情况下，就出现了UNICODE的各种<strong>减肥</strong>子编码, 比如UTF-8对数字和字母就使用一个字节，而对汉字就使用3个字节，从而达到了<strong>减肥还能保证健康</strong>的效果</p>
<p>UTF-8，UTF-16和UTF-32 针对不同类型的数据有不同的<strong>减肥效果</strong>，一般说来UTF-8是比较常用的方式</p>
<p>UTF-8，UTF-16和UTF-32 彼此的区别在此不作赘述，有兴趣的可以参考unicode码</p>
<p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。1990年开始研发，1994年正式公布</p>
<figure><figcaption><a href="http://how2j.cn/img/site/step/2482.png" target="_blank" rel="noopener noreferrer">http://how2j.cn/img/site/step/2482.png</a></figcaption></figure>
<h2> 步骤 4 : Java采用的是Unicode</h2>
<p>写在.java源代码中的汉字，在执行之后，都会变成JVM中的字符。
而这些中文字符采用的编码方式，都是使用UNICODE. "中"字对应的UNICODE是<strong>4E2D</strong>,所以在内存中，实际保存的数据就是十六进制的0x4E2D, 也就是十进制的20013</p>
<h2> 步骤 5 : 一个汉字使用不同编码方式的表现</h2>
<h2> 以字符 中 为例，查看其在不同编码方式下的值是多少  也即在不同的棋盘上的位置</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 步骤 6 : 文件的编码方式-记事本</h2>
<p>接下来讲，字符在文件中的保存
字符保存在文件中肯定也是以数字形式保存的，即对应在不同的<strong>棋盘</strong>上的不同的数字
用<strong>记事本</strong>打开任意文本文件，并且<strong>另存为</strong>，就能够在编码这里看到一个下拉。
<strong>ANSI</strong> 这个不是ASCII的意思，而是采用本地编码的意思。如果你是中文的操作系统，就会使GBK，如果是英文的就会是ISO-8859-1
**Unicode UNICODE原生的编码方式
<strong>Unicode big endian</strong>另一个 UNICODE编码方式
<strong>UTF-8</strong> 最常见的UTF-8编码方式，数字和字母用一个字节， 汉字用3个字节</p>
<figure><figcaption><a href="http://how2j.cn/img/site/step/2484.png" target="_blank" rel="noopener noreferrer">http://how2j.cn/img/site/step/2484.png</a></figcaption></figure>
<h2> 步骤 7 : 文件的编码方式-eclipse</h2>
<p>eclipse也有类似的编码方式，右键任意文本文件，点击最下面的"property"
就可以看到<strong>Text file encoding</strong>
也有ISO-8859-1，GBK,UTF-8等等选项。
其他的US-ASCII,UTF-16，UTF-16BE,UTF-16LE不常用</p>
<figure><figcaption><a href="http://how2j.cn/img/site/step/2485.png" target="_blank" rel="noopener noreferrer">http://how2j.cn/img/site/step/2485.png</a></figcaption></figure>
<h2> 步骤 8 : 用FileInputStream 字节流正确读取中文</h2>
<p>为了能够正确的读取中文内容
\1. 必须了解文本是以哪种编码方式保存字符的
\2. 使用字节流读取了文本后，再使用对应的<strong>编码方式去识别这些数字</strong>，得到正确的字符
如本例，一个文件中的内容是字符<strong>中</strong>，编码方式是GBK，那么读出来的数据一定是D6D0。
再使用GBK编码方式识别D6D0，就能正确的得到字符<strong>中</strong></p>
<p><strong>注：</strong> 在GBK的棋盘上找到的<strong>中</strong>字后，JVM会自动找到<strong>中</strong>在UNICODE这个棋盘上对应的数字</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 步骤 9 : 用FileReader 字符流正确读取中文</h2>
<p>FileReader得到的是字符，所以一定是已经把字节<strong>根据某种编码识别成了字符</strong>了
而FileReader使用的编码方式是Charset.defaultCharset()的返回值，如果是中文的操作系统，就是GBK
FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替，像这样：</p>
<p>new InputStreamReader(new FileInputStream(f),Charset.forName("UTF-8"));</p>
<p>在本例中，用记事本另存为UTF-8格式，然后用UTF-8就能识别对应的中文了。</p>
<p><strong>解释：</strong> 为什么中字前面有一个?
如果是使用记事本另存为UTF-8的格式，那么在第一个字节有一个<strong>标示符</strong>，叫做BOM用来标志这个文件是用UTF-8来编码的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>数据流</h1>
<p>DataInputStream 数据输入流
DataOutputStream 数据输出流</p>
<h2> 直接进行字符串的读写</h2>
<p>使用数据流的writeUTF()和readUTF() 可以进行数据的<strong>格式化顺序读写</strong>
如本例，通过DataOutputStream 向文件顺序写出 布尔值，整数和字符串。 然后再通过DataInputStream 顺序读入这些数据。</p>
<p><strong>注：</strong> 要用DataInputStream 读取一个文件，这个文件必须是由DataOutputStream 写出的，否则会出现EOFException，因为DataOutputStream 在写出的时候会做一些特殊标记，只有DataInputStream 才能成功的读取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>对象流</h1>
<p>对象流指的是可以直接<strong>把一个对象以流的形式</strong>传输给其他的介质，比如硬盘</p>
<p>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现Serializable接口</p>
<h2> 序列化一个对象</h2>
<p>创建一个Hero对象，设置其名称为garen。
把该对象序列化到一个文件garen.lol。
然后再通过序列化把该文件转换为一个Hero对象</p>
<p>**注：**把一个对象序列化有一个前提是：这个对象的类，必须实现了Serializable接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-12T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">数据库设计需要注意什么</title>
    <id>https://topjf.github.io/java/basis/mysql-setting.html</id>
    <link href="https://topjf.github.io/java/basis/mysql-setting.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">数据库设计需要注意什么？ 一、 基础规范 1、必须使用InnoDB存储引擎 支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高 2、新库默认使用utf8mb4字符集 utf8mb4是utf8的超集，emoji表情以及部分不常见汉字在utf8下会表现为乱码。 3、数据表、数据字段必须加中文注释 添加注释能以后更好的知道是干什么用的 ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<p>数据库设计需要注意什么？</p>
<h2> 一、 基础规范</h2>
<h3> 1、必须使用InnoDB存储引擎</h3>
<blockquote>
<p>支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高</p>
</blockquote>
<h3> 2、新库默认使用utf8mb4字符集</h3>
<blockquote>
<p>utf8mb4是utf8的超集，emoji表情以及部分不常见汉字在utf8下会表现为乱码。</p>
</blockquote>
<h3> 3、数据表、数据字段必须加中文注释</h3>
<blockquote>
<p>添加注释能以后更好的知道是干什么用的</p>
</blockquote>
<h3> 4、禁止使用存储过程、视图、触发器、Event</h3>
<blockquote>
<p>高并发大数据的互联网业务，架构设计思想是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能会将数据库拖死，业务逻辑放在服务层具备更好的拓展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引</p>
</blockquote>
<h3> 5、禁止存储大文件或者大照片</h3>
<blockquote>
<p>大文件和照片存储在文件系统，数据库里存URI更好</p>
</blockquote>
<h3> 6、禁止使用应用程序配置文件内的账号手工访问线上数据库</h3>
<h3> 7、禁止非DBA对线上数据库进行写操作，修改线上数据需要提交工单，由DBA执行，提交的SQL语句必须经过测试</h3>
<h3> 8、分配非DBA以只读账号，必须通过VPN+跳板机访问授权的从库</h3>
<h3> 9、开发、测试、线上环境隔离</h3>
<h3> 10、不在数据库做计算，cpu计算务必移至业务层</h3>
<h3> 11、平衡范式与冗余，为提高效率可以牺牲范式设计，冗余数据</h3>
<h3> 12、拒绝3B，大SQL，大事务，大批量</h3>
<h2> 二、 命名规范</h2>
<h3> 1、只允许使用内网域名，而不是ip连接数据库</h3>
<blockquote>
<p>使用域名，在切换数据库服务器的时候，只需要更改DNS域名解析，不需要更改配置文件。不只是数据库，缓的连接，服务的连接都必须使用内网域名。</p>
</blockquote>
<p>线上环境、开发环境、测试环境数据库内网域名命名规范</p>
<blockquote>
<p>业务名称：xxx</p>
<p>线上环境：dj.xxx.db</p>
<p>开发环境：dj.xxx.rdb</p>
<p>测试环境：dj.xxx.tdb</p>
</blockquote>
<h3> 2、库名、表名、字段名：小写，下划线风格，不超过32个字符，禁止拼音英文混用</h3>
<h3> 3、表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx（idx：索引文件Index file）</h3>
<h2> 三、 表设计规范</h2>
<h3> 1、单实例表数目必须小于500</h3>
<h3> 2、单表列数目必须小于30</h3>
<h3> 3、表必须有主键，例如自增主键</h3>
<h3> 4、禁止使用外键，如果有外键完整性约束，需要应用程序控制外键会导致表与表之间的耦合，update和delete操作都会涉及相关联的表，影响SQL的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用性能优先</h3>
<h3> 5、控制单表数据量，单表记录控制在千万级</h3>
<h2> 四、 字段设计必须规范</h2>
<h3> 1、必须把字段定义为NOT NULL并且提供默认值</h3>
<blockquote>
<p>a)     null的列使索引/索引统计/值都比较复杂，对MySQL来说更难优化</p>
<p>b)    null这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性</p>
</blockquote>
<h3> 2、禁止使用TEXT、BLOB类型</h3>
<blockquote>
<p>会浪费更多的磁盘和空间内存，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库的性能。</p>
</blockquote>
<h3> 3、禁止使用小数存储货币</h3>
<blockquote>
<p>使用整数，小数容易导致钱对不上</p>
</blockquote>
<h3> 4、必须使用varchar（20）存储手机号</h3>
<blockquote>
<p>a)     涉及到区号或者国家的代号</p>
<p>b)    手机号会去做数学运算么？</p>
<p>c)     varchar可以支持模糊查询 例如：like”138%”</p>
</blockquote>
<h3> 5、禁止使用ENUM，可使用TINYINT代替</h3>
<blockquote>
<p>a)     增加新的ENUM值要做DDL操作</p>
<p>b)    ENUM的内部实际存储就是整数，你以为自己定义的是字符串？</p>
</blockquote>
<h3> 6、字段选择类型更小的通常更好：小的数据类型更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理需要的CPU周期更少</h3>
<h2> 五、 索引设计规范</h2>
<h3> 1、单表索引建议控制在5个内</h3>
<h3> 2、单索引字段数不允许草超过5个</h3>
<blockquote>
<p>字段超过5个，实际起不到有效过滤数据的作用</p>
</blockquote>
<h3> 3、禁止在更新十分频繁、区分度不高的属性上建立索引</h3>
<blockquote>
<p>更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能</p>
<p>“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似</p>
</blockquote>
<h3> 4、建立组合索引，必须把区分度高的字段放在前面</h3>
<h3> MyISAM和INNODB的区别</h3>
<ol>
<li>
<p>事务安全（MyISAM不支持事务，INNODB支持事务）</p>
</li>
<li>
<p>外键MyISAM不支持外键，INNODB支持外键</p>
</li>
<li>
<p>锁机制（MyISAM是表锁，INNODB是行锁）</p>
</li>
<li>
<p>查询和添加速度（MyISAM批量插入速度快）</p>
</li>
<li>
<p>支持全文索引（MyISAM支持全文索引，INNODB不支持全文索引）</p>
</li>
<li>
<p>MyISAM内存空间使用率比INNODB低</p>
</li>
</ol>
<h2> 六、SQL语句优化</h2>
<h3> 1、禁止使用select *，只获取必要的字段，需要显示说明列属性</h3>
<blockquote>
<p>a)     读取不需要的列会增加CPU、IO、NET消耗</p>
<p>b)    不能有效的利用覆盖索引</p>
<p>c)     使用select *容易在增加或者删除字段后出现程序BUG</p>
</blockquote>
<h3> 2、禁止使用insert into t_xxx values(xxx)，必须显示执行插入的列属性</h3>
<blockquote>
<p>a)     容易在增加或者删除字段后出现程序BUG</p>
</blockquote>
<h3> 3、禁止使用属性隐式转换</h3>
<blockquote>
<p>a)     Select uid from t_user where phone=13885236846 会导致全表扫描，而不能命中phone索引</p>
</blockquote>
<h3> 4、禁止在where条件的属性上使用函数或者表达式，在属性上进行计算不能命中索引</h3>
<blockquote>
<p>a)     Select uid from t_user where from_unixtime(day)&gt;=’2017-02-15’会导致全表扫描</p>
<p>b)    正确为：select uid from t_user where day&gt;=unix_timestamp(‘2017-02-15 00:00:00’)</p>
</blockquote>
<h3> 5、禁止负向查询，以及%开头的模糊查询</h3>
<blockquote>
<p>a)     负向查询条件：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等，会导致全表扫描</p>
<p>b)    %开头的模糊查询，会导致全表扫描</p>
</blockquote>
<h3> 6、禁止大表使用JOIN查询，禁止大表使用子查询</h3>
<blockquote>
<p>a)     会产生临时表，消耗较多的内存与CPU，极大影响数据库性能</p>
</blockquote>
<h3> 7、禁止使用OR条件，必须改为IN查询</h3>
<blockquote>
<p>a)     旧版本的MySQL的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化？</p>
</blockquote>
<h3> 8、应用程序必须捕获SQL异常，并有相应的处理</h3>
<h3> 9、负向条件查询不能使用索引</h3>
<blockquote>
<p>a)     Select * from order where status!=0 and status!=1</p>
<p>not in/not exists都不是很好的习惯</p>
<p>可以优化为</p>
<p>Select * from order where status in(2,3)</p>
</blockquote>
<h3> 10、前导模糊查询不能用索引</h3>
<blockquote>
<p>a)     Select * from order where desc like ‘%xxx’</p>
</blockquote>
<p>而非前导模糊查询则可以：</p>
<blockquote>
<p>Select * from order where desc like ‘xxx%’</p>
</blockquote>
<h3> 11、数据区分度不大的字段不宜使用索引</h3>
<blockquote>
<p>a)     能过滤80%数据时就可以使用索引</p>
</blockquote>
<h3> 12、limit高效分页</h3>
<blockquote>
<p>a)    limit越大，效率越低</p>
<p>select id from t limit 1000,10 应改为: select id from t where id&gt;1000 limit 10</p>
</blockquote>
<h3> 13、如果业务大部分是单条查询，使用Hash索引性能更好</h3>
<figure><figcaption>img</figcaption></figure>
<h3> 14、允许为null的列，查询有潜在大坑</h3>
<blockquote>
<p>a)     单列索引不存null值，复合索引不存全为null的值，如果列允许为null，可能会得到“不符合预期”的结果集。</p>
</blockquote>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="database"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-13T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">OOP核心</title>
    <id>https://topjf.github.io/java/basis/oop.html</id>
    <link href="https://topjf.github.io/java/basis/oop.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">写代码的终极思路 1，场景化需求分析 2，准确逻辑化需求分析 3，寻找解决模型——设计模式 4，编写调试，重复1-4 5，功能测试和性能测试 代码学习方法 1， 整体认知：要知道效果 2， 跟着源代码敲一遍，解决报错问题（百度定性，定范围|帮助文档查查查） 3， 一行一行地分析代码，在看代码的同时，需要理解里面出现的所有你现在还不能理解的东西，理解过程...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 写代码的终极思路</h2>
<p>1，场景化需求分析</p>
<p>2，准确逻辑化需求分析</p>
<p>3，寻找解决模型——设计模式</p>
<p>4，编写调试，重复1-4</p>
<p>5，功能测试和性能测试</p>
<h2> 代码学习方法</h2>
<p>1，     整体认知：要知道效果</p>
<p>2，     跟着源代码敲一遍，解决报错问题（百度定性，定范围|帮助文档查查查）</p>
<p>3，     一行一行地分析代码，在看代码的同时，需要理解里面出现的所有你现在还不能理解的东西，理解过程（百度定性，定范围——5篇博客之内|帮助文档查查查），必须加入你自己的骚操作，摆弄摆弄确保自己懂了这个道理——（首先达标源代码的代码水平，加入自己的尝试）</p>
<p>4，     不要去管有多少还有学，有多少已经学了，有时间，就做研究——无我地进行</p>
<h2> OOP 核心上（Object-Oriented Programming）</h2>
<p>1，对象变量——引用</p>
<p>2，方法定义，方法传参，方法重载，构造函数（初始化）</p>
<p>3，this，static</p>
<p>4，访问修饰符与包的隔离（public ,private ,protected,default）</p>
<p>5，成员变量，成员方法</p>
<p>6，枚举类型</p>
<h3> 对象变量——引用</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 引用与指向——对象变量与堆空间开辟的独立对象空间</h4>
<p>new GirlFriend();</p>
<p>代表整出一个模型生产出来的对象。</p>
<p>意味着在堆空间中开辟了独立的运行（内存）空间，没有办法在方法中找到这个独立空间的起始地址。</p>
<p>为了访问到他，我们需要给一个名字变量（引用-把目标引过来用他，指针）</p>
<p>GirlFriend gf= new GirlFriend();</p>
<p>Gf就是GirlFriend的一个对象，引用，指向堆中空间</p>
<p>=  等号就是指向，代表这个堆中对象的起始地址</p>
<figure><figcaption>image-20220530154124202</figcaption></figure>
<p>一个对象模型</p>
<p><strong>class</strong> GirlFriend{}</p>
<p>稍微有点结构的模型</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：无论是简单还是复杂结构的模型，都称为一个类</p>
<h4> 多个引用，一个对象</h4>
<figure><figcaption>image-20220530154156134</figcaption></figure>
<p>堆空间中的一个开辟空间，可以被多个引用指</p>
<figure><figcaption>image-20220530154203170</figcaption></figure>
<p>通俗解释：</p>
<p>在多个ATM机上取钱，实际上是操作的同一个账户，atm机就等于不同的引用，而那个被共同指向的账户就等于account对象</p>
<h4> 一个引用多个对象</h4>
<figure><figcaption>image-20220530154217073</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20220530154300162</figcaption></figure>
<h4> 练习题</h4>
<p>请大家创建两个案例，分别体现多个引用一个对象和一个引用多个对象</p>
<h3> 方法定义，方法重载，构造函数</h3>
<p>方法-method：一个模型的功能，一个对象的行为，一个function（函数）</p>
<h4> 方法定义</h4>
<h5>返回值</h5>
<p>1，   无返回值 void——函数内部从上到下执行逻辑</p>
<p>2，   有返回值</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a)  返回基本数据类型</p>
<p>b)  返回对象类型</p>
<h5>方法传参</h5>
<h6>基本类型传参</h6>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>对于方法传参，如果是基本类型参数，会copy一份，在函数内部是对copy后的那一份进行的相关操作，这些操作不影响传入之前参数那个本值</p>
</blockquote>
<figure><figcaption>image-20220530154740162</figcaption></figure>
<h6>对象类型传参</h6>
<p>对象类型 传参的基本细节跟基本类型传参的细节相同，对于参数copy来说有一些变化</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>image-20220530154800690</figcaption></figure>
<p>结论：方法传入的是类型变量，则传入的是堆中的对象空间首地址</p>
<h6>引申一下：数组对象作为方法参数传递对象</h6>
<p>注意，对象数组和数组对象是有区别滴</p>
<p>对象数组：以对象为元素，创建一个多对象的数组结构容器</p>
<p>数组对象：把数组当做一个对象</p>
<figure><figcaption>image-20220530154814839</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 方法重载</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数重载：函数名相同，只要参数个数不同，参数顺序不同，则为不同的函数</p>
<h5>可变参数示例</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可变参数实际上就是可以自定义传入函数参数的个数，会自动封装一个数组来接受例如：</p>
<blockquote 1,1,1,1="">
<p>drink(1,1,1,1);==new int[]</p>
</blockquote>
<p>注意，可变参数不仅仅可以使用到基本数据类型，还可以用于对象类型</p>
<h5>练习题</h5>
<p>设计一个英雄类（奶妈）（姓名，hp，提示一下自己被加血量），奶妈补奶方法——功能</p>
<p>奶妈的技能：</p>
<p>对一个英雄补奶——奶妈自己掉血——hp减少</p>
<p>大补——对一群英雄补奶——终极技能r</p>
<p>买一个救赎，装备指定地域补奶</p>
<p>增加一个技能，治疗群体补奶</p>
<p>天赋补奶——吸血天赋对自己补奶</p>
<p>备注：补奶等于加血 hp，对于所有的补奶（加血）方法有不同的hp的值被加</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构分析图：</p>
<figure><figcaption>image-20220530155003946</figcaption></figure>
<h5>内存分析TODO</h5>
<h4> 构造函数</h4>
<p>步骤 1 : 什么是构造方法</p>
<p>步骤 2 : 隐式的构造方法</p>
<p>步骤 3 : 提供一个有参的构造方法</p>
<p>步骤 4 : 构造方法的重载</p>
<p>步骤 <strong>1</strong> :</p>
<h5>什么是构造方法</h5>
<blockquote>
<p>方法名和类名一样（包括大小写）</p>
<p>没有返回类型</p>
<p>实例化一个对象的时候，必然调用构造方法</p>
</blockquote>
<p>注释：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤 <strong>2</strong> :</p>
<h5>隐式的构造方法</h5>
<p>Hero类的构造方法是</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>这个无参的构造方法，如果不写，就会默认提供一个</p>
</blockquote>
<p>步骤 <strong>3</strong> :</p>
<h5>提供一个有参的构造方法</h5>
<p>一旦提供了一个有参的构造方法
同时又<strong>没有显式</strong>的提供一个无参的构造方法
那么默认的无参的构造方法，就“木有了“</p>
<figure><figcaption>image-20220530155150253</figcaption></figure>
<p>步骤 <strong>4</strong> :</p>
<h5>构造方法的重载</h5>
<figure><figcaption>image-20220530155202805</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤 <strong>5</strong> :</p>
<h5>练习-构造方法</h5>
<p>为装备类设计4个参数的构造方法
这四个参数分别是 ，装备等级-int，装备合成的子装备-类，装备的价格-double，装备的功能-String</p>
<p>创建装备的时候以上4个属性可以打组合</p>
<p>打印定义时输入的内容</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> This与static</h3>
<h4> This</h4>
<h5>内部类调用外部类中的this原理</h5>
<figure><figcaption>image-20220530155253045</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>This内部类的实例，builder模式</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>This调用构造函数</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>This成员变量传参</h5>
<blockquote>
<p><strong>this</strong>.age = age;     <strong>this</strong>.subject = subject;</p>
</blockquote>
<h5>把对象本身作为返回值</h5>
<blockquote>
<p><strong>public</strong> Teacher  getT() {     <strong>return</strong> <strong>this</strong>;//0XAAA=new Teacher();    }</p>
</blockquote>
<h5>内部类的使用</h5>
<h4> Static</h4>
<p>在内存中只存储一份变量，可以类名.成员变量 和 类名.成员方法的方式调用，先于对象创建之前创建内容，通常用来做静态初始化，和方法简单调用</p>
<h5>类的成员变量--类属性--【类的属性并非对象的属性，重点区别】</h5>
<p>1， 类属性（类的成员变量）定义</p>
<p>2， 访问类属性（类的成员变量）</p>
<p>3，什么时候使用对象属性，什么时候使用类属性</p>
<h6>类属性（类的成员变量）定义</h6>
<p>类【是class ClassXX 的成员变量 不是对象new ClassXX（）的成员变量】的成员变量——静态属性，静态成员变量</p>
<blockquote>
<p>Class Student</p>
<p>​ Static int age;//静态属性</p>
<p>​ String name;//对象属性</p>
</blockquote>

<p>对象属性：也叫做实例属性，非静态属性</p>
<blockquote>
<p>New Student().name=”aaaa”</p>
</blockquote>
<p>如果一个属性声明成类属性（static修饰符），所有的对象都共享一个属性值，类似案例参照ATM机</p>
<h6>访问类（class-static变量）属性</h6>
<blockquote>
<p>ATM.account=10;</p>
<p>类名. static成员变量</p>
<p>new ATM(“”).account=10;</p>
<p>对象.static成员变量</p>
</blockquote>
<h6>什么时候使用对象属性，什么时候使用类属性</h6>
<blockquote>
<p>如果一个英雄，他的装备不一样，就设计成<strong>对象属性</strong></p>
<p>如果每个英雄的法量上限制都是1000000，可以设计成<strong>类属性</strong></p>
</blockquote>
<h5>类方法</h5>
<blockquote>
<p>1，类方法定义</p>
<p>2，调用类方法</p>
<p>3，什么时候使用对象方法，什么时候使用类方法</p>
</blockquote>
<h6>类方法定义</h6>
<p><strong>类方法</strong>：静态方法 static 方法</p>
<p><strong>对象方法</strong>：实例方法，非静态方法</p>
<p>访问一个对象方法必须建立在一个对象的前提上</p>
<blockquote>
<p>New Stu().nostatic();</p>
</blockquote>
<p>访问类方法，不需要对象，直接可以访问</p>
<blockquote>
<p>Stu.static()</p>
</blockquote>
<h6>调用类方法</h6>
<p>调用static方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6>什么时候使用对象方法，什么时候使用类方法</h6>
<p>一局游戏，打印玩耍了多场时间，这个具体的时间并没有跟每个英雄关联起来，这样的共有时间属性的调用显示功能，就可以设计成类方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>对象属性初始化——研究的是被new出来的东西</h5>
<figure><figcaption>image-20220530160707638</figcaption></figure>
<p><strong>对象</strong>中的成员变量</p>
<figure><figcaption>image-20220530160715335</figcaption></figure>
<p>初始化：</p>
<p>成员变量第一次赋值</p>
<h6>对象属性初始化的方式</h6>
<p>1，声明时初始化</p>
<figure><figcaption>image-20220530160723344</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2，构造方法初始化</p>
<figure><figcaption>image-20220530160757548</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3，     代码块初始化</p>
<figure><figcaption>image-20220530160810435</figcaption></figure>
<p>形式上的案例</p>
<p>只要是类中的{}，就叫一个代码块，在构造函数执行之前被调用，一般来说一个对象一个初始化代码块.</p>
<p>代码块初始化实用案例，打王者荣耀，<strong>后羿</strong>—class Hero—new Hero(“后羿”)</p>
<p>注释：以上三个概念均是针对后羿这个英雄对象的</p>
<figure><figcaption>image-20220530160818499</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>类属性初始化——研究的是class{}代码层面的</h5>
<p>直觉案例一：</p>
<figure><figcaption>image-20220530160904735</figcaption></figure>
<p>直觉案例二：</p>
<figure><figcaption>image-20220530160912403</figcaption></figure>
<h6>声明属性时初始化</h6>
<figure><figcaption>image-20220530160947711</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来个静态方法变形</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6>静态代码块初始化</h6>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> OOP核心下（继承，接口，抽象）</h2>
<p>1，     <strong>接口-api</strong>，继承，super关键字，Object 超类</p>
<p>2，     多态</p>
<p>3，     继承，接口，抽象之封装</p>
<p>4，     Final</p>
<p>5，     抽象类</p>
<p>6，     内部类，基于接口，继承</p>
<p>7，     默认方法</p>
<p>8，     最佳实践</p>
<h3> 接口，继承，super关键字，Object 超类</h3>
<p>案例实践</p>
<p>需求：王者荣耀，两类英雄，<strong>约定</strong>某些英雄是法系英雄，有些是物理系英雄，法系的魔法AP攻击，物理系的物理AD攻击</p>
<p>1，     设计接口ad，ap</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2，     搞一些英雄进来，实现ad和ap功能</p>
<p>注意：设计两类英雄APHero，ADHero，他们均有血量，法量，姓名，然后他们遵守AD和AP的约定，所以需要让AD和AP这种约定称为一种特殊地类，就是上述的interface AD AP，我们设计的具体的英雄还应该有一个英雄模板Hero{血量，法量，姓名}，因此继承结构如下：</p>
<figure><figcaption>image-20220530161212379</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3，     设计一个既有ad功能也有ap功能的英雄</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4，     根据上述案例，什么时候使用interface这种接口</p>
<p>学习一个知识点，由浅入深，切不可揠苗助长，引入概念后，需要在多加实践上才去思考该如何使用，如果没有这个大量实践的过程，是不能达到真正地深刻理解的，我们刚接触一个难的概念，更应该大量实践，之后再就清楚具体运用（熟练运用）</p>
<p>案例练习</p>
<p>需求：</p>
<p>场景化需求分析:</p>
<blockquote>
<p>定义一个通讯接口</p>
<p>接口中有打电话，发短信，网络连接功能</p>
<p>实现接口的有电话，平板</p>
<p>其中电话可以和平板进行打电话，发短信，相互连接网络</p>
<p>定义一个工作接口</p>
<p>接口中有开会，安排工作，审核工作</p>
<p>于是分别有5个人在不同的两个会议室里开远程会议</p>
<p>分别用手机和平板进行会议，其中手机会时不时给平板发短信，平板会时不时给手机开视频和打语音电话</p>
</blockquote>
<p>逻辑化：</p>
<blockquote>
<p>所有通讯设备必须满足通讯条件和通讯流程，符合这个通讯规范约束的设备才是通讯设备，代码体现为设计一个约束类（interface-接口-通讯设备规范结构接口）</p>
<p>无论是哪种通讯方式，底层结构都是有两个对象，相互通讯传输，互为主语，所以推导出，通讯方式一定要有通讯对象，而这个通讯对象一定是符合通讯规范约束的通讯设备。</p>
<p>接受通讯规范约束的通讯设备A，与另外一个B，进行任意形式（三种之一）通讯，B能够以任意通讯形式返回数据。</p>
</blockquote>
<p>寻找解决模型：</p>
<p>解决场景思考：思考选择设计模式——模板方法</p>
<p>代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 对象转型</h3>
<p>1，     引用类型与对象类型的概念</p>
<p>2，     向上转型，向下转型，没有继承联系的两个类的转换</p>
<p>3，     Interface层面（向上，向下转型）</p>
<p>4，     Instanceof</p>
<h4> 引用类型与对象类型的概念</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上诉例子：cat就是引用对象， new Animal（）就是对象</p>
<p>引用对象cat的类型：Animal</p>
<p>new Animal 的类型 ：Animal</p>
<p>正常情况下引用对象（那个指向堆内存地址的变量）的类型和堆中被new出来的那个对象的类型，是一样的</p>
<h4> 向上转型，向下转型，没有继承联系的两个类的转换</h4>
<p>不管是向上转，还是向下转，引用类型和对象类型不一致的时候才有需要转换的需求</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例分析，上午案例中使用了向上转型</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>往方法中传递一个符合通讯约束规范的通讯设备，于是我们传进去了一个通讯设备android</p>
<h5>没有继承关系的一旦转换，会报错</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>Interface层面（向上，向下转型）</h5>
<p>任意类都继承Object</p>
<p>Class Object</p>
<blockquote>
<p>java.lang.Object</p>
<p>public class Object</p>
<p>Class <code>Object</code>是类<code>Object</code>结构的根。 每个class都有<code>Object</code>作为超类。 所有对象（包括数组）都实现了这个类的方法。</p>
<p>从以下版本开始：</p>
<p>JDK1.0</p>
</blockquote>
<p>Interface xxx</p>
<p>Interface yyy extends xxx</p>
<p>Abstract class zzz implements yyy</p>
<p>Class aaa extends zzz</p>
<h5>接口向上转型，向下转型</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>Instanceof—引用对象的类型是否是指定类型的系列（自己到子类）</h5>
<p>Instanceof Animal 判断一个引用所指向的对象，是否是Animal类型，animal的子类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 重写（基于继承结构的）</h4>
<p>继承结构下， 子类如果包含一个与父类方法相同的方法，子类自己的方法就会覆盖父类的方法</p>
<p>（private）私有的成员变量以及方法是不能够传递给子类的</p>
<p>如果只是需要子类继承父类的成员变量或者方法，则需protected修饰</p>
<p><strong>两部手机都是iphone4</strong>，me-i4<strong><strong>在我的房间，fu-i4</strong></strong>在父的房间，现在我在我的房间拿iphone4<strong><strong>àme-i4</strong></strong>，我进入父的房间，拿iphone4,**<strong>手机却是fu-i4</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 多态--（多种状态）</h4>
<h5>操作符的多态</h5>
<p>+可以作为算数运算，也可以作为字符串连接</p>
<blockquote>
<p>int a=1+1;  String a1=a+"pp";</p>
</blockquote>
<h5>类的多态</h5>
<p>父类引用指向子类对象，方便业务场景的模块拆与装</p>
<p>使用多态，就类似同一把枪换弹夹，激光弹夹打激光弹，跑弹夹打炮弹</p>
<p>不适用多态，类似换枪，激光枪打激光，炮弹枪打炮弹，手枪 打手枪</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Super关键字</h4>
<p>o    定义一个父类，带无参构造函数</p>
<p>o    实例化子类，调用父类的构造函数</p>
<p>o    给父类加有参数的构造函数</p>
<p>o    子类调用父类的有参数构造函数</p>
<p>o    调用父类属性</p>
<p>o    调用父类方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Object类</h4>
<h5>public class Object</h5>
<blockquote>
<p>Class Object is the root of the class hierarchy. Every class has Object as a superclass. All objects, including arrays, implement the methods of this class.</p>
</blockquote>
<p>Object是所有自定义和系统自带类class的顶级父类，写不写继承都继承它</p>
<figure><figcaption>image-20220530153754539</figcaption></figure>
<p>Equals:值相等</p>
<blockquote return="" (this="">
<p>public boolean equals(Object obj)</p>
</blockquote>
<h5>一般使用的时候需要重写equals</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>toString:把对象打印成字符串</h5>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>Finalize：当一个对象没有任何引用指向的时候，他就满足垃圾回收条件</h5>
<p>当这个对象被回收的时候，他的finalize方法就会被调用</p>
<p>这个方法不是由开发人员调用，而是有jvm自动调用</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下不去改动这个finalize方法</p>
<h4> Final</h4>
<p>1，     final修饰类</p>
<p>2，     final修饰方法</p>
<p>3，     final修饰基本类型变量</p>
<p>4，     final引用</p>
<p>5，     常量</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 类图——uml图的一种，uml建模（帮助理清思路）</h4>
<figure><figcaption>image-20220530153254359</figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-14T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">字符串练习</title>
    <id>https://topjf.github.io/java/basis/string.html</id>
    <link href="https://topjf.github.io/java/basis/string.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">装箱拆箱 封装类 所有的基本类型，都有对应的类类型 比如int对应的类是Integer 这种类就叫做封装类 Number类 数字封装类有 Byte,Short,Integer,Long,Float,Double 这些类都是抽象类Number的子类 image-20220530173355071 基本类型转封装类 封装类转基本类型 自动装箱 不需要调用构...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 装箱拆箱</h2>
<h3> 封装类</h3>
<p>所有的<strong>基本类型</strong>，都有对应的<strong>类类型</strong>
比如int对应的类是Integer
这种类就叫做封装类</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Number类</h3>
<p>数字封装类有
Byte,Short,Integer,Long,Float,Double
这些类都是抽象类Number的子类</p>
<figure><figcaption>image-20220530173355071</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 基本类型转封装类</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 封装类转基本类型</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 自动装箱</h3>
<p>不需要调用构造方法，通过 = 符号自动把 基本类型 转换为 类类型 就叫装箱</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 自动拆箱</h3>
<p>不需要调用Integer的intValue方法，通过=就自动转换成int类型，就叫拆箱</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> int的最大值，最小值</h3>
<p>int的最大值可以通过其对应的封装类Integer.MAX_VALUE获取</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 练习-装箱拆箱</h3>
<ol>
<li>
<p>对byte,short,float,double进行自动拆箱和自动装箱</p>
</li>
<li>
<p>byte和Integer之间能否进行自动拆箱和自动装箱</p>
</li>
<li>
<p>通过Byte获取byte的最大值</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"></div></div><h2> 字符串转换</h2>
<h3> 数字转字符串</h3>
<p>方法1： 使用String类的静态方法valueOf
方法2： 先把基本类型装箱为对象，然后调用对象的toString</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 字符串转数字</h3>
<p>调用Integer的静态方法parseInt</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 练习-字符串转换</h3>
<p>参考上述步骤
把浮点数 3.14 转换为 字符串 "3.14"
再把字符串 “3.14” 转换为 浮点数 3.14
如果字符串是 3.1a4，转换为浮点数会得到什么？</p>
<h2> 数学方法</h2>
<p>java.lang.Math提供了一些常用的数学运算方法，并且都是以静态方法的形式存在</p>
<h3> 四舍五入, 随机数，开方，次方，π，自然常数</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 练习-数学方法</h3>
<p>这个图是自然对数的计算方式。
借助Math的方法，把自然对数计算出来，看看经过自己计算的自然对数和Math.E的区别有多大</p>
<figure><figcaption>image-20220530173619979</figcaption></figure>
<h2> 格式化输出</h2>
<h3> 1：格式化输出</h3>
<p>如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐
使用格式化输出，就可以简洁明了
%s 表示字符串
%d 表示数字
%n 表示换行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2：printf和format</h3>
<p>printf和format能够达到一模一样的效果</p>
<figure><figcaption>image-20220530173639883</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3：换行符</h3>
<p><strong>换行符</strong>就是另起一行 --- '\n' 换行（newline）
<strong>回车符</strong>就是回到一行的开头 --- '\r' 回车（return）
在eclipse里敲一个回车，实际上是<strong>回车换行符</strong>
Java是跨平台的编程语言，同样的代码，可以在不同的平台使用，比如Windows,Linux,Mac
然而在不同的操作系统，换行符是不一样的
（1）在DOS和Windows中，每行结尾是 “\r\n”；
（2）Linux系统里，每行结尾只有 “\n”；
（3）Mac系统里，每行结尾是只有 "\r"。
为了使得同一个java程序的换行符在所有的操作系统中都有一样的表现，使用%n，就可以做到平台无关的换行</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 4 : 总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</h3>
<p>其他常用的格式化方式</p>
<figure><figcaption>image-20220530173704474</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 5：Scanner</h3>
<p>借助 Scanner 读取字符串数据，然后用格式化输出任意一段文字，类似以下</p>
<figure><figcaption>image-20220530173715884</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"></div></div><h2> 字符</h2>
<h3> 保存一个字符的时候使用char</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> char对应的封装类</h3>
<p>char对应的封装类是Character 装箱拆箱概念，参考 拆箱装箱</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Character常见方法</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 常见转义</h3>
<figure><figcaption>image-20220530173935817</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 练习-character</h3>
<p>通过Scanner从控制台读取字符串，然后把字符串转换为字符数组</p>
<p>参考的转换方式:</p>
<blockquote>
<p>String str = "abc123";  char[] cs = str.toCharArray();</p>
</blockquote>
<p>转换为字符数组后，筛选出控制台读取到的字符串中的大写字母和数字，并打印出来</p>
<figure><figcaption>image-20220530173956860</figcaption></figure>
<h2> 字符串</h2>
<h3> 创建字符串</h3>
<p>字符串即字符的组合，在Java中，字符串是一个类，所以我们见到的字符串都是对象
常见创建字符串手段：</p>
<ol>
<li>
<p>每当有一个<strong>字面值</strong>出现的时候，虚拟机就会创建一个字符串</p>
</li>
<li>
<p>调用String的构造方法创建一个字符串对象</p>
</li>
<li>
<p>通过+加号进行字符串拼接也会创建新的字符串对象</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> final</h3>
<p>String 被修饰为final,所以是不能被继承的</p>
<p>代码比较复制代码</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> immutable</h3>
<p>immutable 是指不可改变的
比如创建了一个字符串对象
String garen ="盖伦";
<strong>不可改变</strong>的具体含义是指：
不能增加长度
不能减少长度
不能插入字符
不能删除字符
不能修改字符
一旦创建好这个字符串，里面的内容 <strong>永远</strong> 不能改变</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 字符串格式化</h3>
<p>如果不使用字符串格式化，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐
使用<strong>字符串格式化</strong>，就可以简洁明了</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 字符串长度</h3>
<p>length方法返回当前字符串的长度可以有长度为0的字符串,即空字符串</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 练习-长度是5的随机字符串</h3>
<p>创建一个长度是5的随机字符串，随机字符有可能是数字，大写字母或者小写字母</p>
<p><strong>给点提示</strong> : 数字和字符之间可以通过互相转换</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个手段就能够知道字符 a-z A-Z 0-9 所对应的数字的区间了</p>
<h3> 练习-长度是8的字符串数组</h3>
<p>创建一个长度是8的字符串数组</p>
<p>使用8个长度是5的随机字符串初始化这个数组</p>
<p>对这个数组进行排序，按照每个字符串的首字母排序(无视大小写)</p>
<p><strong>注</strong>1： 不能使用Arrays.sort() 要自己写
<strong>注</strong>2： 无视大小写，即 Axxxx 和 axxxxx 没有先后顺序</p>
<h2> 操作字符串</h2>
<h3> 获取字符串</h3>
<p>charAt(int index)获取指定位置的字符</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取对应的字符数组</h3>
<p>toCharArray() 获取对应的字符数组</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 截取子字符串</h3>
<p>subString 截取子字符串</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 分割</h3>
<p>split 根据分隔符进行分隔</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 去掉首位空格</h3>
<p>trim 去掉首尾空格</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 大小写</h3>
<p>toLowerCase 全部变成小写
toUpperCase 全部变成大写</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 定位</h3>
<p>indexOf 判断字符或者子字符串出现的位置
contains 是否包含子字符串</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 替换</h3>
<p>replaceAll 替换所有的
replaceFirst 只替换第一个</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 比较字符串</h2>
<h3> 是否是同一个对象</h3>
<p>str1和str2的内容一定是一样的！
但是，并不是同一个字符串对象</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 是否是同一个对象-特例</h3>
<blockquote>
<p>str1 = "the light";</p>
<p>str3 = "the light";
一般说来，编译器每碰到一个字符串的字面值，就会创建一个新的对象
所以在第6行会创建了一个新的字符串"the light"
但是在第7行，编译器发现已经存在现成的"the light"，那么就直接拿来使用，而没有进行重复创建</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 内容是否相同</h3>
<p>使用equals进行字符串内容的比较，必须大小写一致
equalsIgnoreCase，忽略大小写判断内容是否一致</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 是否以子字符串开始或者结束</h3>
<p>startsWith //以...开始</p>
<p>endsWith //以...结束</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 练习-长度是100的字符串数组</h3>
<p>创建一个长度是100的字符串数组
使用长度是2的随机字符填充该字符串数组
统计这个字符串数组里<strong>重复的字符串有多少种</strong></p>
<figure><figcaption>image-20220530174329246</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"></div></div><h2> Stringbuffer</h2>
<h3> 追加，删除，插入，反转</h3>
<p>append追加
delete 删除
insert 插入
reverse 反转</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 长度，容量</h3>
<p>为什么StringBuffer可以变长？</p>
<p>和String内部是一个字符数组一样，StringBuffer也维护了一个字符数组。 但是，这个字符数组，留有冗余长度</p>
<p>比如说new StringBuffer("the")，其内部的字符数组的长度，是19，而不是3，这样调用插入和追加，在现成的数组的基础上就可以完成了。</p>
<p>如果追加的长度超过了19，就会分配一个新的数组，长度比原来多一些，把原来的数据复制到新的数组中，看上去 数组长度就变长了</p>
<p>length: “the”的长度 3</p>
<p>capacity: 分配的总空间 19</p>
<p>注： 19这个数量，不同的JDK数量是不一样的</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 练习</h3>
<p>String与StringBuffer的性能区别?</p>
<p>生成10位长度的随机字符串</p>
<p>然后,先使用String的+,连接10000个随机字符串,计算消耗的时间</p>
<p>然后,再使用StringBuffer连接10000个随机字符串,计算消耗的时间</p>
<p>提示: 使用System.currentTimeMillis() 获取当前时间(毫秒)</p>
<figure><figcaption>image-20220530174442708</figcaption></figure>
<h3> 练习-StringBuffer</h3>
<p>根据接口IStringBuffer ，自己做一个MyStringBuffer</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-15T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">servlet基础</title>
    <id>https://topjf.github.io/java/basis/web-servlet-jsp.html</id>
    <link href="https://topjf.github.io/java/basis/web-servlet-jsp.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">配置tomcat到eclipse中 a) image-20220530164639880 b) image-20220530164647164 c) image-20220530164721723 d) image-20220530164727203 e) image-20220530164732285 f) image-202205301647360...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> 配置tomcat到eclipse中</h2>
<p>a)</p>
<figure><figcaption>image-20220530164639880</figcaption></figure>
<p>b)</p>
<figure><figcaption>image-20220530164647164</figcaption></figure>
<p>c)</p>
<figure><figcaption>image-20220530164721723</figcaption></figure>
<p>d)</p>
<figure><figcaption>image-20220530164727203</figcaption></figure>
<p>e)</p>
<figure><figcaption>image-20220530164732285</figcaption></figure>
<p>f)</p>
<figure><figcaption>image-20220530164736024</figcaption></figure>
<p>g)</p>
<figure><figcaption>image-20220530164739651</figcaption></figure>
<p>h)</p>
<figure><figcaption>image-20220530164743345</figcaption></figure>
<p>i) 双击并改动端口号</p>
<figure><figcaption>image-20220530164748424</figcaption></figure>
<p>j) 启动成功</p>
<figure><figcaption>image-20220530164753531</figcaption></figure>
<p>k) 运行页面时f12打开调试窗口</p>
<figure><figcaption>image-20220530164758193</figcaption></figure>
<p>l)</p>
<figure><figcaption>image-20220530164805750</figcaption></figure>
<p>m)</p>
<figure><figcaption>image-20220530164810621</figcaption></figure>
<blockquote>
<p>页面的响应事件需要和后台的java代码关联起来</p>
</blockquote>
<p>n)  Servlet是sun用来开发动态web资源的技术，在开发的api中提供了servlet接口，约定俗成把实现了servlet接口的java类称之为servlet，用户想要开发java代码去响应页面动作需要完成两个步骤</p>
<p>​        i.     编写一个java类实现一个servlet接口</p>
<p>​        ii.     把开发好的java类部署到web服务器中</p>
<h3> o)   缓缓开发过程</h3>
<p>​        i. </p>
<p>​        ii. </p>
<p>​       iii. </p>
<p>​       iv. </p>
<p>判定是浏览器请求服务器的资源时，第一个url的斜杠，代表服务器，斜杠后的第一个单词是服务器下挂在的application，第二个斜杠后才是application下面具体的业务java代码（servlet）</p>
<figure><figcaption>image-20220530164906659</figcaption></figure>
<p>拷贝servlet的全路径名</p>
<figure><figcaption>image-20220530164945151</figcaption></figure>
<p>按照一一映射关系，对xml文件进行配置，将刚才拷贝的路径搞进去</p>
<figure><figcaption>image-20220530164949422</figcaption></figure>
<h3> p) 速速开发过程</h3>
<p>​        v. </p>
<p>​       vi. </p>
<p>​       vii. </p>
<p>​      viii. </p>
<p>​       ix. 写业务代码</p>
<p>​        x. 检查是否配置完整</p>
<h2> 资源路径详解（URL统一资源定位符）</h2>
<h3> 1、url 进入服务器后，先进web.xml进行匹配，没有匹配时进入webapp 目录进行页面名称匹配，如果都没有，返回 404</h3>
<h3> 2、WEB-INF目录下，无法通过浏览器直接输入资源定位访问，这里是绝对安全的，只能是服务器内部访问该WEB-INF目录下的资源</h3>
<h3> 3、浏览器访问服务器资源</h3>
<p>​        i.     / 代表服务器</p>
<p>​        ii.     任何访问路径建议在最头部都加上 /</p>
<p>​       iii.     多个不同映射可以访问同一个资源</p>
<figure><figcaption>image-20220530165309221</figcaption></figure>
<p>​       iv.     *通配符</p>
<blockquote>
<p><em>.扩展名</em>.do *.action …</p>
<p>/ 开头  以 / <em>结尾  /</em> /login/* …</p>
</blockquote>
<p>​        v.     案例练习</p>
<ol>
<li>
<p>对于如下的一些映射关系：
　Servlet1 映射到 /abc/*
　Servlet2 映射到 /*
　Servlet3 映射到 /abc
　Servlet4 映射到 <em>.do
问题：
　当请求URL为“/abc/a.html”，“/abc/</em>”和“/<em>”都匹配，哪个servlet响应
　Servlet引擎将调用Servlet1。
　当请求URL为“/abc”时，“/abc/</em>”和“/abc”都匹配，哪个servlet响应
　Servlet引擎将调用Servlet3。
　当请求URL为“/abc/a.do”时，“/abc/<em>”和“</em>.do”都匹配，哪个servlet响应
　Servlet引擎将调用Servlet1。
　当请求URL为“/a.do”时，“/<em>”和“</em>.do”都匹配，哪个servlet响应
　Servlet引擎将调用Servlet2。
　当请求URL为“/xxx/yyy/a.do”时，“/<em>”和“</em>.do”都匹配，哪个servlet响应
　Servlet引擎将调用Servlet2</p>
</li>
<li>
<p>原则，谁像选谁</p>
</li>
</ol>
<h3> 4、 服务器内部访问服务器资源</h3>
<p>​        i.     / 代表项目名称</p>
<h2> Servlet的生命周期（单线程）</h2>
<h3> 线程问题</h3>
<p>servlet只会被初始化一次，没有特别处理的情况下，不应该在成员变量处放置可以被改变值的成员变量，线程处理方式有两种，加锁，交给框架</p>
<figure><figcaption>image-20220530165438573</figcaption></figure>
<h3> 描述流程</h3>
<p>web服务器接收到客户端的servlet访问请求</p>
<p>​        i.     Web容器首先检查是否已经装载了该servlet的实例对象，如果没有执行ii，如果有执行iv</p>
<p>​        ii.     实例化一个servlet并加载到服务器中的集合中存储</p>
<p>​       iii.     调用servlet的init方法</p>
<p>​       iv.     服务器创建一个用于封装http请求消息的HttpServeltRequest对象和一个代表http响应消息的HTTPServletResponse对象，接着调用servlet的service方法，并把request和response作为参数传递进去</p>
<p>​        v.     Web应用程序在被卸载或者停止之前，会卸载servlet引擎，并且在卸载引擎之前会调用servlet的destory（）方法</p>
<blockquote>
<p>运用forward方法只能重定向到同一个Web应用程序中的一个资源。而sendRedirect方法可以让你重定向到任何URL。</p>
</blockquote>
<h2> Servletconfig</h2>
<p>在 servlet 的配置文件 web.xml 中，可以使用多个 &lt;init-param&gt; 标签，作为 servlet 初始化的参数，是写在 &lt;servlet&gt; 标签里面</p>
<p>1、配置web.xml中的init-param.</p>
<figure><figcaption>image-20220530170205213</figcaption></figure>
<p>2、完成servlet的config初始化.</p>
<figure><figcaption>image-20220530170320634</figcaption></figure>
<p>3、完成业务开发.</p>
<figure><figcaption>image-20220530170327503</figcaption></figure>
<h2> Servletcontext</h2>
<p>1、Servletcontext代表当前应用，web容器在启动的时候，会给每个应用都创建一个servletcontext对象，context的引用被config持有（维护），可以通过config.getContext的方式获取context对象，由于所有servlet都使用同一个context，通常用来做通讯使用，可称为context域</p>
<figure><figcaption>image-20220530170340930</figcaption></figure>
<p>2、context 做 servlet 的通讯域</p>
<figure><figcaption>image-20220530170438606</figcaption></figure>
<p>3、</p>
<p>4、</p>
<p>5、如何在配置中给整个web应用做配置呢？  从配置文件中读取context配置</p>
<figure><figcaption>image-20220530170517265</figcaption></figure>
<p>6、Context如何实现两个servlet的跳转功能？RequestDispatcher</p>
<figure><figcaption>image-20220530170533532</figcaption></figure>
<figure><figcaption>image-20220530170538395</figcaption></figure>
<p>7、读取文本内容</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8、类似这样的代码</p>
<figure><figcaption>image-20220530170557822</figcaption></figure>
<figure><figcaption>image-20220530170610912</figcaption></figure>
<h2> Request与response</h2>
<figure><figcaption>image-20220530170618525</figcaption></figure>
<p>分析项目案例核心：</p>
<p>​        i.     Request：url的解析，url跳转，url的传参，表单传参</p>
<p>​        ii.     Response：服务器命令浏览器基于某些规范，做规定资源内容（命令浏览器做事-显示网页，播放mp3，显示图片，下载文件，定时器自动跳转页面…）</p>
<p>​       iii.     涉及到的板块关联越多，规范越多，该板块就越重要，建议前期花时间解决—举例：response</p>
<h3> Response</h3>
<p><a href="https://www.cnblogs.com/zhangyinhua/p/7629221.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhangyinhua/p/7629221.html</a></p>
<p>getMethod();   获得请求方式</p>
<p>getRequestURL();  返回客户端发出请求时的完整URL。</p>
<p>getRequestURI();  返回请求行中的资源名部分。</p>
<p>getContextPath();  当前应用的虚拟目录</p>
<p>getQueryString() ;  返回请求行中的参数部分。</p>
<h3> Response案例</h3>
<p>​       iv.     字节字符流输出数据</p>
<p>​        v.     中文乱码处理</p>
<p>​       vi.     定时自动刷新</p>
<p>​       vii.     下载图片</p>
<p>​      viii.     下载文件中文乱码处理</p>
<p>​       ix.     随机图片</p>
<p>​        x.     验证码</p>
<p>​       xi.     重定向</p>
<p>​       xii.     防盗链</p>
<p>​      xiii.     压缩处理</p>
<p>r)   Request案例</p>
<h3> Request</h3>
<h4> RequestDemo01</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> RequestDemo02</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> RequestDemo03</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> RequestDemo04</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> RequestDemo05</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> CharcaterServlet</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Cookie-response层面</h2>
<p><a href="https://www.cnblogs.com/muzongyan/archive/2010/08/30/1812552.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/muzongyan/archive/2010/08/30/1812552.html</a></p>
<p><a href="https://www.cnblogs.com/xdp-gacl/p/3803033.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/xdp-gacl/p/3803033.html</a></p>
<p><a href="https://www.cnblogs.com/whgk/p/6422391.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/whgk/p/6422391.html</a></p>
<p>s)   创建cookie打开一个浏览器就是一个cookie</p>
<p>t)   如何向客户端写Cookie：  CookieDemo01</p>
<p>u)   服务器如何得到客户端传来的Cookie  CookieDemo02  Cookie[] getCookies() 获取浏览器发来的信息（name=value）</p>
<figure><figcaption>image-20220530171258924</figcaption></figure>
<p>设置生命周期：以秒为单位</p>
<figure><figcaption>image-20220530171307834</figcaption></figure>
<figure><figcaption>image-20220530171314647</figcaption></figure>
<p>v)   读取cookie</p>
<figure><figcaption>image-20220530171327620</figcaption></figure>
<p>使用cookie记录用户上一次访问的时间：CookieDemo01</p>
<p>w)  删除cookie</p>
<figure><figcaption>image-20220530171339635</figcaption></figure>
<p>x)   cookie中存取中文</p>
<figure><figcaption>image-20220530171345587</figcaption></figure>
<p>y)   api</p>
<figure><figcaption>image-20220530171353030</figcaption></figure>
<p>z)   中文存储使用</p>
<figure><figcaption>image-20220530171400805</figcaption></figure>
<p>aa)  使用场景</p>
<p>记住用户名、历史记录、登录状态信息记录（在浏览器中）</p>
<p>bb) 执行流程</p>
<figure><figcaption>image-20220530171411614</figcaption></figure>
<h2> Session</h2>
<figure><figcaption>image-20220530171505787</figcaption></figure>
<p>总结：</p>
<p>数据保存在客户端的Cookie技术
数据保存在服务端的Session技术</p>
<p>上传、下载、拦截</p>
<h2> Filter过滤、拦截</h2>
<figure><figcaption>image-20220530171513941</figcaption></figure>
<p>对web服务器管理的所有web资源：例如Jsp, Servlet,</p>
<p>静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。</p>
<blockquote>
<p>例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p>
</blockquote>
<p>服务器初始化时filter就初始化了</p>
<p>Filter接口中有一个doFilter方法，当我们编写好Filter，并配置对哪个web资源进行拦截后，</p>
<p>WEB服务器每次在调用web资源的service方法之前，都会先调用一下filter的doFilter方法，</p>
<p>因此，在该方法内编写代码可达到如下目的：</p>
<blockquote>
<p>调用目标资源之前，让一段代码执行。</p>
<p>是否调用目标资源（即是否让用户访问web资源）。</p>
<p>调用目标资源之后，让一段代码执行。</p>
</blockquote>
<p>Filter开发步骤：</p>
<blockquote>
<p>编写java类实现Filter接口，并实现其doFilter方法。</p>
<p>在 web.xml 文件中使用&lt;filter&gt;和&lt;filter-mapping&gt;元素对编写的filter类进行注册，并设置它所能拦截的资源</p>
</blockquote>
<h2> Jsp</h2>
<p>动态页面，就是服务器向浏览器写html文件，里面的变量可以根据实际应用场景进行改变</p>
<h3> Jsp 9大内置对象</h3>
<p>request、response、session、application、out、pageContext、config、page和exception；</p>
<h3> jsp 7大动作</h3>
<p>include、useBean、getProperty、setProperty、param、forward、plugin</p>
<h3> jsp跟servlet的关系</h3>
<p>jsp经编译后就变成了servlet，所以说jsp本质就是servlet，jvm只能识别java的类，不能识别jsp代码，web容器将jsp的代码编译成jvm能够识别的java类。</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2019-08-15T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java 10 新特性概览</title>
    <id>https://topjf.github.io/java/new-features/java10.html</id>
    <link href="https://topjf.github.io/java/new-features/java10.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java 10 发布于 2018 年 3 月 20 日，最知名的特性应该是 var 关键字（局部变量类型推断）的引入了，其他还有垃圾收集器改善、GC 改进、性能提升、线程管控等一批新特性。 概览（精选了一部分） ： JEP 286：局部变量类型推断 (https://openjdk.java.net/jeps/286); JEP 304：垃圾回收器接口...</summary>
    <content type="html"><![CDATA[<!-- more -->
<p><strong>Java 10</strong> 发布于 2018 年 3 月 20 日，最知名的特性应该是 <code>var</code> 关键字（局部变量类型推断）的引入了，其他还有垃圾收集器改善、GC 改进、性能提升、线程管控等一批新特性。</p>
<p><strong>概览（精选了一部分）</strong> ：</p>
<ul>
<li><a href="https://openjdk.java.net/jeps/286" target="_blank" rel="noopener noreferrer">JEP 286：局部变量类型推断</a></li>
<li><a href="https://openjdk.java.net/jeps/304" target="_blank" rel="noopener noreferrer">JEP 304：垃圾回收器接口</a></li>
<li><a href="https://openjdk.java.net/jeps/307" target="_blank" rel="noopener noreferrer">JEP 307：G1 并行 Full GC</a></li>
<li><a href="https://openjdk.java.net/jeps/310" target="_blank" rel="noopener noreferrer">JEP 310：应用程序类数据共享(扩展 CDS 功能)</a></li>
<li><a href="https://openjdk.java.net/jeps/317" target="_blank" rel="noopener noreferrer">JEP 317：实验性的基于 Java 的 JIT 编译器</a></li>
</ul>
<h2> 局部变量类型推断(var)</h2>
<p>由于太多 Java 开发者希望 Java 中引入局部变量推断，于是 Java 10 的时候它来了，也算是众望所归了！</p>
<p>Java 10 提供了 <code>var</code> 关键字声明局部变量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>var 关键字只能用于带有构造器的局部变量和 for 循环中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>var 并不会改变 Java 是一门静态类型语言的事实，编译器负责推断出类型。</p>
<p>另外，Scala 和 Kotlin 中已经有了  <code>val</code> 关键字 ( <code>final var</code> 组合关键字)。</p>
<p>相关阅读：<a href="https://zhuanlan.zhihu.com/p/34911982" target="_blank" rel="noopener noreferrer">《Java 10 新特性之局部变量类型推断》</a>。</p>
<h2> 垃圾回收器接口</h2>
<p>在早期的 JDK 结构中，组成垃圾收集器 (GC) 实现的组件分散在代码库的各个部分。 Java 10 通过引入一套纯净的垃圾收集器接口来将不同垃圾收集器的源代码分隔开。</p>
<h2> G1 并行 Full GC</h2>
<p>从 Java9 开始 G1 就了默认的垃圾回收器，G1 是以一种低延时的垃圾回收器来设计的，旨在避免进行 Full GC,但是 Java9 的 G1 的 FullGC 依然是使用单线程去完成标记清除算法,这可能会导致垃圾回收期在无法回收内存的时候触发 Full GC。</p>
<p>为了最大限度地减少 Full GC 造成的应用停顿的影响，从 Java10 开始，G1 的 FullGC 改为并行的标记清除算法，同时会使用与年轻代回收和混合回收相同的并行工作线程数量，从而减少了 Full GC 的发生，以带来更好的性能提升、更大的吞吐量。</p>
<h2> 集合增强</h2>
<p><code>List</code>，<code>Set</code>，<code>Map</code> 提供了静态方法<code>copyOf()</code>返回入参集合的一个不可变拷贝。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>copyOf()</code> 创建的集合为不可变集合，不能进行添加、删除、替换、 排序等操作，不然会报 <code>java.lang.UnsupportedOperationException</code> 异常。 IDEA 也会有相应的提示。</p>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/image-20210816154125579.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>并且，<code>java.util.stream.Collectors</code> 中新增了静态方法，用于将流中的元素收集为不可变的集合。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Optional 增强</h2>
<p><code>Optional</code> 新增了<code>orElseThrow()</code>方法来在没有值时抛出指定的异常。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 应用程序类数据共享(扩展 CDS 功能)</h2>
<p>在 Java 5 中就已经引入了类数据共享机制 (Class Data Sharing，简称 CDS)，允许将一组类预处理为共享归档文件，以便在运行时能够进行内存映射以减少 Java 程序的启动时间，当多个 Java 虚拟机（JVM）共享相同的归档文件时，还可以减少动态内存的占用量，同时减少多个虚拟机在同一个物理或虚拟的机器上运行时的资源占用。CDS 在当时还是 Oracle JDK 的商业特性。</p>
<p>Java 10 在现有的 CDS 功能基础上再次拓展，以允许应用类放置在共享存档中。CDS 特性在原来的 bootstrap 类基础之上，扩展加入了应用类的 CDS 为 (Application Class-Data Sharing，AppCDS) 支持，大大加大了 CDS 的适用范围。其原理为：在启动时记录加载类的过程，写入到文本文件中，再次启动时直接读取此启动文本并加载。设想如果应用环境没有大的变化，启动速度就会得到提升。</p>
<h2> 实验性的基于 Java 的 JIT 编译器</h2>
<p>Graal 是一个基于 Java 语言编写的 JIT 编译器，是 JDK 9 中引入的实验性 Ahead-of-Time (AOT) 编译器的基础。</p>
<p>Oracle 的 HotSpot VM 便附带两个用 C++ 实现的 JIT compiler：C1 及 C2。在Java 10 (Linux/x64, macOS/x64) 中，默认情况下HotSpot 仍使用C2，但通过向java 命令添加 <code>-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler</code> 参数便可将 C2 替换成 Graal。</p>
<p>相关阅读：<a href="https://www.infoq.cn/article/java-10-jit-compiler-graal" target="_blank" rel="noopener noreferrer">深入浅出 Java 10 的实验性 JIT 编译器 Graal - 郑雨迪</a></p>
<h2> 其他</h2>
<ul>
<li><strong>线程-局部管控</strong>：Java 10 中线程管控引入 JVM 安全点的概念，将允许在不运行全局 JVM 安全点的情况下实现线程回调，由线程本身或者 JVM 线程来执行，同时保持线程处于阻塞状态，这种方式使得停止单个线程变成可能，而不是只能启用或停止所有线程</li>
<li><strong>备用存储装置上的堆分配</strong>：Java 10 中将使得 JVM 能够使用适用于不同类型的存储机制的堆，在可选内存设备上进行堆内存分配</li>
<li>......</li>
</ul>
<h2> 参考</h2>
<ul>
<li>
<p>Java 10 Features and Enhancements : <a href="https://howtodoinjava.com/java10/java10-features/" target="_blank" rel="noopener noreferrer">https://howtodoinjava.com/java10/java10-features/</a></p>
</li>
<li>
<p>Guide to Java10 : <a href="https://www.baeldung.com/java-10-overview" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/java-10-overview</a></p>
</li>
<li>
<p>4 Class Data Sharing : <a href="https://docs.oracle.com/javase/10/vm/class-data-sharing.htm#JSJVM-GUID-7EAA3411-8CF0-4D19-BD05-DF5E1780AA91" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/10/vm/class-data-sharing.htm#JSJVM-GUID-7EAA3411-8CF0-4D19-BD05-DF5E1780AA91</a></p>
</li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java 11 新特性概览</title>
    <id>https://topjf.github.io/java/new-features/java11.html</id>
    <link href="https://topjf.github.io/java/new-features/java11.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java 11 于 2018 年 9 月 25 日正式发布，这是很重要的一个版本！Java 11 和 2017 年 9 月份发布的 Java 9 以及 2018 年 3 月份发布的 Java 10 相比，其最大的区别就是：在长期支持(Long-Term-Support)方面，Oracle 表示会对 Java 11 提供大力支持，这一支持将会持续至 20...</summary>
    <content type="html"><![CDATA[<!-- more -->
<p><strong>Java 11</strong> 于 2018 年 9 月 25 日正式发布，这是很重要的一个版本！Java 11 和 2017 年 9 月份发布的 Java 9 以及 2018 年 3 月份发布的 Java 10 相比，其最大的区别就是：在长期支持(Long-Term-Support)方面，<strong>Oracle 表示会对 Java 11 提供大力支持，这一支持将会持续至 2026 年 9 月。这是据 Java 8 以后支持的首个长期版本。</strong></p>
<figure><img src="https://img-blog.csdnimg.cn/20210603202746605.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>概览（精选了一部分）</strong> ：</p>
<ul>
<li><a href="https://openjdk.java.net/jeps/321" target="_blank" rel="noopener noreferrer">JEP 321：HTTP Client 标准化</a></li>
<li><a href="https://openjdk.java.net/jeps/333" target="_blank" rel="noopener noreferrer">JEP 333：ZGC(可伸缩低延迟垃圾收集器)</a></li>
<li><a href="https://openjdk.java.net/jeps/323" target="_blank" rel="noopener noreferrer">JEP 323：Lambda 参数的局部变量语法</a></li>
<li><a href="https://openjdk.java.net/jeps/330" target="_blank" rel="noopener noreferrer">JEP 330：启动单文件源代码程序</a></li>
</ul>
<h2> HTTP Client 标准化</h2>
<p>Java 11 对 Java 9 中引入并在 Java 10 中进行了更新的 Http Client API 进行了标准化，在前两个版本中进行孵化的同时，Http Client 几乎被完全重写，并且现在完全支持异步非阻塞。</p>
<p>并且，Java 11 中，Http Client 的包名由 <code>jdk.incubator.http</code> 改为<code>java.net.http</code>，该 API 通过 <code>CompleteableFuture</code> 提供非阻塞请求和响应语义。使用起来也很简单，如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> String 增强</h2>
<p>Java 11 增加了一系列的字符串处理方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Optional 增强</h2>
<p>新增了<code>empty()</code>方法来判断指定的 <code>Optional</code> 对象是否为空。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> ZGC(可伸缩低延迟垃圾收集器)</h2>
<p><strong>ZGC 即 Z Garbage Collector</strong>，是一个可伸缩的、低延迟的垃圾收集器。</p>
<p>ZGC 主要为了满足如下目标进行设计：</p>
<ul>
<li>GC 停顿时间不超过 10ms</li>
<li>即能处理几百 MB 的小堆，也能处理几个 TB 的大堆</li>
<li>应用吞吐能力不会下降超过 15%（与 G1 回收算法相比）</li>
<li>方便在此基础上引入新的 GC 特性和利用 colored 针以及 Load barriers 优化奠定基础</li>
<li>当前只支持 Linux/x64 位平台</li>
</ul>
<p>ZGC 目前 <strong>处在实验阶段</strong>，只支持 Linux/x64 平台。</p>
<p>与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用标记-复制算法，不过 ZGC 对该算法做了重大改进。</p>
<p>在 ZGC 中出现 Stop The World 的情况会更少！</p>
<p>详情可以看 ： <a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">《新一代垃圾回收器 ZGC 的探索与实践》</a></p>
<h2> Lambda 参数的局部变量语法</h2>
<p>从 Java 10 开始，便引入了局部变量类型推断这一关键特性。类型推断允许使用关键字 var 作为局部变量的类型而不是实际类型，编译器根据分配给变量的值推断出类型。</p>
<p>Java 10 中对 var 关键字存在几个限制</p>
<ul>
<li>只能用于局部变量上</li>
<li>声明时必须初始化</li>
<li>不能用作方法参数</li>
<li>不能在 Lambda 表达式中使用</li>
</ul>
<p>Java11 开始允许开发者在 Lambda 表达式中使用 var 进行参数声明。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 启动单文件源代码程序</h2>
<p>这意味着我们可以运行单一文件的 Java 源代码。此功能允许使用 Java 解释器直接执行 Java 源代码。源代码在内存中编译，然后由解释器执行，不需要在磁盘上生成 <code>.class</code> 文件了。唯一的约束在于所有相关的类必须定义在同一个 Java 文件中。</p>
<p>对于 Java 初学者并希望尝试简单程序的人特别有用，并且能和 jshell 一起使用。一定能程度上增强了使用 Java 来写脚本程序的能力。</p>
<h2> 其他</h2>
<ul>
<li><strong>新的垃圾回收器 Epsilon</strong> ：一个完全消极的 GC 实现，分配有限的内存资源，最大限度的降低内存占用和内存吞吐延迟时间</li>
<li><strong>低开销的 Heap Profiling</strong> ：Java 11 中提供一种低开销的 Java 堆分配采样方法，能够得到堆分配的 Java 对象信息，并且能够通过 JVMTI 访问堆信息</li>
<li><strong>TLS1.3 协议</strong> ：Java 11 中包含了传输层安全性（TLS）1.3 规范（RFC 8446）的实现，替换了之前版本中包含的 TLS，包括 TLS 1.2，同时还改进了其他 TLS 功能，例如 OCSP 装订扩展（RFC 6066，RFC 6961），以及会话散列和扩展主密钥扩展（RFC 7627），在安全性和性能方面也做了很多提升</li>
<li><strong>飞行记录器(Java Flight Recorder)</strong> ：飞行记录器之前是商业版 JDK 的一项分析工具，但在 Java 11 中，其代码被包含到公开代码库中，这样所有人都能使用该功能了。</li>
<li>......</li>
</ul>
<h2> 参考</h2>
<ul>
<li>JDK 11 Release Notes：<a href="https://www.oracle.com/java/technologies/javase/11-relnote-issues.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase/11-relnote-issues.html</a></li>
<li>Java 11 – Features and Comparison： <a href="https://www.geeksforgeeks.org/java-11-features-and-comparison/" target="_blank" rel="noopener noreferrer">https://www.geeksforgeeks.org/java-11-features-and-comparison/</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java 12 ~ 13 新特性概览</title>
    <id>https://topjf.github.io/java/new-features/java12-13.html</id>
    <link href="https://topjf.github.io/java/new-features/java12-13.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java12 String 增强 Java 11 增加了两个的字符串处理方法，如以下所示。 indent() 方法可以实现字符串缩进。 输出： transform() 方法可以用来转变指定字符串。 Files 增强（文件比较） Java 12 添加了以下方法来比较两个文件： mismatch() 方法用于比较两个文件，并返回第一个不匹配字符的位置，如果...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Java12</h2>
<h3> String 增强</h3>
<p>Java 11 增加了两个的字符串处理方法，如以下所示。</p>
<p><code>indent()</code> 方法可以实现字符串缩进。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>transform()</code> 方法可以用来转变指定字符串。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> Files 增强（文件比较）</h3>
<p>Java 12 添加了以下方法来比较两个文件：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>mismatch()</code> 方法用于比较两个文件，并返回第一个不匹配字符的位置，如果文件相同则返回 -1L。</p>
<p>代码示例（两个文件内容相同的情况）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码示例（两个文件内容不相同的情况）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 数字格式化工具类</h3>
<p><code>NumberFormat</code> 新增了对复杂的数字进行格式化的支持</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> Shenandoah GC</h3>
<p>Redhat 主导开发的 Pauseless GC 实现，主要目标是 99.9% 的暂停小于 10ms，暂停与堆大小无关等</p>
<p>和 Java11 开源的 ZGC 相比（需要升级到 JDK11 才能使用），Shenandoah GC 有稳定的 JDK8u 版本，在 Java8 占据主要市场份额的今天有更大的可落地性。</p>
<h3> G1 收集器优化</h3>
<p>Java12 为默认的垃圾收集器 G1 带来了两项更新:</p>
<ul>
<li><strong>可中止的混合收集集合</strong> ：JEP344 的实现，为了达到用户提供的停顿时间目标，JEP 344 通过把要被回收的区域集（混合收集集合）拆分为强制和可选部分，使 G1 垃圾回收器能中止垃圾回收过程。 G1 可以中止可选部分的回收以达到停顿时间目标</li>
<li><strong>及时返回未使用的已分配内存</strong> ：JEP346 的实现，增强 G1 GC，以便在空闲时自动将 Java 堆内存返回给操作系统</li>
</ul>
<h3> 预览新特性</h3>
<p>作为预览特性加入，需要在<code>javac</code>编译和<code>java</code>运行时增加参数<code>--enable-preview</code> 。</p>
<h4> 增强 Switch</h4>
<p>传统的 <code>switch</code> 语法存在容易漏写 <code>break</code> 的问题，而且从代码整洁性层面来看，多个 break 本质也是一种重复</p>
<p>Java12 增强了 <code>swtich</code> 表达式，使用类似 lambda 语法条件匹配成功后的执行块，不需要多写 break 。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> instanceof 模式匹配</h4>
<p><code>instanceof</code> 主要在类型强转前探测对象的具体类型。</p>
<p>之前的版本中，我们需要显示地对对象进行类型转换。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新版的 <code>instanceof</code> 可以在判断是否属于具体的类型同时完成转换。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Java13</h2>
<h3> 增强 ZGC(释放未使用内存)</h3>
<p>在 Java 11 中是实验性的引入的 ZGC 在实际的使用中存在未能主动将未使用的内存释放给操作系统的问题。</p>
<p>ZGC 堆由一组称为 ZPages 的堆区域组成。在 GC 周期中清空 ZPages 区域时，它们将被释放并返回到页面缓存 <strong>ZPageCache</strong> 中，此缓存中的 ZPages 按最近最少使用（LRU）的顺序，并按照大小进行组织。</p>
<p>在 Java 13 中，ZGC 将向操作系统返回被标识为长时间未使用的页面，这样它们将可以被其他进程重用。</p>
<h3> SocketAPI 重构</h3>
<p>Java Socket API 终于迎来了重大更新！</p>
<p>Java 13 将 Socket API 的底层进行了重写， <code>NioSocketImpl</code> 是对 <code>PlainSocketImpl</code> 的直接替代，它使用 <code>java.util.concurrent</code> 包下的锁而不是同步方法。如果要使用旧实现，请使用 <code>-Djdk.net.usePlainSocketImpl=true</code>。</p>
<p>并且，在 Java 13 中是默认使用新的 Socket 实现。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> FileSystems</h3>
<p><code>FileSystems</code> 类中添加了以下三种新方法，以便更容易地使用将文件内容视为文件系统的文件系统提供程序：</p>
<ul>
<li><code>newFileSystem(Path)</code></li>
<li><code>newFileSystem(Path, Map&lt;String, ?&gt;)</code></li>
<li><code>newFileSystem(Path, Map&lt;String, ?&gt;, ClassLoader)</code></li>
</ul>
<h3> 动态 CDS 存档</h3>
<p>Java 13 中对 Java 10 中引入的应用程序类数据共享(AppCDS)进行了进一步的简化、改进和扩展，即：<strong>允许在 Java 应用程序执行结束时动态进行类归档</strong>，具体能够被归档的类包括所有已被加载，但不属于默认基层 CDS 的应用程序类和引用类库中的类。</p>
<p>这提高了应用程序类数据共享（<a href="https://openjdk.java.net/jeps/310" target="_blank" rel="noopener noreferrer">AppCDS</a>）的可用性。无需用户进行试运行来为每个应用程序创建类列表。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 预览新特性</h3>
<h4> 文本块</h4>
<p>解决 Java 定义多行字符串时只能通过换行转义或者换行连接符来变通支持的问题，引入<strong>三重双引号</strong>来定义多行文本。</p>
<p>Java 13 支持两个 <code>"""</code> 符号中间的任何内容都会被解释为字符串的一部分，包括换行符。</p>
<p>未支持文本块之前的 HTML 写法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持文本块之后的 HTML 写法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未支持文本块之前的 SQL 写法：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持文本块之后的 SQL 写法：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，<code>String</code> 类新增加了 3 个新的方法来操作文本块：</p>
<ul>
<li><code>formatted(Object... args)</code> ：它类似于 <code>String</code> 的<code>format()</code>方法。添加它是为了支持文本块的格式设置。</li>
<li><code>stripIndent()</code> ：用于去除文本块中每一行开头和结尾的空格。</li>
<li><code>translateEscapes()</code> ：转义序列如 <em>“\\t”</em> 转换为 <em>“\t”</em></li>
</ul>
<p>由于文本块是一项预览功能，可以在未来版本中删除，因此这些新方法被标记为弃用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 增强 Switch(引入 yield 关键字到 Switch 中)</h4>
<p><code>Switch</code> 表达式中就多了一个关键字用于跳出 <code>Switch</code> 块的关键字 <code>yield</code>，主要用于返回一个值</p>
<p><code>yield</code>和 <code>return</code> 的区别在于：<code>return</code> 会直接跳出当前循环或者方法，而 <code>yield</code> 只会跳出当前 <code>Switch</code> 块，同时在使用 <code>yield</code> 时，需要有 <code>default</code> 条件</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 参考</h2>
<ul>
<li>JDK Project Overview ： &lt;<a href="https://openjdk.java.net/projects/jdk/" target="_blank" rel="noopener noreferrer">https://openjdk.java.net/projects/jdk/</a> &gt;</li>
<li>Oracle Java12 ReleaseNote ：<a href="https://www.oracle.com/java/technologies/javase/12all-relnotes.htm" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase/12all-relnotes.htm</a></li>
<li>What is new in Java 12：<a href="https://mkyong.com/java/what-is-new-in-java-12/" target="_blank" rel="noopener noreferrer">https://mkyong.com/java/what-is-new-in-java-12/</a></li>
<li>Oracle Java13 ReleaseNote <a href="https://www.oracle.com/technetwork/java/javase/13all-relnotes-5461743.html#NewFeature" target="_blank" rel="noopener noreferrer">https://www.oracle.com/technetwork/java/javase/13all-relnotes-5461743.html#NewFeature</a></li>
<li>New Java13 Features <a href="https://www.baeldung.com/java-13-new-features" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/java-13-new-features</a></li>
<li>Java13 新特性概述 <a href="https://www.ibm.com/developerworks/cn/java/the-new-features-of-Java-13/index.html" target="_blank" rel="noopener noreferrer">https://www.ibm.com/developerworks/cn/java/the-new-features-of-Java-13/index.html</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java 14 ~ 15 新特性概览</title>
    <id>https://topjf.github.io/java/new-features/java14-15.html</id>
    <link href="https://topjf.github.io/java/new-features/java14-15.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java14 空指针异常精准提示 通过 JVM 参数中添加-XX:+ShowCodeDetailsInExceptionMessages，可以在空指针异常中获取更为详细的调用信息，更快的定位和解决问题。 Java 14 之前： Java 14 之后： switch 的增强(转正) Java12 引入的 switch（预览特性）在 Java14 变为正式...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Java14</h2>
<h3> 空指针异常精准提示</h3>
<p>通过 JVM 参数中添加<code>-XX:+ShowCodeDetailsInExceptionMessages</code>，可以在空指针异常中获取更为详细的调用信息，更快的定位和解决问题。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Java 14 之前：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 14 之后：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> switch 的增强(转正)</h3>
<p>Java12 引入的 switch（预览特性）在 Java14 变为正式版本，不需要增加参数来启用，直接在 JDK14 中就能使用。</p>
<p>Java12 为 switch 表达式引入了类似 lambda 语法条件匹配成功后的执行块，不需要多写 break ，Java13 提供了 <code>yield</code> 来在 block 中返回值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 预览新特性</h3>
<h4> record 关键字</h4>
<p><code>record</code> 关键字可以简化 <strong>数据类</strong>（一个 Java 类一旦实例化就不能再修改）的定义方式，使用 <code>record</code> 代替 <code>class</code> 定义的类，只需要声明属性，就可以在获得属性的访问方法，以及 <code>toString()</code>，<code>hashCode()</code>, <code>equals()</code>方法</p>
<p>类似于使用 <code>class</code> 定义类，同时使用了 lombok 插件，并打上了<code>@Getter,@ToString,@EqualsAndHashCode</code>注解</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 文本块</h4>
<p>Java14 中，文本块依然是预览特性，不过，其引入了两个新的转义字符：</p>
<ul>
<li><code>\</code> : 表示行尾，不引入换行符</li>
<li><code>\s</code> ：表示单个空格</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> instanceof 增强</h4>
<p>依然是<strong>预览特性</strong> ，Java 12 新特性中介绍过。</p>
<h3> Java14 其他特性</h3>
<ul>
<li>从 Java11 引入的 ZGC 作为继 G1 过后的下一代 GC 算法，从支持 Linux 平台到 Java14 开始支持 MacOS 和 Window（个人感觉是终于可以在日常开发工具中先体验下 ZGC 的效果了，虽然其实 G1 也够用）</li>
<li>移除了 CMS(Concurrent Mark Sweep) 垃圾收集器（功成而退）</li>
<li>新增了 jpackage 工具，标配将应用打成 jar 包外，还支持不同平台的特性包，比如 linux 下的<code>deb</code>和<code>rpm</code>，window 平台下的<code>msi</code>和<code>exe</code></li>
</ul>
<h2> Java15</h2>
<h3> CharSequence</h3>
<p><code>CharSequence</code> 接口添加了一个默认方法 <code>isEmpty()</code> 来判断字符序列为空，如果是则返回 true。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> TreeMap</h3>
<p><code>TreeMap</code> 新引入了下面这些方法：</p>
<ul>
<li><code>putIfAbsent()</code></li>
<li><code>computeIfAbsent()</code></li>
<li><code>computeIfPresent()</code></li>
<li><code>compute()</code></li>
<li><code>merge()</code></li>
</ul>
<h3> ZGC(转正)</h3>
<p>Java11 的时候 ，ZGC 还在试验阶段。</p>
<p>当时，ZGC 的出现让众多 Java 开发者看到了垃圾回收器的另外一种可能，因此备受关注。</p>
<p>经过多个版本的迭代，不断的完善和修复问题，ZGC 在 Java 15 已经可以正式使用了！</p>
<p>不过，默认的垃圾回收器依然是 G1。你可以通过下面的参数启动 ZGC：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> EdDSA(数字签名算法)</h3>
<p>新加入了一个安全性和性能都更强的基于 Edwards-Curve Digital Signature Algorithm （EdDSA）实现的数字签名算法。</p>
<p>虽然其性能优于现有的 ECDSA 实现，不过，它并不会完全取代 JDK 中现有的椭圆曲线数字签名算法( ECDSA)。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 文本块(转正)</h3>
<p>在 Java 15 ，文本块是正式的功能特性了。</p>
<h3> 隐藏类(Hidden Classes)</h3>
<p>隐藏类是为框架（frameworks）所设计的，隐藏类不能直接被其他类的字节码使用，只能在运行时生成类并通过反射间接使用它们。</p>
<h3> 预览新特性</h3>
<h4> 密封类</h4>
<p>Java 15 对 Java 14 中引入的预览新特性进行了增强，主要是引入了一个新的概念 <strong>密封类（Sealed Classes）。</strong></p>
<p>密封类可以对继承或者实现它们的类进行限制。</p>
<p>比如抽象类 <code>Person</code> 只允许 <code>Employee</code> 和 <code>Manager</code> 继承。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，任何扩展密封类的类本身都必须声明为 <code>sealed</code>、<code>non-sealed</code> 或 <code>final</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/image-20210820153955587.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>如果允许扩展的子类和封闭类在同一个源代码文件里，封闭类可以不使用 permits 语句，Java 编译器将检索源文件，在编译期为封闭类添加上许可的子类。</p>
<h4> instanceof 模式匹配</h4>
<p>Java 15 并没有对此特性进行调整，继续预览特性，主要用于接受更多的使用反馈。</p>
<p>在未来的 Java 版本中，Java 的目标是继续完善 <code>instanceof</code> 模式匹配新特性。</p>
<h3> Java15 其他新特性</h3>
<ul>
<li><strong>Nashorn JavaScript 引擎彻底移除</strong> ：Nashorn 从 Java8 开始引入的 JavaScript 引擎，Java9 对 Nashorn 做了些增强，实现了一些 ES6 的新特性。在 Java 11 中就已经被弃用，到了 Java 15 就彻底被删除了。</li>
<li><strong>DatagramSocket API 重构</strong></li>
<li><strong>禁用和废弃偏向锁（Biased Locking）</strong> ： 偏向锁的引入增加了 JVM 的复杂性大于其带来的性能提升。不过，你仍然可以使用 <code>-XX:+UseBiasedLocking</code> 启用偏向锁定，但它会提示 这是一个已弃用的 API。</li>
<li>......</li>
</ul>
<h2> 总结</h2>
<h3> 关于预览特性</h3>
<p>先贴一段 oracle 官网原文：<code>This is a preview feature, which is a feature whose design, specification, and implementation are complete, but is not permanent, which means that the feature may exist in a different form or not at all in future JDK releases. To compile and run code that contains preview features, you must specify additional command-line options.</code></p>
<p>这是一个预览功能，该功能的设计，规格和实现是完整的，但不是永久性的，这意味着该功能可能以其他形式存在或在将来的 JDK 版本中根本不存在。 要编译和运行包含预览功能的代码，必须指定其他命令行选项。</p>
<p>就以<code>switch</code>的增强为例子，从 Java12 中推出，到 Java13 中将继续增强，直到 Java14 才正式转正进入 JDK 可以放心使用，不用考虑后续 JDK 版本对其的改动或修改</p>
<p>一方面可以看出 JDK 作为标准平台在增加新特性的严谨态度，另一方面个人认为是对于预览特性应该采取审慎使用的态度。特性的设计和实现容易，但是其实际价值依然需要在使用中去验证</p>
<h3> JVM 虚拟机优化</h3>
<p>每次 Java 版本的发布都伴随着对 JVM 虚拟机的优化，包括对现有垃圾回收算法的改进，引入新的垃圾回收算法，移除老旧的不再适用于今天的垃圾回收算法等</p>
<p>整体优化的方向是<strong>高效，低时延的垃圾回收表现</strong></p>
<p>对于日常的应用开发者可能比较关注新的语法特性，但是从一个公司角度来说，在考虑是否升级 Java 平台时更加考虑的是<strong>JVM 运行时的提升</strong></p>
<h2> 参考</h2>
<ul>
<li>Oracle Java14 record <a href="https://docs.oracle.com/en/java/javase/14/language/records.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/en/java/javase/14/language/records.html</a></li>
<li>java14-features <a href="https://www.techgeeknext.com/java/java14-features" target="_blank" rel="noopener noreferrer">https://www.techgeeknext.com/java/java14-features</a></li>
<li>Java 14 Features : <a href="https://www.journaldev.com/37273/java-14-features" target="_blank" rel="noopener noreferrer">https://www.journaldev.com/37273/java-14-features</a></li>
<li>What is new in Java 15: <a href="https://mkyong.com/java/what-is-new-in-java-15/" target="_blank" rel="noopener noreferrer">https://mkyong.com/java/what-is-new-in-java-15/</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java 16 新特性概览</title>
    <id>https://topjf.github.io/java/new-features/java16.html</id>
    <link href="https://topjf.github.io/java/new-features/java16.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java 16 记录类型（转正） 变更历史： JDK 版本 更新类型 JEP 更新内容 ---------- ----------------- -------------------------------------------- -----------------------------------------------------------...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Java 16</h2>
<h3> 记录类型（转正）</h3>
<p>变更历史：</p>
<table>
<thead>
<tr>
<th>JDK 版本</th>
<th>更新类型</th>
<th>JEP</th>
<th>更新内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java SE 14</td>
<td>Preview</td>
<td><a href="https://openjdk.java.net/jeps/359" target="_blank" rel="noopener noreferrer">JEP 359</a></td>
<td>引入 <code>record</code> 关键字，<code>record</code> 提供一种紧凑的语法来定义类中的不可变数据。</td>
</tr>
<tr>
<td>Java SE 15</td>
<td>Second Preview</td>
<td><a href="https://openjdk.org/jeps/384" target="_blank" rel="noopener noreferrer">JEP 384</a></td>
<td>支持在局部方法和接口中使用 <code>record</code>。</td>
</tr>
<tr>
<td>Java SE 16</td>
<td>Permanent Release</td>
<td><a href="https://openjdk.org/jeps/395" target="_blank" rel="noopener noreferrer">JEP 395</a></td>
<td>非静态内部类可以定义非常量的静态成员。</td>
</tr>
</tbody>
</table>
<p>从 Java SE 16 开始，非静态内部类可以定义非常量的静态成员。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在 JDK 16 之前，如果写上面这种代码，IDE 会提示你静态字段 age 不能在非静态的内部类中定义，除非它用一个常量表达式初始化。（The field age cannot be declared static in a non-static inner type, unless initialized with a constant expression）</p>
</blockquote>
<h3> instanceof 模式匹配（转正）</h3>
<table>
<thead>
<tr>
<th>JDK 版本</th>
<th>更新类型</th>
<th>JEP</th>
<th>更新内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java SE 14</td>
<td>preview</td>
<td><a href="https://openjdk.org/jeps/305" target="_blank" rel="noopener noreferrer">JEP 305</a></td>
<td>首次引入 instanceof 模式匹配。</td>
</tr>
<tr>
<td>Java SE 15</td>
<td>Second Preview</td>
<td><a href="https://openjdk.org/jeps/375" target="_blank" rel="noopener noreferrer">JEP 375</a></td>
<td>相比较上个版本无变化，继续收集更多反馈。</td>
</tr>
<tr>
<td>Java SE 16</td>
<td>Permanent Release</td>
<td><a href="https://openjdk.org/jeps/394" target="_blank" rel="noopener noreferrer">JEP 394</a></td>
<td>模式变量不在隐式为 final。</td>
</tr>
</tbody>
</table>
<p>从 Java SE 16 开始，你可以对 instanceof 中的变量值进行修改。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 预览新特性</h3>
<h4> 密封类</h4>
<p>在 JDK 15 引入的 sealed class（密封类）在 JDK 16 得到了改进：更加严格的引用检查和密封类的继承关系。</p>
<h3> 其他优化与改进</h3>
<ul>
<li><strong>优化 JavaDoc 的搜索功能</strong> ：对于单词大小写问题的改进，当不知道具体拼写或者大小写的时候很有用。</li>
<li><strong>ZGC 并发线程处理</strong> ：JEP 376 将 ZGC 线程栈处理从安全点转移到一个并发阶段，甚至在大堆上也允许在毫秒内暂停 GC 安全点。消除 ZGC 垃圾收集器中最后一个延迟源可以极大地提高应用程序的性能和效率。</li>
<li><strong>弹性元空间</strong> ：此特性可将未使用的 HotSpot 类元数据（即元空间，metaspace）内存更快速地返回到操作系统，从而减少元空间的占用空间。具有大量类加载和卸载活动的应用程序可能会占用大量未使用的空间。新方案将元空间内存按较小的块分配，它将未使用的元空间内存返回给操作系统来提高弹性，从而提高应用程序性能并降低内存占用。</li>
<li><strong>Unix-Domain 套接字通道</strong> ：Unix-domain 套接字一直是大多数 Unix 平台的一个特性，现在在 Windows 10 和 Windows Server 2019 也提供了支持。此特性为 java.nio.channels 包的套接字通道和服务器套接字通道 API 添加了 Unix-domain（AF_UNIX）套接字支持。它扩展了继承的通道机制以支持 Unix-domain 套接字通道和服务器套接字通道。Unix-domain 套接字用于同一主机上的进程间通信（IPC）。它们在很大程度上类似于 TCP/IP，区别在于套接字是通过文件系统路径名而不是 Internet 协议（IP）地址和端口号寻址的。对于本地进程间通信，Unix-domain 套接字比 TCP/IP 环回连接更安全、更有效。</li>
<li><strong>打包工具</strong>：此特性最初是作为 Java 14 中的一个孵化器模块引入的，该工具允许打包自包含的 Java 应用程序。它支持原生打包格式，为最终用户提供自然的安装体验，这些格式包括 Windows 上的 msi 和 exe、macOS 上的 pkg 和 dmg，还有 Linux 上的 deb 和 rpm。它还允许在打包时指定启动时参数，并且可以从命令行直接调用，也可以通过 ToolProvider API 以编程方式调用。注意 jpackage 模块名称从 jdk.incubator.jpackage 更改为 jdk.jpackage。这将改善最终用户在安装应用程序时的体验，并简化了“应用商店”模型的部署。</li>
<li><strong>对基于值的类发出警告</strong>：此特性将原始包装器类（java.lang.Integer、java.lang.Double 等）指定为基于值的（类似于 java.util.Optional 和 java.time.LocalDateTime），并在其构造器中添加 forRemoval（自 JDK 9 开始被弃用），这样会提示新的警告。在 Java 平台中尝试在任何基于值的类的实例上进行不正确的同步时，它会发出警告。</li>
<li><strong>默认强封装 JDK 内部元素</strong>：此特性会默认强封装 JDK 的所有内部元素，但关键内部 API（例如 sun.misc.Unsafe）除外。默认情况下，使用早期版本成功编译的访问 JDK 内部 API 的代码可能不再起作用。鼓励开发人员从使用内部元素迁移到使用标准 API 的方法上，以便他们及其用户都可以无缝升级到将来的 Java 版本。强封装由 JDK 9 的启动器选项–illegal-access 控制，到 JDK 15 默认改为 warning，从 JDK 16 开始默认为 deny。（目前）仍然可以使用单个命令行选项放宽对所有软件包的封装，将来只有使用–add-opens 打开特定的软件包才行。</li>
<li><strong>向量 API（孵化器）</strong>：该孵化器 API 提供了一个 API 的初始迭代以表达一些向量计算，这些计算在运行时可靠地编译为支持的 CPU 架构上的最佳向量硬件指令，从而获得优于同等标量计算的性能，充分利用单指令多数据（SIMD）技术（大多数现代 CPU 上都可以使用的一种指令）。尽管 HotSpot 支持自动向量化，但是可转换的标量操作集有限且易受代码更改的影响。该 API 将使开发人员能够轻松地用 Java 编写可移植的高性能向量算法。</li>
<li><strong>外部链接器 API（孵化器）</strong>：该孵化器 API 提供了静态类型、纯 Java 访问原生代码的特性，该 API 将大大简化绑定原生库的原本复杂且容易出错的过程。Java 1.1 就已通过 Java 原生接口（JNI）支持了原生方法调用，但并不好用。Java 开发人员应该能够为特定任务绑定特定的原生库。它还提供了外来函数支持，而无需任何中间的 JNI 粘合代码。</li>
<li><strong>外部存储器访问 API</strong>：在 Java 14 和 Java 15 中作为孵化器 API 引入的这个 API 使 Java 程序能够安全有效地对各种外部存储器（例如本机存储器、持久性存储器、托管堆存储器等）进行操作。它提供了外部链接器 API 的基础。</li>
<li><strong>启用 C++14 语言特性</strong> ：它允许在 JDK C++ 源代码中使用 C++14 语言特性，并提供在 HotSpot 代码中可以使用哪些特性的具体指导。在 JDK 15 中，JDK 中 C++ 代码使用的语言特性仅限于 C++98/03 语言标准。它要求更新各种平台编译器的最低可接受版本。</li>
<li><strong>AlpineLinux 移植；JEP 388，Windows/AArch64 移植</strong> ：这些 JEP 的重点不是移植工作本身，而是将它们集成到 JDK 主线存储库中；JEP 386 将 JDK 移植到 Alpine Linux 和其他使用 musl 作为 x64 上主要 C 库的发行版上。此外，JEP 388 将 JDK 移植到 Windows AArch64（ARM64）。</li>
</ul>
<h3> 参考文献</h3>
<ul>
<li><a href="https://docs.oracle.com/en/java/javase/16/language/java-language-changes.html" target="_blank" rel="noopener noreferrer">Java Language Changes</a></li>
<li><a href="https://www.oracle.com/java/technologies/javase/16all-relnotes.html" target="_blank" rel="noopener noreferrer">Consolidated JDK 16 Release Notes</a></li>
<li><a href="https://www.infoq.cn/article/IAkwhx7i9V7G8zLVEd4L" target="_blank" rel="noopener noreferrer">Java 16 正式发布，新特性一一解析</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java8 新特性实战</title>
    <id>https://topjf.github.io/java/new-features/java8-common-new-features.html</id>
    <link href="https://topjf.github.io/java/new-features/java8-common-new-features.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">本文来自cowbi (https://github.com/cowbi)的投稿~ Oracle 于 2014 发布了 Java8（jdk1.8），诸多原因使它成为目前市场上使用最多的 jdk 版本。虽然发布距今已将近 7 年，但很多程序员对其新特性还是不够了解，尤其是用惯了 Java8 之前版本的老程序员，比如我。 为了不脱离队伍太远，还是有必要对这些...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>Java8 新特性实战</h1>
<blockquote>
<p>本文来自<a href="https://github.com/cowbi" target="_blank" rel="noopener noreferrer">cowbi</a>的投稿~</p>
</blockquote>
<p>Oracle 于 2014 发布了 Java8（jdk1.8），诸多原因使它成为目前市场上使用最多的 jdk 版本。虽然发布距今已将近 7 年，但很多程序员对其新特性还是不够了解，尤其是用惯了 Java8 之前版本的老程序员，比如我。</p>
<p>为了不脱离队伍太远，还是有必要对这些新特性做一些总结梳理。它较 jdk.7 有很多变化或者说是优化，比如 interface 里可以有静态方法，并且可以有方法体，这一点就颠覆了之前的认知；<code>java.util.HashMap</code> 数据结构里增加了红黑树；还有众所周知的 Lambda 表达式等等。本文不能把所有的新特性都给大家一一分享，只列出比较常用的新特性给大家做详细讲解。更多相关内容请看<a href="https://www.oracle.com/java/technologies/javase/8-whats-new.html" target="_blank" rel="noopener noreferrer">官网关于 Java8 的新特性的介绍</a>。</p>
<h2> Interface</h2>
<p>interface 的设计初衷是面向抽象，提高扩展性。这也留有一点遗憾，Interface 修改的时候，实现它的类也必须跟着改。</p>
<p>为了解决接口的修改与现有的实现不兼容的问题。新 interface 的方法可以用<code>default</code> 或 <code>static</code>修饰，这样就可以有方法体，实现类也不必重写此方法。</p>
<p>一个 interface 中可以有多个方法被它们修饰，这 2 个修饰符的区别主要也是普通方法和静态方法的区别。</p>
<ol>
<li><code>default</code>修饰的方法，是普通实例方法，可以用<code>this</code>调用，可以被子类继承、重写。</li>
<li><code>static</code>修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用<code>Interface</code>调用。</li>
</ol>
<p>我们来看一个实际的例子。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有一个类既实现了 <code>InterfaceNew</code> 接口又实现了 <code>InterfaceNew1</code>接口，它们都有<code>def()</code>，并且 <code>InterfaceNew</code> 接口和 <code>InterfaceNew1</code>接口没有继承关系的话，这时就必须重写<code>def()</code>。不然的话，编译的时候就会报错。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在 Java 8 ，接口和抽象类有什么区别的？</strong></p>
<p>很多小伙伴认为：“既然 interface 也可以有自己的方法实现，似乎和 abstract class 没多大区别了。”</p>
<p>其实它们还是有区别的</p>
<ol>
<li>
<p>interface 和 class 的区别，好像是废话，主要有：</p>
<ul>
<li>接口多实现，类单继承</li>
<li>接口的方法是 public abstract 修饰，变量是 public static final 修饰。 abstract class 可以用其他修饰符</li>
</ul>
</li>
<li>
<p>interface 的方法是更像是一个扩展插件。而 abstract class 的方法是要继承的。</p>
</li>
</ol>
<p>开始我们也提到，interface 新增<code>default</code>和<code>static</code>修饰的方法，为了解决接口的修改与现有的实现不兼容的问题，并不是为了要替代<code>abstract class</code>。在使用上，该用 abstract class 的地方还是要用 abstract class，不要因为 interface 的新特性而将之替换。</p>
<p><strong>记住接口永远和类不一样。</strong></p>
<h2> functional interface 函数式接口</h2>
<p><strong>定义</strong>：也称 SAM 接口，即 Single Abstract Method interfaces，有且只有一个抽象方法，但可以有多个非抽象方法的接口。</p>
<p>在 java 8 中专门有一个包放函数式接口<code>java.util.function</code>，该包下的所有接口都有 <code>@FunctionalInterface</code> 注解，提供函数式编程。</p>
<p>在其他包中也有函数式接口，其中一些没有<code>@FunctionalInterface</code> 注解，但是只要符合函数式接口的定义就是函数式接口，与是否有</p>
<p><code>@FunctionalInterface</code>注解无关，注解只是在编译时起到强制规范定义的作用。其在 Lambda 表达式中有广泛的应用。</p>
<h2> Lambda 表达式</h2>
<p>接下来谈众所周知的 Lambda 表达式。它是推动 Java 8 发布的最重要新特性。是继泛型(<code>Generics</code>)和注解(<code>Annotation</code>)以来最大的变化。</p>
<p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。让 java 也能支持简单的<em>函数式编程</em>。</p>
<blockquote>
<p>Lambda 表达式是一个匿名函数，java 8 允许把函数作为参数传递进方法中。</p>
</blockquote>
<h3> 语法格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> Lambda 实战</h3>
<p>我们用常用的实例来感受 Lambda 带来的便利</p>
<h4> 替代匿名内部类</h4>
<p>过去给方法传动态参数的唯一方法是使用内部类。比如</p>
<p><strong>1.<code>Runnable</code> 接口</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.<code>Comparator</code> 接口</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.<code>Listener</code> 接口</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.自定义接口</strong></p>
<p>上面的 3 个例子是我们在开发过程中最常见的，从中也能体会到 Lambda 带来的便捷与清爽。它只保留实际用到的代码，把无用代码全部省略。那它对接口有没有要求呢？我们发现这些匿名内部类只重写了接口的一个方法，当然也只有一个方法须要重写。这就是我们上文提到的<strong>函数式接口</strong>，也就是说只要方法的参数是函数式接口都可以用 Lambda 表达式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们自定义一个函数式接口</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 集合迭代</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 方法的引用</h4>
<p>Java 8 允许使用 <code>::</code> 关键字来传递方法或者构造函数引用，无论如何，表达式返回的类型必须是 functional-interface。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 访问变量</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lambda 表达式可以引用外边变量，但是该变量默认拥有 final 属性，不能被修改，如果修改，编译时就报错。</p>
<h2> Stream</h2>
<p>java 新增了 <code>java.util.stream</code> 包，它和之前的流大同小异。之前接触最多的是资源流，比如<code>java.io.FileInputStream</code>，通过流把文件从一个地方输入到另一个地方，它只是内容搬运工，对文件内容不做任何<em>CRUD</em>。</p>
<p><code>Stream</code>依然不存储数据，不同的是它可以检索(Retrieve)和逻辑处理集合数据、包括筛选、排序、统计、计数等。可以想象成是 Sql 语句。</p>
<p>它的源数据可以是 <code>Collection</code>、<code>Array</code> 等。由于它的方法参数都是函数式接口类型，所以一般和 Lambda 配合使用。</p>
<h3> 流类型</h3>
<ol>
<li>stream 串行流</li>
<li>parallelStream 并行流，可多线程执行</li>
</ol>
<h3> 常用方法</h3>
<p>接下来我们看<code>java.util.stream.Stream</code>常用方法</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 实战</h3>
<p>本文列出 <code>Stream</code> 具有代表性的方法之使用，更多的使用方法还是要看 Api。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 延迟执行</h3>
<p>在执行返回 <code>Stream</code> 的方法时，并不立刻执行，而是等返回一个非 <code>Stream</code> 的方法后才执行。因为拿到 <code>Stream</code> 并不能直接用，而是需要处理成一个常规类型。这里的 <code>Stream</code> 可以想象成是二进制流（2 个完全不一样的东东），拿到也看不懂。</p>
<p>我们下面分解一下 <code>filter</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按执行顺序应该是先打印 4 次「<code>Predicate.test</code> 执行」，再打印「<code>count</code> 执行」。实际结果恰恰相反。说明 filter 中的方法并没有立刻执行，而是等调用<code>count()</code>方法后才执行。</p>
<p>上面都是串行 <code>Stream</code> 的实例。并行 <code>parallelStream</code> 在使用方法上和串行一样。主要区别是 <code>parallelStream</code> 可多线程执行，是基于 ForkJoin 框架实现的，有时间大家可以了解一下 <code>ForkJoin</code> 框架和 <code>ForkJoinPool</code>。这里可以简单的理解它是通过线程池来实现的，这样就会涉及到线程安全，线程消耗等问题。下面我们通过代码来体验一下并行流的多线程执行。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果中我们看到，for-each 用到的是多线程。</p>
<h3> 小结</h3>
<p>从源码和实例中我们可以总结出一些 stream 的特点</p>
<ol>
<li>通过简单的链式编程，使得它可以方便地对遍历处理后的数据进行再处理。</li>
<li>方法参数都是函数式接口类型</li>
<li>一个 Stream 只能操作一次，操作完就关闭了，继续使用这个 stream 会报错。</li>
<li>Stream 不保存数据，不改变数据源</li>
</ol>
<h2> Optional</h2>
<p>在<a href="https://share.weiyun.com/ThuqEbD5" target="_blank" rel="noopener noreferrer">阿里巴巴开发手册关于 Optional 的介绍</a>中这样写到：</p>
<blockquote>
<p>防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p>
<p>1） 返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。</p>
<p>反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。</p>
<p>2） 数据库的查询结果可能为 null。</p>
<p>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。</p>
<p>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</p>
<p>5） 对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针。</p>
<p>6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。</p>
<p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题。</p>
</blockquote>
<p>他建议使用 <code>Optional</code> 解决 NPE（<code>java.lang.NullPointerException</code>）问题，它就是为 NPE 而生的，其中可以包含空值或非空值。下面我们通过源码逐步揭开 <code>Optional</code> 的红盖头。</p>
<p>假设有一个 <code>Zoo</code> 类，里面有个属性 <code>Dog</code>，需求要获取 <code>Dog</code> 的 <code>age</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传统解决 NPE 的办法如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>层层判断对象非空，有人说这种方式很丑陋不优雅，我并不这么认为。反而觉得很整洁，易读，易懂。你们觉得呢？</p>
<p><code>Optional</code> 是这样的实现的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是简洁了很多呢？</p>
<h3> 如何创建一个 Optional</h3>
<p>上例中<code>Optional.ofNullable</code>是其中一种创建 Optional 的方式。我们先看一下它的含义和其他创建 Optional 的源码方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ofNullable</code> 方法和<code>of</code>方法唯一区别就是当 value 为 null 时，<code>ofNullable</code> 返回的是<code>EMPTY</code>，of 会抛出 <code>NullPointerException</code> 异常。如果需要把 <code>NullPointerException</code> 暴漏出来就用 <code>of</code>，否则就用 <code>ofNullable</code>。</p>
<h3> <code>map()</code>相关方法</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>map()</code> 和 <code>flatMap()</code> 有什么区别的？</strong></p>
<p><strong>1.参数不一样，<code>map</code> 的参数上面看到过，<code>flatMap</code> 的参数是这样</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.<code>flatMap()</code> 参数返回值如果是 null 会抛 <code>NullPointerException</code>，而 <code>map()</code> 返回<code>EMPTY</code>。</strong></p>
<h3> 判断 value 是否为 null</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取 value</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 过滤值</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 小结</h3>
<p>看完 <code>Optional</code> 源码，<code>Optional</code> 的方法真的非常简单，值得注意的是如果坚决不想看见 <code>NPE</code>，就不要用 <code>of()</code>、 <code>get()</code> 、<code>flatMap(..)</code>。最后再综合用一下 <code>Optional</code> 的高频方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> Date-Time API</h2>
<p>这是对<code>java.util.Date</code>强有力的补充，解决了 Date 类的大部分痛点：</p>
<ol>
<li>非线程安全</li>
<li>时区处理麻烦</li>
<li>各种格式化、和时间计算繁琐</li>
<li>设计有缺陷，Date 类同时包含日期和时间；还有一个 java.sql.Date，容易混淆。</li>
</ol>
<p>我们从常用的时间实例来对比 java.util.Date 和新 Date 有什么区别。用<code>java.util.Date</code>的代码该改改了。</p>
<h3> java.time 主要类</h3>
<p><code>java.util.Date</code> 既包含日期又包含时间，而  <code>java.time</code> 把它们进行了分离</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 格式化</h3>
<p><strong>Java 8 之前:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java 8 之后:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 字符串转日期格式</h3>
<p><strong>Java 8 之前:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java 8 之后:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java 8 之前</strong> 转换都需要借助 <code>SimpleDateFormat</code> 类，而<strong>Java 8 之后</strong>只需要 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>的  <code>of</code> 或 <code>parse</code> 方法。</p>
<h3> 日期计算</h3>
<p>下面仅以<strong>一周后日期</strong>为例，其他单位（年、月、日、1/2 日、时等等）大同小异。另外，这些单位都在 <em>java.time.temporal.ChronoUnit</em> 枚举中定义。</p>
<p><strong>Java 8 之前:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java 8 之后:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 获取指定日期</h3>
<p>除了日期计算繁琐，获取特定一个日期也很麻烦，比如获取本月最后一天，第一天。</p>
<p><strong>Java 8 之前:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Java 8 之后:</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>java.time.temporal.TemporalAdjusters</code> 里面还有很多便捷的算法，这里就不带大家看 Api 了，都很简单，看了秒懂。</p>
<h3> JDBC 和 java8</h3>
<p>现在 jdbc 时间类型和 java8 时间类型对应关系是</p>
<ol>
<li><code>Date</code> ---&gt; <code>LocalDate</code></li>
<li><code>Time</code> ---&gt; <code>LocalTime</code></li>
<li><code>Timestamp</code> ---&gt; <code>LocalDateTime</code></li>
</ol>
<p>而之前统统对应 <code>Date</code>，也只有 <code>Date</code>。</p>
<h3> 时区</h3>
<blockquote>
<p>时区：正式的时区划分为每隔经度 15° 划分一个时区，全球共 24 个时区，每个时区相差 1 小时。但为了行政上的方便，常将 1 个国家或 1 个省份划在一起，比如我国幅员宽广，大概横跨 5 个时区，实际上只用东八时区的标准时即北京时间为准。</p>
</blockquote>
<p><code>java.util.Date</code> 对象实质上存的是 1970 年 1 月 1 日 0 点（ GMT）至 Date 对象所表示时刻所经过的毫秒数。也就是说不管在哪个时区 new Date，它记录的毫秒数都一样，和时区无关。但在使用上应该把它转换成当地时间，这就涉及到了时间的国际化。<code>java.util.Date</code> 本身并不支持国际化，需要借助 <code>TimeZone</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在新特性中引入了  <code>java.time.ZonedDateTime</code> 来表示带时区的时间。它可以看成是 <code>LocalDateTime + ZoneId</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 小结</h3>
<p>通过上面比较新老 <code>Date</code> 的不同，当然只列出部分功能上的区别，更多功能还得自己去挖掘。总之 date-time-api 给日期操作带来了福利。在日常工作中遇到 date 类型的操作，第一考虑的是 date-time-api，实在解决不了再考虑老的 Date。</p>
<h2> 总结</h2>
<p>我们梳理总结的 java 8 新特性有</p>
<ul>
<li>Interface &amp; functional Interface</li>
<li>Lambda</li>
<li>Stream</li>
<li>Optional</li>
<li>Date time-api</li>
</ul>
<p>这些都是开发当中比较常用的特性。梳理下来发现它们真香，而我却没有更早的应用。总觉得学习 java 8 新特性比较麻烦，一直使用老的实现方式。其实这些新特性几天就可以掌握，一但掌握，效率会有很大的提高。其实我们涨工资也是涨的学习的钱，不学习终究会被淘汰，35 岁危机会提前来临。</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java8 指南中文翻译</title>
    <id>https://topjf.github.io/java/new-features/java8-tutorial-translate.html</id>
    <link href="https://topjf.github.io/java/new-features/java8-tutorial-translate.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">Java8指南 中文翻译 随着 Java 8 的普及度越来越高，很多人都提到面试中关于Java 8 也是非常常问的知识点。应各位要求和需要，我打算对这部分知识做一个总结。本来准备自己总结的，后面看到Github 上有一个相关的仓库，地址： https://github.com/winterbe/java8-tutorial (https://githu...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h2> Java8指南 中文翻译</h2>
<p>随着 Java 8 的普及度越来越高，很多人都提到面试中关于Java 8 也是非常常问的知识点。应各位要求和需要，我打算对这部分知识做一个总结。本来准备自己总结的，后面看到Github 上有一个相关的仓库，地址：
<a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="noopener noreferrer">https://github.com/winterbe/java8-tutorial</a>。这个仓库是英文的，我对其进行了翻译并添加和修改了部分内容，下面是正文。</p>
<hr>
<p>欢迎阅读我对Java 8的介绍。本教程将逐步指导您完成所有新语言功能。 在简短的代码示例的基础上，您将学习如何使用默认接口方法，lambda表达式，方法引用和可重复注释。</p>
<p>在本文的最后，您将熟悉最新的 API 更改，如流，函数式接口(Functional Interfaces)，Map 类的扩展和新的 Date API。 没有大段枯燥的文字，只有一堆注释的代码片段。</p>
<h3> 接口的默认方法(Default Methods for Interfaces)</h3>
<p>Java 8使我们能够通过使用 <code>default</code> 关键字向接口添加非抽象方法实现。 此功能也称为<a href="http://stackoverflow.com/a/24102730" target="_blank" rel="noopener noreferrer">虚拟扩展方法</a>。</p>
<p>第一个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Formula 接口中除了抽象方法计算接口公式还定义了默认方法 <code>sqrt</code>。 实现该接口的类只需要实现抽象方法 <code>calculate</code>。 默认方法<code>sqrt</code> 可以直接使用。当然你也可以直接通过接口创建对象，然后实现接口中的默认方法就可以了，我们通过代码演示一下这种方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>formula 是作为匿名对象实现的。该代码非常容易理解，6行代码实现了计算 <code>sqrt(a * 100)</code>。在下一节中，我们将会看到在 Java 8 中实现单个方法对象有一种更好更方便的方法。</p>
<p><strong>译者注：</strong> 不管是抽象类还是接口，都可以通过匿名内部类的方式访问。不能通过抽象类或者接口直接创建对象。对于上面通过匿名内部类方式访问接口，我们可以这样理解：一个内部类实现了接口里的抽象方法并且返回一个内部类对象，之后我们让接口的引用来指向这个对象。</p>
<h3> Lambda表达式(Lambda expressions)</h3>
<p>首先看看在老版本的Java中是如何排列字符串的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要给静态方法<code>Collections.sort</code> 传入一个 List 对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给 <code>sort</code> 方法。</p>
<p>在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，代码变得更短且更具有可读性，但是实际上还可以写得更短：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>List 类本身就有一个 <code>sort</code> 方法。并且Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。接下来我们看看lambda表达式还有什么其他用法。</p>
<h3> 函数式接口(Functional Interfaces)</h3>
<p><strong>译者注：</strong> 原文对这部分解释不太清楚，故做了修改！</p>
<p>Java 语言设计者们投入了大量精力来思考如何使现有的函数友好地支持Lambda。最终采取的方法是：增加函数式接口的概念。<strong>“函数式接口”是指仅仅只包含一个抽象方法,但是可以有多个非抽象方法(也就是上面提到的默认方法)的接口。</strong> 像这样的接口，可以被隐式转换为lambda表达式。<code>java.lang.Runnable</code> 与 <code>java.util.concurrent.Callable</code> 是函数式接口最典型的两个例子。Java 8增加了一种特殊的注解<code>@FunctionalInterface</code>,但是这个注解通常不是必须的(某些情况建议使用)，只要接口只包含一个抽象方法，虚拟机会自动判断该接口为函数式接口。一般建议在接口上使用<code>@FunctionalInterface</code> 注解进行声明，这样的话，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的，如下图所示</p>
<figure><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-2/@FunctionalInterface.png" alt="@FunctionalInterface 注解" tabindex="0" loading="lazy"><figcaption>@FunctionalInterface 注解</figcaption></figure>
<p>示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>译者注：</strong> 大部分函数式接口都不用我们自己写，Java8都给我们实现好了，这些接口都在java.util.function包里。</p>
<h3> 方法和构造函数引用(Method and Constructor References)</h3>
<p>前一节中的代码还可以通过静态方法引用来表示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 8允许您通过<code>::</code>关键字传递方法或构造函数的引用。 上面的示例显示了如何引用静态方法。 但我们也可以引用对象方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看看构造函数是如何使用<code>::</code>关键字来引用的，首先我们定义一个包含多个构造函数的简单类：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们指定一个用来创建Person对象的对象工厂接口：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用构造函数引用来将他们关联起来，而不是手动实现一个完整的工厂：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要使用 <code>Person::new</code> 来获取Person类构造函数的引用，Java编译器会自动根据<code>PersonFactory.create</code>方法的参数类型来选择合适的构造函数。</p>
<h3> Lambda 表达式作用域(Lambda Scopes)</h3>
<h4> 访问局部变量</h4>
<p>我们可以直接在 lambda 表达式中访问外部的局部变量：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这里的 num 必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 访问字段和静态变量</h4>
<p>与局部变量相比，我们对lambda表达式中的实例字段和静态变量都有读写访问权限。 该行为和匿名对象是一致的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 访问默认接口方法</h4>
<p>还记得第一节中的 formula 示例吗？ <code>Formula</code> 接口定义了一个默认方法<code>sqrt</code>，可以从包含匿名对象的每个 formula 实例访问该方法。 这不适用于lambda表达式。</p>
<p>无法从 lambda 表达式中访问默认方法,故以下代码无法编译：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 内置函数式接口(Built-in Functional Interfaces)</h3>
<p>JDK 1.8 API包含许多内置函数式接口。 其中一些接口在老版本的 Java 中是比较常见的比如： <code>Comparator</code> 或<code>Runnable</code>，这些接口都增加了<code>@FunctionalInterface</code>注解以便能用在 lambda 表达式上。</p>
<p>但是 Java 8 API 同样还提供了很多全新的函数式接口来让你的编程工作更加方便，有一些接口是来自 <a href="https://code.google.com/p/guava-libraries/" target="_blank" rel="noopener noreferrer">Google Guava</a> 库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。</p>
<h4> Predicate</h4>
<p>Predicate 接口是只有一个参数的返回布尔类型值的 <strong>断言型</strong> 接口。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）：</p>
<p><strong>译者注：</strong> Predicate 接口源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Function</h4>
<p>Function 接口接受一个参数并生成结果。默认方法可用于将多个函数链接在一起（compose, andThen）：</p>
<p><strong>译者注：</strong> Function  接口源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Supplier</h4>
<p>Supplier 接口产生给定泛型类型的结果。 与 Function 接口不同，Supplier 接口不接受参数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> Consumer</h4>
<p>Consumer 接口表示要对单个输入参数执行的操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> Comparator</h4>
<p>Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Optional</h2>
<p>Optional不是函数式接口，而是用于防止 NullPointerException 的漂亮工具。这是下一节的一个重要概念，让我们快速了解一下Optional的工作原理。</p>
<p>Optional 是一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是有时却什么也没有返回，而在Java 8中，你应该返回 Optional 而不是 null。</p>
<p>译者注：示例中每个方法的作用已经添加。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐阅读：<a href="https://blog.kaaass.net/archives/764" target="_blank" rel="noopener noreferrer">[Java8]如何正确使用Optional</a></p>
<h2> Streams(流)</h2>
<p><code>java.util.Stream</code> 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。Stream 的创建需要指定一个数据源，比如<code>java.util.Collection</code> 的子类，List 或者 Set， Map 不支持。Stream 的操作可以串行执行或者并行执行。</p>
<p>首先看看Stream是怎么用，首先创建实例代码需要用到的数据List：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 8扩展了集合类，可以通过 Collection.stream() 或者 Collection.parallelStream() 来创建一个Stream。下面几节将详细解释常用的Stream操作：</p>
<h3> Filter(过滤)</h3>
<p>过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于<strong>中间操作</strong>，所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）。forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>forEach 是为 Lambda 而设计的，保持了最紧凑的风格。而且 Lambda 表达式本身是可以重用的，非常方便。</p>
<h3> Sorted(排序)</h3>
<p>排序是一个 <strong>中间操作</strong>，返回的是排序好后的 Stream。<strong>如果你不指定一个自定义的 Comparator 则会使用默认排序。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，排序只创建了一个排列好后的Stream，而不会影响原有的数据源，排序之后原数据stringList是不会被修改的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> Map(映射)</h3>
<p>中间操作 map 会将元素根据指定的 Function 接口来依次将元素转成另外的对象。</p>
<p>下面的示例展示了将字符串转换为大写字符串。你也可以通过map来将对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Match(匹配)</h3>
<p>Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是 <strong>最终操作</strong> ，并返回一个 boolean 类型的值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Count(计数)</h3>
<p>计数是一个 <strong>最终操作</strong>，返回Stream中元素的个数，<strong>返回值类型是 long</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Reduce(规约)</h3>
<p>这是一个 <strong>最终操作</strong> ，允许通过指定的函数来将stream中的多个元素规约为一个元素，规约后的结果是通过Optional 接口表示的：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>译者注：</strong> 这个方法的主要作用是把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce。例如 Stream 的 sum 就相当于<code>Integer sum = integers.reduce(0, (a, b) -&gt; a+b);</code>也有没有起始值的情况，这时会把 Stream 的前面两个元素组合起来，返回的是 Optional。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码例如第一个示例的 reduce()，第一个参数（空白字符）即为起始值，第二个参数（String::concat）为 BinaryOperator。这类有起始值的 reduce() 都返回具体的对象。而对于第四个示例没有起始值的 reduce()，由于可能没有足够的元素，返回的是 Optional，请留意这个区别。更多内容查看： <a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html" target="_blank" rel="noopener noreferrer">IBM：Java 8 中的 Streams API 详解</a></p>
<h2> Parallel Streams(并行流)</h2>
<p>前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。</p>
<p>下面的例子展示了是如何通过并行Stream来提升性能：</p>
<p>首先我们创建一个没有重复元素的大表：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们分别用串行和并行两种方式对其进行排序，最后看看所用时间的对比。</p>
<h3> Sequential Sort(串行排序)</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> Parallel Sort(并行排序)</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个代码几乎是一样的，但是并行版的快了 50% 左右，唯一需要做的改动就是将 <code>stream()</code> 改为<code>parallelStream()</code>。</p>
<h2> Maps</h2>
<p>前面提到过，Map 类型不支持 streams，不过Map提供了一些新的有用的方法来处理一些日常任务。Map接口本身没有可用的 <code>stream()</code>方法，但是你可以在键，值上创建专门的流或者通过 <code>map.keySet().stream()</code>,<code>map.values().stream()</code>和<code>map.entrySet().stream()</code>。</p>
<p>此外,Maps 支持各种新的和有用的方法来执行常见任务。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>putIfAbsent</code> 阻止我们在null检查时写入额外的代码;<code>forEach</code>接受一个 consumer 来对 map 中的每个元素操作。</p>
<p>此示例显示如何使用函数在 map 上计算代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来展示如何在Map里删除一个键值全都匹配的项：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一个有用的方法：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对Map的元素做合并也变得很容易了：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Merge 做的事情是如果键名不存在则插入，否则对原键对应的值做合并操作并重新插入到map中。</p>
<h2> Date API(日期相关API)</h2>
<p>Java 8在 <code>java.time</code> 包下包含一个全新的日期和时间API。新的Date API与Joda-Time库相似，但它们不一样。以下示例涵盖了此新 API 的最重要部分。译者对这部分内容参考相关书籍做了大部分修改。</p>
<p><strong>译者注(总结)：</strong></p>
<ul>
<li>
<p>Clock 类提供了访问当前日期和时间的方法，Clock 是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。某一个特定的时间点也可以使用 <code>Instant</code> 类来表示，<code>Instant</code> 类也可以用来创建旧版本的<code>java.util.Date</code> 对象。</p>
</li>
<li>
<p>在新API中时区使用 ZoneId 来表示。时区可以很方便的使用静态方法of来获取到。 抽象类<code>ZoneId</code>（在<code>java.time</code>包中）表示一个区域标识符。 它有一个名为<code>getAvailableZoneIds</code>的静态方法，它返回所有区域标识符。</p>
</li>
<li>
<p>jdk1.8中新增了 LocalDate 与 LocalDateTime等类来解决日期处理方法，同时引入了一个新的类DateTimeFormatter 来解决日期格式化问题。可以使用Instant代替 Date，LocalDateTime代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat。</p>
</li>
</ul>
<h3> Clock</h3>
<p>Clock 类提供了访问当前日期和时间的方法，Clock 是时区敏感的，可以用来取代 <code>System.currentTimeMillis()</code> 来获取当前的微秒数。某一个特定的时间点也可以使用 <code>Instant</code> 类来表示，<code>Instant</code> 类也可以用来创建旧版本的<code>java.util.Date</code> 对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Timezones(时区)</h3>
<p>在新API中时区使用 ZoneId 来表示。时区可以很方便的使用静态方法of来获取到。 抽象类<code>ZoneId</code>（在<code>java.time</code>包中）表示一个区域标识符。 它有一个名为<code>getAvailableZoneIds</code>的静态方法，它返回所有区域标识符。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> LocalTime(本地时间)</h3>
<p>LocalTime 定义了一个没有时区信息的时间，例如 晚上10点或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串.</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> LocalDate(本地日期)</h3>
<p>LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从字符串解析一个 LocalDate 类型和解析 LocalTime 一样简单,下面是使用  <code>DateTimeFormatter</code> 解析字符串的例子：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看一个使用 <code>DateTimeFormatter</code> 格式化日期的示例</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>🐛 修正（参见： <a href="https://github.com/Snailclimb/JavaGuide/issues/1157" target="_blank" rel="noopener noreferrer">issue#1157</a>）</strong>：使用 <code>YYYY</code> 显示年份时，会显示当前时间所在周的年份，在跨年周会有问题。一般情况下都使用 <code>yyyy</code>，来显示准确的年份。</p>
<p>跨年导致日期显示错误示例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下图可以更清晰的看到具体的错误，并且 IDEA 已经智能地提示更倾向于使用  <code>yyyy</code> 而不是  <code>YYYY</code> 。</p>
<figure><img src="https://img-blog.csdnimg.cn/2021042717491413.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> LocalDateTime(本地日期时间)</h3>
<p>LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime 和 LocalTime还有 LocalDate 一样，都是不可变的。LocalDateTime 提供了一些能访问具体字段的方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要附加上时区信息，就可以将其转换为一个时间点Instant对象，Instant时间点对象可以很容易的转换为老式的<code>java.util.Date</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>格式化LocalDateTime和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和java.text.NumberFormat不一样的是新版的DateTimeFormatter是不可变的，所以它是线程安全的。
关于时间日期格式的详细信息在<a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html" target="_blank" rel="noopener noreferrer">这里</a>。</p>
<h2> Annotations(注解)</h2>
<p>在Java 8中支持多重注解了，先看个例子来理解一下是什么意思。
首先定义一个包装类Hints注解用来放置一组具体的Hint注解：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 8允许我们把同一个类型的注解使用多次，只需要给该注解标注一下<code>@Repeatable</code>即可。</p>
<p>例 1: 使用包装类当容器来存多个注解（老方法）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例 2：使用多重注解（新方法）</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个例子里java编译器会隐性的帮你定义好@Hints注解，了解这一点有助于你用反射来获取这些信息：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即便我们没有在 <code>Person</code>类上定义 <code>@Hints</code>注解，我们还是可以通过 <code>getAnnotation(Hints.class)</code>来获取 <code>@Hints</code>注解，更加方便的方法是使用 <code>getAnnotationsByType</code> 可以直接获取到所有的<code>@Hint</code>注解。
另外Java 8的注解还增加到两种新的target上了：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> Where to go from here?</h2>
<p>关于Java 8的新特性就写到这了，肯定还有更多的特性等待发掘。JDK 1.8里还有很多很有用的东西，比如<code>Arrays.parallelSort</code>, <code>StampedLock</code>和<code>CompletableFuture</code>等等。</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">Java 9 新特性概览</title>
    <id>https://topjf.github.io/java/new-features/java9.html</id>
    <link href="https://topjf.github.io/java/new-features/java9.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">Java 9 发布于 2017 年 9 月 21 日 。作为 Java 8 之后 3 年半才发布的新版本，Java 9 带来了很多重大的变化其中最重要的改动是 Java 平台模块系统的引入，其他还有诸如集合、Stream 流......。 你可以在 Archived OpenJDK General-Availability Releases (http...</summary>
    <content type="html"><![CDATA[<!-- more -->
<p><strong>Java 9</strong> 发布于 2017 年 9 月 21 日 。作为 Java 8 之后 3 年半才发布的新版本，Java 9 带来了很多重大的变化其中最重要的改动是 Java 平台模块系统的引入，其他还有诸如集合、<code>Stream</code> 流......。</p>
<p>你可以在 <a href="http://jdk.java.net/archive/" target="_blank" rel="noopener noreferrer">Archived OpenJDK General-Availability Releases</a> 上下载自己需要的 JDK 版本！官方的新特性说明文档地址： <a href="https://openjdk.java.net/projects/jdk/" target="_blank" rel="noopener noreferrer">https://openjdk.java.net/projects/jdk/</a> 。</p>
<p><strong>概览（精选了一部分）</strong> ：</p>
<ul>
<li><a href="https://openjdk.java.net/jeps/222" target="_blank" rel="noopener noreferrer">JEP 222: Java 命令行工具</a></li>
<li><a href="https://openjdk.java.net/jeps/261" target="_blank" rel="noopener noreferrer">JEP 261: 模块化系统</a></li>
<li><a href="https://openjdk.java.net/jeps/248" target="_blank" rel="noopener noreferrer">JEP 248：G1 成为默认垃圾回收器</a></li>
<li><a href="https://openjdk.java.net/jeps/193" target="_blank" rel="noopener noreferrer">JEP 193: 变量句柄</a></li>
<li><a href="https://openjdk.java.net/jeps/254" target="_blank" rel="noopener noreferrer">JEP 254：字符串存储结构优化</a></li>
</ul>
<h2> JShell</h2>
<p>JShell 是 Java 9 新增的一个实用工具。为 Java 提供了类似于 Python 的实时命令行交互工具。</p>
<p>在 JShell 中可以直接输入表达式并查看其执行结果。</p>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/image-20210816083417616.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>JShell 为我们带来了哪些好处呢？</strong></p>
<ol>
<li>降低了输出第一行 Java 版"Hello World！"的门槛，能够提高新手的学习热情。</li>
<li>在处理简单的小逻辑，验证简单的小问题时，比 IDE 更有效率（并不是为了取代 IDE，对于复杂逻辑的验证，IDE 更合适，两者互补）。</li>
<li>......</li>
</ol>
<p><strong>JShell 的代码和普通的可编译代码，有什么不一样？</strong></p>
<ol>
<li>一旦语句输入完成，JShell 立即就能返回执行的结果，而不再需要编辑器、编译器、解释器。</li>
<li>JShell 支持变量的重复声明，后面声明的会覆盖前面声明的。</li>
<li>JShell 支持独立的表达式比如普通的加法运算 <code>1 + 1</code>。</li>
<li>......</li>
</ol>
<h2> 模块化系统</h2>
<p>模块系统是<a href="https://openjdk.java.net/projects/jigsaw/" target="_blank" rel="noopener noreferrer">Jigsaw Project</a>的一部分，把模块化开发实践引入到了 Java 平台中，可以让我们的代码可重用性更好！</p>
<p><strong>什么是模块系统？</strong> 官方的定义是：</p>
<blockquote>
<p>A uniquely named, reusable group of related packages, as well as resources (such as images and XML files) and a module descriptor。</p>
</blockquote>
<p>简单来说，你可以将一个模块看作是一组唯一命名、可重用的包、资源和模块描述文件（<code>module-info.java</code>）。</p>
<p>任意一个 jar 文件，只要加上一个模块描述文件（<code>module-info.java</code>），就可以升级为一个模块。</p>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/module-structure.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>在引入了模块系统之后，JDK 被重新组织成 94 个模块。Java 应用可以通过新增的 <strong><a href="http://openjdk.java.net/jeps/282" target="_blank" rel="noopener noreferrer">jlink</a> 工具</strong> (Jlink 是随 Java 9 一起发布的新命令行工具。它允许开发人员为基于模块的 Java 应用程序创建自己的轻量级、定制的 JRE)，创建出只包含所依赖的 JDK 模块的自定义运行时镜像。这样可以极大的减少 Java 运行时环境的大小。</p>
<p>我们可以通过 <code>exports</code> 关键词精准控制哪些类可以对外开放使用，哪些类只能内部使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要深入了解 Java 9 的模块化，可以参考下面这几篇文章：</p>
<ul>
<li><a href="https://openjdk.java.net/projects/jigsaw/quick-start" target="_blank" rel="noopener noreferrer">《Project Jigsaw: Module System Quick-Start Guide》</a></li>
<li><a href="https://stacktraceguru.com/java9/module-introduction" target="_blank" rel="noopener noreferrer">《Java 9 Modules: part 1》</a></li>
<li>[<a href="https://www.cnblogs.com/IcanFixIt/p/6947763.html" target="_blank" rel="noopener noreferrer">Java 9 揭秘（2. 模块化系统）</a>](<a href="http://www.cnblogs.com/IcanFixIt/p/6947763.html" target="_blank" rel="noopener noreferrer">http://www.cnblogs.com/IcanFixIt/p/6947763.html</a>)</li>
</ul>
<h2> G1 成为默认垃圾回收器</h2>
<p>在 Java 8 的时候，默认垃圾回收器是 Parallel Scavenge（新生代）+Parallel Old（老年代）。到了 Java 9, CMS 垃圾回收器被废弃了，<strong>G1（Garbage-First Garbage Collector）</strong>  成为了默认垃圾回收器。</p>
<p>G1 还是在 Java 7 中被引入的，经过两个版本优异的表现成为成为默认垃圾回收器。</p>
<h2> 快速创建不可变集合</h2>
<p>增加了<code>List.of()</code>、<code>Set.of()</code>、<code>Map.of()</code> 和 <code>Map.ofEntries()</code>等工厂方法来创建不可变集合（有点参考 Guava 的味道）：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>of()</code> 创建的集合为不可变集合，不能进行添加、删除、替换、 排序等操作，不然会报 <code>java.lang.UnsupportedOperationException</code> 异常。</p>
<h2> String 存储结构优化</h2>
<p>Java 8 及之前的版本，<code>String</code> 一直是用 <code>char[]</code> 存储。在 Java 9 之后，<code>String</code> 的实现改用 <code>byte[]</code> 数组存储字符串，节省了空间。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 接口私有方法</h2>
<p>Java 9 允许在接口中使用私有方法。这样的话，接口的使用就更加灵活了，有点像是一个简化版的抽象类。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> try-with-resources 增强</h2>
<p>在 Java 9 之前，我们只能在 <code>try-with-resources</code> 块中声明变量：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 9 之后，在 <code>try-with-resources</code> 语句中可以使用 effectively-final 变量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>什么是 effectively-final 变量？</strong> 简单来说就是没有被 <code>final</code> 修饰但是值在初始化后从未更改的变量。</p>
<p>正如上面的代码所演示的那样，即使 <code>writer</code> 变量没有被显示声明为 <code>final</code>，但它在第一次被复制后就不会改变了，因此，它就是 effectively-final 变量。</p>
<h2> Stream &amp; Optional 增强</h2>
<p><code>Stream</code> 中增加了新的方法 <code>ofNullable()</code>、<code>dropWhile()</code>、<code>takeWhile()</code> 以及 <code>iterate()</code> 方法的重载方法。</p>
<p>Java 9 中的 <code>ofNullable()</code> 方 法允许我们创建一个单元素的 <code>Stream</code>，可以包含一个非空元素，也可以创建一个空 <code>Stream</code>。 而在 Java 8 中则不可以创建空的 <code>Stream</code> 。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>takeWhile()</code> 方法可以从 <code>Stream</code> 中依次获取满足条件的元素，直到不满足条件为止结束获取。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dropWhile()</code> 方法的效果和 <code>takeWhile()</code> 相反。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>iterate()</code> 方法的新重载方法提供了一个 <code>Predicate</code> 参数 (判断条件)来决定什么时候结束迭代</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者的使用对比如下，新的 <code>iterate()</code> 重载方法更加灵活一些。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Optional</code> 类中新增了 <code>ifPresentOrElse()</code>、<code>or()</code> 和 <code>stream()</code> 等方法</p>
<p><code>ifPresentOrElse()</code> 方法接受两个参数 <code>Consumer</code> 和 <code>Runnable</code> ，如果 <code>Optional</code> 不为空调用 <code>Consumer</code> 参数，为空则调用 <code>Runnable</code> 参数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>or()</code> 方法接受一个 <code>Supplier</code> 参数 ，如果 <code>Optional</code> 为空则返回 <code>Supplier</code> 参数指定的 <code>Optional</code> 值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 进程 API</h2>
<p>Java 9 增加了 <code>java.lang.ProcessHandle</code> 接口来实现对原生进程进行管理，尤其适合于管理长时间运行的进程。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ProcessHandle</code> 接口概览：</p>
<figure><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/image-20210816104614414.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 响应式流 （ Reactive Streams ）</h2>
<p>在 Java 9 中的 <code>java.util.concurrent.Flow</code> 类中新增了反应式流规范的核心接口 。</p>
<p><code>Flow</code> 中包含了 <code>Flow.Publisher</code>、<code>Flow.Subscriber</code>、<code>Flow.Subscription</code> 和 <code>Flow.Processor</code> 等 4 个核心接口。Java 9 还提供了<code>SubmissionPublisher</code> 作为<code>Flow.Publisher</code> 的一个实现。</p>
<p>关于 Java 9 响应式流更详细的解读，推荐你看 <a href="https://www.cnblogs.com/IcanFixIt/p/7245377.html" target="_blank" rel="noopener noreferrer">Java 9 揭秘（17. Reactive Streams ）- 林本托</a> 这篇文章。</p>
<h2> 变量句柄</h2>
<p>变量句柄是一个变量或一组变量的引用，包括静态域，非静态域，数组元素和堆外数据结构中的组成部分等。</p>
<p>变量句柄的含义类似于已有的方法句柄 <code>MethodHandle</code> ，由 Java 类 <code>java.lang.invoke.VarHandle</code> 来表示，可以使用类 <code>java.lang.invoke.MethodHandles.Lookup</code> 中的静态工厂方法来创建 <code>VarHandle</code> 对象。</p>
<p><code>VarHandle</code> 的出现替代了 <code>java.util.concurrent.atomic</code> 和 <code>sun.misc.Unsafe</code> 的部分操作。并且提供了一系列标准的内存屏障操作，用于更加细粒度的控制内存排序。在安全性、可用性、性能上都要优于现有的 API。</p>
<h2> 其它</h2>
<ul>
<li><strong>平台日志 API 改进</strong> ： Java 9 允许为 JDK 和应用配置同样的日志实现。新增了 <code>System.LoggerFinder</code> 用来管理 JDK 使 用的日志记录器实现。JVM 在运行时只有一个系统范围的 <code>LoggerFinder</code> 实例。我们可以通过添加自己的 <code>System.LoggerFinder</code> 实现来让 JDK 和应用使用 SLF4J 等其他日志记录框架。</li>
<li><strong><code>CompletableFuture</code>类增强</strong> ：新增了几个新的方法（<code>completeAsync</code> ，<code>orTimeout</code> 等）。</li>
<li><strong>Nashorn 引擎的增强</strong> ：Nashorn 从 Java8 开始引入的 JavaScript 引擎，Java9 对 Nashorn 做了些增强，实现了一些 ES6 的新特性（Java 11 中已经被弃用）。</li>
<li><strong>I/O 流的新特性</strong> ：增加了新的方法来读取和复制 <code>InputStream</code> 中包含的数据。</li>
<li><strong>改进应用的安全性能</strong> ：Java 9 新增了 4 个 SHA- 3 哈希算法，SHA3-224、SHA3-256、SHA3-384 和 SHA3-512。</li>
<li><strong>改进方法句柄（Method Handle）</strong> ：方法句柄从 Java7 开始引入，Java9 在类<code>java.lang.invoke.MethodHandles</code> 中新增了更多的静态方法来创建不同类型的方法句柄。</li>
<li>......</li>
</ul>
<h2> 参考</h2>
<ul>
<li>Java version history：<a href="https://en.wikipedia.org/wiki/Java_version_history" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Java_version_history</a></li>
<li>Release Notes for JDK 9 and JDK 9 Update Releases : <a href="https://www.oracle.com/java/technologies/javase/9-all-relnotes.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase/9-all-relnotes.html</a></li>
<li>《深入剖析 Java 新特性》-极客时间 - JShell：怎么快速验证简单的小问题？</li>
<li>New Features in Java 9:<a href="https://www.baeldung.com/new-java-9" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/new-java-9</a></li>
<li>Java – Try with Resources：<a href="https://www.baeldung.com/java-try-with-resources" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/java-try-with-resources</a></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Java"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-12-16T06:02:03.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible安装与基础概念</title>
    <id>https://topjf.github.io/linux/ansible/ansible-basis.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-basis.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">ansible 中文指南 (http://ansible.com.cn/docs/intro.html) 本节示例文件 提取码：1234 (https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg) 虚拟机主机分配 8+2+200G 控制端-admin：192.168.0.118 被控制端-n1：192.168.0...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible安装与基础概念</h1>
<p><a href="http://ansible.com.cn/docs/intro.html" target="_blank" rel="noopener noreferrer">ansible 中文指南</a></p>
<p><a href="https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg" target="_blank" rel="noopener noreferrer">本节示例文件 提取码：1234</a></p>
<h2> 虚拟机主机分配</h2>
<p>8+2+200G</p>
<p>控制端-admin：192.168.0.118</p>
<p>被控制端-n1：192.168.0.8</p>
<p>被控制端-n2：192.168.0.9</p>
<p>被控制端-n3：192.168.0.10</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 一、安装</h2>
<p>依赖</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要在主控制端安装：<code>yum install -y ansible</code>   yum remove -y ansible</p>
<p>ansible --version ： 2.9.27</p>
<h3> 目录结构</h3>
<p>安装目录如下(yum安装)：</p>
<p>配置文件目录：/etc/ansible/【hosts、ansible、roles】</p>
<p>执行文件目录：/usr/bin/ansible*</p>
<p>Lib库依赖目录：/usr/lib/pythonX.X/site-packages/ansible/</p>
<p>Help文档目录：/usr/share/doc/ansible-X.X.X/</p>
<p>Man文档目录：/usr/share/man/man1/</p>
<h3> 赋予普通用户权限</h3>
<p>将a用户添加到root组：usermod -aG root a</p>
<p>赋予a用户对ansible的权限管理：chmod -R 755 /etc/ansible</p>
<p>赋予a用户对ansible的所属组管理：chown -R root:a  /etc/ansible</p>
<h2> 二、概念</h2>
<p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。</p>
<h3> ansible能做什么？</h3>
<p>正如其他配置管理工具一样，ansible可以帮助我们完成一些批量任务，或者完成一些需要经常重复的工作。</p>
<p>比如：同时在100台服务器上安装nginx服务，并在安装后启动它们。</p>
<p>比如：将某个文件一次性拷贝到100台服务器上。</p>
<p>比如：每当有新服务器加入工作环境时，你都要为新服务器部署redis服务，也就是说你需要经常重复的完成相同的工作。</p>
<h3> 特点</h3>
<ol>
<li>部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；</li>
<li>默认使用SSH协议对设备进行管理；</li>
<li>有大量常规运维操作模块，可实现日常绝大部分操作；</li>
<li>配置简单、功能强大、扩展性强；</li>
<li>支持API及自定义模块，可通过Python轻松扩展；</li>
<li>通过Playbooks来定制强大的配置、状态管理；</li>
<li>轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</li>
<li>提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。</li>
</ol>
<h3> 架构图</h3>
<figure><figcaption></figcaption></figure>
<h3> 主要模块</h3>
<p><code>Ansible</code>：Ansible核心程序。</p>
<p><code>HostInventory</code>：记录由Ansible管理的主机信息，包括端口、密码、ip等。</p>
<p><code>Playbooks</code>：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。</p>
<p><code>CoreModules</code>：<strong>核心模块</strong>，主要操作是通过调用核心模块来完成管理任务。</p>
<p><code>CustomModules</code>：自定义模块，完成核心模块无法完成的功能，支持多种语言。</p>
<p><code>ConnectionPlugins</code>：连接插件，Ansible和Host通信使用</p>
<h3> 任务执行</h3>
<h4> ansible 任务执行模式</h4>
<p>Ansible 系统由控制主机对被管节点的操作方式可分为两类，即<code>adhoc</code>和<code>playbook</code>：</p>
<ul>
<li>ad-hoc模式(点对点模式)
　使用单个模块，支持批量执行单条命令。ad-hoc 命令是一种可以快速输入的命令，而且不需要保存起来的命令。<strong>就相当于bash中的一句话shell。</strong></li>
<li>playbook模式(剧本模式)
　是Ansible主要管理方式，也是Ansible功能强大的关键所在。<strong>playbook通过多个task集合完成一类功能</strong>，如Web服务的安装部署、数据库服务器的批量备份等。可以简单地把playbook理解为通过组合多条ad-hoc操作的配置文件。</li>
</ul>
<h4> 任务流程</h4>
<figure><figcaption></figcaption></figure>
<p>简单理解就是Ansible在运行时， 首先读取<code>ansible.cfg</code>中的配置， 根据规则获取<code>Inventory</code>中的管理主机列表， 并行的在这些主机中执行配置的任务， 最后等待执行返回的结果。</p>
<h4> 命令执行过程</h4>
<ol>
<li>加载自己的配置文件，默认<code>/etc/ansible/ansible.cfg</code>；</li>
<li>查找对应的主机配置文件，找到要执行的主机或者组；</li>
<li>加载自己对应的模块文件，如 command；</li>
<li>通过ansible将模块或命令生成对应的临时py文件(python脚本)， 并将该文件传输至远程服务器；</li>
<li>对应执行用户的家目录的<code>.ansible/tmp/XXX/XXX.PY</code>文件；</li>
<li>给文件 +x 执行权限；</li>
<li>执行并返回结果；</li>
<li>删除临时py文件，<code>sleep 0</code>退出；</li>
</ol>
<h2> 三、配置</h2>
<h3> 配置文件查找顺序</h3>
<p>ansible与我们其他的服务在这一点上有很大不同，这里的配置文件查找是从多个地方找的，顺序如下：</p>
<ol>
<li>检查环境变量<code>ANSIBLE_CONFIG</code>指向的路径文件(export ANSIBLE_CONFIG=/etc/ansible.cfg)；</li>
<li><code>~/.ansible.cfg</code>，检查当前目录下的ansible.cfg配置文件；</li>
<li><code>/etc/ansible.cfg</code>检查etc目录的配置文件。</li>
</ol>
<h3> ansible 配置文件</h3>
<p>ansible 的配置文件为<code>/etc/ansible/ansible.cfg</code>，常见的参数：</p>
<div class="language-ini line-numbers-mode" data-ext="ini"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ansible 主机清单 inventory</h3>
<p>vim /etc/ansible/hosts</p>
<p>在配置文件中，里面保存的是一些 ansible 需要连接管理的主机列表。我们可以来看看他的定义方式：</p>
<p>[root@admin ~]# vim /etc/ansible/hosts</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方括号 []</strong> 是组名,用于对系统进行分类,便于对不同系统进行个别的管理.</p>
<p>一个系统可以属于不同的组,比如一台服务器可以同时属于 webserver组 和 dbserver组.这时属于两个组的变量都可以为这台主机所用</p>
<h2> 四、ansible 常用命令</h2>
<h3> ansible 命令集</h3>
<p><code>/usr/bin/ansible</code>　　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行</p>
<p><code>/usr/bin/ansible-doc</code> 　　Ansible 模块功能查看工具</p>
<p><code>/usr/bin/ansible-galaxy</code>　　下载/上传优秀代码或Roles模块 的官网平台，基于网络的</p>
<p><code>/usr/bin/ansible-playbook</code>　　Ansible 定制自动化的任务集编排工具</p>
<p><code>/usr/bin/ansible-pull</code>　　Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高）</p>
<p><code>/usr/bin/ansible-vault</code>　　Ansible 文件加密工具</p>
<p><code>/usr/bin/ansible-console</code>　　Ansible基于Linux Consoble界面可与用户交互的命令执行工具</p>
<p>其中，我们比较常用的是<code>/usr/bin/ansible</code>和<code>/usr/bin/ansible-playbook</code>。</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-29T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible-doc模块功能查看工具</title>
    <id>https://topjf.github.io/linux/ansible/ansible-doc.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-doc.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">ansible 中文指南 (http://ansible.com.cn/docs/intro.html) 本节示例文件 提取码：1234 (https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg) ansible-doc</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible-doc模块功能查看工具</h1>
<p><a href="http://ansible.com.cn/docs/intro.html" target="_blank" rel="noopener noreferrer">ansible 中文指南</a></p>
<p><a href="https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg" target="_blank" rel="noopener noreferrer">本节示例文件 提取码：1234</a></p>
<h2> ansible-doc</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-29T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible安装docker</title>
    <id>https://topjf.github.io/linux/ansible/ansible-docker.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-docker.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">设置主机清单 vim /etc/ansible/hosts ① 在roles目录下生成对应的目录结构 ② 定义 tasks 任务文件 vim /etc/ansible/roles/docker/tasks/main.yml install.yml start.yml stop.yml restart.yml status.yml reload.yml ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible安装docker</h1>
<h2> 设置主机清单 <code>vim /etc/ansible/hosts</code></h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> ① 在<code>roles</code>目录下生成对应的目录结构</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ② 定义 tasks 任务文件</h3>
<p>vim /etc/ansible/roles/docker/tasks/main.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>install.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>start.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>stop.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>restart.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>status.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>reload.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>uninstall.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>ansible-playbook ./docker/tasks/uninstall.yml</p>
</blockquote>
<h3> ③ 编写安装 shell 脚本</h3>
<p>vim files/install_docker.sh</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ③ 定义 vars 变量文件</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ④ 定义 docker 剧本文件</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ⑥ 启动剧本</h3>
<p>剧本定义完成以后，我们就可以来启动服务了：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>节点监控进度</p>
<p>tail -f /root/install-docker.log</p>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-30T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible-galaxy</title>
    <id>https://topjf.github.io/linux/ansible/ansible-galaxy.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-galaxy.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">ansible 中文指南 (http://ansible.com.cn/docs/intro.html) 本节示例文件 提取码：1234 (https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg) 语法 ansible-galaxy (https://galaxy.ansible.com/) ：是一个免费的用于查...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible-galaxy</h1>
<p><a href="http://ansible.com.cn/docs/intro.html" target="_blank" rel="noopener noreferrer">ansible 中文指南</a></p>
<p><a href="https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg" target="_blank" rel="noopener noreferrer">本节示例文件 提取码：1234</a></p>
<h2> 语法</h2>
<p><a href="https://galaxy.ansible.com/" target="_blank" rel="noopener noreferrer">ansible-galaxy</a> ：是一个免费的用于查找，下载，评论各种社区开发的 Ansible 角色</p>
<p><a href="https://docs.ansible.com/ansible/latest/cli/ansible-galaxy.html" target="_blank" rel="noopener noreferrer">ansible-galax语法</a></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>collection</p>
<ul>
<li>collection init 初始化集合</li>
<li>collection build 构建集合</li>
<li>collection publish 发布集合</li>
<li>collection install 安装</li>
</ul>
</li>
<li>
<p>role</p>
<ul>
<li>role init 初始化角色</li>
<li>role remove 删除</li>
<li>role delete 删除</li>
<li>role list 角色列表</li>
<li>role search 搜索</li>
<li>role import 导入</li>
<li>role setup 设置</li>
<li>role info 信息</li>
<li>role install 安装</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-29T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible安装jdk</title>
    <id>https://topjf.github.io/linux/ansible/ansible-jdk.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-jdk.html"/>
    <updated>2023-02-28T09:03:15.000Z</updated>
    <summary type="text">-</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible安装jdk</h1>
<ul>
<li></li>
</ul>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-30T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible安装mysql</title>
    <id>https://topjf.github.io/linux/ansible/ansible-mysql.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-mysql.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">设置主机清单 vim /etc/ansible/hosts ① 在roles目录下生成对应的目录结构 ② 定义 tasks 任务文件 wget vim /etc/ansible/roles/mysql/tasks/main.yml install.yml ③ 编写安装 shell 脚本 vim files/uni_mysql.sh rpm -qa | ...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible安装mysql</h1>
<h2> 设置主机清单 <code>vim /etc/ansible/hosts</code></h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> ① 在<code>roles</code>目录下生成对应的目录结构</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ② 定义 tasks 任务文件</h3>
<p>wget <a href="http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm" target="_blank" rel="noopener noreferrer">http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm</a></p>
<p>vim /etc/ansible/roles/mysql/tasks/main.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>install.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ③ 编写安装 shell 脚本</h3>
<p>vim files/uni_mysql.sh</p>
<p><code>rpm -qa | grep java</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ③ 定义 mysql 剧本文件</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ④ 启动剧本</h3>
<p>剧本定义完成以后，我们就可以来启动服务了：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>校验：ansible mysql -m shell -a 'java -version'</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-30T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible安装nginx</title>
    <id>https://topjf.github.io/linux/ansible/ansible-nginx.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-nginx.html"/>
    <updated>2023-03-01T14:06:04.000Z</updated>
    <summary type="text">① 在roles目录下生成对应的目录结构 可以使用 ansible-galaxy role init xxx 来实现目录的自动创建，结构跟上面一样 准备 nginx.conf.j2 配置文件 ② 定义 tasks 任务文件 rpm包下载： wget chmod -R 777 nginx-1.22.0-1.el7.ngx.x86_64.rpm vim /...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible安装nginx</h1>
<h2> ① 在<code>roles</code>目录下生成对应的目录结构</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以使用 ansible-galaxy role init xxx 来实现目录的自动创建，结构跟上面一样</strong></p>
<h2> 准备 nginx.conf.j2 配置文件</h2>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ②  定义 tasks 任务文件</h2>
<p>rpm包下载：</p>
<blockquote>
<p>wget <a href="http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.0-1.el7.ngx.x86_64.rpm" target="_blank" rel="noopener noreferrer">http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.0-1.el7.ngx.x86_64.rpm</a></p>
<p>chmod -R 777 nginx-1.22.0-1.el7.ngx.x86_64.rpm</p>
</blockquote>
<p><strong>vim /etc/ansible/roles/nginx/tasks/main.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>install.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>copy.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>start.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>stop.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>ansible-playbook ./nginx/tasks/stop.yml</p>
<p>ansible-playbook nginx.yml -t startnginx</p>
</blockquote>
<p><strong>uninstall.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>ansible-playbook ./nginx/tasks/uninstall.yml</p>
</blockquote>
<h2> ③ 放置我们所需要的文件到指定目录</h2>
<p>因为我们定义的角色已经有了新的组成方式，所以我们需要把文件都放到指定的位置，这样，才能让配置文件找到这些并进行加载。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ④ 定义 vars 变量文件</h2>
<p>我们在模板中定义的变量，也要去配置文件中加上：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⑤ 定义 handlers 文件</h2>
<p>我们在配置文件中定义了<code>notify</code>，所以我么也需要定义<code>handlers</code>，我们来修改配置文件：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⑥ 定义 nginx 剧本文件</h2>
<p>接下来，我们就来定义剧本文件，由于大部分设置我们都单独配置在了roles里面，所以，接下来剧本就只需要写一点点内容即可：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⑦ 启动服务</h2>
<p>剧本定义完成以后，我们就可以来启动服务了：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> ⑧ 启动过后照例查看端口号</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> ⑨ 测试修改后重新加载配置文件 - restartnginx</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 10 测试修改后重新加载配置文件 - reloadnginx</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-30T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
  <entry>
    <title type="text">ansible-playbook任务编排工具（剧本）</title>
    <id>https://topjf.github.io/linux/ansible/ansible-playbook.html</id>
    <link href="https://topjf.github.io/linux/ansible/ansible-playbook.html"/>
    <updated>2023-03-05T16:54:20.000Z</updated>
    <summary type="text">ansible 中文指南 (http://ansible.com.cn/docs/intro.html) 本节示例文件 提取码：1234 (https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg) ansible-playbook 简介 playbook 是 ansible 用于配置，部署，和管理被控节点的剧本。...</summary>
    <content type="html"><![CDATA[<!-- more -->
<h1>ansible-playbook任务编排工具（剧本）</h1>
<p><a href="http://ansible.com.cn/docs/intro.html" target="_blank" rel="noopener noreferrer">ansible 中文指南</a></p>
<p><a href="https://pan.baidu.com/s/1fkosURl4HaYZALtSjKvcKg" target="_blank" rel="noopener noreferrer">本节示例文件 提取码：1234</a></p>
<h2> ansible-playbook</h2>
<h3> 简介</h3>
<p>playbook 是 ansible 用于配置，部署，和管理被控节点的剧本。</p>
<p>通过 playbook 的详细描述，执行其中的一系列 tasks ，可以让远端主机达到预期的状态。playbook 就像 Ansible 控制器给被控节点列出的的一系列 to-do-list ，而被控节点必须要完成。</p>
<p>也可以这么理解，playbook 字面意思，即剧本，现实中由演员按照剧本表演，在Ansible中，这次由计算机进行表演，由计算机安装，部署应用，提供对外服务，以及组织计算机处理各种各样的事情。</p>
<h3> 使用场景</h3>
<p>执行一些简单的任务，使用ad-hoc命令可以方便的解决问题，但是有时一个设施过于复杂，需要大量的操作时候，执行的ad-hoc命令是不适合的，这时最好使用playbook。</p>
<p>就像执行shell命令与写shell脚本一样，也可以理解为批处理任务，不过playbook有自己的语法格式。</p>
<p>使用playbook你可以方便的重用这些代码，可以移植到不同的机器上面，像函数一样，最大化的利用代码。在你使用Ansible的过程中，你也会发现，你所处理的大部分操作都是编写playbook。可以把常见的应用都编写成playbook，之后管理服务器会变得十分简单。</p>
<h3> 语法</h3>
<p>**playbook由YMAL语言编写。**YMAL格式是类似于JSON的文件格式，便于人理解和阅读，同时便于书写。</p>
<p>以下为playbook常用到的YMAL格式：</p>
<p>1、文件的第一行应该以 "---" (三个连字符)开始，表明YMAL文件的开始。</p>
<p>2、在同一行中，#之后的内容表示注释，类似于shell，python和ruby。</p>
<p>3、YMAL中的列表元素以”-”开头然后紧跟着一个空格，后面为元素内容。</p>
<p>4、同一个列表中的元素应该保持相同的缩进。否则会被当做错误处理。</p>
<p>5、play中hosts，variables，roles，tasks等对象的表示方法都是键值中间以":"分隔表示，":"后面还要增加一个空格。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>ansible-playbook &lt;filename.yml&gt; ... [options]</p>
<ul>
<li>options:
<ul>
<li>
<ul>
<li>--check，-C        #只检测可能会发生的改变，但不真正执行操作</li>
</ul>
</li>
<li>--list-hosts      #列出运行任务的主机</li>
<li>--list-tags       #列出tag</li>
<li>--list-tasks      #列出task</li>
<li>--limit 主机列表   #只针对主机列表中的主机执行</li>
<li>-v -vv -vvv       #显示过程</li>
<li>-t，--tags  #仅运行标记有这些值的 tags 和 tasks</li>
</ul>
</li>
</ul>
</blockquote>
<h3> 示例剧本文件</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p><code>host部分</code>：使用 hosts 指示使用哪个主机或主机组来运行下面的 tasks ，每个 playbook 都必须指定 hosts ，hosts也<strong>可以使用通配符格式</strong>。主机或主机组在 inventory 清单中指定，可以使用系统默认的<code>/etc/ansible/hosts</code>，也可以自己编辑，在运行的时候加上<code>-i</code>选项，指定清单的位置即可。在运行清单文件的时候，<code>–list-hosts</code>选项会显示那些主机将会参与执行 task 的过程中。</p>
<p><code>remote_user</code>：指定远端主机中的哪个用户来登录远端系统，在远端系统执行 task 的用户，可以任意指定，也可以使用 sudo，但是用户必须要有执行相应 task 的权限。</p>
<p><code>tasks</code>：指定远端主机将要执行的一系列动作。tasks 的核心为 ansible 的模块，前面已经提到模块的用法。tasks 包含 <code>name</code> 和<code>要执行的模块</code>，name 是可选的，只是为了便于用户阅读，不过还是建议加上去，模块是必须的，同时也要给予模块相应的参数。</p>
<p><code>handlers</code>：处理器，tasks 通过 notify 来指定需要执行的处理器。handlers 最佳的应用场景是用来重启服务,或者触发系统重启操作.除此以外很少用到了.</p>
</blockquote>
<p>ansible-playbook 运行playbook文件</p>
<blockquote>
<p>ansible-playbook mysql.yml</p>
</blockquote>
<p>执行有三个步骤：</p>
<p>1、收集facts</p>
<p>2、执行tasks</p>
<p>3、报告结果</p>
<figure><figcaption></figcaption></figure>
<h3> 核心元素</h3>
<p>Playbook的核心元素：</p>
<blockquote>
<p><code>Hosts</code>：主机组；</p>
<p><code>Tasks</code>：任务列表；</p>
<p><code>Variables</code>：变量，设置方式有四种；</p>
<p><code>Templates</code>：包含了模板语法的文本文件；</p>
<p><code>Handlers</code>：由特定条件触发的任务；</p>
</blockquote>
<h3> 基本组件</h3>
<p>Playbooks配置文件的基础组件：</p>
<blockquote>
<p><code>Hosts</code>：运行指定任务的目标主机</p>
<p><code>remoute_user</code>：在远程主机上执行任务的用户；</p>
<p><code>sudo_user</code>：</p>
<p><code>tasks</code>：任务列表</p>
<blockquote>
<p>tasks格式</p>
<p>– name: TASK_NAME</p>
<p>​    module: arguments</p>
<p>​    notify: HANDLER_NAME</p>
<p>handlers:</p>
<p>​    – name: HANDLER_NAME</p>
<p>​    module: arguments</p>
</blockquote>
<p><code>模块，模块参数</code>：</p>
<blockquote>
<p>格式：
　(1) action: module arguments
　(2) module: arguments
　注意：shell和command模块后面直接跟命令，而非key=value类的参数列表；</p>
</blockquote>
<p><code>handlers</code>：任务，在特定条件下触发；接收到其它任务的通知时被触发；</p>
</blockquote>
<p>(1) 某任务的状态在运行后为changed时，可通过“notify”通知给相应的handlers；</p>
<p>(2) 任务可以通过“tags“打标签，而后可在ansible-playbook命令上使用-t指定进行调用；</p>
<h4> ① 定义 playbook</h4>
<p>前提：本机配置好 nginx.conf 模板</p>
<p><strong>目录结构</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>nginx.conf</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ry.conf</strong></p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ansible -&gt; hosts</strong></p>
<blockquote>
<p>[web]</p>
<p>192.168.0.[8:10]</p>
</blockquote>
<p><strong>playbook</strong></p>
<p><code>vim /etc/ansible/playbook/i-nginx.yml</code></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ② 测试安装 nginx</h4>
<p>写完了以后，我们就可以运行了：</p>
<blockquote>
<p>ansible-playbook -C i-nginx.yml</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<blockquote>
<p>ansible-playbook i-nginx.yml</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>看看两台机器的端口是否开启：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ③ 测试 start</h4>
<p>直接引用标签。但是我们需要先把服务关闭，再来运行剧本并引用标签：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> ④ 测试 restarted</h4>
<p>我们还做了一个<code>notify</code>，来测试一下：</p>
<p>首先，它的触发条件是配置文件被改变，所以我们去把配置文件中的端口改一下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们重新加载一下这个剧本：</p>
<figure><figcaption></figcaption></figure>
<p>发现我们执行的就是 restart 段以及我们定义的<code>notify</code>部分。</p>
<p>我们来看一看我们的端口号：</p>
<blockquote>
<p>ansible web -m shell -a 'ss -ntlp | grep nginx'</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>可以看出，我们的nginx端口已经变成了8080。
　#### ⑤ 测试 reloaded</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<blockquote>
<p>ansible web -m shell -a 'ss -ntlp | grep nginx'</p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>#### ⑥ 卸载 nginx</p>
<p>vim uni-nginx.yml</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ansible-playbook uni-nginx.yml</code></p>
<h3> variables 变量</h3>
<p>上文中，我们说到了<code>variables</code>是变量，有四种定义方法，现在我们就来说说这四种定义方法：</p>
<h4> ① facts ：可直接调用</h4>
<p>上一篇中，我们有说到<code>setup</code>这个模块，这个模块就是通过调用facts组件来实现的。我们这里的<code>variables</code>也可以直接调用<code>facts</code>组件。
　具体的<code>facters</code>我们可以使用<code>setup</code>模块来获取，然后直接放入我们的剧本中调用即可。</p>
<h4> ② 用户自定义变量</h4>
<p>我们也可以直接使用用户自定义变量，想要自定义变量有以下两种方式：</p>
<blockquote>
<p>通过命令行传入</p>
</blockquote>
<p><code>ansible-playbook</code>命令的命令行中的<code>-e VARS, --extra-vars=VARS</code>，这样就可以直接把自定义的变量传入。</p>
<blockquote>
<p>在playbook中定义变量</p>
</blockquote>
<p>我们也可以直接在playbook中定义我们的变量：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ③ 定义剧本</h4>
<p>我们就使用全局替换把我们刚刚编辑的文件修改一下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，我们的剧本就定义完成了。</p>
<h4> ④ 拷贝配置文件</h4>
<p>我们想要在被监管的机器上安装什么服务的话，就直接在我们的server端上把该服务的配置文件拷贝到我们的<code>/tmp/</code>目录下。这样我们的剧本才能正常运行。</p>
<p>我们就以<code>keepalived</code>服务为例：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> ⑤ 运行剧本，变量由命令行传入</h4>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> ⑥ 修改剧本，直接定义变量</h4>
<p>同样的，我们可以直接在剧本中把变量定义好，这样就不需要在通过命令行传入了。以后想要安装不同的服务，直接在剧本里把变量修改一下即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ⑦ 运行定义过变量的剧本</h4>
<p>我们刚刚已经把变量定义在剧本里面了。现在我们来运行一下试试看：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>发现这样也是可以的</p>
<h4> ⑧ 通过roles传递变量</h4>
<p>具体的，我们下文中说到 roles 的时候再详细说明。这里是<a href="https://www.cnblogs.com/keerya/p/8004566.html#jump" target="_blank" rel="noopener noreferrer">传送带</a></p>
<h4> ⑨  Host Inventory</h4>
<p>我们也可以直接在主机清单中定义。</p>
<blockquote>
<p>向不同的主机传递不同的变量：</p>
</blockquote>
<div class="language-ABAP line-numbers-mode" data-ext="ABAP"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>向组中的主机传递相同的变量：</p>
</blockquote>
<div class="language-ini line-numbers-mode" data-ext="ini"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> templates 模板</h3>
<p>模板是一个文本文件，嵌套有脚本（使用模板编程语言编写）。</p>
<p><code>Jinja2</code>：Jinja2是python的一种模板语言，以Django的模板语言为原本。
模板支持：</p>
<blockquote>
<p>字符串：使用单引号或双引号；</p>
<p>数字：整数，浮点数；</p>
<p>列表：[item1, item2, ...]</p>
<p>元组：(item1, item2, ...)</p>
<p key1:value1,="" key2:value2,="" css-module=".">字典：</p>
<p>布尔型：true/false</p>
<p>算术运算： +, -, *, /, //, %, **</p>
<p>比较操作： ==, !=, &gt;, &gt;=, &lt;, &lt;=</p>
<p>逻辑运算： and, or, not</p>
</blockquote>
<p>通常来说，模板都是通过引用变量来运用的。</p>
<h4> ① 定义模板</h4>
<p>我们直接把之前定义的<code>/tmp/nginx.conf</code>改个名，然后编辑一下，就可以定义成我们的模板文件了：</p>
<div class="language-perl line-numbers-mode" data-ext="perl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ② 修改剧本</h4>
<p>我们现在需要去修改剧本来定义变量：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> ③ 运行剧本</h4>
<p>上面的准备工作完成后，我们就可以去运行剧本了：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 条件测试</h3>
<p>when语句：在task中使用，jinja2的语法格式。</p>
<div class="language-vhdl line-numbers-mode" data-ext="vhdl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 循环</h3>
<p>迭代，需要重复执行的任务；</p>
<p>对迭代项的引用，固定变量名为"item"，而后，要在task中使用with_items给定要迭代的元素列表；
举例如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 字典</h3>
<p>ansible playbook 还支持字典功能。举例如下：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 角色订制 roles 以 nginx 为例</h2>
<h3> ① 简介</h3>
<p>对于以上所有的方式有个弊端就是无法实现复用假设在同时部署Web、db、ha 时或不同服务器组合不同的应用就需要写多个yml文件。很难实现灵活的调用。</p>
<p>roles 用于层次性、结构化地组织playbook。roles 能够根据层次型结构自动装载变量文件、tasks以及handlers等。</p>
<p>要使用roles只需要在playbook中使用include指令即可。简单来讲，roles就是通过分别将变量(vars)、文件(file)、任务(tasks)、模块(modules)及处理器(handlers)放置于单独的目录中，并可以便捷地include它们的一种机制。</p>
<p>角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中。</p>
<h3> ② 目录说明</h3>
<p><strong>xxx模块下面的每个目录至少应该有一个名为main.yml的文件，其它的文件需要由main.yml进行“包含”调用；</strong></p>
<div class="language-tex line-numbers-mode" data-ext="tex"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>tasks目录</strong>：角色需要执行的主任务文件放置在此目录中，默认的主任务文件名为main.yml，当调用角色时，默认会执行main.yml文件中的任务，你也可以将其他需要执行的任务文件通过include的方式包含在tasks/main.yml文件中。</p>
<p><strong>handlers目录</strong>：当角色需要调用handlers时，默认会在此目录中的main.yml文件中查找对应的handler</p>
<p><strong>defaults目录</strong>：角色会使用到的变量可以写入到此目录中的main.yml文件中，通常，defaults/main.yml文件中的变量都用于设置默认值，以便在你没有设置对应变量值时，变量有默认的值可以使用，定义在defaults/main.yml文件中的变量的优先级是最低的。</p>
<p><strong>vars目录</strong>：角色会使用到的变量可以写入到此目录中的main.yml文件中，看到这里你肯定会有疑问，vars/main.yml文件和defaults/main.yml文件的区别在哪里呢？区别就是，defaults/main.yml文件中的变量的优先级是最低的，而vars/main.yml文件中的变量的优先级非常高，如果你只是想提供一个默认的配置，那么你可以把对应的变量定义在defaults/main.yml中，如果你想要确保别人在调用角色时，使用的值就是你指定的值，则可以将变量定义在vars/main.yml中，因为定义在vars/main.yml文件中的变量的优先级非常高，所以其值比较难以覆盖。</p>
<p><strong>meta目录</strong>：如果你想要赋予这个角色一些元数据，则可以将元数据写入到meta/main.yml文件中，这些元数据用于描述角色的相关属性，比如  作者信息、角色主要作用等等，你也可以在meta/main.yml文件中定义这个角色依赖于哪些其他角色，或者改变角色的默认调用设定，在之后会有一些实际的示例，此处不用纠结。</p>
<p><strong>templates目录</strong>： 角色相关的模板文件可以放置在此目录中，当使用角色相关的模板时，如果没有指定路径，会默认从此目录中查找对应名称的模板文件。</p>
<p><strong>files目录</strong>：角色可能会用到的一些其他文件可以放置在此目录中，比如，当你定义nginx角色时，需要配置https，那么相关的证书文件即可放置在此目录中。</p>
<h3> ③ 在<code>roles</code>目录下生成对应的目录结构</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以使用 ansible-galaxy role init xxx 来实现目录的自动创建，结构跟上面一样</strong></p>
<h3> 准备 nginx.conf.j2 配置文件</h3>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ④ 定义 tasks 任务文件</h3>
<p>rpm包下载：</p>
<blockquote>
<p>wget <a href="http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.0-1.el7.ngx.x86_64.rpm" target="_blank" rel="noopener noreferrer">http://nginx.org/packages/centos/7/x86_64/RPMS/nginx-1.22.0-1.el7.ngx.x86_64.rpm</a></p>
<p>chmod -R 777 nginx-1.22.0-1.el7.ngx.x86_64.rpm</p>
</blockquote>
<p><strong>vim /etc/ansible/roles/nginx/tasks/main.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>install.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>copy.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>start.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>stop.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>ansible-playbook ./nginx/tasks/stop.yml</p>
<p>ansible-playbook nginx.yml -t startnginx</p>
</blockquote>
<p><strong>uninstall.yml</strong></p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>ansible-playbook ./nginx/tasks/uninstall.yml</p>
</blockquote>
<h3> ⑤ 放置我们所需要的文件到指定目录</h3>
<p>因为我们定义的角色已经有了新的组成方式，所以我们需要把文件都放到指定的位置，这样，才能让配置文件找到这些并进行加载。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ⑥ 定义 vars 变量文件</h3>
<p>我们在模板中定义的变量，也要去配置文件中加上：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ⑦ 定义 handlers 文件</h3>
<p>我们在配置文件中定义了<code>notify</code>，所以我么也需要定义<code>handlers</code>，我们来修改配置文件：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ⑧ 定义 nginx 剧本文件</h3>
<p>接下来，我们就来定义剧本文件，由于大部分设置我们都单独配置在了roles里面，所以，接下来剧本就只需要写一点点内容即可：</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> ⑨ 启动服务</h3>
<p>剧本定义完成以后，我们就可以来启动服务了：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> ⑩ 启动过后照例查看端口号</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 11 测试修改后重新加载配置文件 - restartnginx</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 12 测试修改后重新加载配置文件 - reloadnginx</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
]]></content>
    <author>
      <name>topjf</name>
      <uri>/article</uri>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>topjf</name>
      <uri>/article</uri>
    </contributor>
    <published>2022-07-29T00:00:00.000Z</published>
    <rights>Copyright by topjf</rights>
  </entry>
</feed>